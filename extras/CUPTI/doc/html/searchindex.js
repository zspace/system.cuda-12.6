const searchData = {"envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 5, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "repo_docs.ext.toctree": 2, "repo_docs.ext.mermaid": 1, "repo_docs.ext.enhanced_search": 2, "sphinx": 56}, "data": [{"id": 0, "doc_id": 0, "filename": "api/data-structures.html", "domain_name": "std", "name": "api/data-structures", "display_name": "Data Structures", "type": "doc", "display_type": "Page", "docname": "api/data-structures", "anchor": "", "priority": -1, "content": "CUPTI::PcSamplingUtil::BufferInfo   BufferInfo will be stored in the file for every buffer i.e for every call of UtilDumpPcSamplingBufferInFile() API. CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams  Params for CuptiUtilGetBufferInfo . CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams  Params for CuptiUtilGetHeaderData . CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams  Params for CuptiUtilGetPcSampData . CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams  Params for CuptiUtilMergePcSampData . CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams  Params for CuptiUtilPutPcSampData . CUPTI::PcSamplingUtil::Header   Header info will be stored in file. CUPTI::PcSamplingUtil::PcSamplingStallReasons  All available stall reasons name and respective indexes will be stored in it. CUpti_Activity  The base activity record. CUpti_ActivityAPI  The activity record for a driver or runtime API invocation. CUpti_ActivityAutoBoostState  Device auto boost state structure. CUpti_ActivityBranch  The activity record for source level result branch. CUpti_ActivityBranch2  The activity record for source level result branch. CUpti_ActivityCdpKernel  The activity record for CDP (CUDA Dynamic Parallelism) kernel. CUpti_ActivityContext  The activity record for a context. CUpti_ActivityContext2  The activity record for a context. CUpti_ActivityContext3  The activity record for a context. CUpti_ActivityCudaEvent  The activity record for CUDA event. CUpti_ActivityDevice  The activity record for a device. CUpti_ActivityDevice2  The activity record for a device. CUpti_ActivityDevice3  The activity record for a device. CUpti_ActivityDevice4  The activity record for a device. CUpti_ActivityDevice5  The activity record for a device. CUpti_ActivityDeviceAttribute  The activity record for a device attribute. CUpti_ActivityEnvironment  The activity record for CUPTI environmental data. CUpti_ActivityEvent  The activity record for a CUPTI event. CUpti_ActivityEventInstance  The activity record for a CUPTI event with instance information. CUpti_ActivityExternalCorrelation  The activity record for correlation with external records. CUpti_ActivityFunction  The activity record for global/device functions. CUpti_ActivityGlobalAccess  The activity record for source-level global access. CUpti_ActivityGlobalAccess2  The activity record for source-level global access. CUpti_ActivityGlobalAccess3  The activity record for source-level global access. CUpti_ActivityGraphTrace  The activity record for trace of graph execution. CUpti_ActivityGraphTrace2  The activity record for trace of graph execution. CUpti_ActivityInstantaneousEvent  The activity record for an instantaneous CUPTI event. CUpti_ActivityInstantaneousEventInstance  The activity record for an instantaneous CUPTI event with event domain instance information. CUpti_ActivityInstantaneousMetric  The activity record for an instantaneous CUPTI metric. CUpti_ActivityInstantaneousMetricInstance  The instantaneous activity record for a CUPTI metric with instance information. CUpti_ActivityInstructionCorrelation  The activity record for source-level sass/source line-by-line correlation. CUpti_ActivityInstructionExecution  The activity record for source-level instruction execution. CUpti_ActivityJit  The activity record for JIT operations. CUpti_ActivityJit2  The activity record for JIT operations. CUpti_ActivityKernel  The activity record for kernel. CUpti_ActivityKernel2  The activity record for kernel. CUpti_ActivityKernel3  The activity record for a kernel (CUDA 6.5(with sm_52 support) onwards). CUpti_ActivityKernel4  The activity record for a kernel (CUDA 9.0(with sm_70 support) onwards). CUpti_ActivityKernel5  The activity record for a kernel (CUDA 11.0(with sm_80 support) onwards). CUpti_ActivityKernel6  The activity record for kernel. CUpti_ActivityKernel7  The activity record for kernel. CUpti_ActivityKernel8  The activity record for kernel. CUpti_ActivityKernel9  The activity record for kernel. CUpti_ActivityMarker  The activity record providing a marker which is an instantaneous point in time. CUpti_ActivityMarker2  The activity record providing a marker which is an instantaneous point in time. CUpti_ActivityMarkerData  The activity record providing detailed information for a marker. CUpti_ActivityMemcpy  The activity record for memory copies. CUpti_ActivityMemcpy3  The activity record for memory copies. CUpti_ActivityMemcpy4  The activity record for memory copies. CUpti_ActivityMemcpy5  The activity record for memory copies. CUpti_ActivityMemcpyPtoP  The activity record for peer-to-peer memory copies. CUpti_ActivityMemcpyPtoP2  The activity record for peer-to-peer memory copies. CUpti_ActivityMemcpyPtoP3  The activity record for peer-to-peer memory copies. CUpti_ActivityMemcpyPtoP4  The activity record for peer-to-peer memory copies. CUpti_ActivityMemory  The activity record for memory. CUpti_ActivityMemory2  The activity record for memory. CUpti_ActivityMemory3  The activity record for memory. CUpti_ActivityMemory4  The activity record for memory. CUpti_ActivityMemoryPool  The activity record for memory pool. CUpti_ActivityMemoryPool2  The activity record for memory pool. CUpti_ActivityMemset  The activity record for memset. CUpti_ActivityMemset2  The activity record for memset. CUpti_ActivityMemset3  The activity record for memset. CUpti_ActivityMemset4  The activity record for memset. CUpti_ActivityMetric  The activity record for a CUPTI metric. CUpti_ActivityMetricInstance  The activity record for a CUPTI metric with instance information. CUpti_ActivityModule  The activity record for a CUDA module. CUpti_ActivityName  The activity record providing a name. CUpti_ActivityNvLink  NVLink information. CUpti_ActivityNvLink2  NVLink information. CUpti_ActivityNvLink3  NVLink information. CUpti_ActivityNvLink4  NVLink information. CUpti_ActivityObjectKindId  Identifiers for object kinds as specified by CUpti_ActivityObjectKind. CUpti_ActivityOpenAcc  The base activity record for OpenAcc records. CUpti_ActivityOpenAccData  The activity record for OpenACC data. CUpti_ActivityOpenAccLaunch  The activity record for OpenACC launch. CUpti_ActivityOpenAccOther  The activity record for OpenACC other. CUpti_ActivityOpenMp  The base activity record for OpenMp records. CUpti_ActivityOverhead  The kinds of activity records. CUpti_ActivityOverhead2  The activity record for CUPTI and driver overheads. CUpti_ActivityOverhead3  The activity record for CUPTI and driver overheads. CUpti_ActivityOverheadCommandBufferFullData  The structure to provide additional data for CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL. CUpti_ActivityPCSampling  The activity record for PC sampling. CUpti_ActivityPCSampling2  The activity record for PC sampling. CUpti_ActivityPCSampling3  The activity record for PC sampling. CUpti_ActivityPCSamplingConfig  PC sampling configuration structure. CUpti_ActivityPCSamplingRecordInfo  The activity record for record status for PC sampling. CUpti_ActivityPcie  PCI devices information required to construct topology. CUpti_ActivityPreemption  The activity record for a preemption of a CDP kernel. CUpti_ActivitySharedAccess  The activity record for source-level shared access. CUpti_ActivitySourceLocator  The activity record for source locator. CUpti_ActivityStream  The activity record for CUDA stream. CUpti_ActivitySynchronization  The activity record for synchronization management. CUpti_ActivityUnifiedMemoryCounter  The activity record for Unified Memory counters (deprecated in CUDA 7.0) CUpti_ActivityUnifiedMemoryCounter2  The activity record for Unified Memory counters (CUDA 7.0 and beyond) CUpti_ActivityUnifiedMemoryCounterConfig  Unified Memory counters configuration structure. CUpti_CallbackData  Data passed into a runtime or driver API callback function. CUpti_EventGroupSet  A set of event groups. CUpti_EventGroupSets  A set of event group sets. CUpti_GetCubinCrcParams  Params for cuptiGetCubinCrc. CUpti_GetSassToSourceCorrelationParams  Params for cuptiGetSassToSourceCorrelation. CUpti_GraphData  CUDA graphs data passed into a resource callback function. CUpti_MetricValue  A metric value. CUpti_ModuleResourceData  Module data passed into a resource callback function. CUpti_NvtxData  Data passed into a NVTX callback function. CUpti_PCSamplingConfigurationInfo  PC sampling configuration information structure. CUpti_PCSamplingConfigurationInfoParams  PC sampling configuration structure. CUpti_PCSamplingData  Collected PC Sampling data. CUpti_PCSamplingDisableParams  Params for cuptiPCSamplingDisable. CUpti_PCSamplingEnableParams  Params for cuptiPCSamplingEnable. CUpti_PCSamplingGetDataParams  Params for cuptiPCSamplingEnable. CUpti_PCSamplingGetNumStallReasonsParams  Params for cuptiPCSamplingGetNumStallReasons. CUpti_PCSamplingGetStallReasonsParams  Params for cuptiPCSamplingGetStallReasons. CUpti_PCSamplingPCData  PC Sampling data. CUpti_PCSamplingStallReason  PC Sampling stall reasons. CUpti_PCSamplingStartParams  Params for cuptiPCSamplingStart. CUpti_PCSamplingStopParams  Params for cuptiPCSamplingStop. CUpti_PmSampling_CounterDataImage_Initialize_Params  Params for cuptiPmSamplingCounterDataImageInitialize. CUpti_PmSampling_CounterData_GetSampleInfo_Params  Params for cuptiPmSamplingCounterDataGetSampleInfo. CUpti_PmSampling_DecodeData_Params  Params for cuptiPmSamplingDecodeData. CUpti_PmSampling_Disable_Params  Params for cuptiPmSamplingDisable. CUpti_PmSampling_Enable_Params  Params for cuptiPmSamplingEnable. CUpti_PmSampling_GetCounterAvailability_Params  Params for cuptiPmSamplingGetCounterData. CUpti_PmSampling_GetCounterDataInfo_Params  Params for cuptiPmSamplingGetCounterDataInfo. CUpti_PmSampling_GetCounterDataSize_Params  Params for cuptiPmSamplingGetCounterDataSize. CUpti_PmSampling_SetConfig_Params  Params for cuptiPmSamplingSetConfig. CUpti_PmSampling_Start_Params  Params for cuptiPmSamplingStart. CUpti_PmSampling_Stop_Params  Params for cuptiPmSamplingStop. CUpti_Profiler_BeginPass_Params  Params for cuptiProfilerBeginPass. CUpti_Profiler_BeginSession_Params  Params for cuptiProfilerBeginSession. CUpti_Profiler_CounterDataImageOptions  Input parameter to define the counterDataImage. CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params  Params for cuptiProfilerCounterDataImageCalculateScratchBufferSize. CUpti_Profiler_CounterDataImage_CalculateSize_Params  Params for cuptiProfilerCounterDataImageCalculateSize. CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params  Params for cuptiProfilerCounterDataImageInitializeScratchBuffer. CUpti_Profiler_CounterDataImage_Initialize_Params  Params for cuptiProfilerCounterDataImageInitialize. CUpti_Profiler_DeInitialize_Params  Default parameter for cuptiProfilerDeInitialize. CUpti_Profiler_DeviceSupported_Params  Params for cuptiProfilerDeviceSupported. CUpti_Profiler_DisableProfiling_Params  Params for cuptiProfilerDisableProfiling. CUpti_Profiler_EnableProfiling_Params  Params for cuptiProfilerEnableProfiling. CUpti_Profiler_EndPass_Params  Params for cuptiProfilerEndPass. CUpti_Profiler_EndSession_Params  Params for cuptiProfilerEndSession. CUpti_Profiler_FlushCounterData_Params  Params for cuptiProfilerFlushCounterData. CUpti_Profiler_GetCounterAvailability_Params  Params for cuptiProfilerGetCounterAvailability. CUpti_Profiler_Host_ConfigAddMetrics_Params  Params for cuptiProfilerHostConfigAddMetrics. CUpti_Profiler_Host_Deinitialize_Params  Params for cuptiProfilerHostDeinitialize. CUpti_Profiler_Host_EvaluateToGpuValues_Params  Params for cuptiProfilerHostEvaluateToGpuValues. CUpti_Profiler_Host_GetBaseMetrics_Params  Params for cuptiProfilerHostGetSupportedMetrics. CUpti_Profiler_Host_GetConfigImageSize_Params  Params for cuptiProfilerHostGetConfigImageSize. CUpti_Profiler_Host_GetConfigImage_Params  Params for cuptiProfilerHostGetConfigImage. CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params  Params for cuptiProfilerHostGetMaxNumHardwareMetricsPerPass. CUpti_Profiler_Host_GetMetricProperties_Params  Params for cuptiProfilerHostGetMetricProperties. CUpti_Profiler_Host_GetNumOfPasses_Params  Params for cuptiProfilerHostGetNumOfPasses. CUpti_Profiler_Host_GetRangeName_Params  Params for cuptiProfilerHostGetRangeName. CUpti_Profiler_Host_GetSubMetrics_Params  Params for cuptiProfilerHostGetSubMetrics. CUpti_Profiler_Host_GetSupportedChips_Params  Params for cuptiProfilerHostGetSupportedChips. CUpti_Profiler_Host_Initialize_Params  Params for cuptiProfilerHostInitialize. CUpti_Profiler_Initialize_Params  Default parameter for cuptiProfilerInitialize. CUpti_Profiler_IsPassCollected_Params  Params for cuptiProfilerIsPassCollected. CUpti_Profiler_PopRange_Params   CUpti_Profiler_PushRange_Params   CUpti_Profiler_SetConfig_Params  Params for cuptiProfilerSetConfig. CUpti_Profiler_UnsetConfig_Params  Params for cuptiProfilerUnsetConfig. CUpti_RangeProfiler_CounterDataImage_Initialize_Params  Params for cuptiRangeProfilerCounterDataImageInitialize. CUpti_RangeProfiler_CounterData_GetRangeInfo_Params  Params for cuptiRangeProfilerCounterDataGetRangeInfo. CUpti_RangeProfiler_DecodeData_Params  Params for cuptiRangeProfilerDecodeData. CUpti_RangeProfiler_Disable_Params  Params for cuptiRangeProfilerDisable. CUpti_RangeProfiler_Enable_Params  Params for cuptiRangeProfilerEnable. CUpti_RangeProfiler_GetCounterDataInfo_Params  Params for cuptiRangeProfilerGetCounterDataInfo. CUpti_RangeProfiler_GetCounterDataSize_Params  Params for cuptiRangeProfilerGetCounterDataSize. CUpti_RangeProfiler_PopRange_Params  Params for cuptiRangeProfilerPopRange. CUpti_RangeProfiler_PushRange_Params  Params for cuptiRangeProfilerPushRange. CUpti_RangeProfiler_SetConfig_Params  Params for cuptiRangeProfilerSetConfig. CUpti_RangeProfiler_Start_Params  Params for cuptiRangeProfilerStart. CUpti_RangeProfiler_Stop_Params  Params for cuptiRangeProfilerStop. CUpti_ResourceData  Data passed into a resource callback function. CUpti_SassMetricsDisable_Params  Params for cuptiSassMetricsDisable. CUpti_SassMetricsEnable_Params  Params for cuptiSassMetricsEnable. CUpti_SassMetricsFlushData_Params  Params for cuptiSassMetricsFlushData. CUpti_SassMetricsGetDataProperties_Params  Params for cuptiSassMetricsGetDataProperties. CUpti_SassMetricsSetConfig_Params  Params for cuptiSassMetricsSetConfig. CUpti_SassMetricsUnsetConfig_Params  Params for cuptiSassMetricsUnsetConfig. CUpti_SassMetrics_Config   CUpti_SassMetrics_Data   CUpti_SassMetrics_GetMetrics_Params  Params for cuptiSassMetricsGetMetrics. CUpti_SassMetrics_GetNumOfMetrics_Params  Params for cuptiSassMetricsGetNumOfMetrics. CUpti_SassMetrics_GetProperties_Params  Params for cuptiSassMetricsGetProperties. CUpti_SassMetrics_InstanceValue   CUpti_SassMetrics_MetricDetails   CUpti_StateData  Data passed into a State callback function. CUpti_StreamAttrData  Stream attribute data passed into a resource callback function for CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED callback. CUpti_SynchronizeData  Data passed into a synchronize callback function. NV::Cupti::Checkpoint::CUpti_Checkpoint  Configuration and handle for a CUPTI Checkpoint.", "keywords": []}, {"id": 1, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_AUTO_BOOST_INVALID_CLIENT_PID", "display_name": "CUPTI_AUTO_BOOST_INVALID_CLIENT_PID", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_AUTO_BOOST_INVALID_CLIENT_PID", "priority": 1, "content": "CUPTI_AUTO_BOOST_INVALID_CLIENT_PID An invalid/unknown process id.", "keywords": []}, {"id": 2, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_CORRELATION_ID_UNKNOWN", "display_name": "CUPTI_CORRELATION_ID_UNKNOWN", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_CORRELATION_ID_UNKNOWN", "priority": 1, "content": "CUPTI_CORRELATION_ID_UNKNOWN An invalid/unknown correlation ID. A correlation ID of this value indicates that there is no correlation for the activity record.", "keywords": []}, {"id": 3, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_FUNCTION_INDEX_ID_INVALID", "display_name": "CUPTI_FUNCTION_INDEX_ID_INVALID", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_FUNCTION_INDEX_ID_INVALID", "priority": 1, "content": "CUPTI_FUNCTION_INDEX_ID_INVALID An invalid function index ID.", "keywords": []}, {"id": 4, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_GRID_ID_UNKNOWN", "display_name": "CUPTI_GRID_ID_UNKNOWN", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_GRID_ID_UNKNOWN", "priority": 1, "content": "CUPTI_GRID_ID_UNKNOWN An invalid/unknown grid ID.", "keywords": []}, {"id": 5, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_MAX_GPUS", "display_name": "CUPTI_MAX_GPUS", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_MAX_GPUS", "priority": 1, "content": "CUPTI_MAX_GPUS", "keywords": []}, {"id": 6, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_MAX_NVLINK_PORTS", "display_name": "CUPTI_MAX_NVLINK_PORTS", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_MAX_NVLINK_PORTS", "priority": 1, "content": "CUPTI_MAX_NVLINK_PORTS Maximum NVLink port numbers.", "keywords": []}, {"id": 7, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_NVLINK_INVALID_PORT", "display_name": "CUPTI_NVLINK_INVALID_PORT", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_NVLINK_INVALID_PORT", "priority": 1, "content": "CUPTI_NVLINK_INVALID_PORT Invalid/unknown NVLink port number.", "keywords": []}, {"id": 8, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_SOURCE_LOCATOR_ID_UNKNOWN", "display_name": "CUPTI_SOURCE_LOCATOR_ID_UNKNOWN", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_SOURCE_LOCATOR_ID_UNKNOWN", "priority": 1, "content": "CUPTI_SOURCE_LOCATOR_ID_UNKNOWN The source-locator ID that indicates an unknown source location. There is not an actual CUpti_ActivitySourceLocator object corresponding to this value.", "keywords": []}, {"id": 9, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_SYNCHRONIZATION_INVALID_VALUE", "display_name": "CUPTI_SYNCHRONIZATION_INVALID_VALUE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_SYNCHRONIZATION_INVALID_VALUE", "priority": 1, "content": "CUPTI_SYNCHRONIZATION_INVALID_VALUE An invalid/unknown value.", "keywords": []}, {"id": 10, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "c", "name": "CUPTI_TIMESTAMP_UNKNOWN", "display_name": "CUPTI_TIMESTAMP_UNKNOWN", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "c.CUPTI_TIMESTAMP_UNKNOWN", "priority": 1, "content": "CUPTI_TIMESTAMP_UNKNOWN An invalid/unknown timestamp for a start, end, queued, submitted, or completed time.", "keywords": []}, {"id": 11, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT", "display_name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute43CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT", "keywords": []}, {"id": 12, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT", "display_name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute44CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMITE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT The maximum number of device memory buffers per context. The value is a size_t. For an application with high rate of kernel launches, memcopies and memsets having a bigger pool limit helps in timestamp collection for all these activities at the expense of a larger memory footprint. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE for more details. Setting this value will not modify the number of memory buffers currently stored. Set this value before initializing CUDA to ensure the limit is not exceeded. The default value is 250.", "keywords": []}, {"id": 13, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE", "display_name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute52CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE Number of device buffers to pre-allocate for a context during the initialization phase. The value is a size_t. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE for details. This value must be less than the maximum number of device buffers set using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT Set this value before initializing CUDA or before creating a context to ensure it is considered by the CUPTI. The default value is set to 3 to ping pong between these buffers (if possible).", "keywords": []}, {"id": 14, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE", "display_name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute38CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE The device memory size (in bytes) reserved for storing profiling data for concurrent kernels (activity kind CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL ), memcopies and memsets for each buffer on a context. The value is a size_t. There is a limit on how many device buffers can be allocated per context. User can query and set this limit using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT . CUPTI doesn\u2019t pre-allocate all the buffers, it pre-allocates only those many buffers as set by the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE . When all of the data in a buffer is consumed, it is added in the reuse pool, and CUPTI picks a buffer from this pool when a new buffer is needed. Thus memory footprint does not scale with the kernel count. Applications with the high density of kernels, memcopies and memsets might result in having CUPTI to allocate more device buffers. CUPTI allocates another buffer only when it runs out of the buffers in the reuse pool. Since buffer allocation happens in the main application thread, this might result in stalls in the critical path. CUPTI pre-allocates 3 buffers of the same size to mitigate this issue. User can query and set the pre-allocation limit using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE . Having larger buffer size leaves less device memory for the application. Having smaller buffer size increases the risk of dropping timestamps for records if too many kernels or memcopies or memsets are launched at one time. This value only applies to new buffer allocations. Set this value before initializing CUDA or before creating a context to ensure it is considered for the following allocations. The default value is 3200000 (~3MB) which can accommodate profiling data up to 100,000 kernels, memcopies and memsets combined. Note: Starting with the CUDA 12.0 Update 1 release, CUPTI allocates profiling buffer in the device memory by default as this might help in improving the performance of the tracing run. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED for more details. Size of the memory and maximum number of pools are still controlled by the attributes CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE and CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT . Note: The actual amount of device memory per buffer reserved by CUPTI might be larger.", "keywords": []}, {"id": 15, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP", "display_name": "CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute42CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP The device memory size (in bytes) reserved for storing profiling data for CDP operations for each buffer on a context. The value is a size_t. Having larger buffer size means less flush operations but consumes more device memory. This value only applies to new allocations. Set this value before initializing CUDA or before creating a context to ensure it is considered for the following allocations. The default value is 8388608 (8MB). Note: The actual amount of device memory per context reserved by CUPTI might be larger.", "keywords": []}, {"id": 16, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED", "display_name": "CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute51CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED Allocate page-locked (pinned) host memory for storing profiling data for concurrent kernels, memcopies and memsets for each buffer on a context. The value is a uint8_t. Starting with the CUDA 11.2 release, CUPTI allocates profiling buffer in the pinned host memory by default as this might help in improving the performance of the tracing run. Allocating excessive amounts of pinned memory may degrade system performance, since it reduces the amount of memory available to the system for paging. For this reason user might want to change the location from pinned host memory to device memory by setting value of this attribute to 0. Using page-locked (pinned) host memory buffers is not supported on confidential computing devices. On setting this attribute to 1, CUPTI will return CUPTI_ERROR_NOT_SUPPORTED. The default value is 1.", "keywords": []}, {"id": 17, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER", "display_name": "CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute46CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER Request activity buffers per-thread to store CUPTI activity records in the activity buffer on per-thread basis. The value is a uint8_t. The attribute should be set before registering the buffer callbacks using cuptiActivityRegisterCallbacks API and before any of the CUPTI activity kinds are enabled. This makes sure that all the records are stored in activity buffers allocated per-thread. Changing this attribute in the middle of the profiling session will result in undefined behavior. The default value is 0.", "keywords": []}, {"id": 18, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT", "display_name": "CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute50CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMITE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT This attribute is not supported starting with CUDA 12.3 CUPTI no longer uses profiling semaphore pool to store profiling data. The maximum number of profiling semaphore pools per context. The value is a size_t. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE for more details. Set this value before initializing CUDA to ensure the limit is not exceeded. The default value is 250.", "keywords": []}, {"id": 19, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE", "display_name": "CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute49CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE This attribute is not supported starting with CUDA 12.3 CUPTI no longer uses profiling semaphore pool to store profiling data. There is a limit on how many semaphore pools can be allocated per context. User can query and set this limit using the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT . CUPTI doesn\u2019t pre-allocate all the semaphore pools, it pre-allocates only those many semaphore pools as set by the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE . When all of the data in a semaphore pool is consumed, it is added in the reuse pool, and CUPTI picks a semaphore pool from the reuse pool when a new semaphore pool is needed. Thus memory footprint does not scale with the kernel count. Applications with the high density of kernels might result in having CUPTI to allocate more semaphore pools. CUPTI allocates another semaphore pool only when it runs out of the semaphore pools in the reuse pool. Since semaphore pool allocation happens in the main application thread, this might result in stalls in the critical path. CUPTI pre-allocates 3 semaphore pools of the same size to mitigate this issue. User can query and set the pre-allocation limit using the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE . Having larger semaphore pool size leaves less device memory for the application. Having smaller semaphore pool size increases the risk of dropping timestamps for kernel records if too many kernels are issued/launched at one time. This value only applies to new semaphore pool allocations. Set this value before initializing CUDA or before creating a context to ensure it is considered for the following allocations. The default value is 25000 which can accommodate profiling data for upto 25,000 kernels.", "keywords": []}, {"id": 20, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE", "display_name": "CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute58CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE This attribute is not supported starting with CUDA 12.3 CUPTI no longer uses profiling semaphore pool to store profiling data. Number of profiling semaphore pools to pre-allocate for a context during the initialization phase. The value is a size_t. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE for details. This value must be less than the maximum number of profiling semaphore pools set using the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT Set this value before initializing CUDA or before creating a context to ensure it is considered by the CUPTI. The default value is set to 3 to ping pong between these pools (if possible).", "keywords": []}, {"id": 21, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER", "display_name": "CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute46CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER The flag to indicate whether user should provide activity buffer of zero value. The value is a uint8_t. If the value of this attribute is non-zero, user should provide a zero value buffer in the CUpti_BuffersCallbackRequestFunc . If the user does not provide a zero value buffer after setting this to non-zero, the activity buffer may contain some uninitialized values when CUPTI returns it in CUpti_BuffersCallbackCompleteFunc If the value of this attribute is zero, CUPTI will initialize the user buffer received in the CUpti_BuffersCallbackRequestFunc to zero before filling it. If the user sets this to zero, a few stalls may appear in critical path because CUPTI will zero out the buffer in the main thread. Set this value before returning from CUpti_BuffersCallbackRequestFunc to ensure it is considered for all the subsequent user buffers. The default value is 0.", "keywords": []}, {"id": 22, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_COMPUTE_API_CUDA", "display_name": "CUPTI_ACTIVITY_COMPUTE_API_CUDA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind31CUPTI_ACTIVITY_COMPUTE_API_CUDAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_CUDA The compute APIs are for CUDA.", "keywords": []}, {"id": 23, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPS", "display_name": "CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind35CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPS The compute APIs are for CUDA running in MPS (Multi-Process Service) environment.", "keywords": []}, {"id": 24, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_COMPUTE_API_FORCE_INT", "display_name": "CUPTI_ACTIVITY_COMPUTE_API_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind36CUPTI_ACTIVITY_COMPUTE_API_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_FORCE_INT", "keywords": []}, {"id": 25, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_COMPUTE_API_UNKNOWN", "display_name": "CUPTI_ACTIVITY_COMPUTE_API_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind34CUPTI_ACTIVITY_COMPUTE_API_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_UNKNOWN The compute API is not known.", "keywords": []}, {"id": 26, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_COOLING", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_COOLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind34CUPTI_ACTIVITY_ENVIRONMENT_COOLINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_COOLING The environment data is related to cooling.", "keywords": []}, {"id": 27, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_COUNT", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind32CUPTI_ACTIVITY_ENVIRONMENT_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_COUNT", "keywords": []}, {"id": 28, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind41CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INT", "keywords": []}, {"id": 29, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_POWER", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_POWER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind32CUPTI_ACTIVITY_ENVIRONMENT_POWERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_POWER The environment data is related to power.", "keywords": []}, {"id": 30, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_SPEED", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_SPEED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind32CUPTI_ACTIVITY_ENVIRONMENT_SPEEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_SPEED The environment data is related to speed.", "keywords": []}, {"id": 31, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind38CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATUREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE The environment data is related to temperature.", "keywords": []}, {"id": 32, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWN", "display_name": "CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind34CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWN Unknown data.", "keywords": []}, {"id": 33, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE", "display_name": "CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE Indicates if the activity represents a CUdevice_attribute value or a CUpti_DeviceAttribute value. Valid for CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE.", "keywords": []}, {"id": 34, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELS", "display_name": "CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELS Indicates the activity represents a device that supports concurrent kernel execution. Valid for CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 35, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_FLUSH_FORCED", "display_name": "CUPTI_ACTIVITY_FLAG_FLUSH_FORCED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_FLUSH_FORCEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_FLUSH_FORCED When calling cuptiActivityFlushAll, this flag can be set to force CUPTI to flush all records in the buffer, whether finished or not.", "keywords": []}, {"id": 36, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_FORCE_INT", "display_name": "CUPTI_ACTIVITY_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag29CUPTI_ACTIVITY_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_FORCE_INT", "keywords": []}, {"id": 37, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED", "display_name": "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED If this bit in flag is set, the load access was cached else it is uncached. Valid for CUpti_ActivityGlobalAccess3 .", "keywords": []}, {"id": 38, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD", "display_name": "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag43CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD If bit in this flag is set, the access was load, else it is a store access. Valid for CUpti_ActivityGlobalAccess3 .", "keywords": []}, {"id": 39, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASK", "display_name": "CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag48CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASK The number of bytes requested by each thread Valid for CUpti_ActivityGlobalAccess3 .", "keywords": []}, {"id": 40, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK", "display_name": "CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag42CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK The mask for the instruction class, CUpti_ActivityInstructionClass Valid for CUpti_ActivityInstructionExecution and CUpti_ActivityInstructionCorrelation .", "keywords": []}, {"id": 41, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALID", "display_name": "CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALID If this bit in flag is set, the source level metric value couldn\u2019t be calculated. This occurs when a value(s) required to calculate the source level metric cannot be evaluated. Valid for CUpti_ActivityInstructionExecution .", "keywords": []}, {"id": 42, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGB", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGB", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGBE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGB Indicates the activity represents a marker that specifies a color in alpha-red-green-blue format. Valid for CUPTI_ACTIVITY_KIND_MARKER_DATA.", "keywords": []}, {"id": 43, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONE", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONE Indicates the activity represents a marker that does not specify a color. Valid for CUPTI_ACTIVITY_KIND_MARKER_DATA.", "keywords": []}, {"id": 44, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_END", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_END", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag30CUPTI_ACTIVITY_FLAG_MARKER_ENDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_END Indicates the activity represents a region end marker. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 45, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUS", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag40CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUS Indicates the activity represents an instantaneous marker. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 46, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_START", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_START", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_MARKER_STARTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_START Indicates the activity represents a region start marker. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 47, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag39CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE Indicates the activity represents an attempt to acquire a user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 48, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag46CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED Indicates the activity represents failure in acquiring the user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 49, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag47CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS Indicates the activity represents success in acquiring the user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 50, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE", "display_name": "CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag39CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE Indicates the activity represents releasing a reservation on user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 51, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNC", "display_name": "CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNCE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNC Indicates the activity represents an asynchronous memcpy operation. Valid for CUPTI_ACTIVITY_KIND_MEMCPY.", "keywords": []}, {"id": 52, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC", "display_name": "CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_MEMSET_ASYNCE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC Indicates the activity represents an asynchronous memset operation. Valid for CUPTI_ACTIVITY_KIND_MEMSET.", "keywords": []}, {"id": 53, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWED", "display_name": "CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWED If this bit in flag is set, the metric value overflowed. Valid for CUpti_ActivityMetric and CUpti_ActivityMetricInstance .", "keywords": []}, {"id": 54, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALID", "display_name": "CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag40CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALID If this bit in flag is set, the metric value couldn\u2019t be calculated. This occurs when a value(s) required to calculate the metric is missing. Valid for CUpti_ActivityMetric and CUpti_ActivityMetricInstance .", "keywords": []}, {"id": 55, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_NONE", "display_name": "CUPTI_ACTIVITY_FLAG_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag24CUPTI_ACTIVITY_FLAG_NONEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_NONE Indicates the activity record has no flags.", "keywords": []}, {"id": 56, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOAD", "display_name": "CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag43CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOAD If bit in this flag is set, the access was load, else it is a store access. Valid for CUpti_ActivitySharedAccess .", "keywords": []}, {"id": 57, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASK", "display_name": "CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag48CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASK The number of bytes requested by each thread Valid for CUpti_ActivitySharedAccess .", "keywords": []}, {"id": 58, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPU", "display_name": "CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag36CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPUE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPU Indicates the activity represents thrashing in CPU. Valid for counter of kind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING in CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "keywords": []}, {"id": 59, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPU", "display_name": "CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPUE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPU Indicates the activity represents page throttling in CPU. Valid for counter of kind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING in CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "keywords": []}, {"id": 60, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIER", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIER Represents a barrier instruction.", "keywords": []}, {"id": 61, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSION", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass47CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSION Represents a bit conversion operation.", "keywords": []}, {"id": 62, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANT", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass41CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANT Represents a constant load instruction.", "keywords": []}, {"id": 63, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOW", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass45CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOWE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOW Represents a control flow instruction.", "keywords": []}, {"id": 64, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16 Represents a 16 bit floating point operation.", "keywords": []}, {"id": 65, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32 Represents a 32 bit floating point operation.", "keywords": []}, {"id": 66, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64 Represents a 64 bit floating point operation.", "keywords": []}, {"id": 67, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERIC", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERIC Represents a generic load-store instruction.", "keywords": []}, {"id": 68, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass39CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBALE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL Represents a global load-store instruction.", "keywords": []}, {"id": 69, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMIC", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass46CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMIC Represents a global atomic instruction.", "keywords": []}, {"id": 70, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGER", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGER Represents an integer operation.", "keywords": []}, {"id": 71, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATION", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass59CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATION Represents a inter-thread communication instruction.", "keywords": []}, {"id": 72, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass47CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INT", "keywords": []}, {"id": 73, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCAL", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCALE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCAL Represents a local load-store instruction.", "keywords": []}, {"id": 74, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUS", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass46CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUS Represents some miscellaneous instructions which do not fit in the above classification.", "keywords": []}, {"id": 75, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass39CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHAREDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED Represents a shared load-store instruction.", "keywords": []}, {"id": 76, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMIC", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass46CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMIC Represents a shared atomic instruction.", "keywords": []}, {"id": 77, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE Represents a surface load-store instruction.", "keywords": []}, {"id": 78, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMIC", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass47CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMIC Represents a surface atomic instruction.", "keywords": []}, {"id": 79, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTURE", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTUREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTURE Represents a texture load-store instruction.", "keywords": []}, {"id": 80, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORM", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORM Represents uniform instruction.", "keywords": []}, {"id": 81, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWN", "display_name": "CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWN The instruction class is not known.", "keywords": []}, {"id": 82, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_ENTRY_INVALID", "display_name": "CUPTI_ACTIVITY_JIT_ENTRY_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType32CUPTI_ACTIVITY_JIT_ENTRY_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_INVALID", "keywords": []}, {"id": 83, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTX", "display_name": "CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType39CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTXE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTX NVVM-IR to PTX.", "keywords": []}, {"id": 84, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBIN", "display_name": "CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBIN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType37CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBINE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBIN PTX to CUBIN.", "keywords": []}, {"id": 85, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType39CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INT", "keywords": []}, {"id": 86, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOAD", "display_name": "CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType39CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOAD Loaded from the compute cache.", "keywords": []}, {"id": 87, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STORE", "display_name": "CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STORE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType40CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STOREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STORE Stored in the compute cache.", "keywords": []}, {"id": 88, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_OPERATION_COMPILE", "display_name": "CUPTI_ACTIVITY_JIT_OPERATION_COMPILE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType36CUPTI_ACTIVITY_JIT_OPERATION_COMPILEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_COMPILE JIT compilation.", "keywords": []}, {"id": 89, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_OPERATION_INVALID", "display_name": "CUPTI_ACTIVITY_JIT_OPERATION_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType36CUPTI_ACTIVITY_JIT_OPERATION_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_INVALID", "keywords": []}, {"id": 90, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType43CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INT", "keywords": []}, {"id": 91, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_BRANCH", "display_name": "CUPTI_ACTIVITY_KIND_BRANCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_BRANCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_BRANCH Results for source-level branch. The corresponding activity record structure is CUpti_ActivityBranch2 . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 92, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_CDP_KERNEL", "display_name": "CUPTI_ACTIVITY_KIND_CDP_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind30CUPTI_ACTIVITY_KIND_CDP_KERNELE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CDP_KERNEL A CDP (CUDA Dynamic Parallel) kernel executing on the GPU. The corresponding activity record structure is CUpti_ActivityCdpKernel . This activity can not be directly enabled or disabled. It is enabled and disabled through concurrent kernel activity i.e. _CONCURRENT_KERNEL.", "keywords": []}, {"id": 93, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL", "display_name": "CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind37CUPTI_ACTIVITY_KIND_CONCURRENT_KERNELE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL A kernel executing on the GPU. This activity kind doesn\u2019t break kernel concurrency. The corresponding activity record structure is CUpti_ActivityKernel9 .", "keywords": []}, {"id": 94, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_CONTEXT", "display_name": "CUPTI_ACTIVITY_KIND_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CONTEXT Information about a context. The corresponding activity record structure is CUpti_ActivityContext3 .", "keywords": []}, {"id": 95, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_COUNT", "display_name": "CUPTI_ACTIVITY_KIND_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind25CUPTI_ACTIVITY_KIND_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_COUNT", "keywords": []}, {"id": 96, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_CUDA_EVENT", "display_name": "CUPTI_ACTIVITY_KIND_CUDA_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind30CUPTI_ACTIVITY_KIND_CUDA_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CUDA_EVENT Information about a CUDA event. The corresponding activity record structure is CUpti_ActivityCudaEvent .", "keywords": []}, {"id": 97, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_DEVICE", "display_name": "CUPTI_ACTIVITY_KIND_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_DEVICE Information about a device. The corresponding activity record structure is CUpti_ActivityDevice5 .", "keywords": []}, {"id": 98, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE", "display_name": "CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind36CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE A device attribute value. The corresponding activity record structure is CUpti_ActivityDeviceAttribute .", "keywords": []}, {"id": 99, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_DRIVER", "display_name": "CUPTI_ACTIVITY_KIND_DRIVER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_DRIVERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_DRIVER A CUDA driver API function execution. The corresponding activity record structure is CUpti_ActivityAPI .", "keywords": []}, {"id": 100, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_ENVIRONMENT", "display_name": "CUPTI_ACTIVITY_KIND_ENVIRONMENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_ENVIRONMENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_ENVIRONMENT Environment activity records indicating power, clock, thermal, etc. levels of the GPU. The corresponding activity record structure is CUpti_ActivityEnvironment .", "keywords": []}, {"id": 101, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_EVENT", "display_name": "CUPTI_ACTIVITY_KIND_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind25CUPTI_ACTIVITY_KIND_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_EVENT An event value. The corresponding activity record structure is CUpti_ActivityEvent .", "keywords": []}, {"id": 102, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_EVENT_INSTANCE", "display_name": "CUPTI_ACTIVITY_KIND_EVENT_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind34CUPTI_ACTIVITY_KIND_EVENT_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_EVENT_INSTANCE An event value associated with a specific event domain instance. The corresponding activity record structure is CUpti_ActivityEventInstance .", "keywords": []}, {"id": 103, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION", "display_name": "CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind40CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION Records for correlation of different programming APIs. The corresponding activity record structure is CUpti_ActivityExternalCorrelation .", "keywords": []}, {"id": 104, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind29CUPTI_ACTIVITY_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_FORCE_INT", "keywords": []}, {"id": 105, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_FUNCTION", "display_name": "CUPTI_ACTIVITY_KIND_FUNCTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind28CUPTI_ACTIVITY_KIND_FUNCTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_FUNCTION Device global/function record. The corresponding activity record structure is CUpti_ActivityFunction .", "keywords": []}, {"id": 106, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS", "display_name": "CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind33CUPTI_ACTIVITY_KIND_GLOBAL_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS Results for source-level global access. The corresponding activity record structure is CUpti_ActivityGlobalAccess3 . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 107, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_GRAPH_TRACE", "display_name": "CUPTI_ACTIVITY_KIND_GRAPH_TRACE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_GRAPH_TRACEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_GRAPH_TRACE The corresponding activity record structure is CUpti_ActivityGraphTrace2 .", "keywords": []}, {"id": 108, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT", "display_name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind39CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT Instantaneous Event information. The corresponding activity record structure is CUpti_ActivityInstantaneousEvent .", "keywords": []}, {"id": 109, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE", "display_name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind48CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE Instantaneous Event information for a specific event domain instance. The corresponding activity record structure is CUpti_ActivityInstantaneousEventInstance", "keywords": []}, {"id": 110, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC", "display_name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind40CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC Instantaneous Metric information The corresponding activity record structure is CUpti_ActivityInstantaneousMetric .", "keywords": []}, {"id": 111, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE", "display_name": "CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind49CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE Instantaneous Metric information for a specific metric domain instance. The corresponding activity record structure is CUpti_ActivityInstantaneousMetricInstance .", "keywords": []}, {"id": 112, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION", "display_name": "CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind43CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION SASS/Source line-by-line correlation record. This will generate sass/source correlation for functions that have source level analysis or pc sampling results. The records will be generated only when either of source level analysis or pc sampling activity is enabled. The corresponding activity record structure is CUpti_ActivityInstructionCorrelation . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 113, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION", "display_name": "CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind41CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION Results for source-level instruction execution. The corresponding activity record structure is CUpti_ActivityInstructionExecution . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 114, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API", "display_name": "CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind39CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_APIE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API A CUDA driver kernel launch occurring outside of any public API function execution. Tools can handle these like records for driver API launch functions, although the cbid field is not used here. The corresponding activity record structure is CUpti_ActivityAPI .", "keywords": []}, {"id": 115, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_INVALID", "display_name": "CUPTI_ACTIVITY_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INVALID The activity record is invalid.", "keywords": []}, {"id": 116, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_JIT", "display_name": "CUPTI_ACTIVITY_KIND_JIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind23CUPTI_ACTIVITY_KIND_JITE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_JIT JIT operation tracking The corresponding activity record structure is CUpti_ActivityJit .", "keywords": []}, {"id": 117, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_KERNEL", "display_name": "CUPTI_ACTIVITY_KIND_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_KERNELE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_KERNEL A kernel executing on the GPU. This activity kind may significantly change the overall performance characteristics of the application because all kernel executions are serialized on the GPU. Other activity kind for kernel CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL doesn\u2019t break kernel concurrency. The corresponding activity record structure is CUpti_ActivityKernel9 .", "keywords": []}, {"id": 118, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MARKER", "display_name": "CUPTI_ACTIVITY_KIND_MARKER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MARKERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MARKER Instantaneous, start, or end NVTX marker. The corresponding activity record structure is CUpti_ActivityMarker2 .", "keywords": []}, {"id": 119, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MARKER_DATA", "display_name": "CUPTI_ACTIVITY_KIND_MARKER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_MARKER_DATAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MARKER_DATA Extended, optional, data about a marker. User must enable CUPTI_ACTIVITY_KIND_MARKER as well to get records for marker data. The corresponding activity record structure is CUpti_ActivityMarkerData .", "keywords": []}, {"id": 120, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MEMCPY", "display_name": "CUPTI_ACTIVITY_KIND_MEMCPY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MEMCPYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMCPY A host&lt;-&gt;host, host&lt;-&gt;device, or device&lt;-&gt;device memory copy. The corresponding activity record structure is CUpti_ActivityMemcpy5 .", "keywords": []}, {"id": 121, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MEMCPY2", "display_name": "CUPTI_ACTIVITY_KIND_MEMCPY2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_MEMCPY2E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMCPY2 A peer to peer memory copy. The corresponding activity record structure is CUpti_ActivityMemcpyPtoP4 .", "keywords": []}, {"id": 122, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MEMORY", "display_name": "CUPTI_ACTIVITY_KIND_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMORY Memory activity tracking allocation and freeing of the memory The corresponding activity record structure is CUpti_ActivityMemory .", "keywords": []}, {"id": 123, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MEMORY2", "display_name": "CUPTI_ACTIVITY_KIND_MEMORY2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_MEMORY2E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMORY2 Memory activity tracking allocation and freeing of the memory The corresponding activity record structure is CUpti_ActivityMemory4 .", "keywords": []}, {"id": 124, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MEMORY_POOL", "display_name": "CUPTI_ACTIVITY_KIND_MEMORY_POOL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_MEMORY_POOLE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMORY_POOL Memory pool activity tracking creation, destruction and trimming of the memory pool. The corresponding activity record structure is CUpti_ActivityMemoryPool2 .", "keywords": []}, {"id": 125, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MEMSET", "display_name": "CUPTI_ACTIVITY_KIND_MEMSET", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MEMSETE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMSET A memory set executing on the GPU. The corresponding activity record structure is CUpti_ActivityMemset4 .", "keywords": []}, {"id": 126, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_METRIC", "display_name": "CUPTI_ACTIVITY_KIND_METRIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_METRICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_METRIC A metric value. The corresponding activity record structure is CUpti_ActivityMetric .", "keywords": []}, {"id": 127, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_METRIC_INSTANCE", "display_name": "CUPTI_ACTIVITY_KIND_METRIC_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind35CUPTI_ACTIVITY_KIND_METRIC_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_METRIC_INSTANCE A metric value associated with a specific metric domain instance. The corresponding activity record structure is CUpti_ActivityMetricInstance .", "keywords": []}, {"id": 128, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_MODULE", "display_name": "CUPTI_ACTIVITY_KIND_MODULE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MODULEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MODULE CUDA Module record. The corresponding activity record structure is CUpti_ActivityModule .", "keywords": []}, {"id": 129, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_NAME", "display_name": "CUPTI_ACTIVITY_KIND_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind24CUPTI_ACTIVITY_KIND_NAMEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_NAME Resource naming done via NVTX APIs for thread, device, context, etc. The corresponding activity record structure is CUpti_ActivityName .", "keywords": []}, {"id": 130, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_NVLINK", "display_name": "CUPTI_ACTIVITY_KIND_NVLINK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_NVLINKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_NVLINK NVLink information. The corresponding activity record structure is CUpti_ActivityNvLink4 .", "keywords": []}, {"id": 131, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_OPENACC_DATA", "display_name": "CUPTI_ACTIVITY_KIND_OPENACC_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind32CUPTI_ACTIVITY_KIND_OPENACC_DATAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENACC_DATA OpenACC data events. The corresponding activity record structure is CUpti_ActivityOpenAccData .", "keywords": []}, {"id": 132, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH", "display_name": "CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind34CUPTI_ACTIVITY_KIND_OPENACC_LAUNCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH OpenACC launch events. The corresponding activity record structure is CUpti_ActivityOpenAccLaunch .", "keywords": []}, {"id": 133, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_OPENACC_OTHER", "display_name": "CUPTI_ACTIVITY_KIND_OPENACC_OTHER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind33CUPTI_ACTIVITY_KIND_OPENACC_OTHERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENACC_OTHER OpenACC other events. The corresponding activity record structure is CUpti_ActivityOpenAccOther .", "keywords": []}, {"id": 134, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_OPENMP", "display_name": "CUPTI_ACTIVITY_KIND_OPENMP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_OPENMPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENMP OpenMP parallel events. The corresponding activity record structure is CUpti_ActivityOpenMp .", "keywords": []}, {"id": 135, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_OVERHEAD", "display_name": "CUPTI_ACTIVITY_KIND_OVERHEAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind28CUPTI_ACTIVITY_KIND_OVERHEADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OVERHEAD Overhead activity records. The corresponding activity record structure is CUpti_ActivityOverhead3 .", "keywords": []}, {"id": 136, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_PCIE", "display_name": "CUPTI_ACTIVITY_KIND_PCIE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind24CUPTI_ACTIVITY_KIND_PCIEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PCIE PCI devices information used for PCI topology. The corresponding activity record structure is CUpti_ActivityPcie .", "keywords": []}, {"id": 137, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_PC_SAMPLING", "display_name": "CUPTI_ACTIVITY_KIND_PC_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_PC_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PC_SAMPLING Enable PC sampling for kernels. This will serialize kernels. The corresponding activity record structure is CUpti_ActivityPCSampling3 . In CUDA 12.5, this kind is deprecated for Volta and later GPU architectures in favor of PC Sampling APIs from the header cupti_pcsampling.h .", "keywords": []}, {"id": 138, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO", "display_name": "CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind43CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFOE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO Summary information about PC sampling records. The corresponding activity record structure is CUpti_ActivityPCSamplingRecordInfo . In CUDA 12.5, this kind is deprecated for Volta and later GPU architectures in favor of PC Sampling APIs from the header cupti_pcsampling.h .", "keywords": []}, {"id": 139, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_PREEMPTION", "display_name": "CUPTI_ACTIVITY_KIND_PREEMPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind30CUPTI_ACTIVITY_KIND_PREEMPTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PREEMPTION Preemption activity record indicating a preemption of a CDP (CUDA Dynamic Parallel) kernel executing on the GPU. The corresponding activity record structure is CUpti_ActivityPreemption .", "keywords": []}, {"id": 140, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_RUNTIME", "display_name": "CUPTI_ACTIVITY_KIND_RUNTIME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_RUNTIMEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_RUNTIME A CUDA runtime API function execution. The corresponding activity record structure is CUpti_ActivityAPI .", "keywords": []}, {"id": 141, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_SHARED_ACCESS", "display_name": "CUPTI_ACTIVITY_KIND_SHARED_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind33CUPTI_ACTIVITY_KIND_SHARED_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_SHARED_ACCESS Results for source-level shared access. The corresponding activity record structure is CUpti_ActivitySharedAccess . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 142, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR", "display_name": "CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind34CUPTI_ACTIVITY_KIND_SOURCE_LOCATORE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR Source information about source level result. The corresponding activity record structure is CUpti_ActivitySourceLocator . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 143, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_STREAM", "display_name": "CUPTI_ACTIVITY_KIND_STREAM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_STREAME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_STREAM Information about a CUDA stream. The corresponding activity record structure is CUpti_ActivityStream .", "keywords": []}, {"id": 144, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_SYNCHRONIZATION", "display_name": "CUPTI_ACTIVITY_KIND_SYNCHRONIZATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind35CUPTI_ACTIVITY_KIND_SYNCHRONIZATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_SYNCHRONIZATION Records for synchronization management. The corresponding activity record structure is CUpti_ActivitySynchronization .", "keywords": []}, {"id": 145, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "display_name": "CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind42CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER Unified Memory counter record. The corresponding activity record structure is CUpti_ActivityUnifiedMemoryCounter2 .", "keywords": []}, {"id": 146, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLIST", "display_name": "CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLIST", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType42CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLISTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLIST The kernel was launched as a CBL commandlist.", "keywords": []}, {"id": 147, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICE", "display_name": "CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType51CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICE The kernel was launched via API cudaLaunchCooperativeKernelMultiDevice() or cuLaunchCooperativeKernelMultiDevice()", "keywords": []}, {"id": 148, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICE", "display_name": "CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType52CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICE The kernel was launched via API cudaLaunchCooperativeKernel() or cuLaunchCooperativeKernel()", "keywords": []}, {"id": 149, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_LAUNCH_TYPE_REGULAR", "display_name": "CUPTI_ACTIVITY_LAUNCH_TYPE_REGULAR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType34CUPTI_ACTIVITY_LAUNCH_TYPE_REGULARE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_REGULAR The kernel was launched via a regular kernel call.", "keywords": []}, {"id": 150, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_ATOA", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_ATOA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_ATOAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_ATOA A device array to device array memory copy.", "keywords": []}, {"id": 151, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_ATOD", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_ATOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_ATODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_ATOD A device array to device memory copy.", "keywords": []}, {"id": 152, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_ATOH", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_ATOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_ATOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_ATOH A device array to host memory copy.", "keywords": []}, {"id": 153, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_DTOA", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_DTOA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_DTOAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_DTOA A device to device array memory copy.", "keywords": []}, {"id": 154, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_DTOD", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_DTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_DTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_DTOD A device to device memory copy on the same device.", "keywords": []}, {"id": 155, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_DTOH", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_DTOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_DTOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_DTOH A device to host memory copy.", "keywords": []}, {"id": 156, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind36CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT", "keywords": []}, {"id": 157, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_HTOA", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_HTOA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_HTOAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_HTOA A host to device array memory copy.", "keywords": []}, {"id": 158, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_HTOD", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_HTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_HTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_HTOD A host to device memory copy.", "keywords": []}, {"id": 159, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_HTOH", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_HTOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_HTOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_HTOH A host to host memory copy.", "keywords": []}, {"id": 160, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_PTOP", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_PTOP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_PTOPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_PTOP A peer to peer memory copy across different devices.", "keywords": []}, {"id": 161, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWN", "display_name": "CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind34CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWN The memory copy kind is not known.", "keywords": []}, {"id": 162, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_ARRAY", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_ARRAY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind32CUPTI_ACTIVITY_MEMORY_KIND_ARRAYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_ARRAY The memory is an array.", "keywords": []}, {"id": 163, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_DEVICE", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind33CUPTI_ACTIVITY_MEMORY_KIND_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_DEVICE The memory is on the device.", "keywords": []}, {"id": 164, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATIC", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind40CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATIC The memory is device static.", "keywords": []}, {"id": 165, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind36CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INT", "keywords": []}, {"id": 166, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_MANAGED", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_MANAGED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind34CUPTI_ACTIVITY_MEMORY_KIND_MANAGEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_MANAGED The memory is managed.", "keywords": []}, {"id": 167, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATIC", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind41CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATIC The memory is managed static.", "keywords": []}, {"id": 168, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLE", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind35CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLE The memory is pageable.", "keywords": []}, {"id": 169, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_PINNED", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_PINNED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind33CUPTI_ACTIVITY_MEMORY_KIND_PINNEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_PINNED The memory is pinned.", "keywords": []}, {"id": 170, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWN", "display_name": "CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind34CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWN The memory kind is unknown.", "keywords": []}, {"id": 171, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATION", "display_name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType47CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATION Memory is allocated.", "keywords": []}, {"id": 172, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType46CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INT", "keywords": []}, {"id": 173, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALID", "display_name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType44CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALID The operation is invalid.", "keywords": []}, {"id": 174, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASE", "display_name": "CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType44CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASE Memory is released.", "keywords": []}, {"id": 175, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATED", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType49CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATED Memory pool is created.", "keywords": []}, {"id": 176, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYED", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType51CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYED Memory pool is destroyed.", "keywords": []}, {"id": 177, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType51CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INT", "keywords": []}, {"id": 178, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALID", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType49CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALID The operation is invalid.", "keywords": []}, {"id": 179, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType49CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED Memory pool is trimmed.", "keywords": []}, {"id": 180, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType41CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INT", "keywords": []}, {"id": 181, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType40CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED Memory pool is imported by the process.", "keywords": []}, {"id": 182, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALID", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType39CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALID The operation is invalid.", "keywords": []}, {"id": 183, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL", "display_name": "CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType37CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCALE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL Memory pool is local to the process.", "keywords": []}, {"id": 184, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_CONTEXT", "display_name": "CUPTI_ACTIVITY_OBJECT_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind29CUPTI_ACTIVITY_OBJECT_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_CONTEXT A context.", "keywords": []}, {"id": 185, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_DEVICE", "display_name": "CUPTI_ACTIVITY_OBJECT_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind28CUPTI_ACTIVITY_OBJECT_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_DEVICE A device.", "keywords": []}, {"id": 186, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_FORCE_INT", "display_name": "CUPTI_ACTIVITY_OBJECT_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind31CUPTI_ACTIVITY_OBJECT_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_FORCE_INT", "keywords": []}, {"id": 187, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_PROCESS", "display_name": "CUPTI_ACTIVITY_OBJECT_PROCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind29CUPTI_ACTIVITY_OBJECT_PROCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_PROCESS A process.", "keywords": []}, {"id": 188, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_STREAM", "display_name": "CUPTI_ACTIVITY_OBJECT_STREAM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind28CUPTI_ACTIVITY_OBJECT_STREAME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_STREAM A stream.", "keywords": []}, {"id": 189, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_THREAD", "display_name": "CUPTI_ACTIVITY_OBJECT_THREAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind28CUPTI_ACTIVITY_OBJECT_THREADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_THREAD A thread.", "keywords": []}, {"id": 190, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OBJECT_UNKNOWN", "display_name": "CUPTI_ACTIVITY_OBJECT_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind29CUPTI_ACTIVITY_OBJECT_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_UNKNOWN The object kind is not known.", "keywords": []}, {"id": 191, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST", "display_name": "CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind47CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUESTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST Overhead due to activity buffer request.", "keywords": []}, {"id": 192, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL", "display_name": "CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind43CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULLE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL Overhead due to lack of command buffer space. Refer CUpti_ActivityOverheadCommandBufferFullData for more details.", "keywords": []}, {"id": 193, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH", "display_name": "CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind42CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH Activity buffer flush overhead.", "keywords": []}, {"id": 194, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION", "display_name": "CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind45CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION CUPTI instrumentation overhead.", "keywords": []}, {"id": 195, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE", "display_name": "CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind38CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE CUPTI resource creation and destruction overhead.", "keywords": []}, {"id": 196, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILER", "display_name": "CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind39CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILER Compiler overhead.", "keywords": []}, {"id": 197, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_FORCE_INT", "display_name": "CUPTI_ACTIVITY_OVERHEAD_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind33CUPTI_ACTIVITY_OVERHEAD_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_FORCE_INT", "keywords": []}, {"id": 198, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING", "display_name": "CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind45CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING Lazy function loading overhead.", "keywords": []}, {"id": 199, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING", "display_name": "CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind56CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING CUDA Runtime triggered module loading overhead.", "keywords": []}, {"id": 200, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_OVERHEAD_UNKNOWN", "display_name": "CUPTI_ACTIVITY_OVERHEAD_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind31CUPTI_ACTIVITY_OVERHEAD_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_UNKNOWN The overhead kind is not known.", "keywords": []}, {"id": 201, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INT", "display_name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig56CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INT", "keywords": []}, {"id": 202, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTED", "display_name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig60CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTED Partitioned global cache not supported.", "keywords": []}, {"id": 203, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFF", "display_name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFF", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig50CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFFE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFF Partitioned global cache config off.", "keywords": []}, {"id": 204, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ON", "display_name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ON", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig49CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ON Partitioned global cache config on.", "keywords": []}, {"id": 205, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWN", "display_name": "CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig54CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWN Partitioned global cache config unknown.", "keywords": []}, {"id": 206, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod43CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT", "keywords": []}, {"id": 207, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod38CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH Sampling period in higher range.", "keywords": []}, {"id": 208, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod41CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID The PC sampling period is not set.", "keywords": []}, {"id": 209, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOWE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW Sampling period in lower range.", "keywords": []}, {"id": 210, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAXE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX Maximum sampling period available on the device.", "keywords": []}, {"id": 211, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID Medium sampling period.", "keywords": []}, {"id": 212, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MINE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN Minimum sampling period available on the device.", "keywords": []}, {"id": 213, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCY", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason59CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCY Warp is blocked waiting for constant memory and immediate memory access to complete.", "keywords": []}, {"id": 214, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCY", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason48CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCY Instruction is waiting on an arithmetic dependency.", "keywords": []}, {"id": 215, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason42CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT", "keywords": []}, {"id": 216, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCH", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason43CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCH Warp is blocked because next instruction is not yet available, because of instruction cache miss, or because of branching effects.", "keywords": []}, {"id": 217, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALID", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason40CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALID Invalid reason.", "keywords": []}, {"id": 218, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCY", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason50CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCY Warp is blocked because it is waiting for a memory access to complete.", "keywords": []}, {"id": 219, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLE", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason48CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLE Warp is blocked because there are too many pending memory operations. In Kepler architecture it often indicates high number of memory replays.", "keywords": []}, {"id": 220, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONE", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason37CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONE No stall, instruction is selected for issue.", "keywords": []}, {"id": 221, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason45CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED Warp was ready to issue, but some other warp issued instead.", "keywords": []}, {"id": 222, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHER", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason38CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHER Miscellaneous reasons.", "keywords": []}, {"id": 223, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSY", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason42CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSY Compute operation cannot be performed due to the required resources not being available.", "keywords": []}, {"id": 224, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason41CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING Sleeping.", "keywords": []}, {"id": 225, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNC", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason37CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNCE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNC Warp is blocked as it is waiting at __syncthreads() or at memory barrier.", "keywords": []}, {"id": 226, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURE", "display_name": "CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason40CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTUREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURE Texture sub-system is fully utilized or has too many outstanding requests.", "keywords": []}, {"id": 227, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind40CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INT", "keywords": []}, {"id": 228, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PREEMPTION_KIND_RESTORE", "display_name": "CUPTI_ACTIVITY_PREEMPTION_KIND_RESTORE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind38CUPTI_ACTIVITY_PREEMPTION_KIND_RESTOREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_RESTORE Preemption to restore CDP block.", "keywords": []}, {"id": 229, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PREEMPTION_KIND_SAVE", "display_name": "CUPTI_ACTIVITY_PREEMPTION_KIND_SAVE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind35CUPTI_ACTIVITY_PREEMPTION_KIND_SAVEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_SAVE Preemption to save CDP block.", "keywords": []}, {"id": 230, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWN", "display_name": "CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind38CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWN The preemption kind is not known.", "keywords": []}, {"id": 231, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULT", "display_name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag41CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULT Default stream.", "keywords": []}, {"id": 232, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INT", "display_name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag43CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INT", "keywords": []}, {"id": 233, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKING", "display_name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag46CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKING Non-blocking stream.", "keywords": []}, {"id": 234, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULL", "display_name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag38CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULLE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULL Null stream.", "keywords": []}, {"id": 235, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWN", "display_name": "CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag41CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWN Unknown data.", "keywords": []}, {"id": 236, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_STREAM_CREATE_MASK", "display_name": "CUPTI_ACTIVITY_STREAM_CREATE_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag33CUPTI_ACTIVITY_STREAM_CREATE_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_MASK Stream create Mask.", "keywords": []}, {"id": 237, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZE", "display_name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType55CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZE Context synchronize API.", "keywords": []}, {"id": 238, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZE", "display_name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType53CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZE Event synchronize API.", "keywords": []}, {"id": 239, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType45CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INT", "keywords": []}, {"id": 240, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZE", "display_name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType54CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZE Stream synchronize API.", "keywords": []}, {"id": 241, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENT", "display_name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType53CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENT Stream wait event API.", "keywords": []}, {"id": 242, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWN", "display_name": "CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType43CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWN Unknown data.", "keywords": []}, {"id": 243, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT", "display_name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType37CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT Default type Windows uses API GetCurrentThreadId() Linux/Mac/Android/QNX use POSIX pthread API pthread_self()", "keywords": []}, {"id": 244, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType39CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT", "keywords": []}, {"id": 245, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE", "display_name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType34CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE Add new enums before this field.", "keywords": []}, {"id": 246, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM", "display_name": "CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType36CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM This type is based on the system API available on the underlying platform and thread-id obtained is supposed to be unique for the process lifetime. Windows uses API GetCurrentThreadId() Linux uses syscall SYS_gettid Mac uses syscall SYS_thread_selfid Android/QNX use gettid()", "keywords": []}, {"id": 247, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMIC", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType48CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMIC The page fault was triggered by atomic memory instruction.", "keywords": []}, {"id": 248, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType50CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH The page fault was triggered by memory prefetch operation.", "keywords": []}, {"id": 249, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READ", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READ", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType46CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READ The page fault was triggered by read memory instruction.", "keywords": []}, {"id": 250, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWN", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType49CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWN The unified memory access type is not known.", "keywords": []}, {"id": 251, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITE", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType47CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITE The page fault was triggered by write memory instruction.", "keywords": []}, {"id": 252, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind62CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD Number of bytes transferred from one device to another device. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 253, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind62CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH Number of bytes transferred from device to host.", "keywords": []}, {"id": 254, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind62CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD Number of bytes transferred from host to device.", "keywords": []}, {"id": 255, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind48CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT", "keywords": []}, {"id": 256, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind63CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT Number of CPU page faults, this is only supported on 64 bit Linux and Mac platforms.", "keywords": []}, {"id": 257, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind52CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT", "keywords": []}, {"id": 258, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind57CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT Number of GPU page faults, this is only supported on devices with compute capability 6.0 and higher and 64 bit Linux platforms.", "keywords": []}, {"id": 259, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind53CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP In case throttling does not help, the driver tries to pin the memory to a processor for a specific period of time. One of the contending processors will have slow access to the memory, while the other will have fast access. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 260, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind52CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING Thrashing occurs when data is frequently accessed by multiple processors and has to be constantly migrated around to achieve data locality. In this case the overhead of migration may exceed the benefits of locality. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 261, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind53CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING Throttling is a prevention technique used by the driver to avoid further thrashing. Here, the driver doesn\u2019t service the fault for one of the contending processors for a specific period of time, so that the other processor can run at full-speed. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 262, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind50CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN The unified memory counter kind is not known.", "keywords": []}, {"id": 263, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope49CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT", "keywords": []}, {"id": 264, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope53CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT", "keywords": []}, {"id": 265, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope63CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICESE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES Collect unified memory counter for single process across all devices.", "keywords": []}, {"id": 266, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope65CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE Collect unified memory counter for single process on one device.", "keywords": []}, {"id": 267, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope51CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN The unified memory counter scope is not known.", "keywords": []}, {"id": 268, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERS", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause61CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERS The unified memory migrated to another processor because of access counter notifications. Only frequently accessed pages are migrated between CPU and GPU, or between peer GPUs.", "keywords": []}, {"id": 269, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCE", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause55CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCE The unified memory migrated to guarantee data coherence e.g. CPU/GPU faults on Pascal+ and kernel launch on pre-Pascal GPUs", "keywords": []}, {"id": 270, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTION", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause54CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTION The unified memory migrated to the CPU because it was evicted to make room for another block of memory on the GPU.", "keywords": []}, {"id": 271, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCH", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause54CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCH The unified memory was speculatively migrated by the UVM driver before being accessed by the destination processor to improve performance.", "keywords": []}, {"id": 272, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWN", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause53CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWN The unified memory migration cause is not known.", "keywords": []}, {"id": 273, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USER", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause50CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USER The unified memory migrated due to an explicit call from the user e.g. cudaMemPrefetchAsync", "keywords": []}, {"id": 274, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCE", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause56CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCE Mapping to remote memory was added to maintain data coherence.", "keywords": []}, {"id": 275, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTION", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause55CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTION Mapping to remote memory was added after the memory was evicted to make room for another block of memory on the GPU.", "keywords": []}, {"id": 276, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORY", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause60CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORY Mapping to remote memory was added because there is no more memory available on the processor and eviction was not possible.", "keywords": []}, {"id": 277, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICY", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause53CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICY Mapping to remote memory was added to enforce the hints specified by the programmer or by performance heuristics of the UVM driver.", "keywords": []}, {"id": 278, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHING", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause56CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHING Mapping to remote memory was added to prevent further thrashing.", "keywords": []}, {"id": 279, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWN", "display_name": "CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause54CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWN The cause of mapping to remote memory was unknown.", "keywords": []}, {"id": 280, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY", "display_name": "CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType31CUPTI_CHANNEL_TYPE_ASYNC_MEMCPYE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY Channel is used by an asynchronous copy engine For confidential compute configurations, work launch and completion are done using the copy engines.", "keywords": []}, {"id": 281, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CHANNEL_TYPE_COMPUTE", "display_name": "CUPTI_CHANNEL_TYPE_COMPUTE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType26CUPTI_CHANNEL_TYPE_COMPUTEE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_COMPUTE Channel is used for standard work launch and tracking.", "keywords": []}, {"id": 282, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CHANNEL_TYPE_FORCE_INT", "display_name": "CUPTI_CHANNEL_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType28CUPTI_CHANNEL_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_FORCE_INT", "keywords": []}, {"id": 283, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CHANNEL_TYPE_INVALID", "display_name": "CUPTI_CHANNEL_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType26CUPTI_CHANNEL_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_INVALID", "keywords": []}, {"id": 284, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason38CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT", "keywords": []}, {"id": 285, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason37CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLEE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE Nothing is running on the GPU and the clocks are dropping to idle state.", "keywords": []}, {"id": 286, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason40CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWNE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN Hardware slowdown to reduce the clock by a factor of two or more is engaged. This is an indicator of one of the following: 1) Temperature is too high, 2) External power brake assertion is being triggered (e.g. by the system power supply), 3) Change in power state.", "keywords": []}, {"id": 287, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_NONE", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason33CUPTI_CLOCKS_THROTTLE_REASON_NONEE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_NONE No clock throttling.", "keywords": []}, {"id": 288, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason41CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAPE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP A software power scaling algorithm is reducing the clocks below requested clocks.", "keywords": []}, {"id": 289, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason36CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN Some unspecified factor is reducing the clocks.", "keywords": []}, {"id": 290, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason40CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED Throttle reason is not supported for this GPU.", "keywords": []}, {"id": 291, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS", "display_name": "CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason48CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKSE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS The GPU clocks are limited by a user specified limit.", "keywords": []}, {"id": 292, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CONTEXT_CIG_MODE_CIG", "display_name": "CUPTI_CONTEXT_CIG_MODE_CIG", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode26CUPTI_CONTEXT_CIG_MODE_CIGE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_CIG CIG mode.", "keywords": []}, {"id": 293, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACK", "display_name": "CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode35CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACKE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACK CIG fallback mode.", "keywords": []}, {"id": 294, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CONTEXT_CIG_MODE_FORCE_INT", "display_name": "CUPTI_CONTEXT_CIG_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode32CUPTI_CONTEXT_CIG_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_FORCE_INT", "keywords": []}, {"id": 295, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CONTEXT_CIG_MODE_NONE", "display_name": "CUPTI_CONTEXT_CIG_MODE_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode27CUPTI_CONTEXT_CIG_MODE_NONEE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_NONE Regular (non-CIG) mode.", "keywords": []}, {"id": 296, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT", "display_name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode42CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT", "keywords": []}, {"id": 297, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE", "display_name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode37CUPTI_DEVICE_VIRTUALIZATION_MODE_NONEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE No virtualization mode is associated with the device i.e. it\u2019s a baremetal GPU", "keywords": []}, {"id": 298, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH", "display_name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode45CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGHE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH The device is associated with the pass-through GPU. In this mode, an entire physical GPU is directly assigned to one virtual machine (VM).", "keywords": []}, {"id": 299, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU", "display_name": "CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode44CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPUE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU The device is associated with the virtual GPU (vGPU). In this mode multiple virtual machines (VMs) have simultaneous, direct access to a single physical GPU.", "keywords": []}, {"id": 300, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEV_TYPE_FORCE_INT", "display_name": "CUPTI_DEV_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType24CUPTI_DEV_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_FORCE_INT", "keywords": []}, {"id": 301, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEV_TYPE_GPU", "display_name": "CUPTI_DEV_TYPE_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType18CUPTI_DEV_TYPE_GPUE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_GPU The device type is GPU.", "keywords": []}, {"id": 302, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEV_TYPE_INVALID", "display_name": "CUPTI_DEV_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType22CUPTI_DEV_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_INVALID", "keywords": []}, {"id": 303, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEV_TYPE_NPU", "display_name": "CUPTI_DEV_TYPE_NPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType18CUPTI_DEV_TYPE_NPUE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_NPU The device type is NVLink processing unit in CPU.", "keywords": []}, {"id": 304, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0E", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0 The external API is custom0.", "keywords": []}, {"id": 305, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1E", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1 The external API is custom1.", "keywords": []}, {"id": 306, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2E", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2 The external API is custom2.", "keywords": []}, {"id": 307, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind41CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT", "keywords": []}, {"id": 308, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_INVALID", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_INVALID", "keywords": []}, {"id": 309, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_OPENACCE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC The external API is OpenACC.", "keywords": []}, {"id": 310, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_SIZE", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind36CUPTI_EXTERNAL_CORRELATION_KIND_SIZEE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_SIZE Add new kinds before this line.", "keywords": []}, {"id": 311, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN", "display_name": "CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN The external API is unknown to CUPTI.", "keywords": []}, {"id": 312, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_FUNC_SHMEM_LIMIT_DEFAULT", "display_name": "CUPTI_FUNC_SHMEM_LIMIT_DEFAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_FuncShmemLimitConfig30CUPTI_FUNC_SHMEM_LIMIT_DEFAULTE", "priority": 1, "content": "enumerator  CUPTI_FUNC_SHMEM_LIMIT_DEFAULT The shared memory limit config is default.", "keywords": []}, {"id": 313, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT", "display_name": "CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_FuncShmemLimitConfig32CUPTI_FUNC_SHMEM_LIMIT_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT", "keywords": []}, {"id": 314, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_FUNC_SHMEM_LIMIT_OPTIN", "display_name": "CUPTI_FUNC_SHMEM_LIMIT_OPTIN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_FuncShmemLimitConfig28CUPTI_FUNC_SHMEM_LIMIT_OPTINE", "priority": 1, "content": "enumerator  CUPTI_FUNC_SHMEM_LIMIT_OPTIN User has opted for a higher dynamic shared memory limit using function attribute \u2018cudaFuncAttributeMaxDynamicSharedMemorySize\u2019 for runtime API or CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES for driver API.", "keywords": []}, {"id": 315, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_LINK_FLAG_FORCE_INT", "display_name": "CUPTI_LINK_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag25CUPTI_LINK_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_FORCE_INT", "keywords": []}, {"id": 316, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_LINK_FLAG_INVALID", "display_name": "CUPTI_LINK_FLAG_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag23CUPTI_LINK_FLAG_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_INVALID The flag is invalid.", "keywords": []}, {"id": 317, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_LINK_FLAG_PEER_ACCESS", "display_name": "CUPTI_LINK_FLAG_PEER_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag27CUPTI_LINK_FLAG_PEER_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_PEER_ACCESS Is peer to peer access supported by this link.", "keywords": []}, {"id": 318, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_LINK_FLAG_PEER_ATOMICS", "display_name": "CUPTI_LINK_FLAG_PEER_ATOMICS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag28CUPTI_LINK_FLAG_PEER_ATOMICSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_PEER_ATOMICS Is peer atomic access supported by this link.", "keywords": []}, {"id": 319, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_LINK_FLAG_SYSMEM_ACCESS", "display_name": "CUPTI_LINK_FLAG_SYSMEM_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag29CUPTI_LINK_FLAG_SYSMEM_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_SYSMEM_ACCESS Is system memory access supported by this link.", "keywords": []}, {"id": 320, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_LINK_FLAG_SYSMEM_ATOMICS", "display_name": "CUPTI_LINK_FLAG_SYSMEM_ATOMICS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag30CUPTI_LINK_FLAG_SYSMEM_ATOMICSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_SYSMEM_ATOMICS Is system memory atomic access supported by this link.", "keywords": []}, {"id": 321, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind35CUPTI_OPENACC_CONSTRUCT_KIND_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC", "keywords": []}, {"id": 322, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_DATA", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_DATA", "keywords": []}, {"id": 323, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_DECLAREE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE", "keywords": []}, {"id": 324, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind39CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA", "keywords": []}, {"id": 325, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind38CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA", "keywords": []}, {"id": 326, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind38CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT", "keywords": []}, {"id": 327, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind38CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA", "keywords": []}, {"id": 328, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_INIT", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_INIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_INITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_INIT", "keywords": []}, {"id": 329, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_KERNELSE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS", "keywords": []}, {"id": 330, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_LOOP", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_LOOP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_LOOPE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_LOOP", "keywords": []}, {"id": 331, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind37CUPTI_OPENACC_CONSTRUCT_KIND_PARALLELE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL", "keywords": []}, {"id": 332, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE", "keywords": []}, {"id": 333, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind40CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_APIE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API", "keywords": []}, {"id": 334, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_SET", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_SET", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind32CUPTI_OPENACC_CONSTRUCT_KIND_SETE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_SET", "keywords": []}, {"id": 335, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind37CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN", "keywords": []}, {"id": 336, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN", "keywords": []}, {"id": 337, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind35CUPTI_OPENACC_CONSTRUCT_KIND_UPDATEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE", "keywords": []}, {"id": 338, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_CONSTRUCT_KIND_WAIT", "display_name": "CUPTI_OPENACC_CONSTRUCT_KIND_WAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_WAITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_WAIT", "keywords": []}, {"id": 339, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_ALLOC", "display_name": "CUPTI_OPENACC_EVENT_KIND_ALLOC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind30CUPTI_OPENACC_EVENT_KIND_ALLOCE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ALLOC", "keywords": []}, {"id": 340, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT", "display_name": "CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind42CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCTE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT", "keywords": []}, {"id": 341, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_CREATE", "display_name": "CUPTI_OPENACC_EVENT_KIND_CREATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind31CUPTI_OPENACC_EVENT_KIND_CREATEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_CREATE", "keywords": []}, {"id": 342, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_DELETE", "display_name": "CUPTI_OPENACC_EVENT_KIND_DELETE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind31CUPTI_OPENACC_EVENT_KIND_DELETEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_DELETE", "keywords": []}, {"id": 343, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT", "display_name": "CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind36CUPTI_OPENACC_EVENT_KIND_DEVICE_INITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT", "keywords": []}, {"id": 344, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN", "display_name": "CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind40CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN", "keywords": []}, {"id": 345, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD", "display_name": "CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind41CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOADE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD", "keywords": []}, {"id": 346, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH", "display_name": "CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind39CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCHE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH", "keywords": []}, {"id": 347, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD", "display_name": "CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind39CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOADE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD", "keywords": []}, {"id": 348, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_ENTER_DATA", "display_name": "CUPTI_OPENACC_EVENT_KIND_ENTER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind35CUPTI_OPENACC_EVENT_KIND_ENTER_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENTER_DATA", "keywords": []}, {"id": 349, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_EXIT_DATA", "display_name": "CUPTI_OPENACC_EVENT_KIND_EXIT_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind34CUPTI_OPENACC_EVENT_KIND_EXIT_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_EXIT_DATA", "keywords": []}, {"id": 350, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_FORCE_INT", "display_name": "CUPTI_OPENACC_EVENT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind34CUPTI_OPENACC_EVENT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_FORCE_INT", "keywords": []}, {"id": 351, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_FREE", "display_name": "CUPTI_OPENACC_EVENT_KIND_FREE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind29CUPTI_OPENACC_EVENT_KIND_FREEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_FREE", "keywords": []}, {"id": 352, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT", "display_name": "CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind38CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT", "keywords": []}, {"id": 353, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_INVALID", "display_name": "CUPTI_OPENACC_EVENT_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind32CUPTI_OPENACC_EVENT_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_INVALID", "keywords": []}, {"id": 354, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN", "display_name": "CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind41CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN", "keywords": []}, {"id": 355, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_UPDATE", "display_name": "CUPTI_OPENACC_EVENT_KIND_UPDATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind31CUPTI_OPENACC_EVENT_KIND_UPDATEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_UPDATE", "keywords": []}, {"id": 356, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENACC_EVENT_KIND_WAIT", "display_name": "CUPTI_OPENACC_EVENT_KIND_WAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind29CUPTI_OPENACC_EVENT_KIND_WAITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_WAIT", "keywords": []}, {"id": 357, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_FORCE_INT", "display_name": "CUPTI_OPENMP_EVENT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind33CUPTI_OPENMP_EVENT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_FORCE_INT", "keywords": []}, {"id": 358, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_IDLE", "display_name": "CUPTI_OPENMP_EVENT_KIND_IDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind28CUPTI_OPENMP_EVENT_KIND_IDLEE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_IDLE", "keywords": []}, {"id": 359, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_INVALID", "display_name": "CUPTI_OPENMP_EVENT_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind31CUPTI_OPENMP_EVENT_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_INVALID", "keywords": []}, {"id": 360, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_PARALLEL", "display_name": "CUPTI_OPENMP_EVENT_KIND_PARALLEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind32CUPTI_OPENMP_EVENT_KIND_PARALLELE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_PARALLEL", "keywords": []}, {"id": 361, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_TASK", "display_name": "CUPTI_OPENMP_EVENT_KIND_TASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind28CUPTI_OPENMP_EVENT_KIND_TASKE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_TASK", "keywords": []}, {"id": 362, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_THREAD", "display_name": "CUPTI_OPENMP_EVENT_KIND_THREAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind30CUPTI_OPENMP_EVENT_KIND_THREADE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_THREAD", "keywords": []}, {"id": 363, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER", "display_name": "CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind36CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIERE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER", "keywords": []}, {"id": 364, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT", "display_name": "CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind37CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAITE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT", "keywords": []}, {"id": 365, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_DEVICE_TYPE_BRIDGE", "display_name": "CUPTI_PCIE_DEVICE_TYPE_BRIDGE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_PcieDeviceType29CUPTI_PCIE_DEVICE_TYPE_BRIDGEE", "priority": 1, "content": "enumerator  CUPTI_PCIE_DEVICE_TYPE_BRIDGE PCIE Bridge record.", "keywords": []}, {"id": 366, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_DEVICE_TYPE_FORCE_INT", "display_name": "CUPTI_PCIE_DEVICE_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_PcieDeviceType32CUPTI_PCIE_DEVICE_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_PCIE_DEVICE_TYPE_FORCE_INT", "keywords": []}, {"id": 367, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_DEVICE_TYPE_GPU", "display_name": "CUPTI_PCIE_DEVICE_TYPE_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_PcieDeviceType26CUPTI_PCIE_DEVICE_TYPE_GPUE", "priority": 1, "content": "enumerator  CUPTI_PCIE_DEVICE_TYPE_GPU PCIE GPU record.", "keywords": []}, {"id": 368, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_GEN_FORCE_INT", "display_name": "CUPTI_PCIE_GEN_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen24CUPTI_PCIE_GEN_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_FORCE_INT", "keywords": []}, {"id": 369, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_GEN_GEN1", "display_name": "CUPTI_PCIE_GEN_GEN1", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN1E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN1 PCIE Generation 1.", "keywords": []}, {"id": 370, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_GEN_GEN2", "display_name": "CUPTI_PCIE_GEN_GEN2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN2E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN2 PCIE Generation 2.", "keywords": []}, {"id": 371, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_GEN_GEN3", "display_name": "CUPTI_PCIE_GEN_GEN3", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN3E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN3 PCIE Generation 3.", "keywords": []}, {"id": 372, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_GEN_GEN4", "display_name": "CUPTI_PCIE_GEN_GEN4", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN4E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN4 PCIE Generation 4.", "keywords": []}, {"id": 373, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PCIE_GEN_GEN5", "display_name": "CUPTI_PCIE_GEN_GEN5", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN5E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN5 PCIE Generation 5.", "keywords": []}, {"id": 374, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute", "display_name": "CUpti_ActivityAttribute", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv423CUpti_ActivityAttribute", "priority": 1, "content": "enum  CUpti_ActivityAttribute Activity attributes. These attributes are used to control the behavior of the activity API. Values:", "keywords": []}, {"id": 375, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute43CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_FORCE_INT", "keywords": []}, {"id": 376, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute44CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMITE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT The maximum number of device memory buffers per context. The value is a size_t. For an application with high rate of kernel launches, memcopies and memsets having a bigger pool limit helps in timestamp collection for all these activities at the expense of a larger memory footprint. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE for more details. Setting this value will not modify the number of memory buffers currently stored. Set this value before initializing CUDA to ensure the limit is not exceeded. The default value is 250.", "keywords": []}, {"id": 377, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute52CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE Number of device buffers to pre-allocate for a context during the initialization phase. The value is a size_t. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE for details. This value must be less than the maximum number of device buffers set using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT Set this value before initializing CUDA or before creating a context to ensure it is considered by the CUPTI. The default value is set to 3 to ping pong between these buffers (if possible).", "keywords": []}, {"id": 378, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute38CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE The device memory size (in bytes) reserved for storing profiling data for concurrent kernels (activity kind CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL ), memcopies and memsets for each buffer on a context. The value is a size_t. There is a limit on how many device buffers can be allocated per context. User can query and set this limit using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT . CUPTI doesn\u2019t pre-allocate all the buffers, it pre-allocates only those many buffers as set by the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE . When all of the data in a buffer is consumed, it is added in the reuse pool, and CUPTI picks a buffer from this pool when a new buffer is needed. Thus memory footprint does not scale with the kernel count. Applications with the high density of kernels, memcopies and memsets might result in having CUPTI to allocate more device buffers. CUPTI allocates another buffer only when it runs out of the buffers in the reuse pool. Since buffer allocation happens in the main application thread, this might result in stalls in the critical path. CUPTI pre-allocates 3 buffers of the same size to mitigate this issue. User can query and set the pre-allocation limit using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE . Having larger buffer size leaves less device memory for the application. Having smaller buffer size increases the risk of dropping timestamps for records if too many kernels or memcopies or memsets are launched at one time. This value only applies to new buffer allocations. Set this value before initializing CUDA or before creating a context to ensure it is considered for the following allocations. The default value is 3200000 (~3MB) which can accommodate profiling data up to 100,000 kernels, memcopies and memsets combined. Note: Starting with the CUDA 12.0 Update 1 release, CUPTI allocates profiling buffer in the device memory by default as this might help in improving the performance of the tracing run. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED for more details. Size of the memory and maximum number of pools are still controlled by the attributes CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE and CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT . Note: The actual amount of device memory per buffer reserved by CUPTI might be larger.", "keywords": []}, {"id": 379, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute42CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP The device memory size (in bytes) reserved for storing profiling data for CDP operations for each buffer on a context. The value is a size_t. Having larger buffer size means less flush operations but consumes more device memory. This value only applies to new allocations. Set this value before initializing CUDA or before creating a context to ensure it is considered for the following allocations. The default value is 8388608 (8MB). Note: The actual amount of device memory per context reserved by CUPTI might be larger.", "keywords": []}, {"id": 380, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute51CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED Allocate page-locked (pinned) host memory for storing profiling data for concurrent kernels, memcopies and memsets for each buffer on a context. The value is a uint8_t. Starting with the CUDA 11.2 release, CUPTI allocates profiling buffer in the pinned host memory by default as this might help in improving the performance of the tracing run. Allocating excessive amounts of pinned memory may degrade system performance, since it reduces the amount of memory available to the system for paging. For this reason user might want to change the location from pinned host memory to device memory by setting value of this attribute to 0. Using page-locked (pinned) host memory buffers is not supported on confidential computing devices. On setting this attribute to 1, CUPTI will return CUPTI_ERROR_NOT_SUPPORTED. The default value is 1.", "keywords": []}, {"id": 381, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute46CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER Request activity buffers per-thread to store CUPTI activity records in the activity buffer on per-thread basis. The value is a uint8_t. The attribute should be set before registering the buffer callbacks using cuptiActivityRegisterCallbacks API and before any of the CUPTI activity kinds are enabled. This makes sure that all the records are stored in activity buffers allocated per-thread. Changing this attribute in the middle of the profiling session will result in undefined behavior. The default value is 0.", "keywords": []}, {"id": 382, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute50CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMITE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT This attribute is not supported starting with CUDA 12.3 CUPTI no longer uses profiling semaphore pool to store profiling data. The maximum number of profiling semaphore pools per context. The value is a size_t. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE for more details. Set this value before initializing CUDA to ensure the limit is not exceeded. The default value is 250.", "keywords": []}, {"id": 383, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute49CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE This attribute is not supported starting with CUDA 12.3 CUPTI no longer uses profiling semaphore pool to store profiling data. There is a limit on how many semaphore pools can be allocated per context. User can query and set this limit using the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT . CUPTI doesn\u2019t pre-allocate all the semaphore pools, it pre-allocates only those many semaphore pools as set by the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE . When all of the data in a semaphore pool is consumed, it is added in the reuse pool, and CUPTI picks a semaphore pool from the reuse pool when a new semaphore pool is needed. Thus memory footprint does not scale with the kernel count. Applications with the high density of kernels might result in having CUPTI to allocate more semaphore pools. CUPTI allocates another semaphore pool only when it runs out of the semaphore pools in the reuse pool. Since semaphore pool allocation happens in the main application thread, this might result in stalls in the critical path. CUPTI pre-allocates 3 semaphore pools of the same size to mitigate this issue. User can query and set the pre-allocation limit using the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE . Having larger semaphore pool size leaves less device memory for the application. Having smaller semaphore pool size increases the risk of dropping timestamps for kernel records if too many kernels are issued/launched at one time. This value only applies to new semaphore pool allocations. Set this value before initializing CUDA or before creating a context to ensure it is considered for the following allocations. The default value is 25000 which can accommodate profiling data for upto 25,000 kernels.", "keywords": []}, {"id": 384, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute58CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE This attribute is not supported starting with CUDA 12.3 CUPTI no longer uses profiling semaphore pool to store profiling data. Number of profiling semaphore pools to pre-allocate for a context during the initialization phase. The value is a size_t. Refer to the description of the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE for details. This value must be less than the maximum number of profiling semaphore pools set using the attribute CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT Set this value before initializing CUDA or before creating a context to ensure it is considered by the CUPTI. The default value is set to 3 to ping pong between these pools (if possible).", "keywords": []}, {"id": 385, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER", "display_name": "CUpti_ActivityAttribute::CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N23CUpti_ActivityAttribute46CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER The flag to indicate whether user should provide activity buffer of zero value. The value is a uint8_t. If the value of this attribute is non-zero, user should provide a zero value buffer in the CUpti_BuffersCallbackRequestFunc . If the user does not provide a zero value buffer after setting this to non-zero, the activity buffer may contain some uninitialized values when CUPTI returns it in CUpti_BuffersCallbackCompleteFunc If the value of this attribute is zero, CUPTI will initialize the user buffer received in the CUpti_BuffersCallbackRequestFunc to zero before filling it. If the user sets this to zero, a few stalls may appear in critical path because CUPTI will zero out the buffer in the main thread. Set this value before returning from CUpti_BuffersCallbackRequestFunc to ensure it is considered for all the subsequent user buffers. The default value is 0.", "keywords": []}, {"id": 386, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityComputeApiKind", "display_name": "CUpti_ActivityComputeApiKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv428CUpti_ActivityComputeApiKind", "priority": 1, "content": "enum  CUpti_ActivityComputeApiKind The kind of a compute API. Values:", "keywords": []}, {"id": 387, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_CUDA", "display_name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_CUDA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind31CUPTI_ACTIVITY_COMPUTE_API_CUDAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_CUDA The compute APIs are for CUDA.", "keywords": []}, {"id": 388, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPS", "display_name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind35CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_CUDA_MPS The compute APIs are for CUDA running in MPS (Multi-Process Service) environment.", "keywords": []}, {"id": 389, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_FORCE_INT", "display_name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind36CUPTI_ACTIVITY_COMPUTE_API_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_FORCE_INT", "keywords": []}, {"id": 390, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_UNKNOWN", "display_name": "CUpti_ActivityComputeApiKind::CUPTI_ACTIVITY_COMPUTE_API_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityComputeApiKind34CUPTI_ACTIVITY_COMPUTE_API_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_COMPUTE_API_UNKNOWN The compute API is not known.", "keywords": []}, {"id": 391, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind", "display_name": "CUpti_ActivityEnvironmentKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429CUpti_ActivityEnvironmentKind", "priority": 1, "content": "enum  CUpti_ActivityEnvironmentKind The kind of environment data. Used to indicate what type of data is being reported by an environment activity record. Values:", "keywords": []}, {"id": 392, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_COOLING", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_COOLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind34CUPTI_ACTIVITY_ENVIRONMENT_COOLINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_COOLING The environment data is related to cooling.", "keywords": []}, {"id": 393, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_COUNT", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind32CUPTI_ACTIVITY_ENVIRONMENT_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_COUNT", "keywords": []}, {"id": 394, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INT", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind41CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_KIND_FORCE_INT", "keywords": []}, {"id": 395, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_POWER", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_POWER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind32CUPTI_ACTIVITY_ENVIRONMENT_POWERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_POWER The environment data is related to power.", "keywords": []}, {"id": 396, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_SPEED", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_SPEED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind32CUPTI_ACTIVITY_ENVIRONMENT_SPEEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_SPEED The environment data is related to speed.", "keywords": []}, {"id": 397, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind38CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATUREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE The environment data is related to temperature.", "keywords": []}, {"id": 398, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWN", "display_name": "CUpti_ActivityEnvironmentKind::CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ActivityEnvironmentKind34CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_ENVIRONMENT_UNKNOWN Unknown data.", "keywords": []}, {"id": 399, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag", "display_name": "CUpti_ActivityFlag", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418CUpti_ActivityFlag", "priority": 1, "content": "enum  CUpti_ActivityFlag Flags associated with activity records. Activity record flags. Flags can be combined by bitwise OR to associated multiple flags with an activity record. Each flag is specific to a certain activity kind, as noted below. Values:", "keywords": []}, {"id": 400, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE Indicates if the activity represents a CUdevice_attribute value or a CUpti_DeviceAttribute value. Valid for CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE.", "keywords": []}, {"id": 401, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELS", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_DEVICE_CONCURRENT_KERNELS Indicates the activity represents a device that supports concurrent kernel execution. Valid for CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 402, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_FLUSH_FORCED", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_FLUSH_FORCED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_FLUSH_FORCEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_FLUSH_FORCED When calling cuptiActivityFlushAll, this flag can be set to force CUPTI to flush all records in the buffer, whether finished or not.", "keywords": []}, {"id": 403, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_FORCE_INT", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag29CUPTI_ACTIVITY_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_FORCE_INT", "keywords": []}, {"id": 404, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_CACHED If this bit in flag is set, the load access was cached else it is uncached. Valid for CUpti_ActivityGlobalAccess3 .", "keywords": []}, {"id": 405, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag43CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_LOAD If bit in this flag is set, the access was load, else it is a store access. Valid for CUpti_ActivityGlobalAccess3 .", "keywords": []}, {"id": 406, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASK", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag48CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_GLOBAL_ACCESS_KIND_SIZE_MASK The number of bytes requested by each thread Valid for CUpti_ActivityGlobalAccess3 .", "keywords": []}, {"id": 407, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag42CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_INSTRUCTION_CLASS_MASK The mask for the instruction class, CUpti_ActivityInstructionClass Valid for CUpti_ActivityInstructionExecution and CUpti_ActivityInstructionCorrelation .", "keywords": []}, {"id": 408, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALID", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag45CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_INSTRUCTION_VALUE_INVALID If this bit in flag is set, the source level metric value couldn\u2019t be calculated. This occurs when a value(s) required to calculate the source level metric cannot be evaluated. Valid for CUpti_ActivityInstructionExecution .", "keywords": []}, {"id": 409, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGB", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGB", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGBE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_COLOR_ARGB Indicates the activity represents a marker that specifies a color in alpha-red-green-blue format. Valid for CUPTI_ACTIVITY_KIND_MARKER_DATA.", "keywords": []}, {"id": 410, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONE", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_COLOR_NONE Indicates the activity represents a marker that does not specify a color. Valid for CUPTI_ACTIVITY_KIND_MARKER_DATA.", "keywords": []}, {"id": 411, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_END", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_END", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag30CUPTI_ACTIVITY_FLAG_MARKER_ENDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_END Indicates the activity represents a region end marker. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 412, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUS", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag40CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_INSTANTANEOUS Indicates the activity represents an instantaneous marker. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 413, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_START", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_START", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_MARKER_STARTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_START Indicates the activity represents a region start marker. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 414, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag39CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE Indicates the activity represents an attempt to acquire a user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 415, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag46CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED Indicates the activity represents failure in acquiring the user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 416, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag47CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS Indicates the activity represents success in acquiring the user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 417, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag39CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE Indicates the activity represents releasing a reservation on user defined synchronization object. Valid for CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 418, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNC", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNCE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MEMCPY_ASYNC Indicates the activity represents an asynchronous memcpy operation. Valid for CUPTI_ACTIVITY_KIND_MEMCPY.", "keywords": []}, {"id": 419, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag32CUPTI_ACTIVITY_FLAG_MEMSET_ASYNCE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC Indicates the activity represents an asynchronous memset operation. Valid for CUPTI_ACTIVITY_KIND_MEMSET.", "keywords": []}, {"id": 420, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWED", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_METRIC_OVERFLOWED If this bit in flag is set, the metric value overflowed. Valid for CUpti_ActivityMetric and CUpti_ActivityMetricInstance .", "keywords": []}, {"id": 421, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALID", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag40CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_METRIC_VALUE_INVALID If this bit in flag is set, the metric value couldn\u2019t be calculated. This occurs when a value(s) required to calculate the metric is missing. Valid for CUpti_ActivityMetric and CUpti_ActivityMetricInstance .", "keywords": []}, {"id": 422, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_NONE", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag24CUPTI_ACTIVITY_FLAG_NONEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_NONE Indicates the activity record has no flags.", "keywords": []}, {"id": 423, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOAD", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag43CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_LOAD If bit in this flag is set, the access was load, else it is a store access. Valid for CUpti_ActivitySharedAccess .", "keywords": []}, {"id": 424, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASK", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag48CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_SHARED_ACCESS_KIND_SIZE_MASK The number of bytes requested by each thread Valid for CUpti_ActivitySharedAccess .", "keywords": []}, {"id": 425, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPU", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag36CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPUE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_THRASHING_IN_CPU Indicates the activity represents thrashing in CPU. Valid for counter of kind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING in CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "keywords": []}, {"id": 426, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPU", "display_name": "CUpti_ActivityFlag::CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityFlag37CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPUE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_FLAG_THROTTLING_IN_CPU Indicates the activity represents page throttling in CPU. Valid for counter of kind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING in CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "keywords": []}, {"id": 427, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass", "display_name": "CUpti_ActivityInstructionClass", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430CUpti_ActivityInstructionClass", "priority": 1, "content": "enum  CUpti_ActivityInstructionClass SASS instruction classification. The sass instruction are broadly divided into different class. Each enum represents a classification. Values:", "keywords": []}, {"id": 428, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIER", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_BARRIER Represents a barrier instruction.", "keywords": []}, {"id": 429, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSION", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass47CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_BIT_CONVERSION Represents a bit conversion operation.", "keywords": []}, {"id": 430, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANT", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass41CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONSTANT Represents a constant load instruction.", "keywords": []}, {"id": 431, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOW", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass45CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOWE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_CONTROL_FLOW Represents a control flow instruction.", "keywords": []}, {"id": 432, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_16 Represents a 16 bit floating point operation.", "keywords": []}, {"id": 433, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_32 Represents a 32 bit floating point operation.", "keywords": []}, {"id": 434, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_FP_64 Represents a 64 bit floating point operation.", "keywords": []}, {"id": 435, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERIC", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_GENERIC Represents a generic load-store instruction.", "keywords": []}, {"id": 436, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass39CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBALE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL Represents a global load-store instruction.", "keywords": []}, {"id": 437, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMIC", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass46CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_GLOBAL_ATOMIC Represents a global atomic instruction.", "keywords": []}, {"id": 438, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGER", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTEGER Represents an integer operation.", "keywords": []}, {"id": 439, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATION", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass59CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_INTER_THREAD_COMMUNICATION Represents a inter-thread communication instruction.", "keywords": []}, {"id": 440, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INT", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass47CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_KIND_FORCE_INT", "keywords": []}, {"id": 441, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCAL", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass38CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCALE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_LOCAL Represents a local load-store instruction.", "keywords": []}, {"id": 442, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUS", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass46CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_MISCELLANEOUS Represents some miscellaneous instructions which do not fit in the above classification.", "keywords": []}, {"id": 443, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass39CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHAREDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED Represents a shared load-store instruction.", "keywords": []}, {"id": 444, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMIC", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass46CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SHARED_ATOMIC Represents a shared atomic instruction.", "keywords": []}, {"id": 445, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE Represents a surface load-store instruction.", "keywords": []}, {"id": 446, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMIC", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass47CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_SURFACE_ATOMIC Represents a surface atomic instruction.", "keywords": []}, {"id": 447, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTURE", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTUREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_TEXTURE Represents a texture load-store instruction.", "keywords": []}, {"id": 448, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORM", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNIFORM Represents uniform instruction.", "keywords": []}, {"id": 449, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWN", "display_name": "CUpti_ActivityInstructionClass::CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityInstructionClass40CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_INSTRUCTION_CLASS_UNKNOWN The instruction class is not known.", "keywords": []}, {"id": 450, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitEntryType", "display_name": "CUpti_ActivityJitEntryType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426CUpti_ActivityJitEntryType", "priority": 1, "content": "enum  CUpti_ActivityJitEntryType The types of JIT entry. To be used in CUpti_ActivityJit . Values:", "keywords": []}, {"id": 451, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_INVALID", "display_name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType32CUPTI_ACTIVITY_JIT_ENTRY_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_INVALID", "keywords": []}, {"id": 452, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTX", "display_name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType39CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTXE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_NVVM_IR_TO_PTX NVVM-IR to PTX.", "keywords": []}, {"id": 453, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBIN", "display_name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBIN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType37CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBINE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_PTX_TO_CUBIN PTX to CUBIN.", "keywords": []}, {"id": 454, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INT", "display_name": "CUpti_ActivityJitEntryType::CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityJitEntryType39CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_ENTRY_TYPE_FORCE_INT", "keywords": []}, {"id": 455, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitOperationType", "display_name": "CUpti_ActivityJitOperationType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430CUpti_ActivityJitOperationType", "priority": 1, "content": "enum  CUpti_ActivityJitOperationType The types of JIT compilation operations. To be used in CUpti_ActivityJit . Values:", "keywords": []}, {"id": 456, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOAD", "display_name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType39CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_CACHE_LOAD Loaded from the compute cache.", "keywords": []}, {"id": 457, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STORE", "display_name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STORE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType40CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STOREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_CACHE_STORE Stored in the compute cache.", "keywords": []}, {"id": 458, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_COMPILE", "display_name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_COMPILE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType36CUPTI_ACTIVITY_JIT_OPERATION_COMPILEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_COMPILE JIT compilation.", "keywords": []}, {"id": 459, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_INVALID", "display_name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType36CUPTI_ACTIVITY_JIT_OPERATION_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_INVALID", "keywords": []}, {"id": 460, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INT", "display_name": "CUpti_ActivityJitOperationType::CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityJitOperationType43CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_JIT_OPERATION_TYPE_FORCE_INT", "keywords": []}, {"id": 461, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind", "display_name": "CUpti_ActivityKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418CUpti_ActivityKind", "priority": 1, "content": "enum  CUpti_ActivityKind The kinds of activity records. Each activity record kind represents information about a GPU or an activity occurring on a CPU or GPU. Each kind is associated with a activity record structure that holds the information associated with the kind. CUpti_Activity  CUpti_ActivityAPI  CUpti_ActivityContext  CUpti_ActivityContext2  CUpti_ActivityContext3  CUpti_ActivityDevice  CUpti_ActivityDevice2  CUpti_ActivityDevice3  CUpti_ActivityDevice4  CUpti_ActivityDeviceAttribute  CUpti_ActivityEvent  CUpti_ActivityEventInstance  CUpti_ActivityKernel  CUpti_ActivityKernel2  CUpti_ActivityKernel3  CUpti_ActivityKernel4  CUpti_ActivityKernel5  CUpti_ActivityKernel6  CUpti_ActivityKernel7  CUpti_ActivityKernel8  CUpti_ActivityKernel9  CUpti_ActivityCdpKernel  CUpti_ActivityPreemption  CUpti_ActivityMemcpy  CUpti_ActivityMemcpy3  CUpti_ActivityMemcpy4  CUpti_ActivityMemcpy5  CUpti_ActivityMemcpyPtoP  CUpti_ActivityMemcpyPtoP2  CUpti_ActivityMemcpyPtoP3  CUpti_ActivityMemcpyPtoP4  CUpti_ActivityMemset  CUpti_ActivityMemset2  CUpti_ActivityMemset3  CUpti_ActivityMemset4  CUpti_ActivityMemory  CUpti_ActivityMemory2  CUpti_ActivityMemory3  CUpti_ActivityMemory4  CUpti_ActivityMemoryPool  CUpti_ActivityMemoryPool2  CUpti_ActivityMetric  CUpti_ActivityMetricInstance  CUpti_ActivityName  CUpti_ActivityMarker  CUpti_ActivityMarker2  CUpti_ActivityMarkerData  CUpti_ActivitySourceLocator  CUpti_ActivityGlobalAccess  CUpti_ActivityGlobalAccess2  CUpti_ActivityGlobalAccess3  CUpti_ActivityBranch  CUpti_ActivityBranch2  CUpti_ActivityOverhead3  CUpti_ActivityEnvironment  CUpti_ActivityInstructionExecution  CUpti_ActivityUnifiedMemoryCounter  CUpti_ActivityFunction  CUpti_ActivityModule  CUpti_ActivitySharedAccess  CUpti_ActivityPCSampling  CUpti_ActivityPCSampling2  CUpti_ActivityPCSampling3  CUpti_ActivityPCSamplingRecordInfo  CUpti_ActivityCudaEvent  CUpti_ActivityStream  CUpti_ActivitySynchronization  CUpti_ActivityInstructionCorrelation  CUpti_ActivityExternalCorrelation  CUpti_ActivityUnifiedMemoryCounter2  CUpti_ActivityOpenAccData  CUpti_ActivityOpenAccLaunch  CUpti_ActivityOpenAccOther  CUpti_ActivityOpenMp  CUpti_ActivityNvLink  CUpti_ActivityNvLink2  CUpti_ActivityNvLink3  CUpti_ActivityNvLink4  CUpti_ActivityPcie  CUpti_ActivityConfidentialComputeRotation Values:", "keywords": []}, {"id": 462, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_BRANCH", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_BRANCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_BRANCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_BRANCH Results for source-level branch. The corresponding activity record structure is CUpti_ActivityBranch2 . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 463, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CDP_KERNEL", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CDP_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind30CUPTI_ACTIVITY_KIND_CDP_KERNELE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CDP_KERNEL A CDP (CUDA Dynamic Parallel) kernel executing on the GPU. The corresponding activity record structure is CUpti_ActivityCdpKernel . This activity can not be directly enabled or disabled. It is enabled and disabled through concurrent kernel activity i.e. _CONCURRENT_KERNEL.", "keywords": []}, {"id": 464, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind37CUPTI_ACTIVITY_KIND_CONCURRENT_KERNELE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL A kernel executing on the GPU. This activity kind doesn\u2019t break kernel concurrency. The corresponding activity record structure is CUpti_ActivityKernel9 .", "keywords": []}, {"id": 465, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CONTEXT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CONTEXT Information about a context. The corresponding activity record structure is CUpti_ActivityContext3 .", "keywords": []}, {"id": 466, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_COUNT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind25CUPTI_ACTIVITY_KIND_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_COUNT", "keywords": []}, {"id": 467, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CUDA_EVENT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_CUDA_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind30CUPTI_ACTIVITY_KIND_CUDA_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_CUDA_EVENT Information about a CUDA event. The corresponding activity record structure is CUpti_ActivityCudaEvent .", "keywords": []}, {"id": 468, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_DEVICE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_DEVICE Information about a device. The corresponding activity record structure is CUpti_ActivityDevice5 .", "keywords": []}, {"id": 469, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind36CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE A device attribute value. The corresponding activity record structure is CUpti_ActivityDeviceAttribute .", "keywords": []}, {"id": 470, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_DRIVER", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_DRIVER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_DRIVERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_DRIVER A CUDA driver API function execution. The corresponding activity record structure is CUpti_ActivityAPI .", "keywords": []}, {"id": 471, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_ENVIRONMENT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_ENVIRONMENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_ENVIRONMENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_ENVIRONMENT Environment activity records indicating power, clock, thermal, etc. levels of the GPU. The corresponding activity record structure is CUpti_ActivityEnvironment .", "keywords": []}, {"id": 472, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_EVENT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind25CUPTI_ACTIVITY_KIND_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_EVENT An event value. The corresponding activity record structure is CUpti_ActivityEvent .", "keywords": []}, {"id": 473, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_EVENT_INSTANCE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_EVENT_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind34CUPTI_ACTIVITY_KIND_EVENT_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_EVENT_INSTANCE An event value associated with a specific event domain instance. The corresponding activity record structure is CUpti_ActivityEventInstance .", "keywords": []}, {"id": 474, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind40CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION Records for correlation of different programming APIs. The corresponding activity record structure is CUpti_ActivityExternalCorrelation .", "keywords": []}, {"id": 475, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_FORCE_INT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind29CUPTI_ACTIVITY_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_FORCE_INT", "keywords": []}, {"id": 476, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_FUNCTION", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_FUNCTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind28CUPTI_ACTIVITY_KIND_FUNCTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_FUNCTION Device global/function record. The corresponding activity record structure is CUpti_ActivityFunction .", "keywords": []}, {"id": 477, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind33CUPTI_ACTIVITY_KIND_GLOBAL_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS Results for source-level global access. The corresponding activity record structure is CUpti_ActivityGlobalAccess3 . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 478, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_GRAPH_TRACE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_GRAPH_TRACE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_GRAPH_TRACEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_GRAPH_TRACE The corresponding activity record structure is CUpti_ActivityGraphTrace2 .", "keywords": []}, {"id": 479, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind39CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT Instantaneous Event information. The corresponding activity record structure is CUpti_ActivityInstantaneousEvent .", "keywords": []}, {"id": 480, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind48CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE Instantaneous Event information for a specific event domain instance. The corresponding activity record structure is CUpti_ActivityInstantaneousEventInstance", "keywords": []}, {"id": 481, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind40CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC Instantaneous Metric information The corresponding activity record structure is CUpti_ActivityInstantaneousMetric .", "keywords": []}, {"id": 482, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind49CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE Instantaneous Metric information for a specific metric domain instance. The corresponding activity record structure is CUpti_ActivityInstantaneousMetricInstance .", "keywords": []}, {"id": 483, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind43CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION SASS/Source line-by-line correlation record. This will generate sass/source correlation for functions that have source level analysis or pc sampling results. The records will be generated only when either of source level analysis or pc sampling activity is enabled. The corresponding activity record structure is CUpti_ActivityInstructionCorrelation . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 484, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind41CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION Results for source-level instruction execution. The corresponding activity record structure is CUpti_ActivityInstructionExecution . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 485, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind39CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_APIE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API A CUDA driver kernel launch occurring outside of any public API function execution. Tools can handle these like records for driver API launch functions, although the cbid field is not used here. The corresponding activity record structure is CUpti_ActivityAPI .", "keywords": []}, {"id": 486, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INVALID", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_INVALID The activity record is invalid.", "keywords": []}, {"id": 487, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_JIT", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_JIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind23CUPTI_ACTIVITY_KIND_JITE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_JIT JIT operation tracking The corresponding activity record structure is CUpti_ActivityJit .", "keywords": []}, {"id": 488, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_KERNEL", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_KERNELE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_KERNEL A kernel executing on the GPU. This activity kind may significantly change the overall performance characteristics of the application because all kernel executions are serialized on the GPU. Other activity kind for kernel CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL doesn\u2019t break kernel concurrency. The corresponding activity record structure is CUpti_ActivityKernel9 .", "keywords": []}, {"id": 489, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MARKER", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MARKER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MARKERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MARKER Instantaneous, start, or end NVTX marker. The corresponding activity record structure is CUpti_ActivityMarker2 .", "keywords": []}, {"id": 490, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MARKER_DATA", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MARKER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_MARKER_DATAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MARKER_DATA Extended, optional, data about a marker. User must enable CUPTI_ACTIVITY_KIND_MARKER as well to get records for marker data. The corresponding activity record structure is CUpti_ActivityMarkerData .", "keywords": []}, {"id": 491, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMCPY", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMCPY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MEMCPYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMCPY A host&lt;-&gt;host, host&lt;-&gt;device, or device&lt;-&gt;device memory copy. The corresponding activity record structure is CUpti_ActivityMemcpy5 .", "keywords": []}, {"id": 492, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMCPY2", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMCPY2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_MEMCPY2E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMCPY2 A peer to peer memory copy. The corresponding activity record structure is CUpti_ActivityMemcpyPtoP4 .", "keywords": []}, {"id": 493, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMORY", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMORY Memory activity tracking allocation and freeing of the memory The corresponding activity record structure is CUpti_ActivityMemory .", "keywords": []}, {"id": 494, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMORY2", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMORY2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_MEMORY2E", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMORY2 Memory activity tracking allocation and freeing of the memory The corresponding activity record structure is CUpti_ActivityMemory4 .", "keywords": []}, {"id": 495, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMORY_POOL", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMORY_POOL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_MEMORY_POOLE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMORY_POOL Memory pool activity tracking creation, destruction and trimming of the memory pool. The corresponding activity record structure is CUpti_ActivityMemoryPool2 .", "keywords": []}, {"id": 496, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMSET", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MEMSET", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MEMSETE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MEMSET A memory set executing on the GPU. The corresponding activity record structure is CUpti_ActivityMemset4 .", "keywords": []}, {"id": 497, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_METRIC", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_METRIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_METRICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_METRIC A metric value. The corresponding activity record structure is CUpti_ActivityMetric .", "keywords": []}, {"id": 498, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_METRIC_INSTANCE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_METRIC_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind35CUPTI_ACTIVITY_KIND_METRIC_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_METRIC_INSTANCE A metric value associated with a specific metric domain instance. The corresponding activity record structure is CUpti_ActivityMetricInstance .", "keywords": []}, {"id": 499, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MODULE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_MODULE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_MODULEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_MODULE CUDA Module record. The corresponding activity record structure is CUpti_ActivityModule .", "keywords": []}, {"id": 500, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_NAME", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind24CUPTI_ACTIVITY_KIND_NAMEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_NAME Resource naming done via NVTX APIs for thread, device, context, etc. The corresponding activity record structure is CUpti_ActivityName .", "keywords": []}, {"id": 501, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_NVLINK", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_NVLINK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_NVLINKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_NVLINK NVLink information. The corresponding activity record structure is CUpti_ActivityNvLink4 .", "keywords": []}, {"id": 502, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENACC_DATA", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENACC_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind32CUPTI_ACTIVITY_KIND_OPENACC_DATAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENACC_DATA OpenACC data events. The corresponding activity record structure is CUpti_ActivityOpenAccData .", "keywords": []}, {"id": 503, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind34CUPTI_ACTIVITY_KIND_OPENACC_LAUNCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH OpenACC launch events. The corresponding activity record structure is CUpti_ActivityOpenAccLaunch .", "keywords": []}, {"id": 504, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENACC_OTHER", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENACC_OTHER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind33CUPTI_ACTIVITY_KIND_OPENACC_OTHERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENACC_OTHER OpenACC other events. The corresponding activity record structure is CUpti_ActivityOpenAccOther .", "keywords": []}, {"id": 505, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENMP", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OPENMP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_OPENMPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OPENMP OpenMP parallel events. The corresponding activity record structure is CUpti_ActivityOpenMp .", "keywords": []}, {"id": 506, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OVERHEAD", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_OVERHEAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind28CUPTI_ACTIVITY_KIND_OVERHEADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_OVERHEAD Overhead activity records. The corresponding activity record structure is CUpti_ActivityOverhead3 .", "keywords": []}, {"id": 507, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PCIE", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PCIE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind24CUPTI_ACTIVITY_KIND_PCIEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PCIE PCI devices information used for PCI topology. The corresponding activity record structure is CUpti_ActivityPcie .", "keywords": []}, {"id": 508, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PC_SAMPLING", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PC_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind31CUPTI_ACTIVITY_KIND_PC_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PC_SAMPLING Enable PC sampling for kernels. This will serialize kernels. The corresponding activity record structure is CUpti_ActivityPCSampling3 . In CUDA 12.5, this kind is deprecated for Volta and later GPU architectures in favor of PC Sampling APIs from the header cupti_pcsampling.h .", "keywords": []}, {"id": 509, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind43CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFOE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO Summary information about PC sampling records. The corresponding activity record structure is CUpti_ActivityPCSamplingRecordInfo . In CUDA 12.5, this kind is deprecated for Volta and later GPU architectures in favor of PC Sampling APIs from the header cupti_pcsampling.h .", "keywords": []}, {"id": 510, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PREEMPTION", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_PREEMPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind30CUPTI_ACTIVITY_KIND_PREEMPTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_PREEMPTION Preemption activity record indicating a preemption of a CDP (CUDA Dynamic Parallel) kernel executing on the GPU. The corresponding activity record structure is CUpti_ActivityPreemption .", "keywords": []}, {"id": 511, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_RUNTIME", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_RUNTIME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind27CUPTI_ACTIVITY_KIND_RUNTIMEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_RUNTIME A CUDA runtime API function execution. The corresponding activity record structure is CUpti_ActivityAPI .", "keywords": []}, {"id": 512, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_SHARED_ACCESS", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_SHARED_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind33CUPTI_ACTIVITY_KIND_SHARED_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_SHARED_ACCESS Results for source-level shared access. The corresponding activity record structure is CUpti_ActivitySharedAccess . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 513, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind34CUPTI_ACTIVITY_KIND_SOURCE_LOCATORE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR Source information about source level result. The corresponding activity record structure is CUpti_ActivitySourceLocator . In CUDA 12.6, this kind is deprecated for Volta and later GPU architectures in favor of SASS Metric APIs from the header cupti_sass_metrics.h .", "keywords": []}, {"id": 514, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_STREAM", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_STREAM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind26CUPTI_ACTIVITY_KIND_STREAME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_STREAM Information about a CUDA stream. The corresponding activity record structure is CUpti_ActivityStream .", "keywords": []}, {"id": 515, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_SYNCHRONIZATION", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_SYNCHRONIZATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind35CUPTI_ACTIVITY_KIND_SYNCHRONIZATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_SYNCHRONIZATION Records for synchronization management. The corresponding activity record structure is CUpti_ActivitySynchronization .", "keywords": []}, {"id": 516, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "display_name": "CUpti_ActivityKind::CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N18CUpti_ActivityKind42CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER Unified Memory counter record. The corresponding activity record structure is CUpti_ActivityUnifiedMemoryCounter2 .", "keywords": []}, {"id": 517, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityLaunchType", "display_name": "CUpti_ActivityLaunchType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424CUpti_ActivityLaunchType", "priority": 1, "content": "enum  CUpti_ActivityLaunchType The type of the CUDA kernel launch. Values:", "keywords": []}, {"id": 518, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLIST", "display_name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLIST", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType42CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLISTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_CBL_COMMANDLIST The kernel was launched as a CBL commandlist.", "keywords": []}, {"id": 519, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICE", "display_name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType51CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_MULTI_DEVICE The kernel was launched via API cudaLaunchCooperativeKernelMultiDevice() or cuLaunchCooperativeKernelMultiDevice()", "keywords": []}, {"id": 520, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICE", "display_name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType52CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_COOPERATIVE_SINGLE_DEVICE The kernel was launched via API cudaLaunchCooperativeKernel() or cuLaunchCooperativeKernel()", "keywords": []}, {"id": 521, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_REGULAR", "display_name": "CUpti_ActivityLaunchType::CUPTI_ACTIVITY_LAUNCH_TYPE_REGULAR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityLaunchType34CUPTI_ACTIVITY_LAUNCH_TYPE_REGULARE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_LAUNCH_TYPE_REGULAR The kernel was launched via a regular kernel call.", "keywords": []}, {"id": 522, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind", "display_name": "CUpti_ActivityMemcpyKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424CUpti_ActivityMemcpyKind", "priority": 1, "content": "enum  CUpti_ActivityMemcpyKind The kind of a memory copy, indicating the source and destination targets of the copy. Each kind represents the source and destination targets of a memory copy. Targets are host, device, and array. Values:", "keywords": []}, {"id": 523, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_ATOA", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_ATOA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_ATOAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_ATOA A device array to device array memory copy.", "keywords": []}, {"id": 524, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_ATOD", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_ATOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_ATODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_ATOD A device array to device memory copy.", "keywords": []}, {"id": 525, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_ATOH", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_ATOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_ATOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_ATOH A device array to host memory copy.", "keywords": []}, {"id": 526, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_DTOA", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_DTOA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_DTOAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_DTOA A device to device array memory copy.", "keywords": []}, {"id": 527, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_DTOD", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_DTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_DTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_DTOD A device to device memory copy on the same device.", "keywords": []}, {"id": 528, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_DTOH", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_DTOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_DTOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_DTOH A device to host memory copy.", "keywords": []}, {"id": 529, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind36CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_FORCE_INT", "keywords": []}, {"id": 530, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_HTOA", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_HTOA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_HTOAE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_HTOA A host to device array memory copy.", "keywords": []}, {"id": 531, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_HTOD", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_HTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_HTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_HTOD A host to device memory copy.", "keywords": []}, {"id": 532, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_HTOH", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_HTOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_HTOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_HTOH A host to host memory copy.", "keywords": []}, {"id": 533, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_PTOP", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_PTOP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind31CUPTI_ACTIVITY_MEMCPY_KIND_PTOPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_PTOP A peer to peer memory copy across different devices.", "keywords": []}, {"id": 534, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWN", "display_name": "CUpti_ActivityMemcpyKind::CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemcpyKind34CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMCPY_KIND_UNKNOWN The memory copy kind is not known.", "keywords": []}, {"id": 535, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind", "display_name": "CUpti_ActivityMemoryKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424CUpti_ActivityMemoryKind", "priority": 1, "content": "enum  CUpti_ActivityMemoryKind The kinds of memory accessed by a memory operation/copy. Each kind represents the type of the memory accessed by a memory operation/copy. Values:", "keywords": []}, {"id": 536, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_ARRAY", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_ARRAY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind32CUPTI_ACTIVITY_MEMORY_KIND_ARRAYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_ARRAY The memory is an array.", "keywords": []}, {"id": 537, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_DEVICE", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind33CUPTI_ACTIVITY_MEMORY_KIND_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_DEVICE The memory is on the device.", "keywords": []}, {"id": 538, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATIC", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind40CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_DEVICE_STATIC The memory is device static.", "keywords": []}, {"id": 539, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INT", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind36CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_FORCE_INT", "keywords": []}, {"id": 540, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_MANAGED", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_MANAGED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind34CUPTI_ACTIVITY_MEMORY_KIND_MANAGEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_MANAGED The memory is managed.", "keywords": []}, {"id": 541, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATIC", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind41CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_MANAGED_STATIC The memory is managed static.", "keywords": []}, {"id": 542, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLE", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind35CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_PAGEABLE The memory is pageable.", "keywords": []}, {"id": 543, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_PINNED", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_PINNED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind33CUPTI_ACTIVITY_MEMORY_KIND_PINNEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_PINNED The memory is pinned.", "keywords": []}, {"id": 544, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWN", "display_name": "CUpti_ActivityMemoryKind::CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityMemoryKind34CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_KIND_UNKNOWN The memory kind is unknown.", "keywords": []}, {"id": 545, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryOperationType", "display_name": "CUpti_ActivityMemoryOperationType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433CUpti_ActivityMemoryOperationType", "priority": 1, "content": "enum  CUpti_ActivityMemoryOperationType Memory operation types. Describes the type of memory operation, to be used with CUpti_ActivityMemory4 . Values:", "keywords": []}, {"id": 546, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATION", "display_name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType47CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_ALLOCATION Memory is allocated.", "keywords": []}, {"id": 547, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INT", "display_name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType46CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_FORCE_INT", "keywords": []}, {"id": 548, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALID", "display_name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType44CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_INVALID The operation is invalid.", "keywords": []}, {"id": 549, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASE", "display_name": "CUpti_ActivityMemoryOperationType::CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivityMemoryOperationType44CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_OPERATION_TYPE_RELEASE Memory is released.", "keywords": []}, {"id": 550, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolOperationType", "display_name": "CUpti_ActivityMemoryPoolOperationType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv437CUpti_ActivityMemoryPoolOperationType", "priority": 1, "content": "enum  CUpti_ActivityMemoryPoolOperationType Memory pool operation types. Describes the type of memory pool operation, to be used with CUpti_ActivityMemoryPool2 . Values:", "keywords": []}, {"id": 551, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATED", "display_name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType49CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_CREATED Memory pool is created.", "keywords": []}, {"id": 552, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYED", "display_name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType51CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_DESTROYED Memory pool is destroyed.", "keywords": []}, {"id": 553, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INT", "display_name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType51CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_FORCE_INT", "keywords": []}, {"id": 554, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALID", "display_name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType49CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_INVALID The operation is invalid.", "keywords": []}, {"id": 555, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED", "display_name": "CUpti_ActivityMemoryPoolOperationType::CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityMemoryPoolOperationType49CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED Memory pool is trimmed.", "keywords": []}, {"id": 556, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolType", "display_name": "CUpti_ActivityMemoryPoolType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv428CUpti_ActivityMemoryPoolType", "priority": 1, "content": "enum  CUpti_ActivityMemoryPoolType Memory pool types. Describes the type of memory pool, to be used with CUpti_ActivityMemory4 . Values:", "keywords": []}, {"id": 557, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INT", "display_name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType41CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_FORCE_INT", "keywords": []}, {"id": 558, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED", "display_name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType40CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED Memory pool is imported by the process.", "keywords": []}, {"id": 559, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALID", "display_name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType39CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_INVALID The operation is invalid.", "keywords": []}, {"id": 560, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL", "display_name": "CUpti_ActivityMemoryPoolType::CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityMemoryPoolType37CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCALE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL Memory pool is local to the process.", "keywords": []}, {"id": 561, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind", "display_name": "CUpti_ActivityObjectKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424CUpti_ActivityObjectKind", "priority": 1, "content": "enum  CUpti_ActivityObjectKind The kinds of activity objects. CUpti_ActivityObjectKindId  Values:", "keywords": []}, {"id": 562, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_CONTEXT", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind29CUPTI_ACTIVITY_OBJECT_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_CONTEXT A context.", "keywords": []}, {"id": 563, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_DEVICE", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind28CUPTI_ACTIVITY_OBJECT_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_DEVICE A device.", "keywords": []}, {"id": 564, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_FORCE_INT", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind31CUPTI_ACTIVITY_OBJECT_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_FORCE_INT", "keywords": []}, {"id": 565, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_PROCESS", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_PROCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind29CUPTI_ACTIVITY_OBJECT_PROCESSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_PROCESS A process.", "keywords": []}, {"id": 566, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_STREAM", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_STREAM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind28CUPTI_ACTIVITY_OBJECT_STREAME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_STREAM A stream.", "keywords": []}, {"id": 567, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_THREAD", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_THREAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind28CUPTI_ACTIVITY_OBJECT_THREADE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_THREAD A thread.", "keywords": []}, {"id": 568, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_UNKNOWN", "display_name": "CUpti_ActivityObjectKind::CUPTI_ACTIVITY_OBJECT_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityObjectKind29CUPTI_ACTIVITY_OBJECT_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OBJECT_UNKNOWN The object kind is not known.", "keywords": []}, {"id": 569, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind", "display_name": "CUpti_ActivityOverheadKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426CUpti_ActivityOverheadKind", "priority": 1, "content": "enum  CUpti_ActivityOverheadKind The kinds of activity overhead. Values:", "keywords": []}, {"id": 570, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind47CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUESTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST Overhead due to activity buffer request.", "keywords": []}, {"id": 571, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind43CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULLE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL Overhead due to lack of command buffer space. Refer CUpti_ActivityOverheadCommandBufferFullData for more details.", "keywords": []}, {"id": 572, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind42CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH Activity buffer flush overhead.", "keywords": []}, {"id": 573, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind45CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION CUPTI instrumentation overhead.", "keywords": []}, {"id": 574, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind38CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE CUPTI resource creation and destruction overhead.", "keywords": []}, {"id": 575, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILER", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind39CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_DRIVER_COMPILER Compiler overhead.", "keywords": []}, {"id": 576, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_FORCE_INT", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind33CUPTI_ACTIVITY_OVERHEAD_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_FORCE_INT", "keywords": []}, {"id": 577, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind45CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING Lazy function loading overhead.", "keywords": []}, {"id": 578, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind56CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING CUDA Runtime triggered module loading overhead.", "keywords": []}, {"id": 579, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_UNKNOWN", "display_name": "CUpti_ActivityOverheadKind::CUPTI_ACTIVITY_OVERHEAD_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityOverheadKind31CUPTI_ACTIVITY_OVERHEAD_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_OVERHEAD_UNKNOWN The overhead kind is not known.", "keywords": []}, {"id": 580, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod", "display_name": "CUpti_ActivityPCSamplingPeriod", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430CUpti_ActivityPCSamplingPeriod", "priority": 1, "content": "enum  CUpti_ActivityPCSamplingPeriod Sampling period for PC sampling method. Sampling period can be set using cuptiActivityConfigurePCSampling  Values:", "keywords": []}, {"id": 581, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod43CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_FORCE_INT", "keywords": []}, {"id": 582, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod38CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_HIGH Sampling period in higher range.", "keywords": []}, {"id": 583, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod41CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_INVALID The PC sampling period is not set.", "keywords": []}, {"id": 584, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOWE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_LOW Sampling period in lower range.", "keywords": []}, {"id": 585, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAXE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MAX Maximum sampling period available on the device.", "keywords": []}, {"id": 586, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MID Medium sampling period.", "keywords": []}, {"id": 587, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN", "display_name": "CUpti_ActivityPCSamplingPeriod::CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingPeriod37CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MINE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_PERIOD_MIN Minimum sampling period available on the device.", "keywords": []}, {"id": 588, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason", "display_name": "CUpti_ActivityPCSamplingStallReason", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv435CUpti_ActivityPCSamplingStallReason", "priority": 1, "content": "enum  CUpti_ActivityPCSamplingStallReason The stall reason for PC sampling activity. Values:", "keywords": []}, {"id": 589, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCY", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason59CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_CONSTANT_MEMORY_DEPENDENCY Warp is blocked waiting for constant memory and immediate memory access to complete.", "keywords": []}, {"id": 590, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCY", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason48CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_EXEC_DEPENDENCY Instruction is waiting on an arithmetic dependency.", "keywords": []}, {"id": 591, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason42CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_FORCE_INT", "keywords": []}, {"id": 592, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCH", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason43CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_INST_FETCH Warp is blocked because next instruction is not yet available, because of instruction cache miss, or because of branching effects.", "keywords": []}, {"id": 593, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALID", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason40CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_INVALID Invalid reason.", "keywords": []}, {"id": 594, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCY", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason50CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_DEPENDENCY Warp is blocked because it is waiting for a memory access to complete.", "keywords": []}, {"id": 595, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLE", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason48CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_MEMORY_THROTTLE Warp is blocked because there are too many pending memory operations. In Kepler architecture it often indicates high number of memory replays.", "keywords": []}, {"id": 596, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONE", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason37CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_NONE No stall, instruction is selected for issue.", "keywords": []}, {"id": 597, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason45CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED Warp was ready to issue, but some other warp issued instead.", "keywords": []}, {"id": 598, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHER", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason38CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_OTHER Miscellaneous reasons.", "keywords": []}, {"id": 599, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSY", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason42CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_PIPE_BUSY Compute operation cannot be performed due to the required resources not being available.", "keywords": []}, {"id": 600, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason41CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_SLEEPING Sleeping.", "keywords": []}, {"id": 601, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNC", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason37CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNCE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_SYNC Warp is blocked as it is waiting at __syncthreads() or at memory barrier.", "keywords": []}, {"id": 602, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURE", "display_name": "CUpti_ActivityPCSamplingStallReason::CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N35CUpti_ActivityPCSamplingStallReason40CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTUREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PC_SAMPLING_STALL_TEXTURE Texture sub-system is fully utilized or has too many outstanding requests.", "keywords": []}, {"id": 603, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPartitionedGlobalCacheConfig", "display_name": "CUpti_ActivityPartitionedGlobalCacheConfig", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv442CUpti_ActivityPartitionedGlobalCacheConfig", "priority": 1, "content": "enum  CUpti_ActivityPartitionedGlobalCacheConfig Partitioned global caching option. Values:", "keywords": []}, {"id": 604, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INT", "display_name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig56CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_FORCE_INT", "keywords": []}, {"id": 605, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTED", "display_name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig60CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_NOT_SUPPORTED Partitioned global cache not supported.", "keywords": []}, {"id": 606, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFF", "display_name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFF", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig50CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFFE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_OFF Partitioned global cache config off.", "keywords": []}, {"id": 607, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ON", "display_name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ON", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig49CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_ON Partitioned global cache config on.", "keywords": []}, {"id": 608, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWN", "display_name": "CUpti_ActivityPartitionedGlobalCacheConfig::CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N42CUpti_ActivityPartitionedGlobalCacheConfig54CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PARTITIONED_GLOBAL_CACHE_CONFIG_UNKNOWN Partitioned global cache config unknown.", "keywords": []}, {"id": 609, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemptionKind", "display_name": "CUpti_ActivityPreemptionKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv428CUpti_ActivityPreemptionKind", "priority": 1, "content": "enum  CUpti_ActivityPreemptionKind The kind of a preemption activity. Values:", "keywords": []}, {"id": 610, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INT", "display_name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind40CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_FORCE_INT", "keywords": []}, {"id": 611, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_RESTORE", "display_name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_RESTORE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind38CUPTI_ACTIVITY_PREEMPTION_KIND_RESTOREE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_RESTORE Preemption to restore CDP block.", "keywords": []}, {"id": 612, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_SAVE", "display_name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_SAVE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind35CUPTI_ACTIVITY_PREEMPTION_KIND_SAVEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_SAVE Preemption to save CDP block.", "keywords": []}, {"id": 613, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWN", "display_name": "CUpti_ActivityPreemptionKind::CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N28CUpti_ActivityPreemptionKind38CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_PREEMPTION_KIND_UNKNOWN The preemption kind is not known.", "keywords": []}, {"id": 614, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag", "display_name": "CUpti_ActivityStreamFlag", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424CUpti_ActivityStreamFlag", "priority": 1, "content": "enum  CUpti_ActivityStreamFlag stream type. The types of stream to be used with CUpti_ActivityStream . Values:", "keywords": []}, {"id": 615, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULT", "display_name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag41CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_DEFAULT Default stream.", "keywords": []}, {"id": 616, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INT", "display_name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag43CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_FORCE_INT", "keywords": []}, {"id": 617, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKING", "display_name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag46CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NON_BLOCKING Non-blocking stream.", "keywords": []}, {"id": 618, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULL", "display_name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag38CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULLE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_NULL Null stream.", "keywords": []}, {"id": 619, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWN", "display_name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag41CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_FLAG_UNKNOWN Unknown data.", "keywords": []}, {"id": 620, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_MASK", "display_name": "CUpti_ActivityStreamFlag::CUPTI_ACTIVITY_STREAM_CREATE_MASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N24CUpti_ActivityStreamFlag33CUPTI_ACTIVITY_STREAM_CREATE_MASKE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_STREAM_CREATE_MASK Stream create Mask.", "keywords": []}, {"id": 621, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType", "display_name": "CUpti_ActivitySynchronizationType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433CUpti_ActivitySynchronizationType", "priority": 1, "content": "enum  CUpti_ActivitySynchronizationType Synchronization type. The types of synchronization to be used with CUpti_ActivitySynchronization . Values:", "keywords": []}, {"id": 622, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZE", "display_name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType55CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_CONTEXT_SYNCHRONIZE Context synchronize API.", "keywords": []}, {"id": 623, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZE", "display_name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType53CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_EVENT_SYNCHRONIZE Event synchronize API.", "keywords": []}, {"id": 624, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INT", "display_name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType45CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_FORCE_INT", "keywords": []}, {"id": 625, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZE", "display_name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType54CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_SYNCHRONIZE Stream synchronize API.", "keywords": []}, {"id": 626, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENT", "display_name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType53CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_STREAM_WAIT_EVENT Stream wait event API.", "keywords": []}, {"id": 627, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWN", "display_name": "CUpti_ActivitySynchronizationType::CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N33CUpti_ActivitySynchronizationType43CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_SYNCHRONIZATION_TYPE_UNKNOWN Unknown data.", "keywords": []}, {"id": 628, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityThreadIdType", "display_name": "CUpti_ActivityThreadIdType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426CUpti_ActivityThreadIdType", "priority": 1, "content": "enum  CUpti_ActivityThreadIdType Thread-Id types. CUPTI uses different methods to obtain the thread-id depending on the support and the underlying platform. This enum documents these methods for each type. APIs cuptiSetThreadIdType and cuptiGetThreadIdType can be used to set and get the thread-id type. Values:", "keywords": []}, {"id": 629, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT", "display_name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType37CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_DEFAULT Default type Windows uses API GetCurrentThreadId() Linux/Mac/Android/QNX use POSIX pthread API pthread_self()", "keywords": []}, {"id": 630, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT", "display_name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType39CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_FORCE_INT", "keywords": []}, {"id": 631, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE", "display_name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType34CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_SIZE Add new enums before this field.", "keywords": []}, {"id": 632, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM", "display_name": "CUpti_ActivityThreadIdType::CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_ActivityThreadIdType36CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEME", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_THREAD_ID_TYPE_SYSTEM This type is based on the system API available on the underlying platform and thread-id obtained is supposed to be unique for the process lifetime. Windows uses API GetCurrentThreadId() Linux uses syscall SYS_gettid Mac uses syscall SYS_thread_selfid Android/QNX use gettid()", "keywords": []}, {"id": 633, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryAccessType", "display_name": "CUpti_ActivityUnifiedMemoryAccessType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv437CUpti_ActivityUnifiedMemoryAccessType", "priority": 1, "content": "enum  CUpti_ActivityUnifiedMemoryAccessType Memory access type for unified memory page faults. This is valid for CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT and CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT  Values:", "keywords": []}, {"id": 634, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMIC", "display_name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType48CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_ATOMIC The page fault was triggered by atomic memory instruction.", "keywords": []}, {"id": 635, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH", "display_name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType50CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_PREFETCH The page fault was triggered by memory prefetch operation.", "keywords": []}, {"id": 636, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READ", "display_name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READ", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType46CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_READ The page fault was triggered by read memory instruction.", "keywords": []}, {"id": 637, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWN", "display_name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType49CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_UNKNOWN The unified memory access type is not known.", "keywords": []}, {"id": 638, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITE", "display_name": "CUpti_ActivityUnifiedMemoryAccessType::CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_ActivityUnifiedMemoryAccessType47CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_ACCESS_TYPE_WRITE The page fault was triggered by write memory instruction.", "keywords": []}, {"id": 639, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv438CUpti_ActivityUnifiedMemoryCounterKind", "priority": 1, "content": "enum  CUpti_ActivityUnifiedMemoryCounterKind Kind of the Unified Memory counter. Many activities are associated with Unified Memory mechanism; among them are transfers from host to device, device to host, page fault at host side. Values:", "keywords": []}, {"id": 640, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind62CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOD Number of bytes transferred from one device to another device. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 641, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind62CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH Number of bytes transferred from device to host.", "keywords": []}, {"id": 642, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind62CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTODE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD Number of bytes transferred from host to device.", "keywords": []}, {"id": 643, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind48CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_COUNT", "keywords": []}, {"id": 644, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind63CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT Number of CPU page faults, this is only supported on 64 bit Linux and Mac platforms.", "keywords": []}, {"id": 645, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind52CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_FORCE_INT", "keywords": []}, {"id": 646, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind57CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT Number of GPU page faults, this is only supported on devices with compute capability 6.0 and higher and 64 bit Linux platforms.", "keywords": []}, {"id": 647, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind53CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAPE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP In case throttling does not help, the driver tries to pin the memory to a processor for a specific period of time. One of the contending processors will have slow access to the memory, while the other will have fast access. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 648, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind52CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING Thrashing occurs when data is frequently accessed by multiple processors and has to be constantly migrated around to achieve data locality. In this case the overhead of migration may exceed the benefits of locality. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 649, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind53CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING Throttling is a prevention technique used by the driver to avoid further thrashing. Here, the driver doesn\u2019t service the fault for one of the contending processors for a specific period of time, so that the other processor can run at full-speed. This is only supported on 64 bit Linux platforms.", "keywords": []}, {"id": 650, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN", "display_name": "CUpti_ActivityUnifiedMemoryCounterKind::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N38CUpti_ActivityUnifiedMemoryCounterKind50CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_UNKNOWN The unified memory counter kind is not known.", "keywords": []}, {"id": 651, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterScope", "display_name": "CUpti_ActivityUnifiedMemoryCounterScope", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv439CUpti_ActivityUnifiedMemoryCounterScope", "priority": 1, "content": "enum  CUpti_ActivityUnifiedMemoryCounterScope Scope of the unified memory counter (deprecated in CUDA 7.0) Values:", "keywords": []}, {"id": 652, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT", "display_name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope49CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_COUNT", "keywords": []}, {"id": 653, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT", "display_name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope53CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_FORCE_INT", "keywords": []}, {"id": 654, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES", "display_name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope63CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICESE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_ALL_DEVICES Collect unified memory counter for single process across all devices.", "keywords": []}, {"id": 655, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE", "display_name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope65CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_PROCESS_SINGLE_DEVICE Collect unified memory counter for single process on one device.", "keywords": []}, {"id": 656, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN", "display_name": "CUpti_ActivityUnifiedMemoryCounterScope::CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N39CUpti_ActivityUnifiedMemoryCounterScope51CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_SCOPE_UNKNOWN The unified memory counter scope is not known.", "keywords": []}, {"id": 657, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv441CUpti_ActivityUnifiedMemoryMigrationCause", "priority": 1, "content": "enum  CUpti_ActivityUnifiedMemoryMigrationCause Migration cause of the Unified Memory counter. This is valid for CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD and CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH  Values:", "keywords": []}, {"id": 658, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERS", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause61CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERSE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_ACCESS_COUNTERS The unified memory migrated to another processor because of access counter notifications. Only frequently accessed pages are migrated between CPU and GPU, or between peer GPUs.", "keywords": []}, {"id": 659, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCE", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause55CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_COHERENCE The unified memory migrated to guarantee data coherence e.g. CPU/GPU faults on Pascal+ and kernel launch on pre-Pascal GPUs", "keywords": []}, {"id": 660, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTION", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause54CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_EVICTION The unified memory migrated to the CPU because it was evicted to make room for another block of memory on the GPU.", "keywords": []}, {"id": 661, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCH", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause54CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCHE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_PREFETCH The unified memory was speculatively migrated by the UVM driver before being accessed by the destination processor to improve performance.", "keywords": []}, {"id": 662, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWN", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause53CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_UNKNOWN The unified memory migration cause is not known.", "keywords": []}, {"id": 663, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USER", "display_name": "CUpti_ActivityUnifiedMemoryMigrationCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryMigrationCause50CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USERE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_MIGRATION_CAUSE_USER The unified memory migrated due to an explicit call from the user e.g. cudaMemPrefetchAsync", "keywords": []}, {"id": 664, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv441CUpti_ActivityUnifiedMemoryRemoteMapCause", "priority": 1, "content": "enum  CUpti_ActivityUnifiedMemoryRemoteMapCause Remote memory map cause of the Unified Memory counter. This is valid for CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP  Values:", "keywords": []}, {"id": 665, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCE", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause56CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCEE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_COHERENCE Mapping to remote memory was added to maintain data coherence.", "keywords": []}, {"id": 666, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTION", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause55CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTIONE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_EVICTION Mapping to remote memory was added after the memory was evicted to make room for another block of memory on the GPU.", "keywords": []}, {"id": 667, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORY", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause60CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_OUT_OF_MEMORY Mapping to remote memory was added because there is no more memory available on the processor and eviction was not possible.", "keywords": []}, {"id": 668, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICY", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause53CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICYE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_POLICY Mapping to remote memory was added to enforce the hints specified by the programmer or by performance heuristics of the UVM driver.", "keywords": []}, {"id": 669, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHING", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause56CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHINGE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_THRASHING Mapping to remote memory was added to prevent further thrashing.", "keywords": []}, {"id": 670, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWN", "display_name": "CUpti_ActivityUnifiedMemoryRemoteMapCause::CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N41CUpti_ActivityUnifiedMemoryRemoteMapCause54CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ACTIVITY_UNIFIED_MEMORY_REMOTE_MAP_CAUSE_UNKNOWN The cause of mapping to remote memory was unknown.", "keywords": []}, {"id": 671, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_BuffersCallbackCompleteFunc", "display_name": "CUpti_BuffersCallbackCompleteFunc", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433CUpti_BuffersCallbackCompleteFunc", "priority": 1, "content": "typedef  void  ( * CUpti_BuffersCallbackCompleteFunc ) ( CUcontext  context ,  uint32_t  streamId ,  uint8_t  * buffer ,  size_t  size ,  size_t  validSize ) Function type for callback used by CUPTI to return a buffer of activity records. This callback function returns to the CUPTI client a buffer containing activity records. The buffer contains validSize bytes of activity records which should be read using cuptiActivityGetNextRecord. The number of dropped records can be read using cuptiActivityGetNumDroppedRecords. After this call CUPTI relinquished ownership of the buffer and will not use it anymore. The client may return the buffer to CUPTI using the CUpti_BuffersCallbackRequestFunc callback. Note: CUDA 6.0 onwards, all buffers returned by this callback are global buffers i.e. there is no context/stream specific buffer. User needs to parse the global buffer to extract the context/stream specific activity records. Param context The context this buffer is associated with. If NULL, the buffer is associated with the global activities. This field is deprecated as of CUDA 6.0 and will always be NULL. Param streamId The stream id this buffer is associated with. This field is deprecated as of CUDA 6.0 and will always be NULL. Param buffer The activity record buffer. Param size The total size of the buffer in bytes as set in CUpti_BuffersCallbackRequestFunc. Param validSize The number of valid bytes in the buffer.", "keywords": []}, {"id": 672, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_BuffersCallbackRequestFunc", "display_name": "CUpti_BuffersCallbackRequestFunc", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv432CUpti_BuffersCallbackRequestFunc", "priority": 1, "content": "typedef  void  ( * CUpti_BuffersCallbackRequestFunc ) ( uint8_t  * * buffer ,  size_t  * size ,  size_t  * maxNumRecords ) Function type for callback used by CUPTI to request an empty buffer for storing activity records. This callback function signals the CUPTI client that an activity buffer is needed by CUPTI. The activity buffer is used by CUPTI to store activity records. The callback function can decline the request by setting *buffer to NULL. In this case CUPTI may drop activity records. Param buffer Returns the new buffer. If set to NULL then no buffer is returned. Param size Returns the size of the returned buffer. Param maxNumRecords Returns the maximum number of records that should be placed in the buffer. If 0 then the buffer is filled with as many records as possible. If &gt; 0 the buffer is filled with at most that many records before it is returned.", "keywords": []}, {"id": 673, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ChannelType", "display_name": "CUpti_ChannelType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417CUpti_ChannelType", "priority": 1, "content": "enum  CUpti_ChannelType Values:", "keywords": []}, {"id": 674, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY", "display_name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType31CUPTI_CHANNEL_TYPE_ASYNC_MEMCPYE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_ASYNC_MEMCPY Channel is used by an asynchronous copy engine For confidential compute configurations, work launch and completion are done using the copy engines.", "keywords": []}, {"id": 675, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_COMPUTE", "display_name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_COMPUTE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType26CUPTI_CHANNEL_TYPE_COMPUTEE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_COMPUTE Channel is used for standard work launch and tracking.", "keywords": []}, {"id": 676, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_FORCE_INT", "display_name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType28CUPTI_CHANNEL_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_FORCE_INT", "keywords": []}, {"id": 677, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_INVALID", "display_name": "CUpti_ChannelType::CUPTI_CHANNEL_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N17CUpti_ChannelType26CUPTI_CHANNEL_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CHANNEL_TYPE_INVALID", "keywords": []}, {"id": 678, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ContextCigMode", "display_name": "CUpti_ContextCigMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420CUpti_ContextCigMode", "priority": 1, "content": "enum  CUpti_ContextCigMode CIG (CUDA in Graphics) Modes. Describes the CIG modes associated with the CUDA context. Values:", "keywords": []}, {"id": 679, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_CIG", "display_name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_CIG", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode26CUPTI_CONTEXT_CIG_MODE_CIGE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_CIG CIG mode.", "keywords": []}, {"id": 680, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACK", "display_name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode35CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACKE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_CIG_FALLBACK CIG fallback mode.", "keywords": []}, {"id": 681, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_FORCE_INT", "display_name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode32CUPTI_CONTEXT_CIG_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_FORCE_INT", "keywords": []}, {"id": 682, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_NONE", "display_name": "CUpti_ContextCigMode::CUPTI_CONTEXT_CIG_MODE_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_ContextCigMode27CUPTI_CONTEXT_CIG_MODE_NONEE", "priority": 1, "content": "enumerator  CUPTI_CONTEXT_CIG_MODE_NONE Regular (non-CIG) mode.", "keywords": []}, {"id": 683, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DevType", "display_name": "CUpti_DevType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv413CUpti_DevType", "priority": 1, "content": "enum  CUpti_DevType The device type for device connected to NVLink. Values:", "keywords": []}, {"id": 684, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DevType::CUPTI_DEV_TYPE_FORCE_INT", "display_name": "CUpti_DevType::CUPTI_DEV_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType24CUPTI_DEV_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_FORCE_INT", "keywords": []}, {"id": 685, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DevType::CUPTI_DEV_TYPE_GPU", "display_name": "CUpti_DevType::CUPTI_DEV_TYPE_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType18CUPTI_DEV_TYPE_GPUE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_GPU The device type is GPU.", "keywords": []}, {"id": 686, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DevType::CUPTI_DEV_TYPE_INVALID", "display_name": "CUpti_DevType::CUPTI_DEV_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType22CUPTI_DEV_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_INVALID", "keywords": []}, {"id": 687, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DevType::CUPTI_DEV_TYPE_NPU", "display_name": "CUpti_DevType::CUPTI_DEV_TYPE_NPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_DevType18CUPTI_DEV_TYPE_NPUE", "priority": 1, "content": "enumerator  CUPTI_DEV_TYPE_NPU The device type is NVLink processing unit in CPU.", "keywords": []}, {"id": 688, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceVirtualizationMode", "display_name": "CUpti_DeviceVirtualizationMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430CUpti_DeviceVirtualizationMode", "priority": 1, "content": "enum  CUpti_DeviceVirtualizationMode This indicates the virtualization mode in which CUDA device is running. Values:", "keywords": []}, {"id": 689, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT", "display_name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode42CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_FORCE_INT", "keywords": []}, {"id": 690, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE", "display_name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode37CUPTI_DEVICE_VIRTUALIZATION_MODE_NONEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_NONE No virtualization mode is associated with the device i.e. it\u2019s a baremetal GPU", "keywords": []}, {"id": 691, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH", "display_name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode45CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGHE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_PASS_THROUGH The device is associated with the pass-through GPU. In this mode, an entire physical GPU is directly assigned to one virtual machine (VM).", "keywords": []}, {"id": 692, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU", "display_name": "CUpti_DeviceVirtualizationMode::CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N30CUpti_DeviceVirtualizationMode44CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPUE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_VIRTUALIZATION_MODE_VIRTUAL_GPU The device is associated with the virtual GPU (vGPU). In this mode multiple virtual machines (VMs) have simultaneous, direct access to a single physical GPU.", "keywords": []}, {"id": 693, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason", "display_name": "CUpti_EnvironmentClocksThrottleReason", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv437CUpti_EnvironmentClocksThrottleReason", "priority": 1, "content": "enum  CUpti_EnvironmentClocksThrottleReason Reasons for clock throttling. The possible reasons that a clock can be throttled. There can be more than one reason that a clock is being throttled so these types can be combined by bitwise OR. These are used in the clocksThrottleReason field in the Environment Activity Record. Values:", "keywords": []}, {"id": 694, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason38CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_FORCE_INT", "keywords": []}, {"id": 695, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason37CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLEE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_GPU_IDLE Nothing is running on the GPU and the clocks are dropping to idle state.", "keywords": []}, {"id": 696, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason40CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWNE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_HW_SLOWDOWN Hardware slowdown to reduce the clock by a factor of two or more is engaged. This is an indicator of one of the following: 1) Temperature is too high, 2) External power brake assertion is being triggered (e.g. by the system power supply), 3) Change in power state.", "keywords": []}, {"id": 697, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_NONE", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason33CUPTI_CLOCKS_THROTTLE_REASON_NONEE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_NONE No clock throttling.", "keywords": []}, {"id": 698, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason41CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAPE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_SW_POWER_CAP A software power scaling algorithm is reducing the clocks below requested clocks.", "keywords": []}, {"id": 699, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason36CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_UNKNOWN Some unspecified factor is reducing the clocks.", "keywords": []}, {"id": 700, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason40CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_UNSUPPORTED Throttle reason is not supported for this GPU.", "keywords": []}, {"id": 701, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS", "display_name": "CUpti_EnvironmentClocksThrottleReason::CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N37CUpti_EnvironmentClocksThrottleReason48CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKSE", "priority": 1, "content": "enumerator  CUPTI_CLOCKS_THROTTLE_REASON_USER_DEFINED_CLOCKS The GPU clocks are limited by a user specified limit.", "keywords": []}, {"id": 702, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind", "display_name": "CUpti_ExternalCorrelationKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429CUpti_ExternalCorrelationKind", "priority": 1, "content": "enum  CUpti_ExternalCorrelationKind The kind of external APIs supported for correlation. Custom correlation kinds are reserved for usage in external tools. CUpti_ActivityExternalCorrelation  Values:", "keywords": []}, {"id": 703, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0E", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM0 The external API is custom0.", "keywords": []}, {"id": 704, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1E", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM1 The external API is custom1.", "keywords": []}, {"id": 705, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2E", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_CUSTOM2 The external API is custom2.", "keywords": []}, {"id": 706, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind41CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_FORCE_INT", "keywords": []}, {"id": 707, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_INVALID", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_INVALID", "keywords": []}, {"id": 708, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_OPENACCE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC The external API is OpenACC.", "keywords": []}, {"id": 709, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_SIZE", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind36CUPTI_EXTERNAL_CORRELATION_KIND_SIZEE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_SIZE Add new kinds before this line.", "keywords": []}, {"id": 710, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN", "display_name": "CUpti_ExternalCorrelationKind::CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N29CUpti_ExternalCorrelationKind39CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_EXTERNAL_CORRELATION_KIND_UNKNOWN The external API is unknown to CUPTI.", "keywords": []}, {"id": 711, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_FuncShmemLimitConfig", "display_name": "CUpti_FuncShmemLimitConfig", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426CUpti_FuncShmemLimitConfig", "priority": 1, "content": "enum  CUpti_FuncShmemLimitConfig The shared memory limit per block config for a kernel This should be used to set \u2018cudaOccFuncShmemConfig\u2019 field in occupancy calculator API. Values:", "keywords": []}, {"id": 712, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_FuncShmemLimitConfig::CUPTI_FUNC_SHMEM_LIMIT_DEFAULT", "display_name": "CUpti_FuncShmemLimitConfig::CUPTI_FUNC_SHMEM_LIMIT_DEFAULT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_FuncShmemLimitConfig30CUPTI_FUNC_SHMEM_LIMIT_DEFAULTE", "priority": 1, "content": "enumerator  CUPTI_FUNC_SHMEM_LIMIT_DEFAULT The shared memory limit config is default.", "keywords": []}, {"id": 713, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_FuncShmemLimitConfig::CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT", "display_name": "CUpti_FuncShmemLimitConfig::CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_FuncShmemLimitConfig32CUPTI_FUNC_SHMEM_LIMIT_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_FUNC_SHMEM_LIMIT_FORCE_INT", "keywords": []}, {"id": 714, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_FuncShmemLimitConfig::CUPTI_FUNC_SHMEM_LIMIT_OPTIN", "display_name": "CUpti_FuncShmemLimitConfig::CUPTI_FUNC_SHMEM_LIMIT_OPTIN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_FuncShmemLimitConfig28CUPTI_FUNC_SHMEM_LIMIT_OPTINE", "priority": 1, "content": "enumerator  CUPTI_FUNC_SHMEM_LIMIT_OPTIN User has opted for a higher dynamic shared memory limit using function attribute \u2018cudaFuncAttributeMaxDynamicSharedMemorySize\u2019 for runtime API or CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES for driver API.", "keywords": []}, {"id": 715, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag", "display_name": "CUpti_LinkFlag", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv414CUpti_LinkFlag", "priority": 1, "content": "enum  CUpti_LinkFlag Link flags. Describes link properties, to be used with CUpti_ActivityNvLink . Values:", "keywords": []}, {"id": 716, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_FORCE_INT", "display_name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag25CUPTI_LINK_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_FORCE_INT", "keywords": []}, {"id": 717, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_INVALID", "display_name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag23CUPTI_LINK_FLAG_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_INVALID The flag is invalid.", "keywords": []}, {"id": 718, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_PEER_ACCESS", "display_name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_PEER_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag27CUPTI_LINK_FLAG_PEER_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_PEER_ACCESS Is peer to peer access supported by this link.", "keywords": []}, {"id": 719, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_PEER_ATOMICS", "display_name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_PEER_ATOMICS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag28CUPTI_LINK_FLAG_PEER_ATOMICSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_PEER_ATOMICS Is peer atomic access supported by this link.", "keywords": []}, {"id": 720, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_SYSMEM_ACCESS", "display_name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_SYSMEM_ACCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag29CUPTI_LINK_FLAG_SYSMEM_ACCESSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_SYSMEM_ACCESS Is system memory access supported by this link.", "keywords": []}, {"id": 721, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_SYSMEM_ATOMICS", "display_name": "CUpti_LinkFlag::CUPTI_LINK_FLAG_SYSMEM_ATOMICS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N14CUpti_LinkFlag30CUPTI_LINK_FLAG_SYSMEM_ATOMICSE", "priority": 1, "content": "enumerator  CUPTI_LINK_FLAG_SYSMEM_ATOMICS Is system memory atomic access supported by this link.", "keywords": []}, {"id": 722, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind", "display_name": "CUpti_OpenAccConstructKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426CUpti_OpenAccConstructKind", "priority": 1, "content": "enum  CUpti_OpenAccConstructKind The OpenAcc parent construct kind for OpenAcc activity records. Values:", "keywords": []}, {"id": 723, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind35CUPTI_OPENACC_CONSTRUCT_KIND_ATOMICE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_ATOMIC", "keywords": []}, {"id": 724, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_DATA", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_DATA", "keywords": []}, {"id": 725, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_DECLAREE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_DECLARE", "keywords": []}, {"id": 726, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind39CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_ENTER_DATA", "keywords": []}, {"id": 727, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind38CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_EXIT_DATA", "keywords": []}, {"id": 728, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind38CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_FORCE_INT", "keywords": []}, {"id": 729, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind38CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_HOST_DATA", "keywords": []}, {"id": 730, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_INIT", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_INIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_INITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_INIT", "keywords": []}, {"id": 731, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_KERNELSE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_KERNELS", "keywords": []}, {"id": 732, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_LOOP", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_LOOP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_LOOPE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_LOOP", "keywords": []}, {"id": 733, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind37CUPTI_OPENACC_CONSTRUCT_KIND_PARALLELE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_PARALLEL", "keywords": []}, {"id": 734, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_ROUTINE", "keywords": []}, {"id": 735, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind40CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_APIE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_RUNTIME_API", "keywords": []}, {"id": 736, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_SET", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_SET", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind32CUPTI_OPENACC_CONSTRUCT_KIND_SETE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_SET", "keywords": []}, {"id": 737, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind37CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_SHUTDOWN", "keywords": []}, {"id": 738, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind36CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN", "keywords": []}, {"id": 739, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind35CUPTI_OPENACC_CONSTRUCT_KIND_UPDATEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_UPDATE", "keywords": []}, {"id": 740, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_WAIT", "display_name": "CUpti_OpenAccConstructKind::CUPTI_OPENACC_CONSTRUCT_KIND_WAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N26CUpti_OpenAccConstructKind33CUPTI_OPENACC_CONSTRUCT_KIND_WAITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_CONSTRUCT_KIND_WAIT", "keywords": []}, {"id": 741, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind", "display_name": "CUpti_OpenAccEventKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv422CUpti_OpenAccEventKind", "priority": 1, "content": "enum  CUpti_OpenAccEventKind The OpenAcc event kind for OpenAcc activity records. CUpti_ActivityKindOpenAcc Values:", "keywords": []}, {"id": 742, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ALLOC", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ALLOC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind30CUPTI_OPENACC_EVENT_KIND_ALLOCE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ALLOC", "keywords": []}, {"id": 743, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind42CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCTE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_COMPUTE_CONSTRUCT", "keywords": []}, {"id": 744, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_CREATE", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_CREATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind31CUPTI_OPENACC_EVENT_KIND_CREATEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_CREATE", "keywords": []}, {"id": 745, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_DELETE", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_DELETE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind31CUPTI_OPENACC_EVENT_KIND_DELETEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_DELETE", "keywords": []}, {"id": 746, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind36CUPTI_OPENACC_EVENT_KIND_DEVICE_INITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_DEVICE_INIT", "keywords": []}, {"id": 747, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind40CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_DEVICE_SHUTDOWN", "keywords": []}, {"id": 748, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind41CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOADE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENQUEUE_DOWNLOAD", "keywords": []}, {"id": 749, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind39CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCHE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENQUEUE_LAUNCH", "keywords": []}, {"id": 750, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind39CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOADE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENQUEUE_UPLOAD", "keywords": []}, {"id": 751, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENTER_DATA", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_ENTER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind35CUPTI_OPENACC_EVENT_KIND_ENTER_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_ENTER_DATA", "keywords": []}, {"id": 752, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_EXIT_DATA", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_EXIT_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind34CUPTI_OPENACC_EVENT_KIND_EXIT_DATAE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_EXIT_DATA", "keywords": []}, {"id": 753, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_FORCE_INT", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind34CUPTI_OPENACC_EVENT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_FORCE_INT", "keywords": []}, {"id": 754, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_FREE", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_FREE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind29CUPTI_OPENACC_EVENT_KIND_FREEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_FREE", "keywords": []}, {"id": 755, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind38CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_IMPLICIT_WAIT", "keywords": []}, {"id": 756, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_INVALID", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind32CUPTI_OPENACC_EVENT_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_INVALID", "keywords": []}, {"id": 757, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind41CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWNE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_RUNTIME_SHUTDOWN", "keywords": []}, {"id": 758, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_UPDATE", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_UPDATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind31CUPTI_OPENACC_EVENT_KIND_UPDATEE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_UPDATE", "keywords": []}, {"id": 759, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_WAIT", "display_name": "CUpti_OpenAccEventKind::CUPTI_OPENACC_EVENT_KIND_WAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N22CUpti_OpenAccEventKind29CUPTI_OPENACC_EVENT_KIND_WAITE", "priority": 1, "content": "enumerator  CUPTI_OPENACC_EVENT_KIND_WAIT", "keywords": []}, {"id": 760, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind", "display_name": "CUpti_OpenMpEventKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv421CUpti_OpenMpEventKind", "priority": 1, "content": "enum  CUpti_OpenMpEventKind Values:", "keywords": []}, {"id": 761, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_FORCE_INT", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind33CUPTI_OPENMP_EVENT_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_FORCE_INT", "keywords": []}, {"id": 762, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_IDLE", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_IDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind28CUPTI_OPENMP_EVENT_KIND_IDLEE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_IDLE", "keywords": []}, {"id": 763, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_INVALID", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind31CUPTI_OPENMP_EVENT_KIND_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_INVALID", "keywords": []}, {"id": 764, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_PARALLEL", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_PARALLEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind32CUPTI_OPENMP_EVENT_KIND_PARALLELE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_PARALLEL", "keywords": []}, {"id": 765, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_TASK", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_TASK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind28CUPTI_OPENMP_EVENT_KIND_TASKE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_TASK", "keywords": []}, {"id": 766, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_THREAD", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_THREAD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind30CUPTI_OPENMP_EVENT_KIND_THREADE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_THREAD", "keywords": []}, {"id": 767, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind36CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIERE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_WAIT_BARRIER", "keywords": []}, {"id": 768, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT", "display_name": "CUpti_OpenMpEventKind::CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N21CUpti_OpenMpEventKind37CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAITE", "priority": 1, "content": "enumerator  CUPTI_OPENMP_EVENT_KIND_WAIT_TASKWAIT", "keywords": []}, {"id": 769, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieDeviceType", "display_name": "CUpti_PcieDeviceType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420CUpti_PcieDeviceType", "priority": 1, "content": "enum  CUpti_PcieDeviceType Field to differentiate whether PCIE Activity record is of a GPU or a PCI Bridge. Values:", "keywords": []}, {"id": 770, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieDeviceType::CUPTI_PCIE_DEVICE_TYPE_BRIDGE", "display_name": "CUpti_PcieDeviceType::CUPTI_PCIE_DEVICE_TYPE_BRIDGE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_PcieDeviceType29CUPTI_PCIE_DEVICE_TYPE_BRIDGEE", "priority": 1, "content": "enumerator  CUPTI_PCIE_DEVICE_TYPE_BRIDGE PCIE Bridge record.", "keywords": []}, {"id": 771, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieDeviceType::CUPTI_PCIE_DEVICE_TYPE_FORCE_INT", "display_name": "CUpti_PcieDeviceType::CUPTI_PCIE_DEVICE_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_PcieDeviceType32CUPTI_PCIE_DEVICE_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_PCIE_DEVICE_TYPE_FORCE_INT", "keywords": []}, {"id": 772, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieDeviceType::CUPTI_PCIE_DEVICE_TYPE_GPU", "display_name": "CUpti_PcieDeviceType::CUPTI_PCIE_DEVICE_TYPE_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N20CUpti_PcieDeviceType26CUPTI_PCIE_DEVICE_TYPE_GPUE", "priority": 1, "content": "enumerator  CUPTI_PCIE_DEVICE_TYPE_GPU PCIE GPU record.", "keywords": []}, {"id": 773, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen", "display_name": "CUpti_PcieGen", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv413CUpti_PcieGen", "priority": 1, "content": "enum  CUpti_PcieGen PCIE Generation. Enumeration of PCIE Generation for pcie activity attribute pcieGeneration Values:", "keywords": []}, {"id": 774, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen::CUPTI_PCIE_GEN_FORCE_INT", "display_name": "CUpti_PcieGen::CUPTI_PCIE_GEN_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen24CUPTI_PCIE_GEN_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_FORCE_INT", "keywords": []}, {"id": 775, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN1", "display_name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN1", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN1E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN1 PCIE Generation 1.", "keywords": []}, {"id": 776, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN2", "display_name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN2", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN2E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN2 PCIE Generation 2.", "keywords": []}, {"id": 777, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN3", "display_name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN3", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN3E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN3 PCIE Generation 3.", "keywords": []}, {"id": 778, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN4", "display_name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN4", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN4E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN4 PCIE Generation 4.", "keywords": []}, {"id": 779, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN5", "display_name": "CUpti_PcieGen::CUPTI_PCIE_GEN_GEN5", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv4N13CUpti_PcieGen19CUPTI_PCIE_GEN_GEN5E", "priority": 1, "content": "enumerator  CUPTI_PCIE_GEN_GEN5 PCIE Generation 5.", "keywords": []}, {"id": 780, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "CUpti_TimestampCallbackFunc", "display_name": "CUpti_TimestampCallbackFunc", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv427CUpti_TimestampCallbackFunc", "priority": 1, "content": "typedef  uint64_t  ( * CUpti_TimestampCallbackFunc ) ( void ) Function type for callback used by CUPTI to request a timestamp to be used in activity records. This callback function signals the CUPTI client that a timestamp needs to be returned. This timestamp would be treated as normalized timestamp to be used for various purposes in CUPTI. For example to store start and end timestamps reported in the CUPTI activity records. The returned timestamp must be in nanoseconds. cuptiActivityRegisterTimestampCallback", "keywords": []}, {"id": 781, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityConfigurePCSampling", "display_name": "cuptiActivityConfigurePCSampling", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv432cuptiActivityConfigurePCSampling9CUcontextP30CUpti_ActivityPCSamplingConfig", "priority": 1, "content": "CUptiResult  cuptiActivityConfigurePCSampling CUcontext  ctx CUpti_ActivityPCSamplingConfig  * config Set PC sampling configuration. For Pascal and older GPU architectures this API must be called before enabling activity kind CUPTI_ACTIVITY_KIND_PC_SAMPLING. There is no such requirement for Volta and newer GPU architectures. For Volta and newer GPU architectures if this API is called in the middle of execution, PC sampling configuration will be updated for subsequent kernel launches. Parameters ctx \u2013 The context config \u2013 A pointer to CUpti_ActivityPCSamplingConfig structure containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this api is called while some valid event collection method is set. CUPTI_ERROR_INVALID_PARAMETER \u2013 if config is NULL or any parameter in the config structures is not a valid value CUPTI_ERROR_NOT_SUPPORTED \u2013 Indicates that the system/device does not support the unified memory counters", "keywords": []}, {"id": 782, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityConfigurePCSampling::config", "display_name": "cuptiActivityConfigurePCSampling::config", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv432cuptiActivityConfigurePCSampling9CUcontextP30CUpti_ActivityPCSamplingConfig", "priority": 1, "content": "CUptiResult  cuptiActivityConfigurePCSampling CUcontext  ctx CUpti_ActivityPCSamplingConfig  * config Set PC sampling configuration. For Pascal and older GPU architectures this API must be called before enabling activity kind CUPTI_ACTIVITY_KIND_PC_SAMPLING. There is no such requirement for Volta and newer GPU architectures. For Volta and newer GPU architectures if this API is called in the middle of execution, PC sampling configuration will be updated for subsequent kernel launches. Parameters ctx \u2013 The context config \u2013 A pointer to CUpti_ActivityPCSamplingConfig structure containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this api is called while some valid event collection method is set. CUPTI_ERROR_INVALID_PARAMETER \u2013 if config is NULL or any parameter in the config structures is not a valid value CUPTI_ERROR_NOT_SUPPORTED \u2013 Indicates that the system/device does not support the unified memory counters", "keywords": []}, {"id": 783, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityConfigurePCSampling::ctx", "display_name": "cuptiActivityConfigurePCSampling::ctx", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv432cuptiActivityConfigurePCSampling9CUcontextP30CUpti_ActivityPCSamplingConfig", "priority": 1, "content": "CUptiResult  cuptiActivityConfigurePCSampling CUcontext  ctx CUpti_ActivityPCSamplingConfig  * config Set PC sampling configuration. For Pascal and older GPU architectures this API must be called before enabling activity kind CUPTI_ACTIVITY_KIND_PC_SAMPLING. There is no such requirement for Volta and newer GPU architectures. For Volta and newer GPU architectures if this API is called in the middle of execution, PC sampling configuration will be updated for subsequent kernel launches. Parameters ctx \u2013 The context config \u2013 A pointer to CUpti_ActivityPCSamplingConfig structure containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this api is called while some valid event collection method is set. CUPTI_ERROR_INVALID_PARAMETER \u2013 if config is NULL or any parameter in the config structures is not a valid value CUPTI_ERROR_NOT_SUPPORTED \u2013 Indicates that the system/device does not support the unified memory counters", "keywords": []}, {"id": 784, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityConfigureUnifiedMemoryCounter", "display_name": "cuptiActivityConfigureUnifiedMemoryCounter", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv442cuptiActivityConfigureUnifiedMemoryCounterP40CUpti_ActivityUnifiedMemoryCounterConfig8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityConfigureUnifiedMemoryCounter CUpti_ActivityUnifiedMemoryCounterConfig  * config uint32_t  count Set Unified Memory Counter configuration. Parameters config \u2013 A pointer to CUpti_ActivityUnifiedMemoryCounterConfig structures containing Unified Memory counter configuration. count \u2013 Number of Unified Memory counter configuration structures Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if config is NULL or any parameter in the config structures is not a valid value CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED \u2013 One potential reason is that platform (OS/arch) does not support the unified memory counters CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE \u2013 Indicates that the device does not support the unified memory counters CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES \u2013 Indicates that multi-GPU configuration without P2P support between any pair of devices does not support the unified memory counters", "keywords": []}, {"id": 785, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityConfigureUnifiedMemoryCounter::config", "display_name": "cuptiActivityConfigureUnifiedMemoryCounter::config", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv442cuptiActivityConfigureUnifiedMemoryCounterP40CUpti_ActivityUnifiedMemoryCounterConfig8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityConfigureUnifiedMemoryCounter CUpti_ActivityUnifiedMemoryCounterConfig  * config uint32_t  count Set Unified Memory Counter configuration. Parameters config \u2013 A pointer to CUpti_ActivityUnifiedMemoryCounterConfig structures containing Unified Memory counter configuration. count \u2013 Number of Unified Memory counter configuration structures Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if config is NULL or any parameter in the config structures is not a valid value CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED \u2013 One potential reason is that platform (OS/arch) does not support the unified memory counters CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE \u2013 Indicates that the device does not support the unified memory counters CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES \u2013 Indicates that multi-GPU configuration without P2P support between any pair of devices does not support the unified memory counters", "keywords": []}, {"id": 786, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityConfigureUnifiedMemoryCounter::count", "display_name": "cuptiActivityConfigureUnifiedMemoryCounter::count", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv442cuptiActivityConfigureUnifiedMemoryCounterP40CUpti_ActivityUnifiedMemoryCounterConfig8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityConfigureUnifiedMemoryCounter CUpti_ActivityUnifiedMemoryCounterConfig  * config uint32_t  count Set Unified Memory Counter configuration. Parameters config \u2013 A pointer to CUpti_ActivityUnifiedMemoryCounterConfig structures containing Unified Memory counter configuration. count \u2013 Number of Unified Memory counter configuration structures Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if config is NULL or any parameter in the config structures is not a valid value CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED \u2013 One potential reason is that platform (OS/arch) does not support the unified memory counters CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE \u2013 Indicates that the device does not support the unified memory counters CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES \u2013 Indicates that multi-GPU configuration without P2P support between any pair of devices does not support the unified memory counters", "keywords": []}, {"id": 787, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityDisable", "display_name": "cuptiActivityDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiActivityDisable18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityDisable CUpti_ActivityKind  kind Disable collection of a specific kind of activity record. Disable collection of a specific kind of activity record. Multiple kinds can be disabled by calling this function multiple times. By default all activity kinds are disabled for collection. Parameters kind \u2013 The kind of activity record to stop collecting Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 788, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityDisable::kind", "display_name": "cuptiActivityDisable::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiActivityDisable18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityDisable CUpti_ActivityKind  kind Disable collection of a specific kind of activity record. Disable collection of a specific kind of activity record. Multiple kinds can be disabled by calling this function multiple times. By default all activity kinds are disabled for collection. Parameters kind \u2013 The kind of activity record to stop collecting Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 789, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityDisableContext", "display_name": "cuptiActivityDisableContext", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv427cuptiActivityDisableContext9CUcontext18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityDisableContext CUcontext  context CUpti_ActivityKind  kind Disable collection of a specific kind of activity record for a context. Disable collection of a specific kind of activity record for a context. This setting done by this API will supersede the global settings for activity records. Multiple kinds can be enabled by calling this function multiple times. Parameters context \u2013 The context for which activity is to be disabled kind \u2013 The kind of activity record to stop collecting Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 790, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityDisableContext::context", "display_name": "cuptiActivityDisableContext::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv427cuptiActivityDisableContext9CUcontext18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityDisableContext CUcontext  context CUpti_ActivityKind  kind Disable collection of a specific kind of activity record for a context. Disable collection of a specific kind of activity record for a context. This setting done by this API will supersede the global settings for activity records. Multiple kinds can be enabled by calling this function multiple times. Parameters context \u2013 The context for which activity is to be disabled kind \u2013 The kind of activity record to stop collecting Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 791, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityDisableContext::kind", "display_name": "cuptiActivityDisableContext::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv427cuptiActivityDisableContext9CUcontext18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityDisableContext CUcontext  context CUpti_ActivityKind  kind Disable collection of a specific kind of activity record for a context. Disable collection of a specific kind of activity record for a context. This setting done by this API will supersede the global settings for activity records. Multiple kinds can be enabled by calling this function multiple times. Parameters context \u2013 The context for which activity is to be disabled kind \u2013 The kind of activity record to stop collecting Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 792, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnable", "display_name": "cuptiActivityEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiActivityEnable18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnable CUpti_ActivityKind  kind Enable collection of a specific kind of activity record. Enable collection of a specific kind of activity record. Multiple kinds can be enabled by calling this function multiple times. By default all activity kinds are disabled for collection. Parameters kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 793, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnable::kind", "display_name": "cuptiActivityEnable::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiActivityEnable18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnable CUpti_ActivityKind  kind Enable collection of a specific kind of activity record. Enable collection of a specific kind of activity record. Multiple kinds can be enabled by calling this function multiple times. By default all activity kinds are disabled for collection. Parameters kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 794, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableAndDump", "display_name": "cuptiActivityEnableAndDump", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityEnableAndDump18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnableAndDump CUpti_ActivityKind  kind Enable collection of a specific kind of activity record. For certain activity kinds it dumps existing records. In general, the behavior of this API is similar to the API cuptiActivityEnable i.e. it enables the collection of a specific kind of activity record. Additionally, this API can help in dumping the records for activities which happened in the past before enabling the corresponding activity kind. The API allows to get records for the current resource allocations done in CUDA For CUPTI_ACTIVITY_KIND_DEVICE, existing device records are dumped For CUPTI_ACTIVITY_KIND_CONTEXT, existing context records are dumped For CUPTI_ACTIVITY_KIND_STREAM, existing stream records are dumped For CUPTI_ACTIVITY_KIND_ NVLINK, existing NVLINK records are dumped For CUPTI_ACTIVITY_KIND_PCIE, existing PCIE records are dumped For other activities, the behavior is similar to the API cuptiActivityEnable Device records are emitted in CUPTI on CUDA driver initialization. Those records can only be retrieved by the user if CUPTI is attached before CUDA initialization. Context and stream records are emitted on context and stream creation. The use case of the API is to provide the records for CUDA resources (contexts/streams/devices) that are currently active if user late attaches CUPTI. Before calling this function, the user must register buffer callbacks to get the activity records by calling cuptiActivityRegisterCallbacks . If the user does not register the buffers and calls API cuptiActivityEnableAndDump , then CUPTI will enable the activity kind but not provide any records for that activity kind. Parameters kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_UNKNOWN \u2013 if buffer is not initialized. CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 795, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableAndDump::kind", "display_name": "cuptiActivityEnableAndDump::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityEnableAndDump18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnableAndDump CUpti_ActivityKind  kind Enable collection of a specific kind of activity record. For certain activity kinds it dumps existing records. In general, the behavior of this API is similar to the API cuptiActivityEnable i.e. it enables the collection of a specific kind of activity record. Additionally, this API can help in dumping the records for activities which happened in the past before enabling the corresponding activity kind. The API allows to get records for the current resource allocations done in CUDA For CUPTI_ACTIVITY_KIND_DEVICE, existing device records are dumped For CUPTI_ACTIVITY_KIND_CONTEXT, existing context records are dumped For CUPTI_ACTIVITY_KIND_STREAM, existing stream records are dumped For CUPTI_ACTIVITY_KIND_ NVLINK, existing NVLINK records are dumped For CUPTI_ACTIVITY_KIND_PCIE, existing PCIE records are dumped For other activities, the behavior is similar to the API cuptiActivityEnable Device records are emitted in CUPTI on CUDA driver initialization. Those records can only be retrieved by the user if CUPTI is attached before CUDA initialization. Context and stream records are emitted on context and stream creation. The use case of the API is to provide the records for CUDA resources (contexts/streams/devices) that are currently active if user late attaches CUPTI. Before calling this function, the user must register buffer callbacks to get the activity records by calling cuptiActivityRegisterCallbacks . If the user does not register the buffers and calls API cuptiActivityEnableAndDump , then CUPTI will enable the activity kind but not provide any records for that activity kind. Parameters kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_UNKNOWN \u2013 if buffer is not initialized. CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 796, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableContext", "display_name": "cuptiActivityEnableContext", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityEnableContext9CUcontext18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnableContext CUcontext  context CUpti_ActivityKind  kind Enable collection of a specific kind of activity record for a context. Enable collection of a specific kind of activity record for a context. This setting done by this API will supersede the global settings for activity records enabled by cuptiActivityEnable . Multiple kinds can be enabled by calling this function multiple times. Parameters context \u2013 The context for which activity is to be enabled kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 797, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableContext::context", "display_name": "cuptiActivityEnableContext::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityEnableContext9CUcontext18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnableContext CUcontext  context CUpti_ActivityKind  kind Enable collection of a specific kind of activity record for a context. Enable collection of a specific kind of activity record for a context. This setting done by this API will supersede the global settings for activity records enabled by cuptiActivityEnable . Multiple kinds can be enabled by calling this function multiple times. Parameters context \u2013 The context for which activity is to be enabled kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 798, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableContext::kind", "display_name": "cuptiActivityEnableContext::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityEnableContext9CUcontext18CUpti_ActivityKind", "priority": 1, "content": "CUptiResult  cuptiActivityEnableContext CUcontext  context CUpti_ActivityKind  kind Enable collection of a specific kind of activity record for a context. Enable collection of a specific kind of activity record for a context. This setting done by this API will supersede the global settings for activity records enabled by cuptiActivityEnable . Multiple kinds can be enabled by calling this function multiple times. Parameters context \u2013 The context for which activity is to be enabled kind \u2013 The kind of activity record to collect Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the activity kind cannot be enabled CUPTI_ERROR_INVALID_KIND \u2013 if the activity kind is not supported", "keywords": []}, {"id": 799, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableDeviceGraph", "display_name": "cuptiActivityEnableDeviceGraph", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430cuptiActivityEnableDeviceGraph7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableDeviceGraph uint8_t  enable Controls the collection of records for device launched graphs. This API is used to control the collection of records for device launched graphs. Default value is 0, i.e. these records are not collected. This API needs to be called before initialization of CUDA and this setting should not be changed during the profiling session. Parameters enable \u2013 is a boolean, denoting whether these records should be collected Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 800, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableDeviceGraph::enable", "display_name": "cuptiActivityEnableDeviceGraph::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430cuptiActivityEnableDeviceGraph7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableDeviceGraph uint8_t  enable Controls the collection of records for device launched graphs. This API is used to control the collection of records for device launched graphs. Default value is 0, i.e. these records are not collected. This API needs to be called before initialization of CUDA and this setting should not be changed during the profiling session. Parameters enable \u2013 is a boolean, denoting whether these records should be collected Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 801, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableDriverApi", "display_name": "cuptiActivityEnableDriverApi", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv428cuptiActivityEnableDriverApi16CUpti_CallbackId7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableDriverApi CUpti_CallbackId  cbid uint8_t  enable Controls the collection of activity records for specific CUDA Driver APIs. Activity kind CUPTI_ACTIVITY_KIND_DRIVER controls the collection of either all CUDA Driver APIs or none. API cuptiActivityEnableDriverApi can be used for fine-grained control, it allows enabling/disabling tracing of a specific set of CUDA Driver APIs. To disable collection of a small set of CUDA Driver APIs, user can first enable the collection of all Driver APIs using the activity kind CUPTI_ACTIVITY_KIND_DRIVER and call this API to disable specific Driver APIs. And to enable the collection of a small set of CUDA Driver APIs, user can call this API without using the activity kind CUPTI_ACTIVITY_KIND_DRIVER. Note: Activity kind CUPTI_ACTIVITY_KIND_DRIVER overrides the settings done by this API if it is called after the API. Parameters cbid \u2013 callback id of the CUDA Driver API. This can be found in the header cupti_driver_cbid.h. enable \u2013 is a boolean, denoting whether to enable or disable the collection Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 802, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableDriverApi::cbid", "display_name": "cuptiActivityEnableDriverApi::cbid", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv428cuptiActivityEnableDriverApi16CUpti_CallbackId7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableDriverApi CUpti_CallbackId  cbid uint8_t  enable Controls the collection of activity records for specific CUDA Driver APIs. Activity kind CUPTI_ACTIVITY_KIND_DRIVER controls the collection of either all CUDA Driver APIs or none. API cuptiActivityEnableDriverApi can be used for fine-grained control, it allows enabling/disabling tracing of a specific set of CUDA Driver APIs. To disable collection of a small set of CUDA Driver APIs, user can first enable the collection of all Driver APIs using the activity kind CUPTI_ACTIVITY_KIND_DRIVER and call this API to disable specific Driver APIs. And to enable the collection of a small set of CUDA Driver APIs, user can call this API without using the activity kind CUPTI_ACTIVITY_KIND_DRIVER. Note: Activity kind CUPTI_ACTIVITY_KIND_DRIVER overrides the settings done by this API if it is called after the API. Parameters cbid \u2013 callback id of the CUDA Driver API. This can be found in the header cupti_driver_cbid.h. enable \u2013 is a boolean, denoting whether to enable or disable the collection Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 803, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableDriverApi::enable", "display_name": "cuptiActivityEnableDriverApi::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv428cuptiActivityEnableDriverApi16CUpti_CallbackId7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableDriverApi CUpti_CallbackId  cbid uint8_t  enable Controls the collection of activity records for specific CUDA Driver APIs. Activity kind CUPTI_ACTIVITY_KIND_DRIVER controls the collection of either all CUDA Driver APIs or none. API cuptiActivityEnableDriverApi can be used for fine-grained control, it allows enabling/disabling tracing of a specific set of CUDA Driver APIs. To disable collection of a small set of CUDA Driver APIs, user can first enable the collection of all Driver APIs using the activity kind CUPTI_ACTIVITY_KIND_DRIVER and call this API to disable specific Driver APIs. And to enable the collection of a small set of CUDA Driver APIs, user can call this API without using the activity kind CUPTI_ACTIVITY_KIND_DRIVER. Note: Activity kind CUPTI_ACTIVITY_KIND_DRIVER overrides the settings done by this API if it is called after the API. Parameters cbid \u2013 callback id of the CUDA Driver API. This can be found in the header cupti_driver_cbid.h. enable \u2013 is a boolean, denoting whether to enable or disable the collection Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 804, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableLatencyTimestamps", "display_name": "cuptiActivityEnableLatencyTimestamps", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv436cuptiActivityEnableLatencyTimestamps7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableLatencyTimestamps uint8_t  enable Controls the collection of queued and submitted timestamps for kernels. This API is used to control the collection of queued and submitted timestamps for kernels whose records are provided through the struct CUpti_ActivityKernel9 . Default value is 0, i.e. these timestamps are not collected. This API needs to be called before initialization of CUDA and this setting should not be changed during the profiling session. Parameters enable \u2013 is a boolean, denoting whether these timestamps should be collected Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 805, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableLatencyTimestamps::enable", "display_name": "cuptiActivityEnableLatencyTimestamps::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv436cuptiActivityEnableLatencyTimestamps7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableLatencyTimestamps uint8_t  enable Controls the collection of queued and submitted timestamps for kernels. This API is used to control the collection of queued and submitted timestamps for kernels whose records are provided through the struct CUpti_ActivityKernel9 . Default value is 0, i.e. these timestamps are not collected. This API needs to be called before initialization of CUDA and this setting should not be changed during the profiling session. Parameters enable \u2013 is a boolean, denoting whether these timestamps should be collected Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 806, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableLaunchAttributes", "display_name": "cuptiActivityEnableLaunchAttributes", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv435cuptiActivityEnableLaunchAttributes7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableLaunchAttributes uint8_t  enable Controls the collection of launch attributes for kernels. This API is used to control the collection of launch attributes for kernels whose records are provided through the struct CUpti_ActivityKernel9 . Default value is 0, i.e. these attributes are not collected. Parameters enable \u2013 is a boolean denoting whether these launch attributes should be collected", "keywords": []}, {"id": 807, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableLaunchAttributes::enable", "display_name": "cuptiActivityEnableLaunchAttributes::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv435cuptiActivityEnableLaunchAttributes7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableLaunchAttributes uint8_t  enable Controls the collection of launch attributes for kernels. This API is used to control the collection of launch attributes for kernels whose records are provided through the struct CUpti_ActivityKernel9 . Default value is 0, i.e. these attributes are not collected. Parameters enable \u2013 is a boolean denoting whether these launch attributes should be collected", "keywords": []}, {"id": 808, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableRuntimeApi", "display_name": "cuptiActivityEnableRuntimeApi", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429cuptiActivityEnableRuntimeApi16CUpti_CallbackId7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableRuntimeApi CUpti_CallbackId  cbid uint8_t  enable Controls the collection of activity records for specific CUDA Runtime APIs. Activity kind CUPTI_ACTIVITY_KIND_RUNTIME controls the collection of either all CUDA Runtime APIs or none. API cuptiActivityEnableRuntimeApi can be used for fine-grained control, it allows enabling/disabling tracing of a specific set of CUDA Runtime APIs. To disable collection of a small set of CUDA Runtime APIs, user can first enable the collection of all Runtime APIs using the activity kind CUPTI_ACTIVITY_KIND_RUNTIME and call this API to disable specific Runtime APIs. And to enable the collection of a small set of CUDA Runtime APIs, user can call this API without using the activity kind CUPTI_ACTIVITY_KIND_RUNTIME. Note: Activity kind CUPTI_ACTIVITY_KIND_RUNTIME overrides the settings done by this API if it is called after the API. Parameters cbid \u2013 callback id of the CUDA Runtime API. This can be found in the header cupti_runtime_cbid.h. enable \u2013 is a boolean, denoting whether to enable or disable the collection Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 809, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableRuntimeApi::cbid", "display_name": "cuptiActivityEnableRuntimeApi::cbid", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429cuptiActivityEnableRuntimeApi16CUpti_CallbackId7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableRuntimeApi CUpti_CallbackId  cbid uint8_t  enable Controls the collection of activity records for specific CUDA Runtime APIs. Activity kind CUPTI_ACTIVITY_KIND_RUNTIME controls the collection of either all CUDA Runtime APIs or none. API cuptiActivityEnableRuntimeApi can be used for fine-grained control, it allows enabling/disabling tracing of a specific set of CUDA Runtime APIs. To disable collection of a small set of CUDA Runtime APIs, user can first enable the collection of all Runtime APIs using the activity kind CUPTI_ACTIVITY_KIND_RUNTIME and call this API to disable specific Runtime APIs. And to enable the collection of a small set of CUDA Runtime APIs, user can call this API without using the activity kind CUPTI_ACTIVITY_KIND_RUNTIME. Note: Activity kind CUPTI_ACTIVITY_KIND_RUNTIME overrides the settings done by this API if it is called after the API. Parameters cbid \u2013 callback id of the CUDA Runtime API. This can be found in the header cupti_runtime_cbid.h. enable \u2013 is a boolean, denoting whether to enable or disable the collection Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 810, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityEnableRuntimeApi::enable", "display_name": "cuptiActivityEnableRuntimeApi::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429cuptiActivityEnableRuntimeApi16CUpti_CallbackId7uint8_t", "priority": 1, "content": "CUptiResult  cuptiActivityEnableRuntimeApi CUpti_CallbackId  cbid uint8_t  enable Controls the collection of activity records for specific CUDA Runtime APIs. Activity kind CUPTI_ACTIVITY_KIND_RUNTIME controls the collection of either all CUDA Runtime APIs or none. API cuptiActivityEnableRuntimeApi can be used for fine-grained control, it allows enabling/disabling tracing of a specific set of CUDA Runtime APIs. To disable collection of a small set of CUDA Runtime APIs, user can first enable the collection of all Runtime APIs using the activity kind CUPTI_ACTIVITY_KIND_RUNTIME and call this API to disable specific Runtime APIs. And to enable the collection of a small set of CUDA Runtime APIs, user can call this API without using the activity kind CUPTI_ACTIVITY_KIND_RUNTIME. Note: Activity kind CUPTI_ACTIVITY_KIND_RUNTIME overrides the settings done by this API if it is called after the API. Parameters cbid \u2013 callback id of the CUDA Runtime API. This can be found in the header cupti_runtime_cbid.h. enable \u2013 is a boolean, denoting whether to enable or disable the collection Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 811, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlush", "display_name": "cuptiActivityFlush", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiActivityFlush9CUcontext8uint32_t8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlush CUcontext  context uint32_t  streamId uint32_t  flag Wait for all activity records to be delivered via the completion callback. This function does not return until all activity records associated with the specified context/stream are returned to the CUPTI client using the callback registered in cuptiActivityRegisterCallbacks. To ensure that all activity records are complete, the requested stream(s), if any, are synchronized. If context is NULL, the global activity records (i.e. those not associated with a particular stream) are flushed (in this case no streams are synchronized). If context is a valid CUcontext and streamId is 0, the buffers of all streams of this context are flushed. Otherwise, the buffers of the specified stream in this context is flushed. Before calling this function, the buffer handling callback api must be activated by calling cuptiActivityRegisterCallbacks. DEPRECATED This method is deprecated CONTEXT and STREAMID will be ignored. Use cuptiActivityFlushAll to flush all data. Parameters context \u2013 A valid CUcontext or NULL. streamId \u2013 The stream ID. flag \u2013 The flag can be set to indicate a forced flush. See CUpti_ActivityFlag Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_CUPTI_ERROR_INVALID_OPERATION \u2013 if not preceded by a successful call to cuptiActivityRegisterCallbacks CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 812, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlush::context", "display_name": "cuptiActivityFlush::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiActivityFlush9CUcontext8uint32_t8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlush CUcontext  context uint32_t  streamId uint32_t  flag Wait for all activity records to be delivered via the completion callback. This function does not return until all activity records associated with the specified context/stream are returned to the CUPTI client using the callback registered in cuptiActivityRegisterCallbacks. To ensure that all activity records are complete, the requested stream(s), if any, are synchronized. If context is NULL, the global activity records (i.e. those not associated with a particular stream) are flushed (in this case no streams are synchronized). If context is a valid CUcontext and streamId is 0, the buffers of all streams of this context are flushed. Otherwise, the buffers of the specified stream in this context is flushed. Before calling this function, the buffer handling callback api must be activated by calling cuptiActivityRegisterCallbacks. DEPRECATED This method is deprecated CONTEXT and STREAMID will be ignored. Use cuptiActivityFlushAll to flush all data. Parameters context \u2013 A valid CUcontext or NULL. streamId \u2013 The stream ID. flag \u2013 The flag can be set to indicate a forced flush. See CUpti_ActivityFlag Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_CUPTI_ERROR_INVALID_OPERATION \u2013 if not preceded by a successful call to cuptiActivityRegisterCallbacks CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 813, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlush::flag", "display_name": "cuptiActivityFlush::flag", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiActivityFlush9CUcontext8uint32_t8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlush CUcontext  context uint32_t  streamId uint32_t  flag Wait for all activity records to be delivered via the completion callback. This function does not return until all activity records associated with the specified context/stream are returned to the CUPTI client using the callback registered in cuptiActivityRegisterCallbacks. To ensure that all activity records are complete, the requested stream(s), if any, are synchronized. If context is NULL, the global activity records (i.e. those not associated with a particular stream) are flushed (in this case no streams are synchronized). If context is a valid CUcontext and streamId is 0, the buffers of all streams of this context are flushed. Otherwise, the buffers of the specified stream in this context is flushed. Before calling this function, the buffer handling callback api must be activated by calling cuptiActivityRegisterCallbacks. DEPRECATED This method is deprecated CONTEXT and STREAMID will be ignored. Use cuptiActivityFlushAll to flush all data. Parameters context \u2013 A valid CUcontext or NULL. streamId \u2013 The stream ID. flag \u2013 The flag can be set to indicate a forced flush. See CUpti_ActivityFlag Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_CUPTI_ERROR_INVALID_OPERATION \u2013 if not preceded by a successful call to cuptiActivityRegisterCallbacks CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 814, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlush::streamId", "display_name": "cuptiActivityFlush::streamId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiActivityFlush9CUcontext8uint32_t8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlush CUcontext  context uint32_t  streamId uint32_t  flag Wait for all activity records to be delivered via the completion callback. This function does not return until all activity records associated with the specified context/stream are returned to the CUPTI client using the callback registered in cuptiActivityRegisterCallbacks. To ensure that all activity records are complete, the requested stream(s), if any, are synchronized. If context is NULL, the global activity records (i.e. those not associated with a particular stream) are flushed (in this case no streams are synchronized). If context is a valid CUcontext and streamId is 0, the buffers of all streams of this context are flushed. Otherwise, the buffers of the specified stream in this context is flushed. Before calling this function, the buffer handling callback api must be activated by calling cuptiActivityRegisterCallbacks. DEPRECATED This method is deprecated CONTEXT and STREAMID will be ignored. Use cuptiActivityFlushAll to flush all data. Parameters context \u2013 A valid CUcontext or NULL. streamId \u2013 The stream ID. flag \u2013 The flag can be set to indicate a forced flush. See CUpti_ActivityFlag Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_CUPTI_ERROR_INVALID_OPERATION \u2013 if not preceded by a successful call to cuptiActivityRegisterCallbacks CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 815, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlushAll", "display_name": "cuptiActivityFlushAll", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv421cuptiActivityFlushAll8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlushAll uint32_t  flag Request to deliver activity records via the buffer completion callback. This function returns the activity records associated with all contexts/streams (and the global buffers not associated with any stream) to the CUPTI client using the callback registered in cuptiActivityRegisterCallbacks. This is a blocking call but it doesn\u2019t issue any CUDA synchronization calls implicitly thus it\u2019s not guaranteed that all activities are completed on the underlying devices. Activity record is considered as completed if it has all the information filled up including the timestamps if any. It is the client\u2019s responsibility to issue necessary CUDA synchronization calls before calling this function if all activity records with complete information are expected to be delivered. Behavior of the function based on the input flag: (-) ::For default flush i.e. when flag is set as 0, it returns all the activity buffers which have all the activity records completed, buffers need not to be full though. It doesn\u2019t return buffers which have one or more incomplete records. Default flush can be done at a regular interval in a separate thread. (-) ::For forced flush i.e. when flag CUPTI_ACTIVITY_FLAG_FLUSH_FORCED is passed to the function, it returns all the activity buffers including the ones which have one or more incomplete activity records. It\u2019s suggested for clients to do the force flush before the termination of the profiling session to allow remaining buffers to be delivered. In general, it can be done in the at-exit handler. Before calling this function, the buffer handling callback api must be activated by calling cuptiActivityRegisterCallbacks. cuptiActivityFlushPeriod  Parameters flag \u2013 The flag can be set to indicate a forced flush. See CUpti_ActivityFlag Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if not preceded by a successful call to cuptiActivityRegisterCallbacks CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 816, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlushAll::flag", "display_name": "cuptiActivityFlushAll::flag", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv421cuptiActivityFlushAll8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlushAll uint32_t  flag Request to deliver activity records via the buffer completion callback. This function returns the activity records associated with all contexts/streams (and the global buffers not associated with any stream) to the CUPTI client using the callback registered in cuptiActivityRegisterCallbacks. This is a blocking call but it doesn\u2019t issue any CUDA synchronization calls implicitly thus it\u2019s not guaranteed that all activities are completed on the underlying devices. Activity record is considered as completed if it has all the information filled up including the timestamps if any. It is the client\u2019s responsibility to issue necessary CUDA synchronization calls before calling this function if all activity records with complete information are expected to be delivered. Behavior of the function based on the input flag: (-) ::For default flush i.e. when flag is set as 0, it returns all the activity buffers which have all the activity records completed, buffers need not to be full though. It doesn\u2019t return buffers which have one or more incomplete records. Default flush can be done at a regular interval in a separate thread. (-) ::For forced flush i.e. when flag CUPTI_ACTIVITY_FLAG_FLUSH_FORCED is passed to the function, it returns all the activity buffers including the ones which have one or more incomplete activity records. It\u2019s suggested for clients to do the force flush before the termination of the profiling session to allow remaining buffers to be delivered. In general, it can be done in the at-exit handler. Before calling this function, the buffer handling callback api must be activated by calling cuptiActivityRegisterCallbacks. cuptiActivityFlushPeriod  Parameters flag \u2013 The flag can be set to indicate a forced flush. See CUpti_ActivityFlag Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if not preceded by a successful call to cuptiActivityRegisterCallbacks CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 817, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlushPeriod", "display_name": "cuptiActivityFlushPeriod", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424cuptiActivityFlushPeriod8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlushPeriod uint32_t  time Sets the flush period for the worker thread. CUPTI creates a worker thread to minimize the perturbance for the application created threads. CUPTI offloads certain operations from the application threads to the worker thread, this includes synchronization of profiling resources between host and device, delivery of the activity buffers to the client using the callback registered in cuptiActivityRegisterCallbacks. For performance reasons, CUPTI wakes up the worker thread based on certain heuristics. This API is used to control the flush period of the worker thread. This setting will override the CUPTI heuristics. Setting time to zero disables the periodic flush and restores the default behavior. Periodic flush can return only those activity buffers which are full and have all the activity records completed. It\u2019s allowed to use the API cuptiActivityFlushAll to flush the data on-demand, even when client sets the periodic flush. cuptiActivityFlushAll  Parameters time \u2013 flush period in milliseconds (ms) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 818, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityFlushPeriod::time", "display_name": "cuptiActivityFlushPeriod::time", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv424cuptiActivityFlushPeriod8uint32_t", "priority": 1, "content": "CUptiResult  cuptiActivityFlushPeriod uint32_t  time Sets the flush period for the worker thread. CUPTI creates a worker thread to minimize the perturbance for the application created threads. CUPTI offloads certain operations from the application threads to the worker thread, this includes synchronization of profiling resources between host and device, delivery of the activity buffers to the client using the callback registered in cuptiActivityRegisterCallbacks. For performance reasons, CUPTI wakes up the worker thread based on certain heuristics. This API is used to control the flush period of the worker thread. This setting will override the CUPTI heuristics. Setting time to zero disables the periodic flush and restores the default behavior. Periodic flush can return only those activity buffers which are full and have all the activity records completed. It\u2019s allowed to use the API cuptiActivityFlushAll to flush the data on-demand, even when client sets the periodic flush. cuptiActivityFlushAll  Parameters time \u2013 flush period in milliseconds (ms) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 819, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetAttribute", "display_name": "cuptiActivityGetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivityGetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivityGetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Read an activity API attribute. Read an activity API attribute and return it in *value . Parameters attr \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 820, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetAttribute::attr", "display_name": "cuptiActivityGetAttribute::attr", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivityGetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivityGetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Read an activity API attribute. Read an activity API attribute and return it in *value . Parameters attr \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 821, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetAttribute::value", "display_name": "cuptiActivityGetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivityGetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivityGetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Read an activity API attribute. Read an activity API attribute and return it in *value . Parameters attr \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 822, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetAttribute::valueSize", "display_name": "cuptiActivityGetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivityGetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivityGetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Read an activity API attribute. Read an activity API attribute and return it in *value . Parameters attr \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 823, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNextRecord", "display_name": "cuptiActivityGetNextRecord", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityGetNextRecordP7uint8_t6size_tPP14CUpti_Activity", "priority": 1, "content": "CUptiResult  cuptiActivityGetNextRecord uint8_t  * buffer size_t  validBufferSizeBytes CUpti_Activity  * * record Iterate over the activity records in a buffer. This is a helper function to iterate over the activity records in a buffer. A buffer of activity records is typically obtained by receiving a CUpti_BuffersCallbackCompleteFunc callback. Stop iterating the buffer when an error occurs. An example of typical usage: CUpti_Activity  *record  =  NULL;  CUptiResult  status  =  CUPTI_SUCCESS;    do  {       status  =  cuptiActivityGetNextRecord(buffer,  validSize,  &amp;record);       if(status  ==  CUPTI_SUCCESS)  {            //  Use  record  here...       }       else  if  (status  ==  CUPTI_ERROR_MAX_LIMIT_REACHED)           break;       else  if  (status  ==  CUPTI_ERROR_INVALID_KIND)           break;       else  {           goto  Error;       }     }  while  (1); Parameters buffer \u2013 The buffer containing activity records record \u2013 Inputs the previous record returned by cuptiActivityGetNextRecord and returns the next activity record from the buffer. If input value is NULL, returns the first activity record in the buffer. Records of certain kinds like CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL may contain invalid (0) timestamps, indicating that no timing information could be collected for lack of device memory. validBufferSizeBytes \u2013 The number of valid bytes in the buffer. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if no more records in the buffer CUPTI_ERROR_INVALID_PARAMETER \u2013 if buffer is NULL. CUPTI_ERROR_INVALID_KIND \u2013 if activity record is either incomplete or invalid", "keywords": []}, {"id": 824, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNextRecord::buffer", "display_name": "cuptiActivityGetNextRecord::buffer", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityGetNextRecordP7uint8_t6size_tPP14CUpti_Activity", "priority": 1, "content": "CUptiResult  cuptiActivityGetNextRecord uint8_t  * buffer size_t  validBufferSizeBytes CUpti_Activity  * * record Iterate over the activity records in a buffer. This is a helper function to iterate over the activity records in a buffer. A buffer of activity records is typically obtained by receiving a CUpti_BuffersCallbackCompleteFunc callback. Stop iterating the buffer when an error occurs. An example of typical usage: CUpti_Activity  *record  =  NULL;  CUptiResult  status  =  CUPTI_SUCCESS;    do  {       status  =  cuptiActivityGetNextRecord(buffer,  validSize,  &amp;record);       if(status  ==  CUPTI_SUCCESS)  {            //  Use  record  here...       }       else  if  (status  ==  CUPTI_ERROR_MAX_LIMIT_REACHED)           break;       else  if  (status  ==  CUPTI_ERROR_INVALID_KIND)           break;       else  {           goto  Error;       }     }  while  (1); Parameters buffer \u2013 The buffer containing activity records record \u2013 Inputs the previous record returned by cuptiActivityGetNextRecord and returns the next activity record from the buffer. If input value is NULL, returns the first activity record in the buffer. Records of certain kinds like CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL may contain invalid (0) timestamps, indicating that no timing information could be collected for lack of device memory. validBufferSizeBytes \u2013 The number of valid bytes in the buffer. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if no more records in the buffer CUPTI_ERROR_INVALID_PARAMETER \u2013 if buffer is NULL. CUPTI_ERROR_INVALID_KIND \u2013 if activity record is either incomplete or invalid", "keywords": []}, {"id": 825, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNextRecord::record", "display_name": "cuptiActivityGetNextRecord::record", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityGetNextRecordP7uint8_t6size_tPP14CUpti_Activity", "priority": 1, "content": "CUptiResult  cuptiActivityGetNextRecord uint8_t  * buffer size_t  validBufferSizeBytes CUpti_Activity  * * record Iterate over the activity records in a buffer. This is a helper function to iterate over the activity records in a buffer. A buffer of activity records is typically obtained by receiving a CUpti_BuffersCallbackCompleteFunc callback. Stop iterating the buffer when an error occurs. An example of typical usage: CUpti_Activity  *record  =  NULL;  CUptiResult  status  =  CUPTI_SUCCESS;    do  {       status  =  cuptiActivityGetNextRecord(buffer,  validSize,  &amp;record);       if(status  ==  CUPTI_SUCCESS)  {            //  Use  record  here...       }       else  if  (status  ==  CUPTI_ERROR_MAX_LIMIT_REACHED)           break;       else  if  (status  ==  CUPTI_ERROR_INVALID_KIND)           break;       else  {           goto  Error;       }     }  while  (1); Parameters buffer \u2013 The buffer containing activity records record \u2013 Inputs the previous record returned by cuptiActivityGetNextRecord and returns the next activity record from the buffer. If input value is NULL, returns the first activity record in the buffer. Records of certain kinds like CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL may contain invalid (0) timestamps, indicating that no timing information could be collected for lack of device memory. validBufferSizeBytes \u2013 The number of valid bytes in the buffer. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if no more records in the buffer CUPTI_ERROR_INVALID_PARAMETER \u2013 if buffer is NULL. CUPTI_ERROR_INVALID_KIND \u2013 if activity record is either incomplete or invalid", "keywords": []}, {"id": 826, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNextRecord::validBufferSizeBytes", "display_name": "cuptiActivityGetNextRecord::validBufferSizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv426cuptiActivityGetNextRecordP7uint8_t6size_tPP14CUpti_Activity", "priority": 1, "content": "CUptiResult  cuptiActivityGetNextRecord uint8_t  * buffer size_t  validBufferSizeBytes CUpti_Activity  * * record Iterate over the activity records in a buffer. This is a helper function to iterate over the activity records in a buffer. A buffer of activity records is typically obtained by receiving a CUpti_BuffersCallbackCompleteFunc callback. Stop iterating the buffer when an error occurs. An example of typical usage: CUpti_Activity  *record  =  NULL;  CUptiResult  status  =  CUPTI_SUCCESS;    do  {       status  =  cuptiActivityGetNextRecord(buffer,  validSize,  &amp;record);       if(status  ==  CUPTI_SUCCESS)  {            //  Use  record  here...       }       else  if  (status  ==  CUPTI_ERROR_MAX_LIMIT_REACHED)           break;       else  if  (status  ==  CUPTI_ERROR_INVALID_KIND)           break;       else  {           goto  Error;       }     }  while  (1); Parameters buffer \u2013 The buffer containing activity records record \u2013 Inputs the previous record returned by cuptiActivityGetNextRecord and returns the next activity record from the buffer. If input value is NULL, returns the first activity record in the buffer. Records of certain kinds like CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL may contain invalid (0) timestamps, indicating that no timing information could be collected for lack of device memory. validBufferSizeBytes \u2013 The number of valid bytes in the buffer. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if no more records in the buffer CUPTI_ERROR_INVALID_PARAMETER \u2013 if buffer is NULL. CUPTI_ERROR_INVALID_KIND \u2013 if activity record is either incomplete or invalid", "keywords": []}, {"id": 827, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNumDroppedRecords", "display_name": "cuptiActivityGetNumDroppedRecords", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433cuptiActivityGetNumDroppedRecords9CUcontext8uint32_tP6size_t", "priority": 1, "content": "CUptiResult  cuptiActivityGetNumDroppedRecords CUcontext  context uint32_t  streamId size_t  * dropped Get the number of activity records that were dropped of insufficient buffer space. Get the number of records that were dropped because of insufficient buffer space. The dropped count includes records that could not be recorded because CUPTI did not have activity buffer space available for the record (because the CUpti_BuffersCallbackRequestFunc callback did not return an empty buffer of sufficient size) and also CDP records that could not be record because the device-size buffer was full (size is controlled by the CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP attribute). The dropped count maintained for the queue is reset to zero when this function is called. Parameters context \u2013 The context, or NULL to get dropped count from global queue streamId \u2013 The stream ID dropped \u2013 The number of records that were dropped since the last call to this function. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if dropped is NULL", "keywords": []}, {"id": 828, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNumDroppedRecords::context", "display_name": "cuptiActivityGetNumDroppedRecords::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433cuptiActivityGetNumDroppedRecords9CUcontext8uint32_tP6size_t", "priority": 1, "content": "CUptiResult  cuptiActivityGetNumDroppedRecords CUcontext  context uint32_t  streamId size_t  * dropped Get the number of activity records that were dropped of insufficient buffer space. Get the number of records that were dropped because of insufficient buffer space. The dropped count includes records that could not be recorded because CUPTI did not have activity buffer space available for the record (because the CUpti_BuffersCallbackRequestFunc callback did not return an empty buffer of sufficient size) and also CDP records that could not be record because the device-size buffer was full (size is controlled by the CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP attribute). The dropped count maintained for the queue is reset to zero when this function is called. Parameters context \u2013 The context, or NULL to get dropped count from global queue streamId \u2013 The stream ID dropped \u2013 The number of records that were dropped since the last call to this function. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if dropped is NULL", "keywords": []}, {"id": 829, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNumDroppedRecords::dropped", "display_name": "cuptiActivityGetNumDroppedRecords::dropped", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433cuptiActivityGetNumDroppedRecords9CUcontext8uint32_tP6size_t", "priority": 1, "content": "CUptiResult  cuptiActivityGetNumDroppedRecords CUcontext  context uint32_t  streamId size_t  * dropped Get the number of activity records that were dropped of insufficient buffer space. Get the number of records that were dropped because of insufficient buffer space. The dropped count includes records that could not be recorded because CUPTI did not have activity buffer space available for the record (because the CUpti_BuffersCallbackRequestFunc callback did not return an empty buffer of sufficient size) and also CDP records that could not be record because the device-size buffer was full (size is controlled by the CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP attribute). The dropped count maintained for the queue is reset to zero when this function is called. Parameters context \u2013 The context, or NULL to get dropped count from global queue streamId \u2013 The stream ID dropped \u2013 The number of records that were dropped since the last call to this function. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if dropped is NULL", "keywords": []}, {"id": 830, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityGetNumDroppedRecords::streamId", "display_name": "cuptiActivityGetNumDroppedRecords::streamId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv433cuptiActivityGetNumDroppedRecords9CUcontext8uint32_tP6size_t", "priority": 1, "content": "CUptiResult  cuptiActivityGetNumDroppedRecords CUcontext  context uint32_t  streamId size_t  * dropped Get the number of activity records that were dropped of insufficient buffer space. Get the number of records that were dropped because of insufficient buffer space. The dropped count includes records that could not be recorded because CUPTI did not have activity buffer space available for the record (because the CUpti_BuffersCallbackRequestFunc callback did not return an empty buffer of sufficient size) and also CDP records that could not be record because the device-size buffer was full (size is controlled by the CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE_CDP attribute). The dropped count maintained for the queue is reset to zero when this function is called. Parameters context \u2013 The context, or NULL to get dropped count from global queue streamId \u2013 The stream ID dropped \u2013 The number of records that were dropped since the last call to this function. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if dropped is NULL", "keywords": []}, {"id": 831, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityPopExternalCorrelationId", "display_name": "cuptiActivityPopExternalCorrelationId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv437cuptiActivityPopExternalCorrelationId29CUpti_ExternalCorrelationKindP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiActivityPopExternalCorrelationId CUpti_ExternalCorrelationKind  kind uint64_t  * lastId Pop an external correlation id for the calling thread. This function notifies CUPTI that the calling thread is leaving an external API region. Parameters kind \u2013 The kind of external API activities should be correlated with. lastId \u2013 If the function returns successful, contains the last external correlation id for this kind , can be NULL. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 The external API kind is invalid. CUPTI_ERROR_QUEUE_EMPTY \u2013 No external id is currently associated with kind .", "keywords": []}, {"id": 832, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityPopExternalCorrelationId::kind", "display_name": "cuptiActivityPopExternalCorrelationId::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv437cuptiActivityPopExternalCorrelationId29CUpti_ExternalCorrelationKindP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiActivityPopExternalCorrelationId CUpti_ExternalCorrelationKind  kind uint64_t  * lastId Pop an external correlation id for the calling thread. This function notifies CUPTI that the calling thread is leaving an external API region. Parameters kind \u2013 The kind of external API activities should be correlated with. lastId \u2013 If the function returns successful, contains the last external correlation id for this kind , can be NULL. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 The external API kind is invalid. CUPTI_ERROR_QUEUE_EMPTY \u2013 No external id is currently associated with kind .", "keywords": []}, {"id": 833, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityPopExternalCorrelationId::lastId", "display_name": "cuptiActivityPopExternalCorrelationId::lastId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv437cuptiActivityPopExternalCorrelationId29CUpti_ExternalCorrelationKindP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiActivityPopExternalCorrelationId CUpti_ExternalCorrelationKind  kind uint64_t  * lastId Pop an external correlation id for the calling thread. This function notifies CUPTI that the calling thread is leaving an external API region. Parameters kind \u2013 The kind of external API activities should be correlated with. lastId \u2013 If the function returns successful, contains the last external correlation id for this kind , can be NULL. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 The external API kind is invalid. CUPTI_ERROR_QUEUE_EMPTY \u2013 No external id is currently associated with kind .", "keywords": []}, {"id": 834, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityPushExternalCorrelationId", "display_name": "cuptiActivityPushExternalCorrelationId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv438cuptiActivityPushExternalCorrelationId29CUpti_ExternalCorrelationKind8uint64_t", "priority": 1, "content": "CUptiResult  cuptiActivityPushExternalCorrelationId CUpti_ExternalCorrelationKind  kind uint64_t  id Push an external correlation id for the calling thread. This function notifies CUPTI that the calling thread is entering an external API region. When a CUPTI activity API record is created while within an external API region and CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION is enabled, the activity API record will be preceded by a CUpti_ActivityExternalCorrelation record for each CUpti_ExternalCorrelationKind . Parameters kind \u2013 The kind of external API activities should be correlated with. id \u2013 External correlation id. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 The external API kind is invalid", "keywords": []}, {"id": 835, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityPushExternalCorrelationId::id", "display_name": "cuptiActivityPushExternalCorrelationId::id", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv438cuptiActivityPushExternalCorrelationId29CUpti_ExternalCorrelationKind8uint64_t", "priority": 1, "content": "CUptiResult  cuptiActivityPushExternalCorrelationId CUpti_ExternalCorrelationKind  kind uint64_t  id Push an external correlation id for the calling thread. This function notifies CUPTI that the calling thread is entering an external API region. When a CUPTI activity API record is created while within an external API region and CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION is enabled, the activity API record will be preceded by a CUpti_ActivityExternalCorrelation record for each CUpti_ExternalCorrelationKind . Parameters kind \u2013 The kind of external API activities should be correlated with. id \u2013 External correlation id. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 The external API kind is invalid", "keywords": []}, {"id": 836, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityPushExternalCorrelationId::kind", "display_name": "cuptiActivityPushExternalCorrelationId::kind", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv438cuptiActivityPushExternalCorrelationId29CUpti_ExternalCorrelationKind8uint64_t", "priority": 1, "content": "CUptiResult  cuptiActivityPushExternalCorrelationId CUpti_ExternalCorrelationKind  kind uint64_t  id Push an external correlation id for the calling thread. This function notifies CUPTI that the calling thread is entering an external API region. When a CUPTI activity API record is created while within an external API region and CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION is enabled, the activity API record will be preceded by a CUpti_ActivityExternalCorrelation record for each CUpti_ExternalCorrelationKind . Parameters kind \u2013 The kind of external API activities should be correlated with. id \u2013 External correlation id. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 The external API kind is invalid", "keywords": []}, {"id": 837, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityRegisterCallbacks", "display_name": "cuptiActivityRegisterCallbacks", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430cuptiActivityRegisterCallbacks32CUpti_BuffersCallbackRequestFunc33CUpti_BuffersCallbackCompleteFunc", "priority": 1, "content": "CUptiResult  cuptiActivityRegisterCallbacks CUpti_BuffersCallbackRequestFunc  funcBufferRequested CUpti_BuffersCallbackCompleteFunc  funcBufferCompleted Registers callback functions with CUPTI for activity buffer handling. This function registers two callback functions to be used in asynchronous buffer handling. If registered, activity record buffers are handled using asynchronous requested/completed callbacks from CUPTI. Registering these callbacks prevents the client from using CUPTI\u2019s blocking enqueue/dequeue functions. Parameters funcBufferRequested \u2013 callback which is invoked when an empty buffer is requested by CUPTI funcBufferCompleted \u2013 callback which is invoked when a buffer containing activity records is available from CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if either funcBufferRequested or funcBufferCompleted is NULL", "keywords": []}, {"id": 838, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityRegisterCallbacks::funcBufferCompleted", "display_name": "cuptiActivityRegisterCallbacks::funcBufferCompleted", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430cuptiActivityRegisterCallbacks32CUpti_BuffersCallbackRequestFunc33CUpti_BuffersCallbackCompleteFunc", "priority": 1, "content": "CUptiResult  cuptiActivityRegisterCallbacks CUpti_BuffersCallbackRequestFunc  funcBufferRequested CUpti_BuffersCallbackCompleteFunc  funcBufferCompleted Registers callback functions with CUPTI for activity buffer handling. This function registers two callback functions to be used in asynchronous buffer handling. If registered, activity record buffers are handled using asynchronous requested/completed callbacks from CUPTI. Registering these callbacks prevents the client from using CUPTI\u2019s blocking enqueue/dequeue functions. Parameters funcBufferRequested \u2013 callback which is invoked when an empty buffer is requested by CUPTI funcBufferCompleted \u2013 callback which is invoked when a buffer containing activity records is available from CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if either funcBufferRequested or funcBufferCompleted is NULL", "keywords": []}, {"id": 839, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityRegisterCallbacks::funcBufferRequested", "display_name": "cuptiActivityRegisterCallbacks::funcBufferRequested", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv430cuptiActivityRegisterCallbacks32CUpti_BuffersCallbackRequestFunc33CUpti_BuffersCallbackCompleteFunc", "priority": 1, "content": "CUptiResult  cuptiActivityRegisterCallbacks CUpti_BuffersCallbackRequestFunc  funcBufferRequested CUpti_BuffersCallbackCompleteFunc  funcBufferCompleted Registers callback functions with CUPTI for activity buffer handling. This function registers two callback functions to be used in asynchronous buffer handling. If registered, activity record buffers are handled using asynchronous requested/completed callbacks from CUPTI. Registering these callbacks prevents the client from using CUPTI\u2019s blocking enqueue/dequeue functions. Parameters funcBufferRequested \u2013 callback which is invoked when an empty buffer is requested by CUPTI funcBufferCompleted \u2013 callback which is invoked when a buffer containing activity records is available from CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if either funcBufferRequested or funcBufferCompleted is NULL", "keywords": []}, {"id": 840, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityRegisterTimestampCallback", "display_name": "cuptiActivityRegisterTimestampCallback", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv438cuptiActivityRegisterTimestampCallback27CUpti_TimestampCallbackFunc", "priority": 1, "content": "CUptiResult  cuptiActivityRegisterTimestampCallback CUpti_TimestampCallbackFunc  funcTimestamp Registers callback function with CUPTI for providing timestamp. This function registers a callback function to obtain timestamp of user\u2019s choice instead of using CUPTI provided timestamp. By default CUPTI uses different methods, based on the underlying platform, to retrieve the timestamp Linux and Android use clock_gettime(CLOCK_REALTIME, ..) Windows uses QueryPerformanceCounter() Mac uses mach_absolute_time() QNX uses ClockCycles() Timestamps retrieved using these methods are converted to nanosecond if needed before usage. The registration of timestamp callback should be done before any of the CUPTI activity kinds are enabled to make sure that all the records report the timestamp using the callback function registered through cuptiActivityRegisterTimestampCallback API. Changing the timestamp callback function in CUPTI through cuptiActivityRegisterTimestampCallback API in the middle of the profiling session can cause records generated prior to the change to report timestamps through previous timestamp method. Parameters funcTimestamp \u2013 callback which is invoked when a timestamp is needed by CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if funcTimestamp is NULL CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 841, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivityRegisterTimestampCallback::funcTimestamp", "display_name": "cuptiActivityRegisterTimestampCallback::funcTimestamp", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv438cuptiActivityRegisterTimestampCallback27CUpti_TimestampCallbackFunc", "priority": 1, "content": "CUptiResult  cuptiActivityRegisterTimestampCallback CUpti_TimestampCallbackFunc  funcTimestamp Registers callback function with CUPTI for providing timestamp. This function registers a callback function to obtain timestamp of user\u2019s choice instead of using CUPTI provided timestamp. By default CUPTI uses different methods, based on the underlying platform, to retrieve the timestamp Linux and Android use clock_gettime(CLOCK_REALTIME, ..) Windows uses QueryPerformanceCounter() Mac uses mach_absolute_time() QNX uses ClockCycles() Timestamps retrieved using these methods are converted to nanosecond if needed before usage. The registration of timestamp callback should be done before any of the CUPTI activity kinds are enabled to make sure that all the records report the timestamp using the callback function registered through cuptiActivityRegisterTimestampCallback API. Changing the timestamp callback function in CUPTI through cuptiActivityRegisterTimestampCallback API in the middle of the profiling session can cause records generated prior to the change to report timestamps through previous timestamp method. Parameters funcTimestamp \u2013 callback which is invoked when a timestamp is needed by CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if funcTimestamp is NULL CUPTI_ERROR_NOT_INITIALIZED \u2013", "keywords": []}, {"id": 842, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivitySetAttribute", "display_name": "cuptiActivitySetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivitySetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivitySetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Write an activity API attribute. Write an activity API attribute. Parameters attr \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 843, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivitySetAttribute::attr", "display_name": "cuptiActivitySetAttribute::attr", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivitySetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivitySetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Write an activity API attribute. Write an activity API attribute. Parameters attr \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 844, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivitySetAttribute::value", "display_name": "cuptiActivitySetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivitySetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivitySetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Write an activity API attribute. Write an activity API attribute. Parameters attr \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 845, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiActivitySetAttribute::valueSize", "display_name": "cuptiActivitySetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv425cuptiActivitySetAttribute23CUpti_ActivityAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiActivitySetAttribute CUpti_ActivityAttribute  attr size_t  * valueSize void  * value Write an activity API attribute. Write an activity API attribute. Parameters attr \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attr is not an activity attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 846, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiComputeCapabilitySupported", "display_name": "cuptiComputeCapabilitySupported", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv431cuptiComputeCapabilitySupportediiPi", "priority": 1, "content": "CUptiResult  cuptiComputeCapabilitySupported int  major int  minor int  * support Check support for a compute capability. This function is used to check the support for a device based on it\u2019s compute capability. It sets the support when the compute capability is supported by the current version of CUPTI, and clears it otherwise. This version of CUPTI might not support all GPUs sharing the same compute capability. It is suggested to use API cuptiDeviceSupported which provides correct information. cuptiDeviceSupported  Parameters major \u2013 The major revision number of the compute capability minor \u2013 The minor revision number of the compute capability support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL", "keywords": []}, {"id": 847, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiComputeCapabilitySupported::major", "display_name": "cuptiComputeCapabilitySupported::major", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv431cuptiComputeCapabilitySupportediiPi", "priority": 1, "content": "CUptiResult  cuptiComputeCapabilitySupported int  major int  minor int  * support Check support for a compute capability. This function is used to check the support for a device based on it\u2019s compute capability. It sets the support when the compute capability is supported by the current version of CUPTI, and clears it otherwise. This version of CUPTI might not support all GPUs sharing the same compute capability. It is suggested to use API cuptiDeviceSupported which provides correct information. cuptiDeviceSupported  Parameters major \u2013 The major revision number of the compute capability minor \u2013 The minor revision number of the compute capability support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL", "keywords": []}, {"id": 848, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiComputeCapabilitySupported::minor", "display_name": "cuptiComputeCapabilitySupported::minor", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv431cuptiComputeCapabilitySupportediiPi", "priority": 1, "content": "CUptiResult  cuptiComputeCapabilitySupported int  major int  minor int  * support Check support for a compute capability. This function is used to check the support for a device based on it\u2019s compute capability. It sets the support when the compute capability is supported by the current version of CUPTI, and clears it otherwise. This version of CUPTI might not support all GPUs sharing the same compute capability. It is suggested to use API cuptiDeviceSupported which provides correct information. cuptiDeviceSupported  Parameters major \u2013 The major revision number of the compute capability minor \u2013 The minor revision number of the compute capability support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL", "keywords": []}, {"id": 849, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiComputeCapabilitySupported::support", "display_name": "cuptiComputeCapabilitySupported::support", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv431cuptiComputeCapabilitySupportediiPi", "priority": 1, "content": "CUptiResult  cuptiComputeCapabilitySupported int  major int  minor int  * support Check support for a compute capability. This function is used to check the support for a device based on it\u2019s compute capability. It sets the support when the compute capability is supported by the current version of CUPTI, and clears it otherwise. This version of CUPTI might not support all GPUs sharing the same compute capability. It is suggested to use API cuptiDeviceSupported which provides correct information. cuptiDeviceSupported  Parameters major \u2013 The major revision number of the compute capability minor \u2013 The minor revision number of the compute capability support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL", "keywords": []}, {"id": 850, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceSupported", "display_name": "cuptiDeviceSupported", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiDeviceSupported8CUdevicePi", "priority": 1, "content": "CUptiResult  cuptiDeviceSupported CUdevice  dev int  * support Check support for a compute device. This function is used to check the support for a compute device. It sets the support when the device is supported by the current version of CUPTI, and clears it otherwise. cuptiComputeCapabilitySupported  Parameters dev \u2013 The device handle returned by CUDA Driver API cuDeviceGet support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL CUPTI_ERROR_INVALID_DEVICE \u2013 if dev is not a valid device", "keywords": []}, {"id": 851, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceSupported::dev", "display_name": "cuptiDeviceSupported::dev", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiDeviceSupported8CUdevicePi", "priority": 1, "content": "CUptiResult  cuptiDeviceSupported CUdevice  dev int  * support Check support for a compute device. This function is used to check the support for a compute device. It sets the support when the device is supported by the current version of CUPTI, and clears it otherwise. cuptiComputeCapabilitySupported  Parameters dev \u2013 The device handle returned by CUDA Driver API cuDeviceGet support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL CUPTI_ERROR_INVALID_DEVICE \u2013 if dev is not a valid device", "keywords": []}, {"id": 852, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceSupported::support", "display_name": "cuptiDeviceSupported::support", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiDeviceSupported8CUdevicePi", "priority": 1, "content": "CUptiResult  cuptiDeviceSupported CUdevice  dev int  * support Check support for a compute device. This function is used to check the support for a compute device. It sets the support when the device is supported by the current version of CUPTI, and clears it otherwise. cuptiComputeCapabilitySupported  Parameters dev \u2013 The device handle returned by CUDA Driver API cuDeviceGet support \u2013 Pointer to an integer to return the support status Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if support is NULL CUPTI_ERROR_INVALID_DEVICE \u2013 if dev is not a valid device", "keywords": []}, {"id": 853, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceVirtualizationMode", "display_name": "cuptiDeviceVirtualizationMode", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429cuptiDeviceVirtualizationMode8CUdeviceP30CUpti_DeviceVirtualizationMode", "priority": 1, "content": "CUptiResult  cuptiDeviceVirtualizationMode CUdevice  dev CUpti_DeviceVirtualizationMode  * mode Query the virtualization mode of the device. This function is used to query the virtualization mode of the CUDA device. Parameters dev \u2013 The device handle returned by CUDA Driver API cuDeviceGet mode \u2013 Pointer to an CUpti_DeviceVirtualizationMode to return the virtualization mode Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if dev is not a valid device CUPTI_ERROR_INVALID_PARAMETER \u2013 if mode is NULL", "keywords": []}, {"id": 854, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceVirtualizationMode::dev", "display_name": "cuptiDeviceVirtualizationMode::dev", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429cuptiDeviceVirtualizationMode8CUdeviceP30CUpti_DeviceVirtualizationMode", "priority": 1, "content": "CUptiResult  cuptiDeviceVirtualizationMode CUdevice  dev CUpti_DeviceVirtualizationMode  * mode Query the virtualization mode of the device. This function is used to query the virtualization mode of the CUDA device. Parameters dev \u2013 The device handle returned by CUDA Driver API cuDeviceGet mode \u2013 Pointer to an CUpti_DeviceVirtualizationMode to return the virtualization mode Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if dev is not a valid device CUPTI_ERROR_INVALID_PARAMETER \u2013 if mode is NULL", "keywords": []}, {"id": 855, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceVirtualizationMode::mode", "display_name": "cuptiDeviceVirtualizationMode::mode", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv429cuptiDeviceVirtualizationMode8CUdeviceP30CUpti_DeviceVirtualizationMode", "priority": 1, "content": "CUptiResult  cuptiDeviceVirtualizationMode CUdevice  dev CUpti_DeviceVirtualizationMode  * mode Query the virtualization mode of the device. This function is used to query the virtualization mode of the CUDA device. Parameters dev \u2013 The device handle returned by CUDA Driver API cuDeviceGet mode \u2013 Pointer to an CUpti_DeviceVirtualizationMode to return the virtualization mode Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if dev is not a valid device CUPTI_ERROR_INVALID_PARAMETER \u2013 if mode is NULL", "keywords": []}, {"id": 856, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiFinalize", "display_name": "cuptiFinalize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv413cuptiFinalizev", "priority": 1, "content": "CUptiResult  cuptiFinalize void Detach CUPTI from the running process. This API detaches the CUPTI from the running process. It destroys and cleans up all the resources associated with CUPTI in the current process. After CUPTI detaches from the process, the process will keep on running with no CUPTI attached to it. For safe operation of the API, it is recommended this API is invoked from the exit callsite of any of the CUDA Driver or Runtime API. Otherwise CUPTI client needs to make sure that required CUDA synchronization and CUPTI activity buffer flush is done before calling the API. Sample code showing the usage of the API in the cupti callback handler code: void  CUPTIAPI  cuptiCallbackHandler(void  *userdata,  CUpti_CallbackDomain  domain,      CUpti_CallbackId  cbid,  void  *cbdata)  {    const  CUpti_CallbackData  *cbInfo  =  (CUpti_CallbackData  *)cbdata;     //  Take  this  code  path  when  CUPTI  detach  is  requested    if  (detachCupti)  {      switch(domain)      {        case  CUPTI_CB_DOMAIN_RUNTIME_API:        case  CUPTI_CB_DOMAIN_DRIVER_API:          if  (cbInfo-&gt;callbackSite  ==  CUPTI_API_EXIT)  {              //  call  the  CUPTI  detach  API              cuptiFinalize();          }          break;        default:          break;      }    }  }", "keywords": []}, {"id": 857, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetAutoBoostState", "display_name": "cuptiGetAutoBoostState", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv422cuptiGetAutoBoostState9CUcontextP28CUpti_ActivityAutoBoostState", "priority": 1, "content": "CUptiResult  cuptiGetAutoBoostState CUcontext  context CUpti_ActivityAutoBoostState  * state Get auto boost state. The profiling results can be inconsistent in case auto boost is enabled. CUPTI tries to disable auto boost while profiling. It can fail to disable in cases where user does not have the permissions or CUDA_AUTO_BOOST env variable is set. The function can be used to query whether auto boost is enabled. Parameters context \u2013 A valid CUcontext. state \u2013 A pointer to CUpti_ActivityAutoBoostState structure which contains the current state and the id of the process that has requested the current state Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if CUcontext or state is NULL CUPTI_ERROR_NOT_SUPPORTED \u2013 Indicates that the device does not support auto boost CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 858, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetAutoBoostState::context", "display_name": "cuptiGetAutoBoostState::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv422cuptiGetAutoBoostState9CUcontextP28CUpti_ActivityAutoBoostState", "priority": 1, "content": "CUptiResult  cuptiGetAutoBoostState CUcontext  context CUpti_ActivityAutoBoostState  * state Get auto boost state. The profiling results can be inconsistent in case auto boost is enabled. CUPTI tries to disable auto boost while profiling. It can fail to disable in cases where user does not have the permissions or CUDA_AUTO_BOOST env variable is set. The function can be used to query whether auto boost is enabled. Parameters context \u2013 A valid CUcontext. state \u2013 A pointer to CUpti_ActivityAutoBoostState structure which contains the current state and the id of the process that has requested the current state Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if CUcontext or state is NULL CUPTI_ERROR_NOT_SUPPORTED \u2013 Indicates that the device does not support auto boost CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 859, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetAutoBoostState::state", "display_name": "cuptiGetAutoBoostState::state", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv422cuptiGetAutoBoostState9CUcontextP28CUpti_ActivityAutoBoostState", "priority": 1, "content": "CUptiResult  cuptiGetAutoBoostState CUcontext  context CUpti_ActivityAutoBoostState  * state Get auto boost state. The profiling results can be inconsistent in case auto boost is enabled. CUPTI tries to disable auto boost while profiling. It can fail to disable in cases where user does not have the permissions or CUDA_AUTO_BOOST env variable is set. The function can be used to query whether auto boost is enabled. Parameters context \u2013 A valid CUcontext. state \u2013 A pointer to CUpti_ActivityAutoBoostState structure which contains the current state and the id of the process that has requested the current state Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if CUcontext or state is NULL CUPTI_ERROR_NOT_SUPPORTED \u2013 Indicates that the device does not support auto boost CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred", "keywords": []}, {"id": 860, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetContextId", "display_name": "cuptiGetContextId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417cuptiGetContextId9CUcontextP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetContextId CUcontext  context uint32_t  * contextId Get the ID of a context. Get the ID of a context. Parameters context \u2013 The context contextId \u2013 Returns a process-unique ID for the context Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 The context is NULL or not valid. CUPTI_ERROR_INVALID_PARAMETER \u2013 if contextId is NULL", "keywords": []}, {"id": 861, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetContextId::context", "display_name": "cuptiGetContextId::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417cuptiGetContextId9CUcontextP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetContextId CUcontext  context uint32_t  * contextId Get the ID of a context. Get the ID of a context. Parameters context \u2013 The context contextId \u2013 Returns a process-unique ID for the context Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 The context is NULL or not valid. CUPTI_ERROR_INVALID_PARAMETER \u2013 if contextId is NULL", "keywords": []}, {"id": 862, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetContextId::contextId", "display_name": "cuptiGetContextId::contextId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417cuptiGetContextId9CUcontextP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetContextId CUcontext  context uint32_t  * contextId Get the ID of a context. Get the ID of a context. Parameters context \u2013 The context contextId \u2013 Returns a process-unique ID for the context Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 The context is NULL or not valid. CUPTI_ERROR_INVALID_PARAMETER \u2013 if contextId is NULL", "keywords": []}, {"id": 863, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetDeviceId", "display_name": "cuptiGetDeviceId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetDeviceId9CUcontextP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetDeviceId CUcontext  context uint32_t  * deviceId Get the ID of a device. If context is NULL, returns the ID of the device that contains the currently active context. If context is non-NULL, returns the ID of the device which contains that context. Operates in a similar manner to cudaGetDevice() or cuCtxGetDevice() but may be called from within callback functions. Parameters context \u2013 The context, or NULL to indicate the current context. deviceId \u2013 Returns the ID of the device that is current for the calling thread. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if unable to get device ID CUPTI_ERROR_INVALID_PARAMETER \u2013 if deviceId is NULL", "keywords": []}, {"id": 864, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetDeviceId::context", "display_name": "cuptiGetDeviceId::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetDeviceId9CUcontextP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetDeviceId CUcontext  context uint32_t  * deviceId Get the ID of a device. If context is NULL, returns the ID of the device that contains the currently active context. If context is non-NULL, returns the ID of the device which contains that context. Operates in a similar manner to cudaGetDevice() or cuCtxGetDevice() but may be called from within callback functions. Parameters context \u2013 The context, or NULL to indicate the current context. deviceId \u2013 Returns the ID of the device that is current for the calling thread. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if unable to get device ID CUPTI_ERROR_INVALID_PARAMETER \u2013 if deviceId is NULL", "keywords": []}, {"id": 865, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetDeviceId::deviceId", "display_name": "cuptiGetDeviceId::deviceId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetDeviceId9CUcontextP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetDeviceId CUcontext  context uint32_t  * deviceId Get the ID of a device. If context is NULL, returns the ID of the device that contains the currently active context. If context is non-NULL, returns the ID of the device which contains that context. Operates in a similar manner to cudaGetDevice() or cuCtxGetDevice() but may be called from within callback functions. Parameters context \u2013 The context, or NULL to indicate the current context. deviceId \u2013 Returns the ID of the device that is current for the calling thread. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if unable to get device ID CUPTI_ERROR_INVALID_PARAMETER \u2013 if deviceId is NULL", "keywords": []}, {"id": 866, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphExecId", "display_name": "cuptiGetGraphExecId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiGetGraphExecId11CUgraphExecP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphExecId CUgraphExec  graphExec uint32_t  * pId Get the unique ID of executable graph. Returns the unique ID of executable CUDA graph. Parameters graphExec \u2013 The executable graph. pId \u2013 Returns the unique ID of the executable graph Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if graph is NULL", "keywords": []}, {"id": 867, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphExecId::graphExec", "display_name": "cuptiGetGraphExecId::graphExec", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiGetGraphExecId11CUgraphExecP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphExecId CUgraphExec  graphExec uint32_t  * pId Get the unique ID of executable graph. Returns the unique ID of executable CUDA graph. Parameters graphExec \u2013 The executable graph. pId \u2013 Returns the unique ID of the executable graph Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if graph is NULL", "keywords": []}, {"id": 868, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphExecId::pId", "display_name": "cuptiGetGraphExecId::pId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiGetGraphExecId11CUgraphExecP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphExecId CUgraphExec  graphExec uint32_t  * pId Get the unique ID of executable graph. Returns the unique ID of executable CUDA graph. Parameters graphExec \u2013 The executable graph. pId \u2013 Returns the unique ID of the executable graph Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if graph is NULL", "keywords": []}, {"id": 869, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphId", "display_name": "cuptiGetGraphId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv415cuptiGetGraphId7CUgraphP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphId CUgraph  graph uint32_t  * pId Get the unique ID of graph. Returns the unique ID of CUDA graph. Parameters graph \u2013 The graph. pId \u2013 Returns the unique ID of the graph Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if graph is NULL", "keywords": []}, {"id": 870, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphId::graph", "display_name": "cuptiGetGraphId::graph", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv415cuptiGetGraphId7CUgraphP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphId CUgraph  graph uint32_t  * pId Get the unique ID of graph. Returns the unique ID of CUDA graph. Parameters graph \u2013 The graph. pId \u2013 Returns the unique ID of the graph Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if graph is NULL", "keywords": []}, {"id": 871, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphId::pId", "display_name": "cuptiGetGraphId::pId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv415cuptiGetGraphId7CUgraphP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphId CUgraph  graph uint32_t  * pId Get the unique ID of graph. Returns the unique ID of CUDA graph. Parameters graph \u2013 The graph. pId \u2013 Returns the unique ID of the graph Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if graph is NULL", "keywords": []}, {"id": 872, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphNodeId", "display_name": "cuptiGetGraphNodeId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiGetGraphNodeId11CUgraphNodeP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphNodeId CUgraphNode  node uint64_t  * nodeId Get the unique ID of a graph node. Returns the unique ID of the CUDA graph node. Parameters node \u2013 The graph node. nodeId \u2013 Returns the unique ID of the node Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if node is NULL", "keywords": []}, {"id": 873, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphNodeId::node", "display_name": "cuptiGetGraphNodeId::node", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiGetGraphNodeId11CUgraphNodeP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphNodeId CUgraphNode  node uint64_t  * nodeId Get the unique ID of a graph node. Returns the unique ID of the CUDA graph node. Parameters node \u2013 The graph node. nodeId \u2013 Returns the unique ID of the node Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if node is NULL", "keywords": []}, {"id": 874, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetGraphNodeId::nodeId", "display_name": "cuptiGetGraphNodeId::nodeId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv419cuptiGetGraphNodeId11CUgraphNodeP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiGetGraphNodeId CUgraphNode  node uint64_t  * nodeId Get the unique ID of a graph node. Returns the unique ID of the CUDA graph node. Parameters node \u2013 The graph node. nodeId \u2013 Returns the unique ID of the node Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if node is NULL", "keywords": []}, {"id": 875, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetLastError", "display_name": "cuptiGetLastError", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417cuptiGetLastErrorv", "priority": 1, "content": "CUptiResult  cuptiGetLastError void Returns the last error from a cupti call or callback. Returns the last error that has been produced by any of the cupti api calls or the callback in the same host thread and resets it to CUPTI_SUCCESS.", "keywords": []}, {"id": 876, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamId", "display_name": "cuptiGetStreamId", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetStreamId9CUcontext8CUstreamP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamId CUcontext  context CUstream  stream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). DEPRECATED This method is deprecated as of CUDA 8.0. Use method cuptiGetStreamIdEx instead. Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 877, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamId::context", "display_name": "cuptiGetStreamId::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetStreamId9CUcontext8CUstreamP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamId CUcontext  context CUstream  stream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). DEPRECATED This method is deprecated as of CUDA 8.0. Use method cuptiGetStreamIdEx instead. Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 878, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamId::stream", "display_name": "cuptiGetStreamId::stream", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetStreamId9CUcontext8CUstreamP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamId CUcontext  context CUstream  stream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). DEPRECATED This method is deprecated as of CUDA 8.0. Use method cuptiGetStreamIdEx instead. Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 879, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamId::streamId", "display_name": "cuptiGetStreamId::streamId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv416cuptiGetStreamId9CUcontext8CUstreamP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamId CUcontext  context CUstream  stream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). DEPRECATED This method is deprecated as of CUDA 8.0. Use method cuptiGetStreamIdEx instead. Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 880, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamIdEx", "display_name": "cuptiGetStreamIdEx", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiGetStreamIdEx9CUcontext8CUstream7uint8_tP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamIdEx CUcontext  context CUstream  stream uint8_t  perThreadStream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream perThreadStream \u2013 Flag to indicate if program is compiled for per-thread streams streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 881, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamIdEx::context", "display_name": "cuptiGetStreamIdEx::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiGetStreamIdEx9CUcontext8CUstream7uint8_tP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamIdEx CUcontext  context CUstream  stream uint8_t  perThreadStream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream perThreadStream \u2013 Flag to indicate if program is compiled for per-thread streams streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 882, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamIdEx::perThreadStream", "display_name": "cuptiGetStreamIdEx::perThreadStream", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiGetStreamIdEx9CUcontext8CUstream7uint8_tP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamIdEx CUcontext  context CUstream  stream uint8_t  perThreadStream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream perThreadStream \u2013 Flag to indicate if program is compiled for per-thread streams streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 883, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamIdEx::stream", "display_name": "cuptiGetStreamIdEx::stream", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiGetStreamIdEx9CUcontext8CUstream7uint8_tP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamIdEx CUcontext  context CUstream  stream uint8_t  perThreadStream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream perThreadStream \u2013 Flag to indicate if program is compiled for per-thread streams streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 884, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetStreamIdEx::streamId", "display_name": "cuptiGetStreamIdEx::streamId", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv418cuptiGetStreamIdEx9CUcontext8CUstream7uint8_tP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetStreamIdEx CUcontext  context CUstream  stream uint8_t  perThreadStream uint32_t  * streamId Get the ID of a stream. Get the ID of a stream. The stream ID is unique within a context (i.e. all streams within a context will have unique stream IDs). Parameters context \u2013 If non-NULL then the stream is checked to ensure that it belongs to this context. Typically this parameter should be null. stream \u2013 The stream perThreadStream \u2013 Flag to indicate if program is compiled for per-thread streams streamId \u2013 Returns a context-unique ID for the stream Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_STREAM \u2013 if unable to get stream ID, or if context is non-NULL and stream does not belong to the context CUPTI_ERROR_INVALID_PARAMETER \u2013 if streamId is NULL", "keywords": []}, {"id": 885, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetThreadIdType", "display_name": "cuptiGetThreadIdType", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiGetThreadIdTypeP26CUpti_ActivityThreadIdType", "priority": 1, "content": "CUptiResult  cuptiGetThreadIdType CUpti_ActivityThreadIdType  * type Get the thread-id type. Returns the thread-id type used in CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if type is NULL", "keywords": []}, {"id": 886, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetThreadIdType::type", "display_name": "cuptiGetThreadIdType::type", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiGetThreadIdTypeP26CUpti_ActivityThreadIdType", "priority": 1, "content": "CUptiResult  cuptiGetThreadIdType CUpti_ActivityThreadIdType  * type Get the thread-id type. Returns the thread-id type used in CUPTI Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if type is NULL", "keywords": []}, {"id": 887, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetTimestamp", "display_name": "cuptiGetTimestamp", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417cuptiGetTimestampP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiGetTimestamp uint64_t  * timestamp Get the CUPTI timestamp. Returns a timestamp normalized to correspond with the start and end timestamps reported in the CUPTI activity records. The timestamp is reported in nanoseconds. Parameters timestamp \u2013 Returns the CUPTI timestamp Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if timestamp is NULL", "keywords": []}, {"id": 888, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetTimestamp::timestamp", "display_name": "cuptiGetTimestamp::timestamp", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv417cuptiGetTimestampP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiGetTimestamp uint64_t  * timestamp Get the CUPTI timestamp. Returns a timestamp normalized to correspond with the start and end timestamps reported in the CUPTI activity records. The timestamp is reported in nanoseconds. Parameters timestamp \u2013 Returns the CUPTI timestamp Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if timestamp is NULL", "keywords": []}, {"id": 889, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiSetThreadIdType", "display_name": "cuptiSetThreadIdType", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiSetThreadIdType26CUpti_ActivityThreadIdType", "priority": 1, "content": "CUptiResult  cuptiSetThreadIdType CUpti_ActivityThreadIdType  type Set the thread-id type. CUPTI uses the method corresponding to set type to generate the thread-id. See enum CUpti_ActivityThreadIdType for the list of methods. Activity records having thread-id field contain the same value. Thread id type must not be changed during the profiling session to avoid thread-id value mismatch across activity records. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_SUPPORTED \u2013 if type is not supported on the platform", "keywords": []}, {"id": 890, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "cpp", "name": "cuptiSetThreadIdType::type", "display_name": "cuptiSetThreadIdType::type", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "_CPPv420cuptiSetThreadIdType26CUpti_ActivityThreadIdType", "priority": 1, "content": "CUptiResult  cuptiSetThreadIdType CUpti_ActivityThreadIdType  type Set the thread-id type. CUPTI uses the method corresponding to set type to generate the thread-id. See enum CUpti_ActivityThreadIdType for the list of methods. Activity records having thread-id field contain the same value. Thread id type must not be changed during the profiling session to avoid thread-id value mismatch across activity records. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_SUPPORTED \u2013 if type is not supported on the platform", "keywords": []}, {"id": 891, "doc_id": 891, "filename": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "display_name": "CUPTI Activity API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___a_c_t_i_v_i_t_y___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Activity API. Data Structures CUpti_Activity  The base activity record. CUpti_ActivityAPI  The activity record for a driver or runtime API invocation. CUpti_ActivityAutoBoostState  Device auto boost state structure. CUpti_ActivityBranch2  The activity record for source level result branch. CUpti_ActivityCdpKernel  The activity record for CDP (CUDA Dynamic Parallelism) kernel. CUpti_ActivityContext3  The activity record for a context. CUpti_ActivityCudaEvent  The activity record for CUDA event. CUpti_ActivityDevice5  The activity record for a device. CUpti_ActivityDeviceAttribute  The activity record for a device attribute. CUpti_ActivityEnvironment  The activity record for CUPTI environmental data. CUpti_ActivityEvent  The activity record for a CUPTI event. CUpti_ActivityEventInstance  The activity record for a CUPTI event with instance information. CUpti_ActivityExternalCorrelation  The activity record for correlation with external records. CUpti_ActivityFunction  The activity record for global/device functions. CUpti_ActivityGlobalAccess3  The activity record for source-level global access. CUpti_ActivityGraphTrace2  The activity record for trace of graph execution. CUpti_ActivityInstantaneousEvent  The activity record for an instantaneous CUPTI event. CUpti_ActivityInstantaneousEventInstance  The activity record for an instantaneous CUPTI event with event domain instance information. CUpti_ActivityInstantaneousMetric  The activity record for an instantaneous CUPTI metric. CUpti_ActivityInstantaneousMetricInstance  The instantaneous activity record for a CUPTI metric with instance information. CUpti_ActivityInstructionCorrelation  The activity record for source-level sass/source line-by-line correlation. CUpti_ActivityInstructionExecution  The activity record for source-level instruction execution. CUpti_ActivityJit2  The activity record for JIT operations. CUpti_ActivityKernel9  The activity record for kernel. CUpti_ActivityMarker2  The activity record providing a marker which is an instantaneous point in time. CUpti_ActivityMarkerData  The activity record providing detailed information for a marker. CUpti_ActivityMemcpy5  The activity record for memory copies. CUpti_ActivityMemcpyPtoP4  The activity record for peer-to-peer memory copies. CUpti_ActivityMemory  The activity record for memory. CUpti_ActivityMemory4  The activity record for memory. CUpti_ActivityMemoryPool2  The activity record for memory pool. CUpti_ActivityMemset4  The activity record for memset. CUpti_ActivityMetric  The activity record for a CUPTI metric. CUpti_ActivityMetricInstance  The activity record for a CUPTI metric with instance information. CUpti_ActivityModule  The activity record for a CUDA module. CUpti_ActivityName  The activity record providing a name. CUpti_ActivityNvLink4  NVLink information. CUpti_ActivityObjectKindId  Identifiers for object kinds as specified by CUpti_ActivityObjectKind. CUpti_ActivityOpenAcc  The base activity record for OpenAcc records. CUpti_ActivityOpenAccData  The activity record for OpenACC data. CUpti_ActivityOpenAccLaunch  The activity record for OpenACC launch. CUpti_ActivityOpenAccOther  The activity record for OpenACC other. CUpti_ActivityOpenMp  The base activity record for OpenMp records. CUpti_ActivityOverhead3  The activity record for CUPTI and driver overheads. CUpti_ActivityOverheadCommandBufferFullData  The structure to provide additional data for CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL. CUpti_ActivityPCSampling3  The activity record for PC sampling. CUpti_ActivityPCSamplingConfig  PC sampling configuration structure. CUpti_ActivityPCSamplingRecordInfo  The activity record for record status for PC sampling. CUpti_ActivityPcie  PCI devices information required to construct topology. CUpti_ActivityPreemption  The activity record for a preemption of a CDP kernel. CUpti_ActivitySharedAccess  The activity record for source-level shared access. CUpti_ActivitySourceLocator  The activity record for source locator. CUpti_ActivityStream  The activity record for CUDA stream. CUpti_ActivitySynchronization  The activity record for synchronization management. CUpti_ActivityUnifiedMemoryCounter2  The activity record for Unified Memory counters (CUDA 7.0 and beyond) CUpti_ActivityUnifiedMemoryCounterConfig  Unified Memory counters configuration structure. Macros CUPTI_AUTO_BOOST_INVALID_CLIENT_PID  An invalid/unknown process id. CUPTI_CORRELATION_ID_UNKNOWN  An invalid/unknown correlation ID. CUPTI_FUNCTION_INDEX_ID_INVALID  An invalid function index ID. CUPTI_GRID_ID_UNKNOWN  An invalid/unknown grid ID. CUPTI_MAX_GPUS   CUPTI_MAX_NVLINK_PORTS  Maximum NVLink port numbers. CUPTI_NVLINK_INVALID_PORT  Invalid/unknown NVLink port number. CUPTI_SOURCE_LOCATOR_ID_UNKNOWN  The source-locator ID that indicates an unknown source location. CUPTI_SYNCHRONIZATION_INVALID_VALUE  An invalid/unknown value. CUPTI_TIMESTAMP_UNKNOWN  An invalid/unknown timestamp for a start, end, queued, submitted, or completed time. Enumerations CUpti_ActivityAttribute  Activity attributes. CUpti_ActivityComputeApiKind  The kind of a compute API. CUpti_ActivityEnvironmentKind  The kind of environment data. CUpti_ActivityFlag  Flags associated with activity records. CUpti_ActivityInstructionClass  SASS instruction classification. CUpti_ActivityJitEntryType  The types of JIT entry. CUpti_ActivityJitOperationType  The types of JIT compilation operations. CUpti_ActivityKind  The kinds of activity records. CUpti_ActivityLaunchType  The type of the CUDA kernel launch. CUpti_ActivityMemcpyKind  The kind of a memory copy, indicating the source and destination targets of the copy. CUpti_ActivityMemoryKind  The kinds of memory accessed by a memory operation/copy. CUpti_ActivityMemoryOperationType  Memory operation types. CUpti_ActivityMemoryPoolOperationType  Memory pool operation types. CUpti_ActivityMemoryPoolType  Memory pool types. CUpti_ActivityObjectKind  The kinds of activity objects. CUpti_ActivityOverheadKind  The kinds of activity overhead. CUpti_ActivityPCSamplingPeriod  Sampling period for PC sampling method. CUpti_ActivityPCSamplingStallReason  The stall reason for PC sampling activity. CUpti_ActivityPartitionedGlobalCacheConfig  Partitioned global caching option. CUpti_ActivityPreemptionKind  The kind of a preemption activity. CUpti_ActivityStreamFlag  stream type. CUpti_ActivitySynchronizationType  Synchronization type. CUpti_ActivityThreadIdType  Thread-Id types. CUpti_ActivityUnifiedMemoryAccessType  Memory access type for unified memory page faults. CUpti_ActivityUnifiedMemoryCounterKind  Kind of the Unified Memory counter. CUpti_ActivityUnifiedMemoryCounterScope  Scope of the unified memory counter (deprecated in CUDA 7.0) CUpti_ActivityUnifiedMemoryMigrationCause  Migration cause of the Unified Memory counter. CUpti_ActivityUnifiedMemoryRemoteMapCause  Remote memory map cause of the Unified Memory counter. CUpti_ChannelType   CUpti_ContextCigMode  CIG (CUDA in Graphics) Modes. CUpti_DevType  The device type for device connected to NVLink. CUpti_DeviceVirtualizationMode  This indicates the virtualization mode in which CUDA device is running. CUpti_EnvironmentClocksThrottleReason  Reasons for clock throttling. CUpti_ExternalCorrelationKind  The kind of external APIs supported for correlation. CUpti_FuncShmemLimitConfig  The shared memory limit per block config for a kernel This should be used to set &#x27;cudaOccFuncShmemConfig&#x27; field in occupancy calculator API. CUpti_LinkFlag  Link flags. CUpti_OpenAccConstructKind  The OpenAcc parent construct kind for OpenAcc activity records. CUpti_OpenAccEventKind  The OpenAcc event kind for OpenAcc activity records. CUpti_OpenMpEventKind   CUpti_PcieDeviceType  Field to differentiate whether PCIE Activity record is of a GPU or a PCI Bridge. CUpti_PcieGen  PCIE Generation. Functions CUptiResult  cuptiActivityConfigurePCSampling (CUcontext ctx, CUpti_ActivityPCSamplingConfig *config) Set PC sampling configuration. CUptiResult  cuptiActivityConfigureUnifiedMemoryCounter (CUpti_ActivityUnifiedMemoryCounterConfig *config, uint32_t count) Set Unified Memory Counter configuration. CUptiResult  cuptiActivityDisable (CUpti_ActivityKind kind) Disable collection of a specific kind of activity record. CUptiResult  cuptiActivityDisableContext (CUcontext context, CUpti_ActivityKind kind) Disable collection of a specific kind of activity record for a context. CUptiResult  cuptiActivityEnable (CUpti_ActivityKind kind) Enable collection of a specific kind of activity record. CUptiResult  cuptiActivityEnableAndDump (CUpti_ActivityKind kind) Enable collection of a specific kind of activity record. CUptiResult  cuptiActivityEnableContext (CUcontext context, CUpti_ActivityKind kind) Enable collection of a specific kind of activity record for a context. CUptiResult  cuptiActivityEnableDeviceGraph (uint8_t enable) Controls the collection of records for device launched graphs. CUptiResult  cuptiActivityEnableDriverApi (CUpti_CallbackId cbid, uint8_t enable) Controls the collection of activity records for specific CUDA Driver APIs. CUptiResult  cuptiActivityEnableLatencyTimestamps (uint8_t enable) Controls the collection of queued and submitted timestamps for kernels. CUptiResult  cuptiActivityEnableLaunchAttributes (uint8_t enable) Controls the collection of launch attributes for kernels. CUptiResult  cuptiActivityEnableRuntimeApi (CUpti_CallbackId cbid, uint8_t enable) Controls the collection of activity records for specific CUDA Runtime APIs. CUptiResult  cuptiActivityFlush (CUcontext context, uint32_t streamId, uint32_t flag) Wait for all activity records to be delivered via the completion callback. CUptiResult  cuptiActivityFlushAll (uint32_t flag) Request to deliver activity records via the buffer completion callback. CUptiResult  cuptiActivityFlushPeriod (uint32_t time) Sets the flush period for the worker thread. CUptiResult  cuptiActivityGetAttribute (CUpti_ActivityAttribute attr, size_t *valueSize, void *value) Read an activity API attribute. CUptiResult  cuptiActivityGetNextRecord (uint8_t *buffer, size_t validBufferSizeBytes, CUpti_Activity **record) Iterate over the activity records in a buffer. CUptiResult  cuptiActivityGetNumDroppedRecords (CUcontext context, uint32_t streamId, size_t *dropped) Get the number of activity records that were dropped of insufficient buffer space. CUptiResult  cuptiActivityPopExternalCorrelationId (CUpti_ExternalCorrelationKind kind, uint64_t *lastId) Pop an external correlation id for the calling thread. CUptiResult  cuptiActivityPushExternalCorrelationId (CUpti_ExternalCorrelationKind kind, uint64_t id) Push an external correlation id for the calling thread. CUptiResult  cuptiActivityRegisterCallbacks (CUpti_BuffersCallbackRequestFunc funcBufferRequested, CUpti_BuffersCallbackCompleteFunc funcBufferCompleted) Registers callback functions with CUPTI for activity buffer handling. CUptiResult  cuptiActivityRegisterTimestampCallback (CUpti_TimestampCallbackFunc funcTimestamp) Registers callback function with CUPTI for providing timestamp. CUptiResult  cuptiActivitySetAttribute (CUpti_ActivityAttribute attr, size_t *valueSize, void *value) Write an activity API attribute. CUptiResult  cuptiComputeCapabilitySupported (int major, int minor, int *support) Check support for a compute capability. CUptiResult  cuptiDeviceSupported (CUdevice dev, int *support) Check support for a compute device. CUptiResult  cuptiDeviceVirtualizationMode (CUdevice dev, CUpti_DeviceVirtualizationMode *mode) Query the virtualization mode of the device. CUptiResult  cuptiFinalize (void) Detach CUPTI from the running process. CUptiResult  cuptiGetAutoBoostState (CUcontext context, CUpti_ActivityAutoBoostState *state) Get auto boost state. CUptiResult  cuptiGetContextId (CUcontext context, uint32_t *contextId) Get the ID of a context. CUptiResult  cuptiGetDeviceId (CUcontext context, uint32_t *deviceId) Get the ID of a device. CUptiResult  cuptiGetGraphExecId (CUgraphExec graphExec, uint32_t *pId) Get the unique ID of executable graph. CUptiResult  cuptiGetGraphId (CUgraph graph, uint32_t *pId) Get the unique ID of graph. CUptiResult  cuptiGetGraphNodeId (CUgraphNode node, uint64_t *nodeId) Get the unique ID of a graph node. CUptiResult  cuptiGetLastError (void) Returns the last error from a cupti call or callback. CUptiResult  cuptiGetStreamId (CUcontext context, CUstream stream, uint32_t *streamId) Get the ID of a stream. CUptiResult  cuptiGetStreamIdEx (CUcontext context, CUstream stream, uint8_t perThreadStream, uint32_t *streamId) Get the ID of a stream. CUptiResult  cuptiGetThreadIdType (CUpti_ActivityThreadIdType *type) Get the thread-id type. CUptiResult  cuptiGetTimestamp (uint64_t *timestamp) Get the CUPTI timestamp. CUptiResult  cuptiSetThreadIdType (CUpti_ActivityThreadIdType type) Set the thread-id type. Typedefs CUpti_BuffersCallbackCompleteFunc  Function type for callback used by CUPTI to return a buffer of activity records. CUpti_BuffersCallbackRequestFunc  Function type for callback used by CUPTI to request an empty buffer for storing activity records. CUpti_TimestampCallbackFunc  Function type for callback used by CUPTI to request a timestamp to be used in activity records.", "keywords": []}, {"id": 892, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_API_CBSITE_FORCE_INT", "display_name": "CUPTI_API_CBSITE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_ApiCallbackSite26CUPTI_API_CBSITE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_API_CBSITE_FORCE_INT", "keywords": []}, {"id": 893, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_API_ENTER", "display_name": "CUPTI_API_ENTER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_ApiCallbackSite15CUPTI_API_ENTERE", "priority": 1, "content": "enumerator  CUPTI_API_ENTER The callback is at the entry of the API call.", "keywords": []}, {"id": 894, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_API_EXIT", "display_name": "CUPTI_API_EXIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_ApiCallbackSite14CUPTI_API_EXITE", "priority": 1, "content": "enumerator  CUPTI_API_EXIT The callback is at the exit of the API call.", "keywords": []}, {"id": 895, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_CONTEXT_CREATED", "display_name": "CUPTI_CBID_RESOURCE_CONTEXT_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource35CUPTI_CBID_RESOURCE_CONTEXT_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_CONTEXT_CREATED A new context has been created.", "keywords": []}, {"id": 896, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING", "display_name": "CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource44CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING A context is about to be destroyed.", "keywords": []}, {"id": 897, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_CU_INIT_FINISHED", "display_name": "CUPTI_CBID_RESOURCE_CU_INIT_FINISHED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource36CUPTI_CBID_RESOURCE_CU_INIT_FINISHEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_CU_INIT_FINISHED The driver has finished initializing.", "keywords": []}, {"id": 898, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_FORCE_INT", "display_name": "CUPTI_CBID_RESOURCE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource29CUPTI_CBID_RESOURCE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_FORCE_INT", "keywords": []}, {"id": 899, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED", "display_name": "CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource37CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED An executable CUDA graph is created.", "keywords": []}, {"id": 900, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING", "display_name": "CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource45CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING An executable CUDA graph is about to be created.", "keywords": []}, {"id": 901, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING", "display_name": "CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource46CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING An executable CUDA graph is about to be destroyed.", "keywords": []}, {"id": 902, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED", "display_name": "CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource36CUPTI_CBID_RESOURCE_GRAPHNODE_CLONEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED CUDA graph node is cloned.", "keywords": []}, {"id": 903, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED", "display_name": "CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource37CUPTI_CBID_RESOURCE_GRAPHNODE_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED CUDA graph node is created.", "keywords": []}, {"id": 904, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING", "display_name": "CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource45CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING CUDA graph node is about to be created.", "keywords": []}, {"id": 905, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED", "display_name": "CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource48CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED Dependency on a CUDA graph node is created.", "keywords": []}, {"id": 906, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING", "display_name": "CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource57CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING Dependency on a CUDA graph node is destroyed.", "keywords": []}, {"id": 907, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING", "display_name": "CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource46CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING CUDA graph node is about to be destroyed.", "keywords": []}, {"id": 908, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPH_CLONED", "display_name": "CUPTI_CBID_RESOURCE_GRAPH_CLONED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource32CUPTI_CBID_RESOURCE_GRAPH_CLONEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPH_CLONED CUDA graph is cloned.", "keywords": []}, {"id": 909, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPH_CREATED", "display_name": "CUPTI_CBID_RESOURCE_GRAPH_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource33CUPTI_CBID_RESOURCE_GRAPH_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPH_CREATED CUDA graph has been created.", "keywords": []}, {"id": 910, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING", "display_name": "CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource42CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING CUDA graph is about to be destroyed.", "keywords": []}, {"id": 911, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_INVALID", "display_name": "CUPTI_CBID_RESOURCE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource27CUPTI_CBID_RESOURCE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_INVALID Invalid resource callback ID.", "keywords": []}, {"id": 912, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_MODULE_LOADED", "display_name": "CUPTI_CBID_RESOURCE_MODULE_LOADED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource33CUPTI_CBID_RESOURCE_MODULE_LOADEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_MODULE_LOADED A module has been loaded.", "keywords": []}, {"id": 913, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_MODULE_PROFILED", "display_name": "CUPTI_CBID_RESOURCE_MODULE_PROFILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource35CUPTI_CBID_RESOURCE_MODULE_PROFILEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_MODULE_PROFILED The current module which is being profiled.", "keywords": []}, {"id": 914, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING", "display_name": "CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource42CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING A module is about to be unloaded.", "keywords": []}, {"id": 915, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_SIZE", "display_name": "CUPTI_CBID_RESOURCE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource24CUPTI_CBID_RESOURCE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_SIZE", "keywords": []}, {"id": 916, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED", "display_name": "CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource44CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED CUDA stream attribute is changed.", "keywords": []}, {"id": 917, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_STREAM_CREATED", "display_name": "CUPTI_CBID_RESOURCE_STREAM_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource34CUPTI_CBID_RESOURCE_STREAM_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_STREAM_CREATED A new stream has been created.", "keywords": []}, {"id": 918, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING", "display_name": "CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource43CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING A stream is about to be destroyed.", "keywords": []}, {"id": 919, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_STATE_ERROR", "display_name": "CUPTI_CBID_STATE_ERROR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState22CUPTI_CBID_STATE_ERRORE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_ERROR Notification of non fatal errors - high impact, but recoverable This notification is not issued in the current release.", "keywords": []}, {"id": 920, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_STATE_FATAL_ERROR", "display_name": "CUPTI_CBID_STATE_FATAL_ERROR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState28CUPTI_CBID_STATE_FATAL_ERRORE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_FATAL_ERROR Notification of fatal errors - high impact, non-recoverable When encountered, CUPTI automatically invokes cuptiFinalize() User can control behavior of the application in future from receiving this callback - such as continuing without profiling, or terminating the whole application.", "keywords": []}, {"id": 921, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_STATE_FORCE_INT", "display_name": "CUPTI_CBID_STATE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState26CUPTI_CBID_STATE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_FORCE_INT", "keywords": []}, {"id": 922, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_STATE_INVALID", "display_name": "CUPTI_CBID_STATE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState24CUPTI_CBID_STATE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_INVALID Invalid state callback ID.", "keywords": []}, {"id": 923, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_STATE_SIZE", "display_name": "CUPTI_CBID_STATE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState21CUPTI_CBID_STATE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_SIZE", "keywords": []}, {"id": 924, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_STATE_WARNING", "display_name": "CUPTI_CBID_STATE_WARNING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState24CUPTI_CBID_STATE_WARNINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_WARNING Notification of warnings - low impact, recoverable This notification is not issued in the current release.", "keywords": []}, {"id": 925, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED", "display_name": "CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync43CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED Context synchronization has completed for the context.", "keywords": []}, {"id": 926, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_SYNCHRONIZE_FORCE_INT", "display_name": "CUPTI_CBID_SYNCHRONIZE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync32CUPTI_CBID_SYNCHRONIZE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_FORCE_INT", "keywords": []}, {"id": 927, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_SYNCHRONIZE_INVALID", "display_name": "CUPTI_CBID_SYNCHRONIZE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync30CUPTI_CBID_SYNCHRONIZE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_INVALID Invalid synchronize callback ID.", "keywords": []}, {"id": 928, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_SYNCHRONIZE_SIZE", "display_name": "CUPTI_CBID_SYNCHRONIZE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync27CUPTI_CBID_SYNCHRONIZE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_SIZE", "keywords": []}, {"id": 929, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED", "display_name": "CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync42CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED Stream synchronization has completed for the stream.", "keywords": []}, {"id": 930, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_DRIVER_API", "display_name": "CUPTI_CB_DOMAIN_DRIVER_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain26CUPTI_CB_DOMAIN_DRIVER_APIE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_DRIVER_API Domain containing callback points for all driver API functions.", "keywords": []}, {"id": 931, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_FORCE_INT", "display_name": "CUPTI_CB_DOMAIN_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain25CUPTI_CB_DOMAIN_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_FORCE_INT", "keywords": []}, {"id": 932, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_INVALID", "display_name": "CUPTI_CB_DOMAIN_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain23CUPTI_CB_DOMAIN_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_INVALID Invalid domain.", "keywords": []}, {"id": 933, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_NVTX", "display_name": "CUPTI_CB_DOMAIN_NVTX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain20CUPTI_CB_DOMAIN_NVTXE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_NVTX Domain containing callback points for NVTX API functions.", "keywords": []}, {"id": 934, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_RESOURCE", "display_name": "CUPTI_CB_DOMAIN_RESOURCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain24CUPTI_CB_DOMAIN_RESOURCEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_RESOURCE Domain containing callback points for CUDA resource tracking.", "keywords": []}, {"id": 935, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_RUNTIME_API", "display_name": "CUPTI_CB_DOMAIN_RUNTIME_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain27CUPTI_CB_DOMAIN_RUNTIME_APIE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_RUNTIME_API Domain containing callback points for all runtime API functions.", "keywords": []}, {"id": 936, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_SIZE", "display_name": "CUPTI_CB_DOMAIN_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain20CUPTI_CB_DOMAIN_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_SIZE", "keywords": []}, {"id": 937, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_STATE", "display_name": "CUPTI_CB_DOMAIN_STATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain21CUPTI_CB_DOMAIN_STATEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_STATE Domain containing callback points for various states.", "keywords": []}, {"id": 938, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_CB_DOMAIN_SYNCHRONIZE", "display_name": "CUPTI_CB_DOMAIN_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain27CUPTI_CB_DOMAIN_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_SYNCHRONIZE Domain containing callback points for CUDA synchronization.", "keywords": []}, {"id": 939, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ApiCallbackSite", "display_name": "CUpti_ApiCallbackSite", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421CUpti_ApiCallbackSite", "priority": 1, "content": "enum  CUpti_ApiCallbackSite Specifies the point in an API call that a callback is issued. Specifies the point in an API call that a callback is issued. This value is communicated to the callback function via CUpti_CallbackData::callbackSite . Values:", "keywords": []}, {"id": 940, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ApiCallbackSite::CUPTI_API_CBSITE_FORCE_INT", "display_name": "CUpti_ApiCallbackSite::CUPTI_API_CBSITE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_ApiCallbackSite26CUPTI_API_CBSITE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_API_CBSITE_FORCE_INT", "keywords": []}, {"id": 941, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ApiCallbackSite::CUPTI_API_ENTER", "display_name": "CUpti_ApiCallbackSite::CUPTI_API_ENTER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_ApiCallbackSite15CUPTI_API_ENTERE", "priority": 1, "content": "enumerator  CUPTI_API_ENTER The callback is at the entry of the API call.", "keywords": []}, {"id": 942, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ApiCallbackSite::CUPTI_API_EXIT", "display_name": "CUpti_ApiCallbackSite::CUPTI_API_EXIT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_ApiCallbackSite14CUPTI_API_EXITE", "priority": 1, "content": "enumerator  CUPTI_API_EXIT The callback is at the exit of the API call.", "keywords": []}, {"id": 943, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain", "display_name": "CUpti_CallbackDomain", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv420CUpti_CallbackDomain", "priority": 1, "content": "enum  CUpti_CallbackDomain Callback domains. Callback domains. Each domain represents callback points for a group of related API functions or CUDA driver activity. Values:", "keywords": []}, {"id": 944, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_DRIVER_API", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_DRIVER_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain26CUPTI_CB_DOMAIN_DRIVER_APIE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_DRIVER_API Domain containing callback points for all driver API functions.", "keywords": []}, {"id": 945, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_FORCE_INT", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain25CUPTI_CB_DOMAIN_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_FORCE_INT", "keywords": []}, {"id": 946, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_INVALID", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain23CUPTI_CB_DOMAIN_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_INVALID Invalid domain.", "keywords": []}, {"id": 947, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_NVTX", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_NVTX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain20CUPTI_CB_DOMAIN_NVTXE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_NVTX Domain containing callback points for NVTX API functions.", "keywords": []}, {"id": 948, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_RESOURCE", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_RESOURCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain24CUPTI_CB_DOMAIN_RESOURCEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_RESOURCE Domain containing callback points for CUDA resource tracking.", "keywords": []}, {"id": 949, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_RUNTIME_API", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_RUNTIME_API", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain27CUPTI_CB_DOMAIN_RUNTIME_APIE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_RUNTIME_API Domain containing callback points for all runtime API functions.", "keywords": []}, {"id": 950, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_SIZE", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain20CUPTI_CB_DOMAIN_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_SIZE", "keywords": []}, {"id": 951, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_STATE", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_STATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain21CUPTI_CB_DOMAIN_STATEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_STATE Domain containing callback points for various states.", "keywords": []}, {"id": 952, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_SYNCHRONIZE", "display_name": "CUpti_CallbackDomain::CUPTI_CB_DOMAIN_SYNCHRONIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackDomain27CUPTI_CB_DOMAIN_SYNCHRONIZEE", "priority": 1, "content": "enumerator  CUPTI_CB_DOMAIN_SYNCHRONIZE Domain containing callback points for CUDA synchronization.", "keywords": []}, {"id": 953, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackFunc", "display_name": "CUpti_CallbackFunc", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv418CUpti_CallbackFunc", "priority": 1, "content": "typedef  void  ( * CUpti_CallbackFunc ) ( void  * userdata ,  CUpti_CallbackDomain  domain ,  CUpti_CallbackId  cbid ,  const  void  * cbdata ) Function type for a callback. Function type for a callback. The type of the data passed to the callback in cbdata depends on the domain . If domain is CUPTI_CB_DOMAIN_DRIVER_API or CUPTI_CB_DOMAIN_RUNTIME_API the type of cbdata will be CUpti_CallbackData . If domain is CUPTI_CB_DOMAIN_RESOURCE the type of cbdata will be CUpti_ResourceData . If domain is CUPTI_CB_DOMAIN_SYNCHRONIZE the type of cbdata will be CUpti_SynchronizeData . If domain is CUPTI_CB_DOMAIN_NVTX the type of cbdata will be CUpti_NvtxData . Param userdata User data supplied at subscription of the callback Param domain The domain of the callback Param cbid The ID of the callback Param cbdata Data passed to the callback.", "keywords": []}, {"id": 954, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackId", "display_name": "CUpti_CallbackId", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv416CUpti_CallbackId", "priority": 1, "content": "typedef  uint32_t  CUpti_CallbackId An ID for a driver API, runtime API, resource or synchronization callback. An ID for a driver API, runtime API, resource or synchronization callback. Within a driver API callback this should be interpreted as a CUpti_driver_api_trace_cbid value (these values are defined in cupti_driver_cbid.h). Within a runtime API callback this should be interpreted as a CUpti_runtime_api_trace_cbid value (these values are defined in cupti_runtime_cbid.h). Within a resource API callback this should be interpreted as a CUpti_CallbackIdResource value. Within a synchronize API callback this should be interpreted as a CUpti_CallbackIdSync value.", "keywords": []}, {"id": 955, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource", "display_name": "CUpti_CallbackIdResource", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv424CUpti_CallbackIdResource", "priority": 1, "content": "enum  CUpti_CallbackIdResource Callback IDs for resource domain. Callback IDs for resource domain, CUPTI_CB_DOMAIN_RESOURCE. This value is communicated to the callback function via the cbid parameter. Values:", "keywords": []}, {"id": 956, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_CONTEXT_CREATED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_CONTEXT_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource35CUPTI_CBID_RESOURCE_CONTEXT_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_CONTEXT_CREATED A new context has been created.", "keywords": []}, {"id": 957, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource44CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING A context is about to be destroyed.", "keywords": []}, {"id": 958, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_CU_INIT_FINISHED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_CU_INIT_FINISHED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource36CUPTI_CBID_RESOURCE_CU_INIT_FINISHEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_CU_INIT_FINISHED The driver has finished initializing.", "keywords": []}, {"id": 959, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_FORCE_INT", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource29CUPTI_CBID_RESOURCE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_FORCE_INT", "keywords": []}, {"id": 960, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource37CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATED An executable CUDA graph is created.", "keywords": []}, {"id": 961, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource45CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHEXEC_CREATE_STARTING An executable CUDA graph is about to be created.", "keywords": []}, {"id": 962, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource46CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHEXEC_DESTROY_STARTING An executable CUDA graph is about to be destroyed.", "keywords": []}, {"id": 963, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource36CUPTI_CBID_RESOURCE_GRAPHNODE_CLONEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED CUDA graph node is cloned.", "keywords": []}, {"id": 964, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource37CUPTI_CBID_RESOURCE_GRAPHNODE_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED CUDA graph node is created.", "keywords": []}, {"id": 965, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource45CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_CREATE_STARTING CUDA graph node is about to be created.", "keywords": []}, {"id": 966, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource48CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_CREATED Dependency on a CUDA graph node is created.", "keywords": []}, {"id": 967, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource57CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_DEPENDENCY_DESTROY_STARTING Dependency on a CUDA graph node is destroyed.", "keywords": []}, {"id": 968, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource46CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPHNODE_DESTROY_STARTING CUDA graph node is about to be destroyed.", "keywords": []}, {"id": 969, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPH_CLONED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPH_CLONED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource32CUPTI_CBID_RESOURCE_GRAPH_CLONEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPH_CLONED CUDA graph is cloned.", "keywords": []}, {"id": 970, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPH_CREATED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPH_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource33CUPTI_CBID_RESOURCE_GRAPH_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPH_CREATED CUDA graph has been created.", "keywords": []}, {"id": 971, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource42CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_GRAPH_DESTROY_STARTING CUDA graph is about to be destroyed.", "keywords": []}, {"id": 972, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_INVALID", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource27CUPTI_CBID_RESOURCE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_INVALID Invalid resource callback ID.", "keywords": []}, {"id": 973, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_MODULE_LOADED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_MODULE_LOADED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource33CUPTI_CBID_RESOURCE_MODULE_LOADEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_MODULE_LOADED A module has been loaded.", "keywords": []}, {"id": 974, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_MODULE_PROFILED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_MODULE_PROFILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource35CUPTI_CBID_RESOURCE_MODULE_PROFILEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_MODULE_PROFILED The current module which is being profiled.", "keywords": []}, {"id": 975, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource42CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING A module is about to be unloaded.", "keywords": []}, {"id": 976, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_SIZE", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource24CUPTI_CBID_RESOURCE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_SIZE", "keywords": []}, {"id": 977, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource44CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED CUDA stream attribute is changed.", "keywords": []}, {"id": 978, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_STREAM_CREATED", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_STREAM_CREATED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource34CUPTI_CBID_RESOURCE_STREAM_CREATEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_STREAM_CREATED A new stream has been created.", "keywords": []}, {"id": 979, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING", "display_name": "CUpti_CallbackIdResource::CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N24CUpti_CallbackIdResource43CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING A stream is about to be destroyed.", "keywords": []}, {"id": 980, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState", "display_name": "CUpti_CallbackIdState", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421CUpti_CallbackIdState", "priority": 1, "content": "enum  CUpti_CallbackIdState Callback IDs for state domain. Callback IDs for state domain, CUPTI_CB_DOMAIN_STATE. This value is communicated to the callback function via the cbid parameter. Values:", "keywords": []}, {"id": 981, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_ERROR", "display_name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_ERROR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState22CUPTI_CBID_STATE_ERRORE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_ERROR Notification of non fatal errors - high impact, but recoverable This notification is not issued in the current release.", "keywords": []}, {"id": 982, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_FATAL_ERROR", "display_name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_FATAL_ERROR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState28CUPTI_CBID_STATE_FATAL_ERRORE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_FATAL_ERROR Notification of fatal errors - high impact, non-recoverable When encountered, CUPTI automatically invokes cuptiFinalize() User can control behavior of the application in future from receiving this callback - such as continuing without profiling, or terminating the whole application.", "keywords": []}, {"id": 983, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_FORCE_INT", "display_name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState26CUPTI_CBID_STATE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_FORCE_INT", "keywords": []}, {"id": 984, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_INVALID", "display_name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState24CUPTI_CBID_STATE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_INVALID Invalid state callback ID.", "keywords": []}, {"id": 985, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_SIZE", "display_name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState21CUPTI_CBID_STATE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_SIZE", "keywords": []}, {"id": 986, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_WARNING", "display_name": "CUpti_CallbackIdState::CUPTI_CBID_STATE_WARNING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N21CUpti_CallbackIdState24CUPTI_CBID_STATE_WARNINGE", "priority": 1, "content": "enumerator  CUPTI_CBID_STATE_WARNING Notification of warnings - low impact, recoverable This notification is not issued in the current release.", "keywords": []}, {"id": 987, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdSync", "display_name": "CUpti_CallbackIdSync", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv420CUpti_CallbackIdSync", "priority": 1, "content": "enum  CUpti_CallbackIdSync Callback IDs for synchronization domain. Callback IDs for synchronization domain, CUPTI_CB_DOMAIN_SYNCHRONIZE. This value is communicated to the callback function via the cbid parameter. Values:", "keywords": []}, {"id": 988, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED", "display_name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync43CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED Context synchronization has completed for the context.", "keywords": []}, {"id": 989, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_FORCE_INT", "display_name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync32CUPTI_CBID_SYNCHRONIZE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_FORCE_INT", "keywords": []}, {"id": 990, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_INVALID", "display_name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync30CUPTI_CBID_SYNCHRONIZE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_INVALID Invalid synchronize callback ID.", "keywords": []}, {"id": 991, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_SIZE", "display_name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync27CUPTI_CBID_SYNCHRONIZE_SIZEE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_SIZE", "keywords": []}, {"id": 992, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED", "display_name": "CUpti_CallbackIdSync::CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv4N20CUpti_CallbackIdSync42CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZEDE", "priority": 1, "content": "enumerator  CUPTI_CBID_SYNCHRONIZE_STREAM_SYNCHRONIZED Stream synchronization has completed for the stream.", "keywords": []}, {"id": 993, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DomainTable", "display_name": "CUpti_DomainTable", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv417CUpti_DomainTable", "priority": 1, "content": "typedef  CUpti_CallbackDomain  * CUpti_DomainTable Pointer to an array of callback domains.", "keywords": []}, {"id": 994, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "CUpti_SubscriberHandle", "display_name": "CUpti_SubscriberHandle", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv422CUpti_SubscriberHandle", "priority": 1, "content": "typedef  struct  CUpti_Subscriber_st  * CUpti_SubscriberHandle A callback subscriber.", "keywords": []}, {"id": 995, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableAllDomains", "display_name": "cuptiEnableAllDomains", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiEnableAllDomains8uint32_t22CUpti_SubscriberHandle", "priority": 1, "content": "CUptiResult  cuptiEnableAllDomains uint32_t  enable CUpti_SubscriberHandle  subscriber Enable or disable all callbacks in all domains. Enable or disable all callbacks in all domains. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, *) and cuptiEnableAllDomains(sub) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in all domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is invalid", "keywords": []}, {"id": 996, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableAllDomains::enable", "display_name": "cuptiEnableAllDomains::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiEnableAllDomains8uint32_t22CUpti_SubscriberHandle", "priority": 1, "content": "CUptiResult  cuptiEnableAllDomains uint32_t  enable CUpti_SubscriberHandle  subscriber Enable or disable all callbacks in all domains. Enable or disable all callbacks in all domains. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, *) and cuptiEnableAllDomains(sub) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in all domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is invalid", "keywords": []}, {"id": 997, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableAllDomains::subscriber", "display_name": "cuptiEnableAllDomains::subscriber", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiEnableAllDomains8uint32_t22CUpti_SubscriberHandle", "priority": 1, "content": "CUptiResult  cuptiEnableAllDomains uint32_t  enable CUpti_SubscriberHandle  subscriber Enable or disable all callbacks in all domains. Enable or disable all callbacks in all domains. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, *) and cuptiEnableAllDomains(sub) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in all domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is invalid", "keywords": []}, {"id": 998, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableCallback", "display_name": "cuptiEnableCallback", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv419cuptiEnableCallback8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiEnableCallback uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Enable or disabled callbacks for a specific domain and callback ID. Enable or disabled callbacks for a subscriber for a specific domain and callback ID. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for the callback. Zero disables the callback, non-zero enables the callback. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 999, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableCallback::cbid", "display_name": "cuptiEnableCallback::cbid", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv419cuptiEnableCallback8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiEnableCallback uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Enable or disabled callbacks for a specific domain and callback ID. Enable or disabled callbacks for a subscriber for a specific domain and callback ID. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for the callback. Zero disables the callback, non-zero enables the callback. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1000, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableCallback::domain", "display_name": "cuptiEnableCallback::domain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv419cuptiEnableCallback8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiEnableCallback uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Enable or disabled callbacks for a specific domain and callback ID. Enable or disabled callbacks for a subscriber for a specific domain and callback ID. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for the callback. Zero disables the callback, non-zero enables the callback. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1001, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableCallback::enable", "display_name": "cuptiEnableCallback::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv419cuptiEnableCallback8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiEnableCallback uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Enable or disabled callbacks for a specific domain and callback ID. Enable or disabled callbacks for a subscriber for a specific domain and callback ID. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for the callback. Zero disables the callback, non-zero enables the callback. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1002, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableCallback::subscriber", "display_name": "cuptiEnableCallback::subscriber", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv419cuptiEnableCallback8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiEnableCallback uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Enable or disabled callbacks for a specific domain and callback ID. Enable or disabled callbacks for a subscriber for a specific domain and callback ID. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for the callback. Zero disables the callback, non-zero enables the callback. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1003, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableDomain", "display_name": "cuptiEnableDomain", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv417cuptiEnableDomain8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain", "priority": 1, "content": "CUptiResult  cuptiEnableDomain uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain Enable or disabled all callbacks for a specific domain. Enable or disabled all callbacks for a specific domain. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackEnabled(sub, d, *) and cuptiEnableDomain(sub, d) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in the domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber or domain is invalid", "keywords": []}, {"id": 1004, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableDomain::domain", "display_name": "cuptiEnableDomain::domain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv417cuptiEnableDomain8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain", "priority": 1, "content": "CUptiResult  cuptiEnableDomain uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain Enable or disabled all callbacks for a specific domain. Enable or disabled all callbacks for a specific domain. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackEnabled(sub, d, *) and cuptiEnableDomain(sub, d) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in the domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber or domain is invalid", "keywords": []}, {"id": 1005, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableDomain::enable", "display_name": "cuptiEnableDomain::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv417cuptiEnableDomain8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain", "priority": 1, "content": "CUptiResult  cuptiEnableDomain uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain Enable or disabled all callbacks for a specific domain. Enable or disabled all callbacks for a specific domain. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackEnabled(sub, d, *) and cuptiEnableDomain(sub, d) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in the domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber or domain is invalid", "keywords": []}, {"id": 1006, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableDomain::subscriber", "display_name": "cuptiEnableDomain::subscriber", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv417cuptiEnableDomain8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain", "priority": 1, "content": "CUptiResult  cuptiEnableDomain uint32_t  enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain Enable or disabled all callbacks for a specific domain. Enable or disabled all callbacks for a specific domain. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackEnabled(sub, d, *) and cuptiEnableDomain(sub, d) are called concurrently, the results are undefined. Parameters enable \u2013 New enable state for all callbacks in the domain. Zero disables all callbacks, non-zero enables all callbacks. subscriber \u2013 - Handle to callback subscription domain \u2013 The domain of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber or domain is invalid", "keywords": []}, {"id": 1007, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackName", "display_name": "cuptiGetCallbackName", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv420cuptiGetCallbackName20CUpti_CallbackDomain8uint32_tPPKc", "priority": 1, "content": "CUptiResult  cuptiGetCallbackName CUpti_CallbackDomain  domain uint32_t  cbid const  char  * * name Get the name of a callback for a specific domain and callback ID. Returns a pointer to the name c_string in **name . Names are available only for the DRIVER and RUNTIME domains. Parameters domain \u2013 The domain of the callback cbid \u2013 The ID of the callback name \u2013 Returns pointer to the name string on success, NULL otherwise Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if name is NULL, or if domain or cbid is invalid.", "keywords": []}, {"id": 1008, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackName::cbid", "display_name": "cuptiGetCallbackName::cbid", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv420cuptiGetCallbackName20CUpti_CallbackDomain8uint32_tPPKc", "priority": 1, "content": "CUptiResult  cuptiGetCallbackName CUpti_CallbackDomain  domain uint32_t  cbid const  char  * * name Get the name of a callback for a specific domain and callback ID. Returns a pointer to the name c_string in **name . Names are available only for the DRIVER and RUNTIME domains. Parameters domain \u2013 The domain of the callback cbid \u2013 The ID of the callback name \u2013 Returns pointer to the name string on success, NULL otherwise Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if name is NULL, or if domain or cbid is invalid.", "keywords": []}, {"id": 1009, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackName::domain", "display_name": "cuptiGetCallbackName::domain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv420cuptiGetCallbackName20CUpti_CallbackDomain8uint32_tPPKc", "priority": 1, "content": "CUptiResult  cuptiGetCallbackName CUpti_CallbackDomain  domain uint32_t  cbid const  char  * * name Get the name of a callback for a specific domain and callback ID. Returns a pointer to the name c_string in **name . Names are available only for the DRIVER and RUNTIME domains. Parameters domain \u2013 The domain of the callback cbid \u2013 The ID of the callback name \u2013 Returns pointer to the name string on success, NULL otherwise Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if name is NULL, or if domain or cbid is invalid.", "keywords": []}, {"id": 1010, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackName::name", "display_name": "cuptiGetCallbackName::name", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv420cuptiGetCallbackName20CUpti_CallbackDomain8uint32_tPPKc", "priority": 1, "content": "CUptiResult  cuptiGetCallbackName CUpti_CallbackDomain  domain uint32_t  cbid const  char  * * name Get the name of a callback for a specific domain and callback ID. Returns a pointer to the name c_string in **name . Names are available only for the DRIVER and RUNTIME domains. Parameters domain \u2013 The domain of the callback cbid \u2013 The ID of the callback name \u2013 Returns pointer to the name string on success, NULL otherwise Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if name is NULL, or if domain or cbid is invalid.", "keywords": []}, {"id": 1011, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackState", "display_name": "cuptiGetCallbackState", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiGetCallbackStateP8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiGetCallbackState uint32_t  * enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Get the current enabled/disabled state of a callback for a specific domain and function ID. Returns non-zero in *enable if the callback for a domain and callback ID is enabled, and zero if not enabled. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 Returns non-zero if callback enabled, zero if not enabled subscriber \u2013 Handle to the initialize subscriber domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if enabled is NULL, or if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1012, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackState::cbid", "display_name": "cuptiGetCallbackState::cbid", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiGetCallbackStateP8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiGetCallbackState uint32_t  * enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Get the current enabled/disabled state of a callback for a specific domain and function ID. Returns non-zero in *enable if the callback for a domain and callback ID is enabled, and zero if not enabled. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 Returns non-zero if callback enabled, zero if not enabled subscriber \u2013 Handle to the initialize subscriber domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if enabled is NULL, or if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1013, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackState::domain", "display_name": "cuptiGetCallbackState::domain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiGetCallbackStateP8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiGetCallbackState uint32_t  * enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Get the current enabled/disabled state of a callback for a specific domain and function ID. Returns non-zero in *enable if the callback for a domain and callback ID is enabled, and zero if not enabled. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 Returns non-zero if callback enabled, zero if not enabled subscriber \u2013 Handle to the initialize subscriber domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if enabled is NULL, or if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1014, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackState::enable", "display_name": "cuptiGetCallbackState::enable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiGetCallbackStateP8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiGetCallbackState uint32_t  * enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Get the current enabled/disabled state of a callback for a specific domain and function ID. Returns non-zero in *enable if the callback for a domain and callback ID is enabled, and zero if not enabled. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 Returns non-zero if callback enabled, zero if not enabled subscriber \u2013 Handle to the initialize subscriber domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if enabled is NULL, or if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1015, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCallbackState::subscriber", "display_name": "cuptiGetCallbackState::subscriber", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiGetCallbackStateP8uint32_t22CUpti_SubscriberHandle20CUpti_CallbackDomain16CUpti_CallbackId", "priority": 1, "content": "CUptiResult  cuptiGetCallbackState uint32_t  * enable CUpti_SubscriberHandle  subscriber CUpti_CallbackDomain  domain CUpti_CallbackId  cbid Get the current enabled/disabled state of a callback for a specific domain and function ID. Returns non-zero in *enable if the callback for a domain and callback ID is enabled, and zero if not enabled. Thread-safety : a subscriber must serialize access to cuptiGetCallbackState, cuptiEnableCallback, cuptiEnableDomain, and cuptiEnableAllDomains. For example, if cuptiGetCallbackState(sub, d, c) and cuptiEnableCallback(sub, d, c) are called concurrently, the results are undefined. Parameters enable \u2013 Returns non-zero if callback enabled, zero if not enabled subscriber \u2013 Handle to the initialize subscriber domain \u2013 The domain of the callback cbid \u2013 The ID of the callback Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if enabled is NULL, or if subscriber , domain or cbid is invalid.", "keywords": []}, {"id": 1016, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSubscribe", "display_name": "cuptiSubscribe", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv414cuptiSubscribeP22CUpti_SubscriberHandle18CUpti_CallbackFuncPv", "priority": 1, "content": "CUptiResult  cuptiSubscribe CUpti_SubscriberHandle  * subscriber CUpti_CallbackFunc  callback void  * userdata Initialize a callback subscriber with a callback function and user data. Initializes a callback subscriber with a callback function and (optionally) a pointer to user data. The returned subscriber handle can be used to enable and disable the callback for specific domains and callback IDs. Only a single subscriber can be registered at a time. To ensure that no other CUPTI client interrupts the profiling session, it\u2019s the responsibility of all the CUPTI clients to call this function before starting the profling session. In case profiling session is already started by another CUPTI client, this function returns the error code CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED. Note that this function returns the same error when application is launched using NVIDIA tools like nvprof, Visual Profiler, Nsight Systems, Nsight Compute, cuda-gdb and cuda-memcheck. This function does not enable any callbacks. Thread-safety : this function is thread safe. Parameters subscriber \u2013 Returns handle to initialize subscriber callback \u2013 The callback function userdata \u2013 A pointer to user data. This data will be passed to the callback function via the userdata parameter. Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED \u2013 if there is already a CUPTI subscriber CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is NULL", "keywords": []}, {"id": 1017, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSubscribe::callback", "display_name": "cuptiSubscribe::callback", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv414cuptiSubscribeP22CUpti_SubscriberHandle18CUpti_CallbackFuncPv", "priority": 1, "content": "CUptiResult  cuptiSubscribe CUpti_SubscriberHandle  * subscriber CUpti_CallbackFunc  callback void  * userdata Initialize a callback subscriber with a callback function and user data. Initializes a callback subscriber with a callback function and (optionally) a pointer to user data. The returned subscriber handle can be used to enable and disable the callback for specific domains and callback IDs. Only a single subscriber can be registered at a time. To ensure that no other CUPTI client interrupts the profiling session, it\u2019s the responsibility of all the CUPTI clients to call this function before starting the profling session. In case profiling session is already started by another CUPTI client, this function returns the error code CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED. Note that this function returns the same error when application is launched using NVIDIA tools like nvprof, Visual Profiler, Nsight Systems, Nsight Compute, cuda-gdb and cuda-memcheck. This function does not enable any callbacks. Thread-safety : this function is thread safe. Parameters subscriber \u2013 Returns handle to initialize subscriber callback \u2013 The callback function userdata \u2013 A pointer to user data. This data will be passed to the callback function via the userdata parameter. Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED \u2013 if there is already a CUPTI subscriber CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is NULL", "keywords": []}, {"id": 1018, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSubscribe::subscriber", "display_name": "cuptiSubscribe::subscriber", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv414cuptiSubscribeP22CUpti_SubscriberHandle18CUpti_CallbackFuncPv", "priority": 1, "content": "CUptiResult  cuptiSubscribe CUpti_SubscriberHandle  * subscriber CUpti_CallbackFunc  callback void  * userdata Initialize a callback subscriber with a callback function and user data. Initializes a callback subscriber with a callback function and (optionally) a pointer to user data. The returned subscriber handle can be used to enable and disable the callback for specific domains and callback IDs. Only a single subscriber can be registered at a time. To ensure that no other CUPTI client interrupts the profiling session, it\u2019s the responsibility of all the CUPTI clients to call this function before starting the profling session. In case profiling session is already started by another CUPTI client, this function returns the error code CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED. Note that this function returns the same error when application is launched using NVIDIA tools like nvprof, Visual Profiler, Nsight Systems, Nsight Compute, cuda-gdb and cuda-memcheck. This function does not enable any callbacks. Thread-safety : this function is thread safe. Parameters subscriber \u2013 Returns handle to initialize subscriber callback \u2013 The callback function userdata \u2013 A pointer to user data. This data will be passed to the callback function via the userdata parameter. Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED \u2013 if there is already a CUPTI subscriber CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is NULL", "keywords": []}, {"id": 1019, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSubscribe::userdata", "display_name": "cuptiSubscribe::userdata", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv414cuptiSubscribeP22CUpti_SubscriberHandle18CUpti_CallbackFuncPv", "priority": 1, "content": "CUptiResult  cuptiSubscribe CUpti_SubscriberHandle  * subscriber CUpti_CallbackFunc  callback void  * userdata Initialize a callback subscriber with a callback function and user data. Initializes a callback subscriber with a callback function and (optionally) a pointer to user data. The returned subscriber handle can be used to enable and disable the callback for specific domains and callback IDs. Only a single subscriber can be registered at a time. To ensure that no other CUPTI client interrupts the profiling session, it\u2019s the responsibility of all the CUPTI clients to call this function before starting the profling session. In case profiling session is already started by another CUPTI client, this function returns the error code CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED. Note that this function returns the same error when application is launched using NVIDIA tools like nvprof, Visual Profiler, Nsight Systems, Nsight Compute, cuda-gdb and cuda-memcheck. This function does not enable any callbacks. Thread-safety : this function is thread safe. Parameters subscriber \u2013 Returns handle to initialize subscriber callback \u2013 The callback function userdata \u2013 A pointer to user data. This data will be passed to the callback function via the userdata parameter. Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED \u2013 if there is already a CUPTI subscriber CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is NULL", "keywords": []}, {"id": 1020, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSupportedDomains", "display_name": "cuptiSupportedDomains", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiSupportedDomainsP6size_tP17CUpti_DomainTable", "priority": 1, "content": "CUptiResult  cuptiSupportedDomains size_t  * domainCount CUpti_DomainTable  * domainTable Get the available callback domains. Returns in *domainTable an array of size *domainCount of all the available callback domains. Thread-safety : this function is thread safe. Parameters domainCount \u2013 Returns number of callback domains domainTable \u2013 Returns pointer to array of available callback domains Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if domainCount or domainTable are NULL", "keywords": []}, {"id": 1021, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSupportedDomains::domainCount", "display_name": "cuptiSupportedDomains::domainCount", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiSupportedDomainsP6size_tP17CUpti_DomainTable", "priority": 1, "content": "CUptiResult  cuptiSupportedDomains size_t  * domainCount CUpti_DomainTable  * domainTable Get the available callback domains. Returns in *domainTable an array of size *domainCount of all the available callback domains. Thread-safety : this function is thread safe. Parameters domainCount \u2013 Returns number of callback domains domainTable \u2013 Returns pointer to array of available callback domains Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if domainCount or domainTable are NULL", "keywords": []}, {"id": 1022, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiSupportedDomains::domainTable", "display_name": "cuptiSupportedDomains::domainTable", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv421cuptiSupportedDomainsP6size_tP17CUpti_DomainTable", "priority": 1, "content": "CUptiResult  cuptiSupportedDomains size_t  * domainCount CUpti_DomainTable  * domainTable Get the available callback domains. Returns in *domainTable an array of size *domainCount of all the available callback domains. Thread-safety : this function is thread safe. Parameters domainCount \u2013 Returns number of callback domains domainTable \u2013 Returns pointer to array of available callback domains Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialize CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if domainCount or domainTable are NULL", "keywords": []}, {"id": 1023, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiUnsubscribe", "display_name": "cuptiUnsubscribe", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv416cuptiUnsubscribe22CUpti_SubscriberHandle", "priority": 1, "content": "CUptiResult  cuptiUnsubscribe CUpti_SubscriberHandle  subscriber Unregister a callback subscriber. Removes a callback subscriber so that no future callbacks will be issued to that subscriber. Thread-safety : this function is thread safe. Parameters subscriber \u2013 Handle to the initialize subscriber Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is NULL or not initialized", "keywords": []}, {"id": 1024, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "cpp", "name": "cuptiUnsubscribe::subscriber", "display_name": "cuptiUnsubscribe::subscriber", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "_CPPv416cuptiUnsubscribe22CUpti_SubscriberHandle", "priority": 1, "content": "CUptiResult  cuptiUnsubscribe CUpti_SubscriberHandle  subscriber Unregister a callback subscriber. Removes a callback subscriber so that no future callbacks will be issued to that subscriber. Thread-safety : this function is thread safe. Parameters subscriber \u2013 Handle to the initialize subscriber Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_NOT_INITIALIZED \u2013 if unable to initialized CUPTI CUPTI_ERROR_INVALID_PARAMETER \u2013 if subscriber is NULL or not initialized", "keywords": []}, {"id": 1025, "doc_id": 1025, "filename": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "display_name": "CUPTI Callback API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___c_a_l_l_b_a_c_k___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Callback API. Data Structures CUpti_CallbackData  Data passed into a runtime or driver API callback function. CUpti_GraphData  CUDA graphs data passed into a resource callback function. CUpti_ModuleResourceData  Module data passed into a resource callback function. CUpti_NvtxData  Data passed into a NVTX callback function. CUpti_ResourceData  Data passed into a resource callback function. CUpti_StateData  Data passed into a State callback function. CUpti_StreamAttrData  Stream attribute data passed into a resource callback function for CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED callback. CUpti_SynchronizeData  Data passed into a synchronize callback function. Enumerations CUpti_ApiCallbackSite  Specifies the point in an API call that a callback is issued. CUpti_CallbackDomain  Callback domains. CUpti_CallbackIdResource  Callback IDs for resource domain. CUpti_CallbackIdState  Callback IDs for state domain. CUpti_CallbackIdSync  Callback IDs for synchronization domain. Functions CUptiResult  cuptiEnableAllDomains (uint32_t enable, CUpti_SubscriberHandle subscriber) Enable or disable all callbacks in all domains. CUptiResult  cuptiEnableCallback (uint32_t enable, CUpti_SubscriberHandle subscriber, CUpti_CallbackDomain domain, CUpti_CallbackId cbid) Enable or disabled callbacks for a specific domain and callback ID. CUptiResult  cuptiEnableDomain (uint32_t enable, CUpti_SubscriberHandle subscriber, CUpti_CallbackDomain domain) Enable or disabled all callbacks for a specific domain. CUptiResult  cuptiGetCallbackName (CUpti_CallbackDomain domain, uint32_t cbid, const char **name) Get the name of a callback for a specific domain and callback ID. CUptiResult  cuptiGetCallbackState (uint32_t *enable, CUpti_SubscriberHandle subscriber, CUpti_CallbackDomain domain, CUpti_CallbackId cbid) Get the current enabled/disabled state of a callback for a specific domain and function ID. CUptiResult  cuptiSubscribe (CUpti_SubscriberHandle *subscriber, CUpti_CallbackFunc callback, void *userdata) Initialize a callback subscriber with a callback function and user data. CUptiResult  cuptiSupportedDomains (size_t *domainCount, CUpti_DomainTable *domainTable) Get the available callback domains. CUptiResult  cuptiUnsubscribe (CUpti_SubscriberHandle subscriber) Unregister a callback subscriber. Typedefs CUpti_CallbackFunc  Function type for a callback. CUpti_CallbackId  An ID for a driver API, runtime API, resource or synchronization callback. CUpti_DomainTable  Pointer to an array of callback domains. CUpti_SubscriberHandle  A callback subscriber.", "keywords": []}, {"id": 1026, "doc_id": 1027, "filename": "api/group___c_u_p_t_i___c_h_e_c_k_p_o_i_n_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Checkpoint_STRUCT_SIZE", "display_name": "CUpti_Checkpoint_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___c_h_e_c_k_p_o_i_n_t___a_p_i", "anchor": "c.CUpti_Checkpoint_STRUCT_SIZE", "priority": 1, "content": "CUpti_Checkpoint_STRUCT_SIZE", "keywords": []}, {"id": 1027, "doc_id": 1027, "filename": "api/group___c_u_p_t_i___c_h_e_c_k_p_o_i_n_t___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___c_h_e_c_k_p_o_i_n_t___a_p_i", "display_name": "CUPTI Checkpoint API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___c_h_e_c_k_p_o_i_n_t___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Checkpoint API. Data Structures NV::Cupti::Checkpoint::CUpti_Checkpoint  Configuration and handle for a CUPTI Checkpoint. Macros CUpti_Checkpoint_STRUCT_SIZE   Enumerations NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations  Specifies optimization options for a checkpoint, may be OR&#x27;d together to specify multiple options. Functions CUptiResult  NV::Cupti::Checkpoint::cuptiCheckpointFree (CUpti_Checkpoint *const handle) Free the backing data for a checkpoint. CUptiResult  NV::Cupti::Checkpoint::cuptiCheckpointRestore (CUpti_Checkpoint *const handle) Restore a checkpoint to the device associated with its context. CUptiResult  NV::Cupti::Checkpoint::cuptiCheckpointSave (CUpti_Checkpoint *const handle) Initialize and save a checkpoint of the device state associated with the handle context.", "keywords": []}, {"id": 1028, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "c", "name": "CUPTI_EVENT_INVALID", "display_name": "CUPTI_EVENT_INVALID", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "c.CUPTI_EVENT_INVALID", "priority": 1, "content": "CUPTI_EVENT_INVALID The value that indicates the event value is invalid.", "keywords": []}, {"id": 1029, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "c", "name": "CUPTI_EVENT_OVERFLOW", "display_name": "CUPTI_EVENT_OVERFLOW", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "c.CUPTI_EVENT_OVERFLOW", "priority": 1, "content": "CUPTI_EVENT_OVERFLOW The overflow value for a CUPTI event. The CUPTI event value that indicates an overflow.", "keywords": []}, {"id": 1030, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS", "display_name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute30CUPTI_DEVICE_ATTR_DEVICE_CLASSE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS Get the class for the device. Value is a CUpti_DeviceAttributeDeviceClass.", "keywords": []}, {"id": 1031, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE", "display_name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass38CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE", "keywords": []}, {"id": 1032, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO", "display_name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass37CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADROE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO", "keywords": []}, {"id": 1033, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA", "display_name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass36CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRAE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA", "keywords": []}, {"id": 1034, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA", "display_name": "CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass36CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLAE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA", "keywords": []}, {"id": 1035, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE", "display_name": "CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE Get the peak double precision flop per cycle. Value is a uint64_t.", "keywords": []}, {"id": 1036, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE", "display_name": "CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE Get the peak half precision flop per cycle. Value is a uint64_t.", "keywords": []}, {"id": 1037, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE", "display_name": "CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE Get the peak single precision flop per cycle. Value is a uint64_t.", "keywords": []}, {"id": 1038, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_FORCE_INT", "display_name": "CUPTI_DEVICE_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute27CUPTI_DEVICE_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FORCE_INT", "keywords": []}, {"id": 1039, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH", "display_name": "CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute41CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTHE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH Get global memory bandwidth in Kbytes/sec. Value is a uint64_t.", "keywords": []}, {"id": 1040, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW", "display_name": "CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BWE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW Check if Nvlink is present between GPU and CPU. Returns Bandwidth, in Bytes/sec, if Nvlink is present, returns 0 otherwise. Value is a uint64_t.", "keywords": []}, {"id": 1041, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE", "display_name": "CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute39CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE Get theoretical maximum number of instructions per cycle. Value is a uint32_t.", "keywords": []}, {"id": 1042, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION", "display_name": "CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute57CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISIONE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION Get theoretical maximum number of single precision instructions that can be executed per second. Value is a uint64_t.", "keywords": []}, {"id": 1043, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID", "display_name": "CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute37CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_IDE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID Number of event domain IDs for a device. Value is a uint32_t.", "keywords": []}, {"id": 1044, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_EVENT_ID", "display_name": "CUPTI_DEVICE_ATTR_MAX_EVENT_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute30CUPTI_DEVICE_ATTR_MAX_EVENT_IDE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_EVENT_ID Number of event IDs for a device. Value is a uint32_t.", "keywords": []}, {"id": 1045, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS", "display_name": "CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERSE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS Get number of frame buffers for device. Value is a uint64_t.", "keywords": []}, {"id": 1046, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_L2_UNITS", "display_name": "CUPTI_DEVICE_ATTR_MAX_L2_UNITS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute30CUPTI_DEVICE_ATTR_MAX_L2_UNITSE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_L2_UNITS Get number of L2 units. Value is a uint64_t.", "keywords": []}, {"id": 1047, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL", "display_name": "CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute61CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUALE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL Get the maximum shared memory for the CU_FUNC_CACHE_PREFER_EQUAL preference. Value is a uint64_t.", "keywords": []}, {"id": 1048, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1", "display_name": "CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute58CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1E", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1 Get the maximum shared memory for the CU_FUNC_CACHE_PREFER_L1 preference. Value is a uint64_t.", "keywords": []}, {"id": 1049, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED", "display_name": "CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute62CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHAREDE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED Get the maximum shared memory for the CU_FUNC_CACHE_PREFER_SHARED preference. Value is a uint64_t.", "keywords": []}, {"id": 1050, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_NVLINK_PRESENT", "display_name": "CUPTI_DEVICE_ATTR_NVLINK_PRESENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute32CUPTI_DEVICE_ATTR_NVLINK_PRESENTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_NVLINK_PRESENT Check if Nvlink is connected to device. Returns 1, if at least one Nvlink is connected to the device, returns 0 otherwise. Value is a uint32_t.", "keywords": []}, {"id": 1051, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT", "display_name": "CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute34CUPTI_DEVICE_ATTR_NVSWITCH_PRESENTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT Check if NVSwitch is present in the underlying topology. Returns 1, if present, returns 0 otherwise. Value is a uint32_t.", "keywords": []}, {"id": 1052, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_PCIE_GEN", "display_name": "CUPTI_DEVICE_ATTR_PCIE_GEN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute26CUPTI_DEVICE_ATTR_PCIE_GENE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_PCIE_GEN Get PCIE generation for device. Return 0 if bus-type is non-PCIE. Value is a uint64_t.", "keywords": []}, {"id": 1053, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_PCIE_LINK_RATE", "display_name": "CUPTI_DEVICE_ATTR_PCIE_LINK_RATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute32CUPTI_DEVICE_ATTR_PCIE_LINK_RATEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_PCIE_LINK_RATE Get PCIE link rate in Mega bits/sec for device. Return 0 if bus-type is non-PCIE. Value is a uint64_t.", "keywords": []}, {"id": 1054, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH", "display_name": "CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute33CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTHE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH Get PCIE link width for device. Return 0 if bus-type is non-PCIE. Value is a uint64_t.", "keywords": []}, {"id": 1055, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_ATTR_CATEGORY", "display_name": "CUPTI_EVENT_ATTR_CATEGORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute25CUPTI_EVENT_ATTR_CATEGORYE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_CATEGORY Category of event. Value is CUpti_EventCategory.", "keywords": []}, {"id": 1056, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_ATTR_FORCE_INT", "display_name": "CUPTI_EVENT_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute26CUPTI_EVENT_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_FORCE_INT", "keywords": []}, {"id": 1057, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_ATTR_LONG_DESCRIPTION", "display_name": "CUPTI_EVENT_ATTR_LONG_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute33CUPTI_EVENT_ATTR_LONG_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_LONG_DESCRIPTION Long description of event. Value is a null terminated const c-string.", "keywords": []}, {"id": 1058, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_ATTR_NAME", "display_name": "CUPTI_EVENT_ATTR_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute21CUPTI_EVENT_ATTR_NAMEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_NAME Event name. Value is a null terminated const c-string.", "keywords": []}, {"id": 1059, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_ATTR_PROFILING_SCOPE", "display_name": "CUPTI_EVENT_ATTR_PROFILING_SCOPE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute32CUPTI_EVENT_ATTR_PROFILING_SCOPEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_PROFILING_SCOPE Profiling scope of the events. It can be either device or context or both. Value is a CUpti_EventProfilingScope .", "keywords": []}, {"id": 1060, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_ATTR_SHORT_DESCRIPTION", "display_name": "CUPTI_EVENT_ATTR_SHORT_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute34CUPTI_EVENT_ATTR_SHORT_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_SHORT_DESCRIPTION Short description of event. Value is a null terminated const c-string.", "keywords": []}, {"id": 1061, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_CATEGORY_CACHE", "display_name": "CUPTI_EVENT_CATEGORY_CACHE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory26CUPTI_EVENT_CATEGORY_CACHEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_CACHE A cache related event.", "keywords": []}, {"id": 1062, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_CATEGORY_FORCE_INT", "display_name": "CUPTI_EVENT_CATEGORY_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory30CUPTI_EVENT_CATEGORY_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_FORCE_INT", "keywords": []}, {"id": 1063, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_CATEGORY_INSTRUCTION", "display_name": "CUPTI_EVENT_CATEGORY_INSTRUCTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory32CUPTI_EVENT_CATEGORY_INSTRUCTIONE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_INSTRUCTION An instruction related event.", "keywords": []}, {"id": 1064, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_CATEGORY_MEMORY", "display_name": "CUPTI_EVENT_CATEGORY_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory27CUPTI_EVENT_CATEGORY_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_MEMORY A memory related event.", "keywords": []}, {"id": 1065, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER", "display_name": "CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory36CUPTI_EVENT_CATEGORY_PROFILE_TRIGGERE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER A profile-trigger event.", "keywords": []}, {"id": 1066, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_CATEGORY_SYSTEM", "display_name": "CUPTI_EVENT_CATEGORY_SYSTEM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory27CUPTI_EVENT_CATEGORY_SYSTEME", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_SYSTEM A system event.", "keywords": []}, {"id": 1067, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT", "display_name": "CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod39CUPTI_EVENT_COLLECTION_METHOD_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT", "keywords": []}, {"id": 1068, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED", "display_name": "CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod42CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTEDE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED Event is collected using software instrumentation.", "keywords": []}, {"id": 1069, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC", "display_name": "CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod39CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TCE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC Event is collected using NvLink throughput counter method.", "keywords": []}, {"id": 1070, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_METHOD_PM", "display_name": "CUPTI_EVENT_COLLECTION_METHOD_PM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod32CUPTI_EVENT_COLLECTION_METHOD_PME", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_PM Event is collected using a hardware global performance monitor.", "keywords": []}, {"id": 1071, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_METHOD_SM", "display_name": "CUPTI_EVENT_COLLECTION_METHOD_SM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod32CUPTI_EVENT_COLLECTION_METHOD_SME", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_SM Event is collected using a hardware SM performance monitor.", "keywords": []}, {"id": 1072, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS", "display_name": "CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventCollectionMode38CUPTI_EVENT_COLLECTION_MODE_CONTINUOUSE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS Events are collected for the entire duration between the cuptiEventGroupEnable and cuptiEventGroupDisable calls. Event values are reset when the events are read. For CUDA toolkit v6.0 and older this was the default mode.", "keywords": []}, {"id": 1073, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_MODE_FORCE_INT", "display_name": "CUPTI_EVENT_COLLECTION_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventCollectionMode37CUPTI_EVENT_COLLECTION_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_MODE_FORCE_INT", "keywords": []}, {"id": 1074, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_COLLECTION_MODE_KERNEL", "display_name": "CUPTI_EVENT_COLLECTION_MODE_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventCollectionMode34CUPTI_EVENT_COLLECTION_MODE_KERNELE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_MODE_KERNEL Events are collected only for the durations of kernel executions that occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls. Event collection begins when a kernel execution begins, and stops when kernel execution completes. Event values are reset to zero when each kernel execution begins. If multiple kernel executions occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls then the event values must be read after each kernel launch if those events need to be associated with the specific kernel launch. Note that collection in this mode may significantly change the overall performance characteristics of the application because kernel executions that occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls are serialized on the GPU. This is the default mode from CUDA toolkit v6.5", "keywords": []}, {"id": 1075, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD", "display_name": "CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute41CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHODE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD Collection method used for events contained in the event domain. Value is a CUpti_EventCollectionMethod .", "keywords": []}, {"id": 1076, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT", "display_name": "CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute33CUPTI_EVENT_DOMAIN_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT", "keywords": []}, {"id": 1077, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT", "display_name": "CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute38CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT Number of instances of the domain for which event counts will be collected. The domain may have additional instances that cannot be profiled (see CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT). Can be read only with cuptiDeviceGetEventDomainAttribute . Value is a uint32_t.", "keywords": []}, {"id": 1078, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_DOMAIN_ATTR_NAME", "display_name": "CUPTI_EVENT_DOMAIN_ATTR_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute28CUPTI_EVENT_DOMAIN_ATTR_NAMEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_NAME Event domain name. Value is a null terminated const c-string.", "keywords": []}, {"id": 1079, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT", "display_name": "CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute44CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT Total number of instances of the domain, including instances that cannot be profiled. Use CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT to get the number of instances that can be profiled. Can be read only with cuptiDeviceGetEventDomainAttribute . Value is a uint32_t.", "keywords": []}, {"id": 1080, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_EVENTS", "display_name": "CUPTI_EVENT_GROUP_ATTR_EVENTS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute29CUPTI_EVENT_GROUP_ATTR_EVENTSE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_EVENTS Enumerates events in the group. Value is a pointer to buffer of size sizeof(CUpti_EventID) * num_of_events in the eventgroup. num_of_events can be queried using CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS.", "keywords": []}, {"id": 1081, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID", "display_name": "CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute38CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_IDE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID The domain to which the event group is bound. This attribute is set when the first event is added to the group. Value is a CUpti_EventDomainID.", "keywords": []}, {"id": 1082, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_FORCE_INT", "display_name": "CUPTI_EVENT_GROUP_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute32CUPTI_EVENT_GROUP_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_FORCE_INT", "keywords": []}, {"id": 1083, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT", "display_name": "CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute37CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT Number of instances of the domain bound to this event group that will be counted. Value is a uint32_t.", "keywords": []}, {"id": 1084, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS", "display_name": "CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute33CUPTI_EVENT_GROUP_ATTR_NUM_EVENTSE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS Number of events in the group. Value is a uint32_t.", "keywords": []}, {"id": 1085, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES", "display_name": "CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute51CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCESE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES [rw] Profile all the instances of the domain for this eventgroup. This feature can be used to get load balancing across all instances of a domain. Value is an integer.", "keywords": []}, {"id": 1086, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE", "display_name": "CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute38CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE Event group scope can be set to CUPTI_EVENT_PROFILING_SCOPE_DEVICE or CUPTI_EVENT_PROFILING_SCOPE_CONTEXT for an eventGroup, before adding any event. Sets the scope of eventgroup as CUPTI_EVENT_PROFILING_SCOPE_DEVICE or CUPTI_EVENT_PROFILING_SCOPE_CONTEXT when the scope of the events that will be added is CUPTI_EVENT_PROFILING_SCOPE_BOTH. If profiling scope of event is either CUPTI_EVENT_PROFILING_SCOPE_DEVICE or CUPTI_EVENT_PROFILING_SCOPE_CONTEXT then setting this attribute will not affect the default scope. It is not allowed to add events of different scope to same eventgroup. Value is a uint32_t.", "keywords": []}, {"id": 1087, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_GROUP_ATTR_USER_DATA", "display_name": "CUPTI_EVENT_GROUP_ATTR_USER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute32CUPTI_EVENT_GROUP_ATTR_USER_DATAE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_USER_DATA [rw] Reserved for user data.", "keywords": []}, {"id": 1088, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_PROFILING_SCOPE_BOTH", "display_name": "CUPTI_EVENT_PROFILING_SCOPE_BOTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope32CUPTI_EVENT_PROFILING_SCOPE_BOTHE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_BOTH Event can be collected at device or context scope. The scope can be set using cuptiEventGroupSetAttribute API.", "keywords": []}, {"id": 1089, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_PROFILING_SCOPE_CONTEXT", "display_name": "CUPTI_EVENT_PROFILING_SCOPE_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope35CUPTI_EVENT_PROFILING_SCOPE_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_CONTEXT Event is collected at context scope.", "keywords": []}, {"id": 1090, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_PROFILING_SCOPE_DEVICE", "display_name": "CUPTI_EVENT_PROFILING_SCOPE_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope34CUPTI_EVENT_PROFILING_SCOPE_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_DEVICE Event is collected at device scope.", "keywords": []}, {"id": 1091, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT", "display_name": "CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope37CUPTI_EVENT_PROFILING_SCOPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT", "keywords": []}, {"id": 1092, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_READ_FLAG_FORCE_INT", "display_name": "CUPTI_EVENT_READ_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_ReadEventFlags31CUPTI_EVENT_READ_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_READ_FLAG_FORCE_INT", "keywords": []}, {"id": 1093, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_EVENT_READ_FLAG_NONE", "display_name": "CUPTI_EVENT_READ_FLAG_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_ReadEventFlags26CUPTI_EVENT_READ_FLAG_NONEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_READ_FLAG_NONE No flags.", "keywords": []}, {"id": 1094, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute", "display_name": "CUpti_DeviceAttribute", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421CUpti_DeviceAttribute", "priority": 1, "content": "enum  CUpti_DeviceAttribute Device attributes. CUPTI device attributes. These attributes can be read using cuptiDeviceGetAttribute . Values:", "keywords": []}, {"id": 1095, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_DEVICE_CLASS", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_DEVICE_CLASS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute30CUPTI_DEVICE_ATTR_DEVICE_CLASSE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS Get the class for the device. Value is a CUpti_DeviceAttributeDeviceClass.", "keywords": []}, {"id": 1096, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE Get the peak double precision flop per cycle. Value is a uint64_t.", "keywords": []}, {"id": 1097, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE Get the peak half precision flop per cycle. Value is a uint64_t.", "keywords": []}, {"id": 1098, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE Get the peak single precision flop per cycle. Value is a uint64_t.", "keywords": []}, {"id": 1099, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FORCE_INT", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute27CUPTI_DEVICE_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_FORCE_INT", "keywords": []}, {"id": 1100, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute41CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTHE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_GLOBAL_MEMORY_BANDWIDTH Get global memory bandwidth in Kbytes/sec. Value is a uint64_t.", "keywords": []}, {"id": 1101, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BWE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_GPU_CPU_NVLINK_BW Check if Nvlink is present between GPU and CPU. Returns Bandwidth, in Bytes/sec, if Nvlink is present, returns 0 otherwise. Value is a uint64_t.", "keywords": []}, {"id": 1102, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute39CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_INSTRUCTION_PER_CYCLE Get theoretical maximum number of instructions per cycle. Value is a uint32_t.", "keywords": []}, {"id": 1103, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute57CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISIONE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_INSTRUCTION_THROUGHPUT_SINGLE_PRECISION Get theoretical maximum number of single precision instructions that can be executed per second. Value is a uint64_t.", "keywords": []}, {"id": 1104, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute37CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_IDE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_EVENT_DOMAIN_ID Number of event domain IDs for a device. Value is a uint32_t.", "keywords": []}, {"id": 1105, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_EVENT_ID", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_EVENT_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute30CUPTI_DEVICE_ATTR_MAX_EVENT_IDE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_EVENT_ID Number of event IDs for a device. Value is a uint32_t.", "keywords": []}, {"id": 1106, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute35CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERSE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_FRAME_BUFFERS Get number of frame buffers for device. Value is a uint64_t.", "keywords": []}, {"id": 1107, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_L2_UNITS", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_L2_UNITS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute30CUPTI_DEVICE_ATTR_MAX_L2_UNITSE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_L2_UNITS Get number of L2 units. Value is a uint64_t.", "keywords": []}, {"id": 1108, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute61CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUALE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_EQUAL Get the maximum shared memory for the CU_FUNC_CACHE_PREFER_EQUAL preference. Value is a uint64_t.", "keywords": []}, {"id": 1109, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute58CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1E", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_L1 Get the maximum shared memory for the CU_FUNC_CACHE_PREFER_L1 preference. Value is a uint64_t.", "keywords": []}, {"id": 1110, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute62CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHAREDE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_MAX_SHARED_MEMORY_CACHE_CONFIG_PREFER_SHARED Get the maximum shared memory for the CU_FUNC_CACHE_PREFER_SHARED preference. Value is a uint64_t.", "keywords": []}, {"id": 1111, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_NVLINK_PRESENT", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_NVLINK_PRESENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute32CUPTI_DEVICE_ATTR_NVLINK_PRESENTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_NVLINK_PRESENT Check if Nvlink is connected to device. Returns 1, if at least one Nvlink is connected to the device, returns 0 otherwise. Value is a uint32_t.", "keywords": []}, {"id": 1112, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute34CUPTI_DEVICE_ATTR_NVSWITCH_PRESENTE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_NVSWITCH_PRESENT Check if NVSwitch is present in the underlying topology. Returns 1, if present, returns 0 otherwise. Value is a uint32_t.", "keywords": []}, {"id": 1113, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_PCIE_GEN", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_PCIE_GEN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute26CUPTI_DEVICE_ATTR_PCIE_GENE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_PCIE_GEN Get PCIE generation for device. Return 0 if bus-type is non-PCIE. Value is a uint64_t.", "keywords": []}, {"id": 1114, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_PCIE_LINK_RATE", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_PCIE_LINK_RATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute32CUPTI_DEVICE_ATTR_PCIE_LINK_RATEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_PCIE_LINK_RATE Get PCIE link rate in Mega bits/sec for device. Return 0 if bus-type is non-PCIE. Value is a uint64_t.", "keywords": []}, {"id": 1115, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH", "display_name": "CUpti_DeviceAttribute::CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N21CUpti_DeviceAttribute33CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTHE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_PCIE_LINK_WIDTH Get PCIE link width for device. Return 0 if bus-type is non-PCIE. Value is a uint64_t.", "keywords": []}, {"id": 1116, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttributeDeviceClass", "display_name": "CUpti_DeviceAttributeDeviceClass", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv432CUpti_DeviceAttributeDeviceClass", "priority": 1, "content": "enum  CUpti_DeviceAttributeDeviceClass Device class. Enumeration of device classes for device attribute CUPTI_DEVICE_ATTR_DEVICE_CLASS. Values:", "keywords": []}, {"id": 1117, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE", "display_name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass38CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCEE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_GEFORCE", "keywords": []}, {"id": 1118, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO", "display_name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass37CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADROE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_QUADRO", "keywords": []}, {"id": 1119, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA", "display_name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass36CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRAE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_TEGRA", "keywords": []}, {"id": 1120, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA", "display_name": "CUpti_DeviceAttributeDeviceClass::CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N32CUpti_DeviceAttributeDeviceClass36CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLAE", "priority": 1, "content": "enumerator  CUPTI_DEVICE_ATTR_DEVICE_CLASS_TESLA", "keywords": []}, {"id": 1121, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute", "display_name": "CUpti_EventAttribute", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv420CUpti_EventAttribute", "priority": 1, "content": "enum  CUpti_EventAttribute Event attributes. Event attributes. These attributes can be read using cuptiEventGetAttribute . Values:", "keywords": []}, {"id": 1122, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_CATEGORY", "display_name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_CATEGORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute25CUPTI_EVENT_ATTR_CATEGORYE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_CATEGORY Category of event. Value is CUpti_EventCategory.", "keywords": []}, {"id": 1123, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_FORCE_INT", "display_name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute26CUPTI_EVENT_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_FORCE_INT", "keywords": []}, {"id": 1124, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_LONG_DESCRIPTION", "display_name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_LONG_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute33CUPTI_EVENT_ATTR_LONG_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_LONG_DESCRIPTION Long description of event. Value is a null terminated const c-string.", "keywords": []}, {"id": 1125, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_NAME", "display_name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute21CUPTI_EVENT_ATTR_NAMEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_NAME Event name. Value is a null terminated const c-string.", "keywords": []}, {"id": 1126, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_PROFILING_SCOPE", "display_name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_PROFILING_SCOPE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute32CUPTI_EVENT_ATTR_PROFILING_SCOPEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_PROFILING_SCOPE Profiling scope of the events. It can be either device or context or both. Value is a CUpti_EventProfilingScope .", "keywords": []}, {"id": 1127, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_SHORT_DESCRIPTION", "display_name": "CUpti_EventAttribute::CUPTI_EVENT_ATTR_SHORT_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_EventAttribute34CUPTI_EVENT_ATTR_SHORT_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_EVENT_ATTR_SHORT_DESCRIPTION Short description of event. Value is a null terminated const c-string.", "keywords": []}, {"id": 1128, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory", "display_name": "CUpti_EventCategory", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv419CUpti_EventCategory", "priority": 1, "content": "enum  CUpti_EventCategory An event category. Each event is assigned to a category that represents the general type of the event. A event\u2019s category is accessed using cuptiEventGetAttribute and the CUPTI_EVENT_ATTR_CATEGORY attribute. Values:", "keywords": []}, {"id": 1129, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_CACHE", "display_name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_CACHE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory26CUPTI_EVENT_CATEGORY_CACHEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_CACHE A cache related event.", "keywords": []}, {"id": 1130, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_FORCE_INT", "display_name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory30CUPTI_EVENT_CATEGORY_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_FORCE_INT", "keywords": []}, {"id": 1131, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_INSTRUCTION", "display_name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_INSTRUCTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory32CUPTI_EVENT_CATEGORY_INSTRUCTIONE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_INSTRUCTION An instruction related event.", "keywords": []}, {"id": 1132, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_MEMORY", "display_name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory27CUPTI_EVENT_CATEGORY_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_MEMORY A memory related event.", "keywords": []}, {"id": 1133, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER", "display_name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory36CUPTI_EVENT_CATEGORY_PROFILE_TRIGGERE", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_PROFILE_TRIGGER A profile-trigger event.", "keywords": []}, {"id": 1134, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_SYSTEM", "display_name": "CUpti_EventCategory::CUPTI_EVENT_CATEGORY_SYSTEM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N19CUpti_EventCategory27CUPTI_EVENT_CATEGORY_SYSTEME", "priority": 1, "content": "enumerator  CUPTI_EVENT_CATEGORY_SYSTEM A system event.", "keywords": []}, {"id": 1135, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMethod", "display_name": "CUpti_EventCollectionMethod", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427CUpti_EventCollectionMethod", "priority": 1, "content": "enum  CUpti_EventCollectionMethod The collection method used for an event. The collection method indicates how an event is collected. Values:", "keywords": []}, {"id": 1136, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT", "display_name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod39CUPTI_EVENT_COLLECTION_METHOD_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_FORCE_INT", "keywords": []}, {"id": 1137, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED", "display_name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod42CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTEDE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED Event is collected using software instrumentation.", "keywords": []}, {"id": 1138, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC", "display_name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod39CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TCE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_NVLINK_TC Event is collected using NvLink throughput counter method.", "keywords": []}, {"id": 1139, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_PM", "display_name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_PM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod32CUPTI_EVENT_COLLECTION_METHOD_PME", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_PM Event is collected using a hardware global performance monitor.", "keywords": []}, {"id": 1140, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_SM", "display_name": "CUpti_EventCollectionMethod::CUPTI_EVENT_COLLECTION_METHOD_SM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N27CUpti_EventCollectionMethod32CUPTI_EVENT_COLLECTION_METHOD_SME", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_METHOD_SM Event is collected using a hardware SM performance monitor.", "keywords": []}, {"id": 1141, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMode", "display_name": "CUpti_EventCollectionMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425CUpti_EventCollectionMode", "priority": 1, "content": "enum  CUpti_EventCollectionMode Event collection modes. The event collection mode determines the period over which the events within the enabled event groups will be collected. Values:", "keywords": []}, {"id": 1142, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMode::CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS", "display_name": "CUpti_EventCollectionMode::CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventCollectionMode38CUPTI_EVENT_COLLECTION_MODE_CONTINUOUSE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS Events are collected for the entire duration between the cuptiEventGroupEnable and cuptiEventGroupDisable calls. Event values are reset when the events are read. For CUDA toolkit v6.0 and older this was the default mode.", "keywords": []}, {"id": 1143, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMode::CUPTI_EVENT_COLLECTION_MODE_FORCE_INT", "display_name": "CUpti_EventCollectionMode::CUPTI_EVENT_COLLECTION_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventCollectionMode37CUPTI_EVENT_COLLECTION_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_MODE_FORCE_INT", "keywords": []}, {"id": 1144, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventCollectionMode::CUPTI_EVENT_COLLECTION_MODE_KERNEL", "display_name": "CUpti_EventCollectionMode::CUPTI_EVENT_COLLECTION_MODE_KERNEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventCollectionMode34CUPTI_EVENT_COLLECTION_MODE_KERNELE", "priority": 1, "content": "enumerator  CUPTI_EVENT_COLLECTION_MODE_KERNEL Events are collected only for the durations of kernel executions that occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls. Event collection begins when a kernel execution begins, and stops when kernel execution completes. Event values are reset to zero when each kernel execution begins. If multiple kernel executions occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls then the event values must be read after each kernel launch if those events need to be associated with the specific kernel launch. Note that collection in this mode may significantly change the overall performance characteristics of the application because kernel executions that occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls are serialized on the GPU. This is the default mode from CUDA toolkit v6.5", "keywords": []}, {"id": 1145, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainAttribute", "display_name": "CUpti_EventDomainAttribute", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426CUpti_EventDomainAttribute", "priority": 1, "content": "enum  CUpti_EventDomainAttribute Event domain attributes. Event domain attributes. Except where noted, all the attributes can be read using either cuptiDeviceGetEventDomainAttribute or cuptiEventDomainGetAttribute . Values:", "keywords": []}, {"id": 1146, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD", "display_name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute41CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHODE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_COLLECTION_METHOD Collection method used for events contained in the event domain. Value is a CUpti_EventCollectionMethod .", "keywords": []}, {"id": 1147, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT", "display_name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute33CUPTI_EVENT_DOMAIN_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_FORCE_INT", "keywords": []}, {"id": 1148, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT", "display_name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute38CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT Number of instances of the domain for which event counts will be collected. The domain may have additional instances that cannot be profiled (see CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT). Can be read only with cuptiDeviceGetEventDomainAttribute . Value is a uint32_t.", "keywords": []}, {"id": 1149, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_NAME", "display_name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute28CUPTI_EVENT_DOMAIN_ATTR_NAMEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_NAME Event domain name. Value is a null terminated const c-string.", "keywords": []}, {"id": 1150, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT", "display_name": "CUpti_EventDomainAttribute::CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N26CUpti_EventDomainAttribute44CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT Total number of instances of the domain, including instances that cannot be profiled. Use CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT to get the number of instances that can be profiled. Can be read only with cuptiDeviceGetEventDomainAttribute . Value is a uint32_t.", "keywords": []}, {"id": 1151, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventDomainID", "display_name": "CUpti_EventDomainID", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv419CUpti_EventDomainID", "priority": 1, "content": "typedef  uint32_t  CUpti_EventDomainID ID for an event domain. ID for an event domain. An event domain represents a group of related events. A device may have multiple instances of a domain, indicating that the device can simultaneously record multiple instances of each event within that domain.", "keywords": []}, {"id": 1152, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroup", "display_name": "CUpti_EventGroup", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv416CUpti_EventGroup", "priority": 1, "content": "typedef  void  * CUpti_EventGroup A group of events. An event group is a collection of events that are managed together. All events in an event group must belong to the same domain.", "keywords": []}, {"id": 1153, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute", "display_name": "CUpti_EventGroupAttribute", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425CUpti_EventGroupAttribute", "priority": 1, "content": "enum  CUpti_EventGroupAttribute Event group attributes. Event group attributes. These attributes can be read using cuptiEventGroupGetAttribute . Attributes marked [rw] can also be written using cuptiEventGroupSetAttribute . Values:", "keywords": []}, {"id": 1154, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_EVENTS", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_EVENTS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute29CUPTI_EVENT_GROUP_ATTR_EVENTSE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_EVENTS Enumerates events in the group. Value is a pointer to buffer of size sizeof(CUpti_EventID) * num_of_events in the eventgroup. num_of_events can be queried using CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS.", "keywords": []}, {"id": 1155, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute38CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_IDE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_EVENT_DOMAIN_ID The domain to which the event group is bound. This attribute is set when the first event is added to the group. Value is a CUpti_EventDomainID.", "keywords": []}, {"id": 1156, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_FORCE_INT", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute32CUPTI_EVENT_GROUP_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_FORCE_INT", "keywords": []}, {"id": 1157, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute37CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT Number of instances of the domain bound to this event group that will be counted. Value is a uint32_t.", "keywords": []}, {"id": 1158, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute33CUPTI_EVENT_GROUP_ATTR_NUM_EVENTSE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_NUM_EVENTS Number of events in the group. Value is a uint32_t.", "keywords": []}, {"id": 1159, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute51CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCESE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES [rw] Profile all the instances of the domain for this eventgroup. This feature can be used to get load balancing across all instances of a domain. Value is an integer.", "keywords": []}, {"id": 1160, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute38CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_PROFILING_SCOPE Event group scope can be set to CUPTI_EVENT_PROFILING_SCOPE_DEVICE or CUPTI_EVENT_PROFILING_SCOPE_CONTEXT for an eventGroup, before adding any event. Sets the scope of eventgroup as CUPTI_EVENT_PROFILING_SCOPE_DEVICE or CUPTI_EVENT_PROFILING_SCOPE_CONTEXT when the scope of the events that will be added is CUPTI_EVENT_PROFILING_SCOPE_BOTH. If profiling scope of event is either CUPTI_EVENT_PROFILING_SCOPE_DEVICE or CUPTI_EVENT_PROFILING_SCOPE_CONTEXT then setting this attribute will not affect the default scope. It is not allowed to add events of different scope to same eventgroup. Value is a uint32_t.", "keywords": []}, {"id": 1161, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_USER_DATA", "display_name": "CUpti_EventGroupAttribute::CUPTI_EVENT_GROUP_ATTR_USER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventGroupAttribute32CUPTI_EVENT_GROUP_ATTR_USER_DATAE", "priority": 1, "content": "enumerator  CUPTI_EVENT_GROUP_ATTR_USER_DATA [rw] Reserved for user data.", "keywords": []}, {"id": 1162, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventID", "display_name": "CUpti_EventID", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv413CUpti_EventID", "priority": 1, "content": "typedef  uint32_t  CUpti_EventID ID for an event. An event represents a countable activity, action, or occurrence on the device.", "keywords": []}, {"id": 1163, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventProfilingScope", "display_name": "CUpti_EventProfilingScope", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425CUpti_EventProfilingScope", "priority": 1, "content": "enum  CUpti_EventProfilingScope Profiling scope for event. Profiling scope of event indicates if the event can be collected at context scope or device scope or both i.e. it can be collected at any of context or device scope. Values:", "keywords": []}, {"id": 1164, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_BOTH", "display_name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_BOTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope32CUPTI_EVENT_PROFILING_SCOPE_BOTHE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_BOTH Event can be collected at device or context scope. The scope can be set using cuptiEventGroupSetAttribute API.", "keywords": []}, {"id": 1165, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_CONTEXT", "display_name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope35CUPTI_EVENT_PROFILING_SCOPE_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_CONTEXT Event is collected at context scope.", "keywords": []}, {"id": 1166, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_DEVICE", "display_name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope34CUPTI_EVENT_PROFILING_SCOPE_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_DEVICE Event is collected at device scope.", "keywords": []}, {"id": 1167, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT", "display_name": "CUpti_EventProfilingScope::CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N25CUpti_EventProfilingScope37CUPTI_EVENT_PROFILING_SCOPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_PROFILING_SCOPE_FORCE_INT", "keywords": []}, {"id": 1168, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_KernelReplayUpdateFunc", "display_name": "CUpti_KernelReplayUpdateFunc", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428CUpti_KernelReplayUpdateFunc", "priority": 1, "content": "typedef  void  ( * CUpti_KernelReplayUpdateFunc ) ( const  char  * kernelName ,  int  numReplaysDone ,  void  * customData ) Function type for getting updates on kernel replay. Param kernelName The mangled kernel name Param numReplaysDone Number of replays done so far Param customData Pointer of any custom data passed in when subscribing", "keywords": []}, {"id": 1169, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ReadEventFlags", "display_name": "CUpti_ReadEventFlags", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv420CUpti_ReadEventFlags", "priority": 1, "content": "enum  CUpti_ReadEventFlags Flags for cuptiEventGroupReadEvent an cuptiEventGroupReadAllEvents. Flags for cuptiEventGroupReadEvent an cuptiEventGroupReadAllEvents . Values:", "keywords": []}, {"id": 1170, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ReadEventFlags::CUPTI_EVENT_READ_FLAG_FORCE_INT", "display_name": "CUpti_ReadEventFlags::CUPTI_EVENT_READ_FLAG_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_ReadEventFlags31CUPTI_EVENT_READ_FLAG_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_EVENT_READ_FLAG_FORCE_INT", "keywords": []}, {"id": 1171, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ReadEventFlags::CUPTI_EVENT_READ_FLAG_NONE", "display_name": "CUpti_ReadEventFlags::CUPTI_EVENT_READ_FLAG_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv4N20CUpti_ReadEventFlags26CUPTI_EVENT_READ_FLAG_NONEE", "priority": 1, "content": "enumerator  CUPTI_EVENT_READ_FLAG_NONE No flags.", "keywords": []}, {"id": 1172, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumEventDomains", "display_name": "cuptiDeviceEnumEventDomains", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiDeviceEnumEventDomains8CUdeviceP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumEventDomains CUdevice  device size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains for a device. Returns the event domains IDs in domainArray for a device. The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numdomains * sizeof(CUpti_EventDomainID) or else all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns the IDs of the event domains for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1173, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumEventDomains::arraySizeBytes", "display_name": "cuptiDeviceEnumEventDomains::arraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiDeviceEnumEventDomains8CUdeviceP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumEventDomains CUdevice  device size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains for a device. Returns the event domains IDs in domainArray for a device. The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numdomains * sizeof(CUpti_EventDomainID) or else all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns the IDs of the event domains for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1174, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumEventDomains::device", "display_name": "cuptiDeviceEnumEventDomains::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiDeviceEnumEventDomains8CUdeviceP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumEventDomains CUdevice  device size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains for a device. Returns the event domains IDs in domainArray for a device. The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numdomains * sizeof(CUpti_EventDomainID) or else all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns the IDs of the event domains for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1175, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumEventDomains::domainArray", "display_name": "cuptiDeviceEnumEventDomains::domainArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiDeviceEnumEventDomains8CUdeviceP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumEventDomains CUdevice  device size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains for a device. Returns the event domains IDs in domainArray for a device. The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numdomains * sizeof(CUpti_EventDomainID) or else all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns the IDs of the event domains for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1176, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetAttribute", "display_name": "cuptiDeviceGetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiDeviceGetAttribute8CUdevice21CUpti_DeviceAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetAttribute CUdevice  device CUpti_DeviceAttribute  attrib size_t  * valueSize void  * value Read a device attribute. Read a device attribute and return it in *value . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a device attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1177, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetAttribute::attrib", "display_name": "cuptiDeviceGetAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiDeviceGetAttribute8CUdevice21CUpti_DeviceAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetAttribute CUdevice  device CUpti_DeviceAttribute  attrib size_t  * valueSize void  * value Read a device attribute. Read a device attribute and return it in *value . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a device attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1178, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetAttribute::device", "display_name": "cuptiDeviceGetAttribute::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiDeviceGetAttribute8CUdevice21CUpti_DeviceAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetAttribute CUdevice  device CUpti_DeviceAttribute  attrib size_t  * valueSize void  * value Read a device attribute. Read a device attribute and return it in *value . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a device attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1179, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetAttribute::value", "display_name": "cuptiDeviceGetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiDeviceGetAttribute8CUdevice21CUpti_DeviceAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetAttribute CUdevice  device CUpti_DeviceAttribute  attrib size_t  * valueSize void  * value Read a device attribute. Read a device attribute and return it in *value . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a device attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1180, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetAttribute::valueSize", "display_name": "cuptiDeviceGetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiDeviceGetAttribute8CUdevice21CUpti_DeviceAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetAttribute CUdevice  device CUpti_DeviceAttribute  attrib size_t  * valueSize void  * value Read a device attribute. Read a device attribute and return it in *value . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a device attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1181, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetEventDomainAttribute", "display_name": "cuptiDeviceGetEventDomainAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv434cuptiDeviceGetEventDomainAttribute8CUdevice19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetEventDomainAttribute CUdevice  device CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1182, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetEventDomainAttribute::attrib", "display_name": "cuptiDeviceGetEventDomainAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv434cuptiDeviceGetEventDomainAttribute8CUdevice19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetEventDomainAttribute CUdevice  device CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1183, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetEventDomainAttribute::device", "display_name": "cuptiDeviceGetEventDomainAttribute::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv434cuptiDeviceGetEventDomainAttribute8CUdevice19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetEventDomainAttribute CUdevice  device CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1184, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetEventDomainAttribute::eventDomain", "display_name": "cuptiDeviceGetEventDomainAttribute::eventDomain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv434cuptiDeviceGetEventDomainAttribute8CUdevice19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetEventDomainAttribute CUdevice  device CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1185, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetEventDomainAttribute::value", "display_name": "cuptiDeviceGetEventDomainAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv434cuptiDeviceGetEventDomainAttribute8CUdevice19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetEventDomainAttribute CUdevice  device CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1186, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetEventDomainAttribute::valueSize", "display_name": "cuptiDeviceGetEventDomainAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv434cuptiDeviceGetEventDomainAttribute8CUdevice19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiDeviceGetEventDomainAttribute CUdevice  device CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1187, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetNumEventDomains", "display_name": "cuptiDeviceGetNumEventDomains", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv429cuptiDeviceGetNumEventDomains8CUdeviceP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiDeviceGetNumEventDomains CUdevice  device uint32_t  * numDomains Get the number of domains for a device. Returns the number of domains in numDomains for a device. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device numDomains \u2013 Returns the number of domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numDomains is NULL", "keywords": []}, {"id": 1188, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetNumEventDomains::device", "display_name": "cuptiDeviceGetNumEventDomains::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv429cuptiDeviceGetNumEventDomains8CUdeviceP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiDeviceGetNumEventDomains CUdevice  device uint32_t  * numDomains Get the number of domains for a device. Returns the number of domains in numDomains for a device. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device numDomains \u2013 Returns the number of domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numDomains is NULL", "keywords": []}, {"id": 1189, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetNumEventDomains::numDomains", "display_name": "cuptiDeviceGetNumEventDomains::numDomains", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv429cuptiDeviceGetNumEventDomains8CUdeviceP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiDeviceGetNumEventDomains CUdevice  device uint32_t  * numDomains Get the number of domains for a device. Returns the number of domains in numDomains for a device. Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device numDomains \u2013 Returns the number of domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numDomains is NULL", "keywords": []}, {"id": 1190, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDisableKernelReplayMode", "display_name": "cuptiDisableKernelReplayMode", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiDisableKernelReplayMode9CUcontext", "priority": 1, "content": "CUptiResult  cuptiDisableKernelReplayMode CUcontext  context Disable kernel replay mode. Set profiling mode for the context to non-replay (default) mode. Event collection mode will be set to CUPTI_EVENT_COLLECTION_MODE_KERNEL. All previously enabled event groups and event group sets will be disabled. Thread-safety : this function is thread safe. Parameters context \u2013 The context Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1191, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiDisableKernelReplayMode::context", "display_name": "cuptiDisableKernelReplayMode::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiDisableKernelReplayMode9CUcontext", "priority": 1, "content": "CUptiResult  cuptiDisableKernelReplayMode CUcontext  context Disable kernel replay mode. Set profiling mode for the context to non-replay (default) mode. Event collection mode will be set to CUPTI_EVENT_COLLECTION_MODE_KERNEL. All previously enabled event groups and event group sets will be disabled. Thread-safety : this function is thread safe. Parameters context \u2013 The context Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1192, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableKernelReplayMode", "display_name": "cuptiEnableKernelReplayMode", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEnableKernelReplayMode9CUcontext", "priority": 1, "content": "CUptiResult  cuptiEnableKernelReplayMode CUcontext  context Enable kernel replay mode. Set profiling mode for the context to replay mode. In this mode, any number of events can be collected in one run of the kernel. The event collection mode will automatically switch to CUPTI_EVENT_COLLECTION_MODE_KERNEL. In this mode, cuptiSetEventCollectionMode will return CUPTI_ERROR_INVALID_OPERATION. Kernels might take longer to run if many events are enabled. Thread-safety : this function is thread safe. Parameters context \u2013 The context Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1193, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnableKernelReplayMode::context", "display_name": "cuptiEnableKernelReplayMode::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEnableKernelReplayMode9CUcontext", "priority": 1, "content": "CUptiResult  cuptiEnableKernelReplayMode CUcontext  context Enable kernel replay mode. Set profiling mode for the context to replay mode. In this mode, any number of events can be collected in one run of the kernel. The event collection mode will automatically switch to CUPTI_EVENT_COLLECTION_MODE_KERNEL. In this mode, cuptiSetEventCollectionMode will return CUPTI_ERROR_INVALID_OPERATION. Kernels might take longer to run if many events are enabled. Thread-safety : this function is thread safe. Parameters context \u2013 The context Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1194, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnumEventDomains", "display_name": "cuptiEnumEventDomains", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEnumEventDomainsP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiEnumEventDomains size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains available on any device. Returns all the event domains available on any CUDA-capable device. Event domain IDs are returned in domainArray . The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numDomains * sizeof(CUpti_EventDomainID) or all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns all the event domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1195, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnumEventDomains::arraySizeBytes", "display_name": "cuptiEnumEventDomains::arraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEnumEventDomainsP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiEnumEventDomains size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains available on any device. Returns all the event domains available on any CUDA-capable device. Event domain IDs are returned in domainArray . The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numDomains * sizeof(CUpti_EventDomainID) or all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns all the event domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1196, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnumEventDomains::domainArray", "display_name": "cuptiEnumEventDomains::domainArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEnumEventDomainsP6size_tP19CUpti_EventDomainID", "priority": 1, "content": "CUptiResult  cuptiEnumEventDomains size_t  * arraySizeBytes CUpti_EventDomainID  * domainArray Get the event domains available on any device. Returns all the event domains available on any CUDA-capable device. Event domain IDs are returned in domainArray . The size of the domainArray buffer is given by *arraySizeBytes . The size of the domainArray buffer must be at least numDomains * sizeof(CUpti_EventDomainID) or all domains will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in domainArray . Thread-safety : this function is thread safe. Parameters arraySizeBytes \u2013 The size of domainArray in bytes, and returns the number of bytes written to domainArray  domainArray \u2013 Returns all the event domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or domainArray are NULL", "keywords": []}, {"id": 1197, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainEnumEvents", "display_name": "cuptiEventDomainEnumEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventDomainEnumEvents19CUpti_EventDomainIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventDomainEnumEvents CUpti_EventDomainID  eventDomain size_t  * arraySizeBytes CUpti_EventID  * eventArray Get the events in a domain. Returns the event IDs in eventArray for a domain. The size of the eventArray buffer is given by *arraySizeBytes . The size of the eventArray buffer must be at least numdomainevents * sizeof(CUpti_EventID) or else all events will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in eventArray . Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain arraySizeBytes \u2013 The size of eventArray in bytes, and returns the number of bytes written to eventArray  eventArray \u2013 Returns the IDs of the events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or eventArray are NULL", "keywords": []}, {"id": 1198, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainEnumEvents::arraySizeBytes", "display_name": "cuptiEventDomainEnumEvents::arraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventDomainEnumEvents19CUpti_EventDomainIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventDomainEnumEvents CUpti_EventDomainID  eventDomain size_t  * arraySizeBytes CUpti_EventID  * eventArray Get the events in a domain. Returns the event IDs in eventArray for a domain. The size of the eventArray buffer is given by *arraySizeBytes . The size of the eventArray buffer must be at least numdomainevents * sizeof(CUpti_EventID) or else all events will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in eventArray . Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain arraySizeBytes \u2013 The size of eventArray in bytes, and returns the number of bytes written to eventArray  eventArray \u2013 Returns the IDs of the events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or eventArray are NULL", "keywords": []}, {"id": 1199, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainEnumEvents::eventArray", "display_name": "cuptiEventDomainEnumEvents::eventArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventDomainEnumEvents19CUpti_EventDomainIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventDomainEnumEvents CUpti_EventDomainID  eventDomain size_t  * arraySizeBytes CUpti_EventID  * eventArray Get the events in a domain. Returns the event IDs in eventArray for a domain. The size of the eventArray buffer is given by *arraySizeBytes . The size of the eventArray buffer must be at least numdomainevents * sizeof(CUpti_EventID) or else all events will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in eventArray . Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain arraySizeBytes \u2013 The size of eventArray in bytes, and returns the number of bytes written to eventArray  eventArray \u2013 Returns the IDs of the events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or eventArray are NULL", "keywords": []}, {"id": 1200, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainEnumEvents::eventDomain", "display_name": "cuptiEventDomainEnumEvents::eventDomain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventDomainEnumEvents19CUpti_EventDomainIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventDomainEnumEvents CUpti_EventDomainID  eventDomain size_t  * arraySizeBytes CUpti_EventID  * eventArray Get the events in a domain. Returns the event IDs in eventArray for a domain. The size of the eventArray buffer is given by *arraySizeBytes . The size of the eventArray buffer must be at least numdomainevents * sizeof(CUpti_EventID) or else all events will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in eventArray . Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain arraySizeBytes \u2013 The size of eventArray in bytes, and returns the number of bytes written to eventArray  eventArray \u2013 Returns the IDs of the events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or eventArray are NULL", "keywords": []}, {"id": 1201, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetAttribute", "display_name": "cuptiEventDomainGetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetAttribute19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetAttribute CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1202, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetAttribute::attrib", "display_name": "cuptiEventDomainGetAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetAttribute19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetAttribute CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1203, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetAttribute::eventDomain", "display_name": "cuptiEventDomainGetAttribute::eventDomain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetAttribute19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetAttribute CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1204, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetAttribute::value", "display_name": "cuptiEventDomainGetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetAttribute19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetAttribute CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1205, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetAttribute::valueSize", "display_name": "cuptiEventDomainGetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetAttribute19CUpti_EventDomainID26CUpti_EventDomainAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetAttribute CUpti_EventDomainID  eventDomain CUpti_EventDomainAttribute  attrib size_t  * valueSize void  * value Read an event domain attribute. Returns an event domain attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain attrib \u2013 The event domain attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event domain attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1206, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetNumEvents", "display_name": "cuptiEventDomainGetNumEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetNumEvents19CUpti_EventDomainIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetNumEvents CUpti_EventDomainID  eventDomain uint32_t  * numEvents Get number of events in a domain. Returns the number of events in numEvents for a domain. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain numEvents \u2013 Returns the number of events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numEvents is NULL", "keywords": []}, {"id": 1207, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetNumEvents::eventDomain", "display_name": "cuptiEventDomainGetNumEvents::eventDomain", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetNumEvents19CUpti_EventDomainIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetNumEvents CUpti_EventDomainID  eventDomain uint32_t  * numEvents Get number of events in a domain. Returns the number of events in numEvents for a domain. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain numEvents \u2013 Returns the number of events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numEvents is NULL", "keywords": []}, {"id": 1208, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventDomainGetNumEvents::numEvents", "display_name": "cuptiEventDomainGetNumEvents::numEvents", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventDomainGetNumEvents19CUpti_EventDomainIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventDomainGetNumEvents CUpti_EventDomainID  eventDomain uint32_t  * numEvents Get number of events in a domain. Returns the number of events in numEvents for a domain. Thread-safety : this function is thread safe. Parameters eventDomain \u2013 ID of the event domain numEvents \u2013 Returns the number of events in the domain Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numEvents is NULL", "keywords": []}, {"id": 1209, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetAttribute", "display_name": "cuptiEventGetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGetAttribute13CUpti_EventID20CUpti_EventAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGetAttribute CUpti_EventID  event CUpti_EventAttribute  attrib size_t  * valueSize void  * value Get an event attribute. Returns an event attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters event \u2013 ID of the event attrib \u2013 The event attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1210, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetAttribute::attrib", "display_name": "cuptiEventGetAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGetAttribute13CUpti_EventID20CUpti_EventAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGetAttribute CUpti_EventID  event CUpti_EventAttribute  attrib size_t  * valueSize void  * value Get an event attribute. Returns an event attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters event \u2013 ID of the event attrib \u2013 The event attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1211, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetAttribute::event", "display_name": "cuptiEventGetAttribute::event", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGetAttribute13CUpti_EventID20CUpti_EventAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGetAttribute CUpti_EventID  event CUpti_EventAttribute  attrib size_t  * valueSize void  * value Get an event attribute. Returns an event attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters event \u2013 ID of the event attrib \u2013 The event attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1212, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetAttribute::value", "display_name": "cuptiEventGetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGetAttribute13CUpti_EventID20CUpti_EventAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGetAttribute CUpti_EventID  event CUpti_EventAttribute  attrib size_t  * valueSize void  * value Get an event attribute. Returns an event attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters event \u2013 ID of the event attrib \u2013 The event attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1213, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetAttribute::valueSize", "display_name": "cuptiEventGetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGetAttribute13CUpti_EventID20CUpti_EventAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGetAttribute CUpti_EventID  event CUpti_EventAttribute  attrib size_t  * valueSize void  * value Get an event attribute. Returns an event attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Thread-safety : this function is thread safe. Parameters event \u2013 ID of the event attrib \u2013 The event attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1214, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetIdFromName", "display_name": "cuptiEventGetIdFromName", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGetIdFromName8CUdevicePKcP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGetIdFromName CUdevice  device const  char  * eventName CUpti_EventID  * event Find an event by name. Find an event by name and return the event ID in *event . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventName \u2013 The name of the event to find event \u2013 Returns the ID of the found event or undefined if unable to find the event Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_NAME \u2013 if unable to find an event with name eventName . In this case *event is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventName or event are NULL", "keywords": []}, {"id": 1215, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetIdFromName::device", "display_name": "cuptiEventGetIdFromName::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGetIdFromName8CUdevicePKcP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGetIdFromName CUdevice  device const  char  * eventName CUpti_EventID  * event Find an event by name. Find an event by name and return the event ID in *event . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventName \u2013 The name of the event to find event \u2013 Returns the ID of the found event or undefined if unable to find the event Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_NAME \u2013 if unable to find an event with name eventName . In this case *event is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventName or event are NULL", "keywords": []}, {"id": 1216, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetIdFromName::event", "display_name": "cuptiEventGetIdFromName::event", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGetIdFromName8CUdevicePKcP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGetIdFromName CUdevice  device const  char  * eventName CUpti_EventID  * event Find an event by name. Find an event by name and return the event ID in *event . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventName \u2013 The name of the event to find event \u2013 Returns the ID of the found event or undefined if unable to find the event Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_NAME \u2013 if unable to find an event with name eventName . In this case *event is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventName or event are NULL", "keywords": []}, {"id": 1217, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGetIdFromName::eventName", "display_name": "cuptiEventGetIdFromName::eventName", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGetIdFromName8CUdevicePKcP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGetIdFromName CUdevice  device const  char  * eventName CUpti_EventID  * event Find an event by name. Find an event by name and return the event ID in *event . Thread-safety : this function is thread safe. Parameters device \u2013 The CUDA device eventName \u2013 The name of the event to find event \u2013 Returns the ID of the found event or undefined if unable to find the event Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_EVENT_NAME \u2013 if unable to find an event with name eventName . In this case *event is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventName or event are NULL", "keywords": []}, {"id": 1218, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupAddEvent", "display_name": "cuptiEventGroupAddEvent", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGroupAddEvent16CUpti_EventGroup13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGroupAddEvent CUpti_EventGroup  eventGroup CUpti_EventID  event Add an event to an event group. Add an event to an event group. The event add can fail for a number of reasons: The event group is enabled The event does not belong to the same event domain as the events that are already in the event group Device limitations on the events that can belong to the same group The event group is full Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group event \u2013 The event to add to the group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_NOT_COMPATIBLE \u2013 if event belongs to a different event domain than the events already in eventGroup , or if a device limitation prevents event from being collected at the same time as the events already in eventGroup  CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if eventGroup is full CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1219, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupAddEvent::event", "display_name": "cuptiEventGroupAddEvent::event", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGroupAddEvent16CUpti_EventGroup13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGroupAddEvent CUpti_EventGroup  eventGroup CUpti_EventID  event Add an event to an event group. Add an event to an event group. The event add can fail for a number of reasons: The event group is enabled The event does not belong to the same event domain as the events that are already in the event group Device limitations on the events that can belong to the same group The event group is full Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group event \u2013 The event to add to the group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_NOT_COMPATIBLE \u2013 if event belongs to a different event domain than the events already in eventGroup , or if a device limitation prevents event from being collected at the same time as the events already in eventGroup  CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if eventGroup is full CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1220, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupAddEvent::eventGroup", "display_name": "cuptiEventGroupAddEvent::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiEventGroupAddEvent16CUpti_EventGroup13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGroupAddEvent CUpti_EventGroup  eventGroup CUpti_EventID  event Add an event to an event group. Add an event to an event group. The event add can fail for a number of reasons: The event group is enabled The event does not belong to the same event domain as the events that are already in the event group Device limitations on the events that can belong to the same group The event group is full Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group event \u2013 The event to add to the group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_NOT_COMPATIBLE \u2013 if event belongs to a different event domain than the events already in eventGroup , or if a device limitation prevents event from being collected at the same time as the events already in eventGroup  CUPTI_ERROR_MAX_LIMIT_REACHED \u2013 if eventGroup is full CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1221, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupCreate", "display_name": "cuptiEventGroupCreate", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEventGroupCreate9CUcontextP16CUpti_EventGroup8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupCreate CUcontext  context CUpti_EventGroup  * eventGroup uint32_t  flags Create a new event group for a context. Creates a new event group for context and returns the new group in *eventGroup . flags are reserved for future use and should be set to zero. Thread-safety : this function is thread safe. Parameters context \u2013 The context for the event group eventGroup \u2013 Returns the new event group flags \u2013 Reserved - must be zero Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1222, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupCreate::context", "display_name": "cuptiEventGroupCreate::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEventGroupCreate9CUcontextP16CUpti_EventGroup8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupCreate CUcontext  context CUpti_EventGroup  * eventGroup uint32_t  flags Create a new event group for a context. Creates a new event group for context and returns the new group in *eventGroup . flags are reserved for future use and should be set to zero. Thread-safety : this function is thread safe. Parameters context \u2013 The context for the event group eventGroup \u2013 Returns the new event group flags \u2013 Reserved - must be zero Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1223, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupCreate::eventGroup", "display_name": "cuptiEventGroupCreate::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEventGroupCreate9CUcontextP16CUpti_EventGroup8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupCreate CUcontext  context CUpti_EventGroup  * eventGroup uint32_t  flags Create a new event group for a context. Creates a new event group for context and returns the new group in *eventGroup . flags are reserved for future use and should be set to zero. Thread-safety : this function is thread safe. Parameters context \u2013 The context for the event group eventGroup \u2013 Returns the new event group flags \u2013 Reserved - must be zero Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1224, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupCreate::flags", "display_name": "cuptiEventGroupCreate::flags", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEventGroupCreate9CUcontextP16CUpti_EventGroup8uint32_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupCreate CUcontext  context CUpti_EventGroup  * eventGroup uint32_t  flags Create a new event group for a context. Creates a new event group for context and returns the new group in *eventGroup . flags are reserved for future use and should be set to zero. Thread-safety : this function is thread safe. Parameters context \u2013 The context for the event group eventGroup \u2013 Returns the new event group flags \u2013 Reserved - must be zero Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_OUT_OF_MEMORY \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1225, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupDestroy", "display_name": "cuptiEventGroupDestroy", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGroupDestroy16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupDestroy CUpti_EventGroup  eventGroup Destroy an event group. Destroy an eventGroup and free its resources. An event group cannot be destroyed if it is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group to destroy Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if the event group is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1226, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupDestroy::eventGroup", "display_name": "cuptiEventGroupDestroy::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGroupDestroy16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupDestroy CUpti_EventGroup  eventGroup Destroy an event group. Destroy an eventGroup and free its resources. An event group cannot be destroyed if it is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group to destroy Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if the event group is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1227, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupDisable", "display_name": "cuptiEventGroupDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGroupDisable16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupDisable CUpti_EventGroup  eventGroup Disable an event group. Disable an event group. Disabling an event group stops collection of events contained in the group. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1228, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupDisable::eventGroup", "display_name": "cuptiEventGroupDisable::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv422cuptiEventGroupDisable16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupDisable CUpti_EventGroup  eventGroup Disable an event group. Disable an event group. Disabling an event group stops collection of events contained in the group. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1229, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupEnable", "display_name": "cuptiEventGroupEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEventGroupEnable16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupEnable CUpti_EventGroup  eventGroup Enable an event group. Enable an event group. Enabling an event group zeros the value of all the events in the group and then starts collection of those events. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_NOT_READY \u2013 if eventGroup does not contain any events CUPTI_ERROR_NOT_COMPATIBLE \u2013 if eventGroup cannot be enabled due to other already enabled event groups CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL CUPTI_ERROR_HARDWARE_BUSY \u2013 if another client is profiling and hardware is busy", "keywords": []}, {"id": 1230, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupEnable::eventGroup", "display_name": "cuptiEventGroupEnable::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv421cuptiEventGroupEnable16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupEnable CUpti_EventGroup  eventGroup Enable an event group. Enable an event group. Enabling an event group zeros the value of all the events in the group and then starts collection of those events. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_NOT_READY \u2013 if eventGroup does not contain any events CUPTI_ERROR_NOT_COMPATIBLE \u2013 if eventGroup cannot be enabled due to other already enabled event groups CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL CUPTI_ERROR_HARDWARE_BUSY \u2013 if another client is profiling and hardware is busy", "keywords": []}, {"id": 1231, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupGetAttribute", "display_name": "cuptiEventGroupGetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupGetAttribute16CUpti_EventGroup25CUpti_EventGroupAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupGetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  * valueSize void  * value Read an event group attribute. Read an event group attribute and return it in *value . Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an eventgroup attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1232, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupGetAttribute::attrib", "display_name": "cuptiEventGroupGetAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupGetAttribute16CUpti_EventGroup25CUpti_EventGroupAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupGetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  * valueSize void  * value Read an event group attribute. Read an event group attribute and return it in *value . Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an eventgroup attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1233, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupGetAttribute::eventGroup", "display_name": "cuptiEventGroupGetAttribute::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupGetAttribute16CUpti_EventGroup25CUpti_EventGroupAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupGetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  * valueSize void  * value Read an event group attribute. Read an event group attribute and return it in *value . Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an eventgroup attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1234, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupGetAttribute::value", "display_name": "cuptiEventGroupGetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupGetAttribute16CUpti_EventGroup25CUpti_EventGroupAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupGetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  * valueSize void  * value Read an event group attribute. Read an event group attribute and return it in *value . Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an eventgroup attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1235, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupGetAttribute::valueSize", "display_name": "cuptiEventGroupGetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupGetAttribute16CUpti_EventGroup25CUpti_EventGroupAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupGetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  * valueSize void  * value Read an event group attribute. Read an event group attribute and return it in *value . Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to read valueSize \u2013 Size of buffer pointed by the value, and returns the number of bytes written to value  value \u2013 Returns the value of the attribute Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an eventgroup attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1236, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents", "display_name": "cuptiEventGroupReadAllEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1237, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::eventGroup", "display_name": "cuptiEventGroupReadAllEvents::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1238, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::eventIdArray", "display_name": "cuptiEventGroupReadAllEvents::eventIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1239, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::eventIdArraySizeBytes", "display_name": "cuptiEventGroupReadAllEvents::eventIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1240, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::eventValueBuffer", "display_name": "cuptiEventGroupReadAllEvents::eventValueBuffer", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1241, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::eventValueBufferSizeBytes", "display_name": "cuptiEventGroupReadAllEvents::eventValueBufferSizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1242, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::flags", "display_name": "cuptiEventGroupReadAllEvents::flags", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1243, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadAllEvents::numEventIdsRead", "display_name": "cuptiEventGroupReadAllEvents::numEventIdsRead", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv428cuptiEventGroupReadAllEvents16CUpti_EventGroup20CUpti_ReadEventFlagsP6size_tP8uint64_tP6size_tP13CUpti_EventIDP6size_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadAllEvents CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  * numEventIdsRead Read the values for all the events in an event group. Read the values for all the events in an event group. The event values are returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of eventValueBuffer . The buffer must be at least (sizeof(uint64) * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the events. The buffer must be at least (sizeof(uint64) * number of domain instances * number of events in group) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. The data format returned in eventValueBuffer is: domain instance 0: event0 event1 \u2026 eventN domain instance 1: event0 event1 \u2026 eventN \u2026 domain instance M: event0 event1 \u2026 eventN The event order in eventValueBuffer is returned in eventIdArray . The size of eventIdArray is specified in eventIdArraySizeBytes . The size should be at least (sizeof(CUpti_EventID) * number of events in group). If any instance of any event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading events from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event values eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events in the same order as the values return in eventValueBuffer. numEventIdsRead \u2013 Returns the number of event IDs returned in eventIdArray  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes , eventValueBuffer , eventIdArraySizeBytes , eventIdArray or numEventIdsRead is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer or eventIdArray is not sufficient", "keywords": []}, {"id": 1244, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadEvent", "display_name": "cuptiEventGroupReadEvent", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupReadEvent16CUpti_EventGroup20CUpti_ReadEventFlags13CUpti_EventIDP6size_tP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadEvent CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags CUpti_EventID  event size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer Read the value for an event in an event group. Read the value for an event in an event group. The event value is returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of the eventValueBuffer buffer. The buffer must be at least sizeof(uint64) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the event. The buffer must be at least (sizeof(uint64) * number of domain instances) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. If any instance of an event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading an event from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode event \u2013 The event to read eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event value(s) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes or eventValueBuffer is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer is not sufficient", "keywords": []}, {"id": 1245, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadEvent::event", "display_name": "cuptiEventGroupReadEvent::event", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupReadEvent16CUpti_EventGroup20CUpti_ReadEventFlags13CUpti_EventIDP6size_tP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadEvent CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags CUpti_EventID  event size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer Read the value for an event in an event group. Read the value for an event in an event group. The event value is returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of the eventValueBuffer buffer. The buffer must be at least sizeof(uint64) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the event. The buffer must be at least (sizeof(uint64) * number of domain instances) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. If any instance of an event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading an event from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode event \u2013 The event to read eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event value(s) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes or eventValueBuffer is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer is not sufficient", "keywords": []}, {"id": 1246, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadEvent::eventGroup", "display_name": "cuptiEventGroupReadEvent::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupReadEvent16CUpti_EventGroup20CUpti_ReadEventFlags13CUpti_EventIDP6size_tP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadEvent CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags CUpti_EventID  event size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer Read the value for an event in an event group. Read the value for an event in an event group. The event value is returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of the eventValueBuffer buffer. The buffer must be at least sizeof(uint64) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the event. The buffer must be at least (sizeof(uint64) * number of domain instances) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. If any instance of an event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading an event from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode event \u2013 The event to read eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event value(s) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes or eventValueBuffer is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer is not sufficient", "keywords": []}, {"id": 1247, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadEvent::eventValueBuffer", "display_name": "cuptiEventGroupReadEvent::eventValueBuffer", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupReadEvent16CUpti_EventGroup20CUpti_ReadEventFlags13CUpti_EventIDP6size_tP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadEvent CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags CUpti_EventID  event size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer Read the value for an event in an event group. Read the value for an event in an event group. The event value is returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of the eventValueBuffer buffer. The buffer must be at least sizeof(uint64) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the event. The buffer must be at least (sizeof(uint64) * number of domain instances) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. If any instance of an event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading an event from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode event \u2013 The event to read eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event value(s) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes or eventValueBuffer is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer is not sufficient", "keywords": []}, {"id": 1248, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadEvent::eventValueBufferSizeBytes", "display_name": "cuptiEventGroupReadEvent::eventValueBufferSizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupReadEvent16CUpti_EventGroup20CUpti_ReadEventFlags13CUpti_EventIDP6size_tP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadEvent CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags CUpti_EventID  event size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer Read the value for an event in an event group. Read the value for an event in an event group. The event value is returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of the eventValueBuffer buffer. The buffer must be at least sizeof(uint64) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the event. The buffer must be at least (sizeof(uint64) * number of domain instances) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. If any instance of an event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading an event from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode event \u2013 The event to read eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event value(s) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes or eventValueBuffer is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer is not sufficient", "keywords": []}, {"id": 1249, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupReadEvent::flags", "display_name": "cuptiEventGroupReadEvent::flags", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupReadEvent16CUpti_EventGroup20CUpti_ReadEventFlags13CUpti_EventIDP6size_tP8uint64_t", "priority": 1, "content": "CUptiResult  cuptiEventGroupReadEvent CUpti_EventGroup  eventGroup CUpti_ReadEventFlags  flags CUpti_EventID  event size_t  * eventValueBufferSizeBytes uint64_t  * eventValueBuffer Read the value for an event in an event group. Read the value for an event in an event group. The event value is returned in the eventValueBuffer buffer. eventValueBufferSizeBytes indicates the size of the eventValueBuffer buffer. The buffer must be at least sizeof(uint64) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is not set on the group containing the event. The buffer must be at least (sizeof(uint64) * number of domain instances) if CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES is set on the group. If any instance of an event counter overflows, the value returned for that event instance will be CUPTI_EVENT_OVERFLOW . The only allowed value for flags is CUPTI_EVENT_READ_FLAG_NONE . Reading an event from a disabled event group is not allowed. After being read, an event\u2019s value is reset to zero. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). If cuptiEventGroupResetAllEvents is called simultaneously with this function, then returned event values are undefined. Parameters eventGroup \u2013 The event group flags \u2013 Flags controlling the reading mode event \u2013 The event to read eventValueBufferSizeBytes \u2013 The size of eventValueBuffer in bytes, and returns the number of bytes written to eventValueBuffer  eventValueBuffer \u2013 Returns the event value(s) Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is disabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup , eventValueBufferSizeBytes or eventValueBuffer is NULL CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if size of eventValueBuffer is not sufficient", "keywords": []}, {"id": 1250, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupRemoveAllEvents", "display_name": "cuptiEventGroupRemoveAllEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv430cuptiEventGroupRemoveAllEvents16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupRemoveAllEvents CUpti_EventGroup  eventGroup Remove all events from an event group. Remove all events from an event group. Events cannot be removed if the event group is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1251, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupRemoveAllEvents::eventGroup", "display_name": "cuptiEventGroupRemoveAllEvents::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv430cuptiEventGroupRemoveAllEvents16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupRemoveAllEvents CUpti_EventGroup  eventGroup Remove all events from an event group. Remove all events from an event group. Events cannot be removed if the event group is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1252, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupRemoveEvent", "display_name": "cuptiEventGroupRemoveEvent", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventGroupRemoveEvent16CUpti_EventGroup13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGroupRemoveEvent CUpti_EventGroup  eventGroup CUpti_EventID  event Remove an event from an event group. Remove event from the an event group. The event cannot be removed if the event group is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group event \u2013 The event to remove from the group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1253, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupRemoveEvent::event", "display_name": "cuptiEventGroupRemoveEvent::event", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventGroupRemoveEvent16CUpti_EventGroup13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGroupRemoveEvent CUpti_EventGroup  eventGroup CUpti_EventID  event Remove an event from an event group. Remove event from the an event group. The event cannot be removed if the event group is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group event \u2013 The event to remove from the group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1254, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupRemoveEvent::eventGroup", "display_name": "cuptiEventGroupRemoveEvent::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventGroupRemoveEvent16CUpti_EventGroup13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiEventGroupRemoveEvent CUpti_EventGroup  eventGroup CUpti_EventID  event Remove an event from an event group. Remove event from the an event group. The event cannot be removed if the event group is enabled. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group event \u2013 The event to remove from the group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if eventGroup is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1255, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupResetAllEvents", "display_name": "cuptiEventGroupResetAllEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv429cuptiEventGroupResetAllEvents16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupResetAllEvents CUpti_EventGroup  eventGroup Zero all the event counts in an event group. Zero all the event counts in an event group. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1256, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupResetAllEvents::eventGroup", "display_name": "cuptiEventGroupResetAllEvents::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv429cuptiEventGroupResetAllEvents16CUpti_EventGroup", "priority": 1, "content": "CUptiResult  cuptiEventGroupResetAllEvents CUpti_EventGroup  eventGroup Zero all the event counts in an event group. Zero all the event counts in an event group. Thread-safety : this function is thread safe but client must guard against simultaneous destruction or modification of eventGroup (for example, client must guard against simultaneous calls to cuptiEventGroupDestroy , cuptiEventGroupAddEvent , etc.), and must guard against simultaneous destruction of the context in which eventGroup was created (for example, client must guard against simultaneous calls to cudaDeviceReset, cuCtxDestroy, etc.). Parameters eventGroup \u2013 The event group Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroup is NULL", "keywords": []}, {"id": 1257, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetAttribute", "display_name": "cuptiEventGroupSetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupSetAttribute16CUpti_EventGroup25CUpti_EventGroupAttribute6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  valueSize void  * value Write an event group attribute. Write an event group attribute. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event group attribute, or if attrib is not a writable attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1258, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetAttribute::attrib", "display_name": "cuptiEventGroupSetAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupSetAttribute16CUpti_EventGroup25CUpti_EventGroupAttribute6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  valueSize void  * value Write an event group attribute. Write an event group attribute. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event group attribute, or if attrib is not a writable attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1259, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetAttribute::eventGroup", "display_name": "cuptiEventGroupSetAttribute::eventGroup", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupSetAttribute16CUpti_EventGroup25CUpti_EventGroupAttribute6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  valueSize void  * value Write an event group attribute. Write an event group attribute. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event group attribute, or if attrib is not a writable attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1260, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetAttribute::value", "display_name": "cuptiEventGroupSetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupSetAttribute16CUpti_EventGroup25CUpti_EventGroupAttribute6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  valueSize void  * value Write an event group attribute. Write an event group attribute. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event group attribute, or if attrib is not a writable attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1261, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetAttribute::valueSize", "display_name": "cuptiEventGroupSetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiEventGroupSetAttribute16CUpti_EventGroup25CUpti_EventGroupAttribute6size_tPv", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetAttribute CUpti_EventGroup  eventGroup CUpti_EventGroupAttribute  attrib size_t  valueSize void  * value Write an event group attribute. Write an event group attribute. Thread-safety : this function is thread safe. Parameters eventGroup \u2013 The event group attrib \u2013 The attribute to write valueSize \u2013 The size, in bytes, of the value value \u2013 The attribute value to write Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not an event group attribute, or if attrib is not a writable attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 Indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1262, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetDisable", "display_name": "cuptiEventGroupSetDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetDisableP19CUpti_EventGroupSet", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetDisable CUpti_EventGroupSet  * eventGroupSet Disable an event group set. Disable a set of event groups. Disabling a set of event groups stops collection of events contained in the groups. Thread-safety : this function is thread safe. If this call fails, some of the event groups in the set may be disabled and other event groups may remain enabled. Parameters eventGroupSet \u2013 The pointer to the event group set Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroupSet is NULL", "keywords": []}, {"id": 1263, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetDisable::eventGroupSet", "display_name": "cuptiEventGroupSetDisable::eventGroupSet", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetDisableP19CUpti_EventGroupSet", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetDisable CUpti_EventGroupSet  * eventGroupSet Disable an event group set. Disable a set of event groups. Disabling a set of event groups stops collection of events contained in the groups. Thread-safety : this function is thread safe. If this call fails, some of the event groups in the set may be disabled and other event groups may remain enabled. Parameters eventGroupSet \u2013 The pointer to the event group set Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroupSet is NULL", "keywords": []}, {"id": 1264, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetEnable", "display_name": "cuptiEventGroupSetEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupSetEnableP19CUpti_EventGroupSet", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetEnable CUpti_EventGroupSet  * eventGroupSet Enable an event group set. Enable a set of event groups. Enabling a set of event groups zeros the value of all the events in all the groups and then starts collection of those events. Thread-safety : this function is thread safe. Parameters eventGroupSet \u2013 The pointer to the event group set Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_NOT_READY \u2013 if eventGroup does not contain any events CUPTI_ERROR_NOT_COMPATIBLE \u2013 if eventGroup cannot be enabled due to other already enabled event groups CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroupSet is NULL CUPTI_ERROR_HARDWARE_BUSY \u2013 if other client is profiling and hardware is busy", "keywords": []}, {"id": 1265, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetEnable::eventGroupSet", "display_name": "cuptiEventGroupSetEnable::eventGroupSet", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv424cuptiEventGroupSetEnableP19CUpti_EventGroupSet", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetEnable CUpti_EventGroupSet  * eventGroupSet Enable an event group set. Enable a set of event groups. Enabling a set of event groups zeros the value of all the events in all the groups and then starts collection of those events. Thread-safety : this function is thread safe. Parameters eventGroupSet \u2013 The pointer to the event group set Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_HARDWARE \u2013 CUPTI_ERROR_NOT_READY \u2013 if eventGroup does not contain any events CUPTI_ERROR_NOT_COMPATIBLE \u2013 if eventGroup cannot be enabled due to other already enabled event groups CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroupSet is NULL CUPTI_ERROR_HARDWARE_BUSY \u2013 if other client is profiling and hardware is busy", "keywords": []}, {"id": 1266, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsCreate", "display_name": "cuptiEventGroupSetsCreate", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetsCreate9CUcontext6size_tP13CUpti_EventIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsCreate CUcontext  context size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of events, get the grouping that indicates the number of passes and the event groups necessary to collect the events. The number of events that can be collected simultaneously varies by device and by the type of the events. When events can be collected simultaneously, they may need to be grouped into multiple event groups because they are from different event domains. This function takes a set of events and determines how many passes are required to collect all those events, and which events can be collected simultaneously in each pass. The CUpti_EventGroupSets returned in eventGroupPasses indicates how many passes are required to collect the events with the numSets field. Within each event group set, the sets array indicates the event groups that should be collected on each pass. Thread-safety : this function is thread safe, but client must guard against another thread simultaneously destroying context . Parameters context \u2013 The context for event collection eventIdArraySizeBytes \u2013 Size of eventIdArray in bytes eventIdArray \u2013 Array of event IDs that need to be grouped eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1267, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsCreate::context", "display_name": "cuptiEventGroupSetsCreate::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetsCreate9CUcontext6size_tP13CUpti_EventIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsCreate CUcontext  context size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of events, get the grouping that indicates the number of passes and the event groups necessary to collect the events. The number of events that can be collected simultaneously varies by device and by the type of the events. When events can be collected simultaneously, they may need to be grouped into multiple event groups because they are from different event domains. This function takes a set of events and determines how many passes are required to collect all those events, and which events can be collected simultaneously in each pass. The CUpti_EventGroupSets returned in eventGroupPasses indicates how many passes are required to collect the events with the numSets field. Within each event group set, the sets array indicates the event groups that should be collected on each pass. Thread-safety : this function is thread safe, but client must guard against another thread simultaneously destroying context . Parameters context \u2013 The context for event collection eventIdArraySizeBytes \u2013 Size of eventIdArray in bytes eventIdArray \u2013 Array of event IDs that need to be grouped eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1268, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsCreate::eventGroupPasses", "display_name": "cuptiEventGroupSetsCreate::eventGroupPasses", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetsCreate9CUcontext6size_tP13CUpti_EventIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsCreate CUcontext  context size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of events, get the grouping that indicates the number of passes and the event groups necessary to collect the events. The number of events that can be collected simultaneously varies by device and by the type of the events. When events can be collected simultaneously, they may need to be grouped into multiple event groups because they are from different event domains. This function takes a set of events and determines how many passes are required to collect all those events, and which events can be collected simultaneously in each pass. The CUpti_EventGroupSets returned in eventGroupPasses indicates how many passes are required to collect the events with the numSets field. Within each event group set, the sets array indicates the event groups that should be collected on each pass. Thread-safety : this function is thread safe, but client must guard against another thread simultaneously destroying context . Parameters context \u2013 The context for event collection eventIdArraySizeBytes \u2013 Size of eventIdArray in bytes eventIdArray \u2013 Array of event IDs that need to be grouped eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1269, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsCreate::eventIdArray", "display_name": "cuptiEventGroupSetsCreate::eventIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetsCreate9CUcontext6size_tP13CUpti_EventIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsCreate CUcontext  context size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of events, get the grouping that indicates the number of passes and the event groups necessary to collect the events. The number of events that can be collected simultaneously varies by device and by the type of the events. When events can be collected simultaneously, they may need to be grouped into multiple event groups because they are from different event domains. This function takes a set of events and determines how many passes are required to collect all those events, and which events can be collected simultaneously in each pass. The CUpti_EventGroupSets returned in eventGroupPasses indicates how many passes are required to collect the events with the numSets field. Within each event group set, the sets array indicates the event groups that should be collected on each pass. Thread-safety : this function is thread safe, but client must guard against another thread simultaneously destroying context . Parameters context \u2013 The context for event collection eventIdArraySizeBytes \u2013 Size of eventIdArray in bytes eventIdArray \u2013 Array of event IDs that need to be grouped eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1270, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsCreate::eventIdArraySizeBytes", "display_name": "cuptiEventGroupSetsCreate::eventIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv425cuptiEventGroupSetsCreate9CUcontext6size_tP13CUpti_EventIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsCreate CUcontext  context size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of events, get the grouping that indicates the number of passes and the event groups necessary to collect the events. The number of events that can be collected simultaneously varies by device and by the type of the events. When events can be collected simultaneously, they may need to be grouped into multiple event groups because they are from different event domains. This function takes a set of events and determines how many passes are required to collect all those events, and which events can be collected simultaneously in each pass. The CUpti_EventGroupSets returned in eventGroupPasses indicates how many passes are required to collect the events with the numSets field. Within each event group set, the sets array indicates the event groups that should be collected on each pass. Thread-safety : this function is thread safe, but client must guard against another thread simultaneously destroying context . Parameters context \u2013 The context for event collection eventIdArraySizeBytes \u2013 Size of eventIdArray in bytes eventIdArray \u2013 Array of event IDs that need to be grouped eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_EVENT_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1271, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsDestroy", "display_name": "cuptiEventGroupSetsDestroy", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventGroupSetsDestroyP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsDestroy CUpti_EventGroupSets  * eventGroupSets Destroy a event group sets object. Destroy a CUpti_EventGroupSets object. Thread-safety : this function is thread safe. Parameters eventGroupSets \u2013 The object to destroy Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if any of the event groups contained in the sets is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroupSets is NULL", "keywords": []}, {"id": 1272, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiEventGroupSetsDestroy::eventGroupSets", "display_name": "cuptiEventGroupSetsDestroy::eventGroupSets", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv426cuptiEventGroupSetsDestroyP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiEventGroupSetsDestroy CUpti_EventGroupSets  * eventGroupSets Destroy a event group sets object. Destroy a CUpti_EventGroupSets object. Thread-safety : this function is thread safe. Parameters eventGroupSets \u2013 The object to destroy Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if any of the event groups contained in the sets is enabled CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventGroupSets is NULL", "keywords": []}, {"id": 1273, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetNumEventDomains", "display_name": "cuptiGetNumEventDomains", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiGetNumEventDomainsP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetNumEventDomains uint32_t  * numDomains Get the number of event domains available on any device. Returns the total number of event domains available on any CUDA-capable device. Thread-safety : this function is thread safe. Parameters numDomains \u2013 Returns the number of domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numDomains is NULL", "keywords": []}, {"id": 1274, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetNumEventDomains::numDomains", "display_name": "cuptiGetNumEventDomains::numDomains", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv423cuptiGetNumEventDomainsP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetNumEventDomains uint32_t  * numDomains Get the number of event domains available on any device. Returns the total number of event domains available on any CUDA-capable device. Thread-safety : this function is thread safe. Parameters numDomains \u2013 Returns the number of domains Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numDomains is NULL", "keywords": []}, {"id": 1275, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiKernelReplaySubscribeUpdate", "display_name": "cuptiKernelReplaySubscribeUpdate", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv432cuptiKernelReplaySubscribeUpdate28CUpti_KernelReplayUpdateFuncPv", "priority": 1, "content": "CUptiResult  cuptiKernelReplaySubscribeUpdate CUpti_KernelReplayUpdateFunc  updateFunc void  * customData Subscribe to kernel replay updates. When subscribed, the function pointer passed in will be called each time a kernel run is finished during kernel replay. Previously subscribed function pointer will be replaced. Pass in NULL as the function pointer unsubscribes the update. Parameters updateFunc \u2013 The update function pointer customData \u2013 Pointer to any custom data Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1276, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiKernelReplaySubscribeUpdate::customData", "display_name": "cuptiKernelReplaySubscribeUpdate::customData", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv432cuptiKernelReplaySubscribeUpdate28CUpti_KernelReplayUpdateFuncPv", "priority": 1, "content": "CUptiResult  cuptiKernelReplaySubscribeUpdate CUpti_KernelReplayUpdateFunc  updateFunc void  * customData Subscribe to kernel replay updates. When subscribed, the function pointer passed in will be called each time a kernel run is finished during kernel replay. Previously subscribed function pointer will be replaced. Pass in NULL as the function pointer unsubscribes the update. Parameters updateFunc \u2013 The update function pointer customData \u2013 Pointer to any custom data Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1277, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiKernelReplaySubscribeUpdate::updateFunc", "display_name": "cuptiKernelReplaySubscribeUpdate::updateFunc", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv432cuptiKernelReplaySubscribeUpdate28CUpti_KernelReplayUpdateFuncPv", "priority": 1, "content": "CUptiResult  cuptiKernelReplaySubscribeUpdate CUpti_KernelReplayUpdateFunc  updateFunc void  * customData Subscribe to kernel replay updates. When subscribed, the function pointer passed in will be called each time a kernel run is finished during kernel replay. Previously subscribed function pointer will be replaced. Pass in NULL as the function pointer unsubscribes the update. Parameters updateFunc \u2013 The update function pointer customData \u2013 Pointer to any custom data Return values CUPTI_SUCCESS \u2013", "keywords": []}, {"id": 1278, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiSetEventCollectionMode", "display_name": "cuptiSetEventCollectionMode", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiSetEventCollectionMode9CUcontext25CUpti_EventCollectionMode", "priority": 1, "content": "CUptiResult  cuptiSetEventCollectionMode CUcontext  context CUpti_EventCollectionMode  mode Set the event collection mode. Set the event collection mode for a context . The mode controls the event collection behavior of all events in event groups created in the context . This API is invalid in kernel replay mode. Thread-safety : this function is thread safe. Parameters context \u2013 The context mode \u2013 The event collection mode Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if called when replay mode is enabled CUPTI_ERROR_NOT_SUPPORTED \u2013 if mode is not supported on the device", "keywords": []}, {"id": 1279, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiSetEventCollectionMode::context", "display_name": "cuptiSetEventCollectionMode::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiSetEventCollectionMode9CUcontext25CUpti_EventCollectionMode", "priority": 1, "content": "CUptiResult  cuptiSetEventCollectionMode CUcontext  context CUpti_EventCollectionMode  mode Set the event collection mode. Set the event collection mode for a context . The mode controls the event collection behavior of all events in event groups created in the context . This API is invalid in kernel replay mode. Thread-safety : this function is thread safe. Parameters context \u2013 The context mode \u2013 The event collection mode Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if called when replay mode is enabled CUPTI_ERROR_NOT_SUPPORTED \u2013 if mode is not supported on the device", "keywords": []}, {"id": 1280, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiSetEventCollectionMode::mode", "display_name": "cuptiSetEventCollectionMode::mode", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "_CPPv427cuptiSetEventCollectionMode9CUcontext25CUpti_EventCollectionMode", "priority": 1, "content": "CUptiResult  cuptiSetEventCollectionMode CUcontext  context CUpti_EventCollectionMode  mode Set the event collection mode. Set the event collection mode for a context . The mode controls the event collection behavior of all events in event groups created in the context . This API is invalid in kernel replay mode. Thread-safety : this function is thread safe. Parameters context \u2013 The context mode \u2013 The event collection mode Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if called when replay mode is enabled CUPTI_ERROR_NOT_SUPPORTED \u2013 if mode is not supported on the device", "keywords": []}, {"id": 1281, "doc_id": 1281, "filename": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "display_name": "CUPTI Event API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___e_v_e_n_t___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Event API. CUPTI event API from the header cupti_events.h are not supported on devices with compute capability 7.5 and higher (i.e. Turing and later GPU architectures). These API will be deprecated in a future CUDA release. These are replaced by Profiling API in the header cupti_profiler_target.h and Perfworks metrics API in the headers nvperf_host.h and nvperf_target.h which are supported on devices with compute capability 7.0 and higher (i.e. Volta and later GPU architectures). Data Structures CUpti_EventGroupSet  A set of event groups. CUpti_EventGroupSets  A set of event group sets. Macros CUPTI_EVENT_INVALID  The value that indicates the event value is invalid. CUPTI_EVENT_OVERFLOW  The overflow value for a CUPTI event. Enumerations CUpti_DeviceAttribute  Device attributes. CUpti_DeviceAttributeDeviceClass  Device class. CUpti_EventAttribute  Event attributes. CUpti_EventCategory  An event category. CUpti_EventCollectionMethod  The collection method used for an event. CUpti_EventCollectionMode  Event collection modes. CUpti_EventDomainAttribute  Event domain attributes. CUpti_EventGroupAttribute  Event group attributes. CUpti_EventProfilingScope  Profiling scope for event. CUpti_ReadEventFlags  Flags for cuptiEventGroupReadEvent an cuptiEventGroupReadAllEvents. Functions CUptiResult  cuptiDeviceEnumEventDomains (CUdevice device, size_t *arraySizeBytes, CUpti_EventDomainID *domainArray) Get the event domains for a device. CUptiResult  cuptiDeviceGetAttribute (CUdevice device, CUpti_DeviceAttribute attrib, size_t *valueSize, void *value) Read a device attribute. CUptiResult  cuptiDeviceGetEventDomainAttribute (CUdevice device, CUpti_EventDomainID eventDomain, CUpti_EventDomainAttribute attrib, size_t *valueSize, void *value) Read an event domain attribute. CUptiResult  cuptiDeviceGetNumEventDomains (CUdevice device, uint32_t *numDomains) Get the number of domains for a device. CUptiResult  cuptiDisableKernelReplayMode (CUcontext context) Disable kernel replay mode. CUptiResult  cuptiEnableKernelReplayMode (CUcontext context) Enable kernel replay mode. CUptiResult  cuptiEnumEventDomains (size_t *arraySizeBytes, CUpti_EventDomainID *domainArray) Get the event domains available on any device. CUptiResult  cuptiEventDomainEnumEvents (CUpti_EventDomainID eventDomain, size_t *arraySizeBytes, CUpti_EventID *eventArray) Get the events in a domain. CUptiResult  cuptiEventDomainGetAttribute (CUpti_EventDomainID eventDomain, CUpti_EventDomainAttribute attrib, size_t *valueSize, void *value) Read an event domain attribute. CUptiResult  cuptiEventDomainGetNumEvents (CUpti_EventDomainID eventDomain, uint32_t *numEvents) Get number of events in a domain. CUptiResult  cuptiEventGetAttribute (CUpti_EventID event, CUpti_EventAttribute attrib, size_t *valueSize, void *value) Get an event attribute. CUptiResult  cuptiEventGetIdFromName (CUdevice device, const char *eventName, CUpti_EventID *event) Find an event by name. CUptiResult  cuptiEventGroupAddEvent (CUpti_EventGroup eventGroup, CUpti_EventID event) Add an event to an event group. CUptiResult  cuptiEventGroupCreate (CUcontext context, CUpti_EventGroup *eventGroup, uint32_t flags) Create a new event group for a context. CUptiResult  cuptiEventGroupDestroy (CUpti_EventGroup eventGroup) Destroy an event group. CUptiResult  cuptiEventGroupDisable (CUpti_EventGroup eventGroup) Disable an event group. CUptiResult  cuptiEventGroupEnable (CUpti_EventGroup eventGroup) Enable an event group. CUptiResult  cuptiEventGroupGetAttribute (CUpti_EventGroup eventGroup, CUpti_EventGroupAttribute attrib, size_t *valueSize, void *value) Read an event group attribute. CUptiResult  cuptiEventGroupReadAllEvents (CUpti_EventGroup eventGroup, CUpti_ReadEventFlags flags, size_t *eventValueBufferSizeBytes, uint64_t *eventValueBuffer, size_t *eventIdArraySizeBytes, CUpti_EventID *eventIdArray, size_t *numEventIdsRead) Read the values for all the events in an event group. CUptiResult  cuptiEventGroupReadEvent (CUpti_EventGroup eventGroup, CUpti_ReadEventFlags flags, CUpti_EventID event, size_t *eventValueBufferSizeBytes, uint64_t *eventValueBuffer) Read the value for an event in an event group. CUptiResult  cuptiEventGroupRemoveAllEvents (CUpti_EventGroup eventGroup) Remove all events from an event group. CUptiResult  cuptiEventGroupRemoveEvent (CUpti_EventGroup eventGroup, CUpti_EventID event) Remove an event from an event group. CUptiResult  cuptiEventGroupResetAllEvents (CUpti_EventGroup eventGroup) Zero all the event counts in an event group. CUptiResult  cuptiEventGroupSetAttribute (CUpti_EventGroup eventGroup, CUpti_EventGroupAttribute attrib, size_t valueSize, void *value) Write an event group attribute. CUptiResult  cuptiEventGroupSetDisable (CUpti_EventGroupSet *eventGroupSet) Disable an event group set. CUptiResult  cuptiEventGroupSetEnable (CUpti_EventGroupSet *eventGroupSet) Enable an event group set. CUptiResult  cuptiEventGroupSetsCreate (CUcontext context, size_t eventIdArraySizeBytes, CUpti_EventID *eventIdArray, CUpti_EventGroupSets **eventGroupPasses) For a set of events, get the grouping that indicates the number of passes and the event groups necessary to collect the events. CUptiResult  cuptiEventGroupSetsDestroy (CUpti_EventGroupSets *eventGroupSets) Destroy a event group sets object. CUptiResult  cuptiGetNumEventDomains (uint32_t *numDomains) Get the number of event domains available on any device. CUptiResult  cuptiKernelReplaySubscribeUpdate (CUpti_KernelReplayUpdateFunc updateFunc, void *customData) Subscribe to kernel replay updates. CUptiResult  cuptiSetEventCollectionMode (CUcontext context, CUpti_EventCollectionMode mode) Set the event collection mode. Typedefs CUpti_EventDomainID  ID for an event domain. CUpti_EventGroup  A group of events. CUpti_EventID  ID for an event. CUpti_KernelReplayUpdateFunc  Function type for getting updates on kernel replay.", "keywords": []}, {"id": 1282, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_CATEGORY", "display_name": "CUPTI_METRIC_ATTR_CATEGORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute26CUPTI_METRIC_ATTR_CATEGORYE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_CATEGORY Category of the metric. Value is of type CUpti_MetricCategory.", "keywords": []}, {"id": 1283, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_EVALUATION_MODE", "display_name": "CUPTI_METRIC_ATTR_EVALUATION_MODE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute33CUPTI_METRIC_ATTR_EVALUATION_MODEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_EVALUATION_MODE Metric evaluation mode. Value is of type CUpti_MetricEvaluationMode.", "keywords": []}, {"id": 1284, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_FORCE_INT", "display_name": "CUPTI_METRIC_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute27CUPTI_METRIC_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_FORCE_INT", "keywords": []}, {"id": 1285, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_LONG_DESCRIPTION", "display_name": "CUPTI_METRIC_ATTR_LONG_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute34CUPTI_METRIC_ATTR_LONG_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_LONG_DESCRIPTION Long description of metric. Value is a null terminated const c-string.", "keywords": []}, {"id": 1286, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_NAME", "display_name": "CUPTI_METRIC_ATTR_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute22CUPTI_METRIC_ATTR_NAMEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_NAME Metric name. Value is a null terminated const c-string.", "keywords": []}, {"id": 1287, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_SHORT_DESCRIPTION", "display_name": "CUPTI_METRIC_ATTR_SHORT_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute35CUPTI_METRIC_ATTR_SHORT_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_SHORT_DESCRIPTION Short description of metric. Value is a null terminated const c-string.", "keywords": []}, {"id": 1288, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_ATTR_VALUE_KIND", "display_name": "CUPTI_METRIC_ATTR_VALUE_KIND", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute28CUPTI_METRIC_ATTR_VALUE_KINDE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_VALUE_KIND Value type of the metric. Value is of type CUpti_MetricValueKind.", "keywords": []}, {"id": 1289, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_CACHE", "display_name": "CUPTI_METRIC_CATEGORY_CACHE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory27CUPTI_METRIC_CATEGORY_CACHEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_CACHE A cache related metric.", "keywords": []}, {"id": 1290, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_FORCE_INT", "display_name": "CUPTI_METRIC_CATEGORY_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory31CUPTI_METRIC_CATEGORY_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_FORCE_INT", "keywords": []}, {"id": 1291, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_INSTRUCTION", "display_name": "CUPTI_METRIC_CATEGORY_INSTRUCTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory33CUPTI_METRIC_CATEGORY_INSTRUCTIONE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_INSTRUCTION An instruction related metric.", "keywords": []}, {"id": 1292, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_MEMORY", "display_name": "CUPTI_METRIC_CATEGORY_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory28CUPTI_METRIC_CATEGORY_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_MEMORY A memory related metric.", "keywords": []}, {"id": 1293, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_MULTIPROCESSOR", "display_name": "CUPTI_METRIC_CATEGORY_MULTIPROCESSOR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory36CUPTI_METRIC_CATEGORY_MULTIPROCESSORE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_MULTIPROCESSOR A multiprocessor related metric.", "keywords": []}, {"id": 1294, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_NVLINK", "display_name": "CUPTI_METRIC_CATEGORY_NVLINK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory28CUPTI_METRIC_CATEGORY_NVLINKE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_NVLINK A Nvlink related metric.", "keywords": []}, {"id": 1295, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_PCIE", "display_name": "CUPTI_METRIC_CATEGORY_PCIE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory26CUPTI_METRIC_CATEGORY_PCIEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_PCIE A PCIe related metric.", "keywords": []}, {"id": 1296, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_CATEGORY_TEXTURE", "display_name": "CUPTI_METRIC_CATEGORY_TEXTURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory29CUPTI_METRIC_CATEGORY_TEXTUREE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_TEXTURE A texture related metric.", "keywords": []}, {"id": 1297, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_EVALUATION_MODE_AGGREGATE", "display_name": "CUPTI_METRIC_EVALUATION_MODE_AGGREGATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N26CUpti_MetricEvaluationMode38CUPTI_METRIC_EVALUATION_MODE_AGGREGATEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_EVALUATION_MODE_AGGREGATE If this bit is set, the metric can be profiled over all instances. The event values passed to cuptiMetricGetValue can be aggregated values of events for all instances of the domain.", "keywords": []}, {"id": 1298, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_EVALUATION_MODE_FORCE_INT", "display_name": "CUPTI_METRIC_EVALUATION_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N26CUpti_MetricEvaluationMode38CUPTI_METRIC_EVALUATION_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_EVALUATION_MODE_FORCE_INT", "keywords": []}, {"id": 1299, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE", "display_name": "CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N26CUpti_MetricEvaluationMode41CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE If this bit is set, the metric can be profiled for each instance of the domain. The event values passed to cuptiMetricGetValue can contain values for one instance of the domain. And cuptiMetricGetValue can be called for each instance.", "keywords": []}, {"id": 1300, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_CLOCK_RATE", "display_name": "CUPTI_METRIC_PROPERTY_CLOCK_RATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID32CUPTI_METRIC_PROPERTY_CLOCK_RATEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_CLOCK_RATE", "keywords": []}, {"id": 1301, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS", "display_name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID34CUPTI_METRIC_PROPERTY_DEVICE_CLASSE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS", "keywords": []}, {"id": 1302, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE", "display_name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass42CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE", "keywords": []}, {"id": 1303, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO", "display_name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass41CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADROE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO", "keywords": []}, {"id": 1304, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA", "display_name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass40CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRAE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA", "keywords": []}, {"id": 1305, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA", "display_name": "CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass40CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLAE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA", "keywords": []}, {"id": 1306, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_ECC_ENABLED", "display_name": "CUPTI_METRIC_PROPERTY_ECC_ENABLED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID33CUPTI_METRIC_PROPERTY_ECC_ENABLEDE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_ECC_ENABLED", "keywords": []}, {"id": 1307, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE", "display_name": "CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID39CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE", "keywords": []}, {"id": 1308, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE", "display_name": "CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID39CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE", "keywords": []}, {"id": 1309, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE", "display_name": "CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID39CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE", "keywords": []}, {"id": 1310, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT", "display_name": "CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID40CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT", "keywords": []}, {"id": 1311, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH", "display_name": "CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID45CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH", "keywords": []}, {"id": 1312, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH", "display_name": "CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID46CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH", "keywords": []}, {"id": 1313, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME", "display_name": "CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID37CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIMEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME", "keywords": []}, {"id": 1314, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_L2_UNITS", "display_name": "CUPTI_METRIC_PROPERTY_L2_UNITS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID30CUPTI_METRIC_PROPERTY_L2_UNITSE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_L2_UNITS", "keywords": []}, {"id": 1315, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT", "display_name": "CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID42CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT", "keywords": []}, {"id": 1316, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_PCIE_GEN", "display_name": "CUPTI_METRIC_PROPERTY_PCIE_GEN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID30CUPTI_METRIC_PROPERTY_PCIE_GENE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_PCIE_GEN", "keywords": []}, {"id": 1317, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE", "display_name": "CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID36CUPTI_METRIC_PROPERTY_PCIE_LINK_RATEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE", "keywords": []}, {"id": 1318, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH", "display_name": "CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID37CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH", "keywords": []}, {"id": 1319, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR", "display_name": "CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID46CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSORE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR", "keywords": []}, {"id": 1320, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_DOUBLE", "display_name": "CUPTI_METRIC_VALUE_KIND_DOUBLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind30CUPTI_METRIC_VALUE_KIND_DOUBLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_DOUBLE The metric value is a 64-bit double.", "keywords": []}, {"id": 1321, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_FORCE_INT", "display_name": "CUPTI_METRIC_VALUE_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind33CUPTI_METRIC_VALUE_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_FORCE_INT", "keywords": []}, {"id": 1322, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_INT64", "display_name": "CUPTI_METRIC_VALUE_KIND_INT64", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind29CUPTI_METRIC_VALUE_KIND_INT64E", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_INT64 The metric value is a 64-bit signed integer.", "keywords": []}, {"id": 1323, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_PERCENT", "display_name": "CUPTI_METRIC_VALUE_KIND_PERCENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind31CUPTI_METRIC_VALUE_KIND_PERCENTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_PERCENT The metric value is a percentage represented by a 64-bit double. For example, 57.5% is represented by the value 57.5.", "keywords": []}, {"id": 1324, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_THROUGHPUT", "display_name": "CUPTI_METRIC_VALUE_KIND_THROUGHPUT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind34CUPTI_METRIC_VALUE_KIND_THROUGHPUTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_THROUGHPUT The metric value is a throughput represented by a 64-bit integer. The unit for throughput values is bytes/second.", "keywords": []}, {"id": 1325, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_UINT64", "display_name": "CUPTI_METRIC_VALUE_KIND_UINT64", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind30CUPTI_METRIC_VALUE_KIND_UINT64E", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_UINT64 The metric value is a 64-bit unsigned integer.", "keywords": []}, {"id": 1326, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL", "display_name": "CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind41CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVELE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL The metric value is a utilization level, as represented by CUpti_MetricValueUtilizationLevel.", "keywords": []}, {"id": 1327, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT", "display_name": "CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel40CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT", "keywords": []}, {"id": 1328, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_UTILIZATION_HIGH", "display_name": "CUPTI_METRIC_VALUE_UTILIZATION_HIGH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel35CUPTI_METRIC_VALUE_UTILIZATION_HIGHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_HIGH", "keywords": []}, {"id": 1329, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_UTILIZATION_IDLE", "display_name": "CUPTI_METRIC_VALUE_UTILIZATION_IDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel35CUPTI_METRIC_VALUE_UTILIZATION_IDLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_IDLE", "keywords": []}, {"id": 1330, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_UTILIZATION_LOW", "display_name": "CUPTI_METRIC_VALUE_UTILIZATION_LOW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel34CUPTI_METRIC_VALUE_UTILIZATION_LOWE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_LOW", "keywords": []}, {"id": 1331, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_UTILIZATION_MAX", "display_name": "CUPTI_METRIC_VALUE_UTILIZATION_MAX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel34CUPTI_METRIC_VALUE_UTILIZATION_MAXE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_MAX", "keywords": []}, {"id": 1332, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_VALUE_UTILIZATION_MID", "display_name": "CUPTI_METRIC_VALUE_UTILIZATION_MID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel34CUPTI_METRIC_VALUE_UTILIZATION_MIDE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_MID", "keywords": []}, {"id": 1333, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute", "display_name": "CUpti_MetricAttribute", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv421CUpti_MetricAttribute", "priority": 1, "content": "enum  CUpti_MetricAttribute Metric attributes. Metric attributes describe properties of a metric. These attributes can be read using cuptiMetricGetAttribute . Values:", "keywords": []}, {"id": 1334, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_CATEGORY", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_CATEGORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute26CUPTI_METRIC_ATTR_CATEGORYE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_CATEGORY Category of the metric. Value is of type CUpti_MetricCategory.", "keywords": []}, {"id": 1335, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_EVALUATION_MODE", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_EVALUATION_MODE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute33CUPTI_METRIC_ATTR_EVALUATION_MODEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_EVALUATION_MODE Metric evaluation mode. Value is of type CUpti_MetricEvaluationMode.", "keywords": []}, {"id": 1336, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_FORCE_INT", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute27CUPTI_METRIC_ATTR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_FORCE_INT", "keywords": []}, {"id": 1337, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_LONG_DESCRIPTION", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_LONG_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute34CUPTI_METRIC_ATTR_LONG_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_LONG_DESCRIPTION Long description of metric. Value is a null terminated const c-string.", "keywords": []}, {"id": 1338, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_NAME", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute22CUPTI_METRIC_ATTR_NAMEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_NAME Metric name. Value is a null terminated const c-string.", "keywords": []}, {"id": 1339, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_SHORT_DESCRIPTION", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_SHORT_DESCRIPTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute35CUPTI_METRIC_ATTR_SHORT_DESCRIPTIONE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_SHORT_DESCRIPTION Short description of metric. Value is a null terminated const c-string.", "keywords": []}, {"id": 1340, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_VALUE_KIND", "display_name": "CUpti_MetricAttribute::CUPTI_METRIC_ATTR_VALUE_KIND", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricAttribute28CUPTI_METRIC_ATTR_VALUE_KINDE", "priority": 1, "content": "enumerator  CUPTI_METRIC_ATTR_VALUE_KIND Value type of the metric. Value is of type CUpti_MetricValueKind.", "keywords": []}, {"id": 1341, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory", "display_name": "CUpti_MetricCategory", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420CUpti_MetricCategory", "priority": 1, "content": "enum  CUpti_MetricCategory A metric category. Each metric is assigned to a category that represents the general type of the metric. A metric\u2019s category is accessed using cuptiMetricGetAttribute and the CUPTI_METRIC_ATTR_CATEGORY attribute. Values:", "keywords": []}, {"id": 1342, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_CACHE", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_CACHE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory27CUPTI_METRIC_CATEGORY_CACHEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_CACHE A cache related metric.", "keywords": []}, {"id": 1343, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_FORCE_INT", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory31CUPTI_METRIC_CATEGORY_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_FORCE_INT", "keywords": []}, {"id": 1344, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_INSTRUCTION", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_INSTRUCTION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory33CUPTI_METRIC_CATEGORY_INSTRUCTIONE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_INSTRUCTION An instruction related metric.", "keywords": []}, {"id": 1345, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_MEMORY", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory28CUPTI_METRIC_CATEGORY_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_MEMORY A memory related metric.", "keywords": []}, {"id": 1346, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_MULTIPROCESSOR", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_MULTIPROCESSOR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory36CUPTI_METRIC_CATEGORY_MULTIPROCESSORE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_MULTIPROCESSOR A multiprocessor related metric.", "keywords": []}, {"id": 1347, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_NVLINK", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_NVLINK", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory28CUPTI_METRIC_CATEGORY_NVLINKE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_NVLINK A Nvlink related metric.", "keywords": []}, {"id": 1348, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_PCIE", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_PCIE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory26CUPTI_METRIC_CATEGORY_PCIEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_PCIE A PCIe related metric.", "keywords": []}, {"id": 1349, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_TEXTURE", "display_name": "CUpti_MetricCategory::CUPTI_METRIC_CATEGORY_TEXTURE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N20CUpti_MetricCategory29CUPTI_METRIC_CATEGORY_TEXTUREE", "priority": 1, "content": "enumerator  CUPTI_METRIC_CATEGORY_TEXTURE A texture related metric.", "keywords": []}, {"id": 1350, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricEvaluationMode", "display_name": "CUpti_MetricEvaluationMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv426CUpti_MetricEvaluationMode", "priority": 1, "content": "enum  CUpti_MetricEvaluationMode A metric evaluation mode. A metric can be evaluated per hardware instance to know the load balancing across instances of a domain or the metric can be evaluated in aggregate mode when the events involved in metric evaluation are from different event domains. It might be possible to evaluate some metrics in both modes for convenience. A metric\u2019s evaluation mode is accessed using CUpti_MetricEvaluationMode and the CUPTI_METRIC_ATTR_EVALUATION_MODE attribute. Values:", "keywords": []}, {"id": 1351, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricEvaluationMode::CUPTI_METRIC_EVALUATION_MODE_AGGREGATE", "display_name": "CUpti_MetricEvaluationMode::CUPTI_METRIC_EVALUATION_MODE_AGGREGATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N26CUpti_MetricEvaluationMode38CUPTI_METRIC_EVALUATION_MODE_AGGREGATEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_EVALUATION_MODE_AGGREGATE If this bit is set, the metric can be profiled over all instances. The event values passed to cuptiMetricGetValue can be aggregated values of events for all instances of the domain.", "keywords": []}, {"id": 1352, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricEvaluationMode::CUPTI_METRIC_EVALUATION_MODE_FORCE_INT", "display_name": "CUpti_MetricEvaluationMode::CUPTI_METRIC_EVALUATION_MODE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N26CUpti_MetricEvaluationMode38CUPTI_METRIC_EVALUATION_MODE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_EVALUATION_MODE_FORCE_INT", "keywords": []}, {"id": 1353, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricEvaluationMode::CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE", "display_name": "CUpti_MetricEvaluationMode::CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N26CUpti_MetricEvaluationMode41CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE If this bit is set, the metric can be profiled for each instance of the domain. The event values passed to cuptiMetricGetValue can contain values for one instance of the domain. And cuptiMetricGetValue can be called for each instance.", "keywords": []}, {"id": 1354, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricID", "display_name": "CUpti_MetricID", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv414CUpti_MetricID", "priority": 1, "content": "typedef  uint32_t  CUpti_MetricID ID for a metric. A metric provides a measure of some aspect of the device.", "keywords": []}, {"id": 1355, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyDeviceClass", "display_name": "CUpti_MetricPropertyDeviceClass", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv431CUpti_MetricPropertyDeviceClass", "priority": 1, "content": "enum  CUpti_MetricPropertyDeviceClass Device class. Enumeration of device classes for metric property CUPTI_METRIC_PROPERTY_DEVICE_CLASS. Values:", "keywords": []}, {"id": 1356, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE", "display_name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass42CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_GEFORCE", "keywords": []}, {"id": 1357, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO", "display_name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass41CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADROE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_QUADRO", "keywords": []}, {"id": 1358, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA", "display_name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass40CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRAE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TEGRA", "keywords": []}, {"id": 1359, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA", "display_name": "CUpti_MetricPropertyDeviceClass::CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N31CUpti_MetricPropertyDeviceClass40CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLAE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS_TESLA", "keywords": []}, {"id": 1360, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID", "display_name": "CUpti_MetricPropertyID", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv422CUpti_MetricPropertyID", "priority": 1, "content": "enum  CUpti_MetricPropertyID Metric device properties. Metric device properties describe device properties which are needed for a metric. Some of these properties can be collected using cuDeviceGetAttribute. Values:", "keywords": []}, {"id": 1361, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_CLOCK_RATE", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_CLOCK_RATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID32CUPTI_METRIC_PROPERTY_CLOCK_RATEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_CLOCK_RATE", "keywords": []}, {"id": 1362, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_DEVICE_CLASS", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_DEVICE_CLASS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID34CUPTI_METRIC_PROPERTY_DEVICE_CLASSE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_DEVICE_CLASS", "keywords": []}, {"id": 1363, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_ECC_ENABLED", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_ECC_ENABLED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID33CUPTI_METRIC_PROPERTY_ECC_ENABLEDE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_ECC_ENABLED", "keywords": []}, {"id": 1364, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID39CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE", "keywords": []}, {"id": 1365, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID39CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FLOP_HP_PER_CYCLE", "keywords": []}, {"id": 1366, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID39CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE", "keywords": []}, {"id": 1367, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID40CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_FRAME_BUFFER_COUNT", "keywords": []}, {"id": 1368, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID45CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_GLOBAL_MEMORY_BANDWIDTH", "keywords": []}, {"id": 1369, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID46CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_GPU_CPU_NVLINK_BANDWIDTH", "keywords": []}, {"id": 1370, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID37CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIMEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_KERNEL_GPU_TIME", "keywords": []}, {"id": 1371, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_L2_UNITS", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_L2_UNITS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID30CUPTI_METRIC_PROPERTY_L2_UNITSE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_L2_UNITS", "keywords": []}, {"id": 1372, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID42CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_MULTIPROCESSOR_COUNT", "keywords": []}, {"id": 1373, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_PCIE_GEN", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_PCIE_GEN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID30CUPTI_METRIC_PROPERTY_PCIE_GENE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_PCIE_GEN", "keywords": []}, {"id": 1374, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID36CUPTI_METRIC_PROPERTY_PCIE_LINK_RATEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_PCIE_LINK_RATE", "keywords": []}, {"id": 1375, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID37CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_PCIE_LINK_WIDTH", "keywords": []}, {"id": 1376, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR", "display_name": "CUpti_MetricPropertyID::CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N22CUpti_MetricPropertyID46CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSORE", "priority": 1, "content": "enumerator  CUPTI_METRIC_PROPERTY_WARPS_PER_MULTIPROCESSOR", "keywords": []}, {"id": 1377, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind", "display_name": "CUpti_MetricValueKind", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv421CUpti_MetricValueKind", "priority": 1, "content": "enum  CUpti_MetricValueKind Kinds of metric values. Metric values can be one of several different kinds. Corresponding to each kind is a member of the CUpti_MetricValue union. The metric value returned by cuptiMetricGetValue should be accessed using the appropriate member of that union based on its value kind. Values:", "keywords": []}, {"id": 1378, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_DOUBLE", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_DOUBLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind30CUPTI_METRIC_VALUE_KIND_DOUBLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_DOUBLE The metric value is a 64-bit double.", "keywords": []}, {"id": 1379, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_FORCE_INT", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind33CUPTI_METRIC_VALUE_KIND_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_FORCE_INT", "keywords": []}, {"id": 1380, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_INT64", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_INT64", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind29CUPTI_METRIC_VALUE_KIND_INT64E", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_INT64 The metric value is a 64-bit signed integer.", "keywords": []}, {"id": 1381, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_PERCENT", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_PERCENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind31CUPTI_METRIC_VALUE_KIND_PERCENTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_PERCENT The metric value is a percentage represented by a 64-bit double. For example, 57.5% is represented by the value 57.5.", "keywords": []}, {"id": 1382, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_THROUGHPUT", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_THROUGHPUT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind34CUPTI_METRIC_VALUE_KIND_THROUGHPUTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_THROUGHPUT The metric value is a throughput represented by a 64-bit integer. The unit for throughput values is bytes/second.", "keywords": []}, {"id": 1383, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_UINT64", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_UINT64", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind30CUPTI_METRIC_VALUE_KIND_UINT64E", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_UINT64 The metric value is a 64-bit unsigned integer.", "keywords": []}, {"id": 1384, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL", "display_name": "CUpti_MetricValueKind::CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N21CUpti_MetricValueKind41CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVELE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL The metric value is a utilization level, as represented by CUpti_MetricValueUtilizationLevel.", "keywords": []}, {"id": 1385, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel", "display_name": "CUpti_MetricValueUtilizationLevel", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv433CUpti_MetricValueUtilizationLevel", "priority": 1, "content": "enum  CUpti_MetricValueUtilizationLevel Enumeration of utilization levels for metrics values of kind CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL. Utilization values can vary from IDLE (0) to MAX (10) but the enumeration only provides specific names for a few values. Values:", "keywords": []}, {"id": 1386, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT", "display_name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel40CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_FORCE_INT", "keywords": []}, {"id": 1387, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_HIGH", "display_name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_HIGH", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel35CUPTI_METRIC_VALUE_UTILIZATION_HIGHE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_HIGH", "keywords": []}, {"id": 1388, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_IDLE", "display_name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_IDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel35CUPTI_METRIC_VALUE_UTILIZATION_IDLEE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_IDLE", "keywords": []}, {"id": 1389, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_LOW", "display_name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_LOW", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel34CUPTI_METRIC_VALUE_UTILIZATION_LOWE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_LOW", "keywords": []}, {"id": 1390, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_MAX", "display_name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_MAX", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel34CUPTI_METRIC_VALUE_UTILIZATION_MAXE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_MAX", "keywords": []}, {"id": 1391, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_MID", "display_name": "CUpti_MetricValueUtilizationLevel::CUPTI_METRIC_VALUE_UTILIZATION_MID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv4N33CUpti_MetricValueUtilizationLevel34CUPTI_METRIC_VALUE_UTILIZATION_MIDE", "priority": 1, "content": "enumerator  CUPTI_METRIC_VALUE_UTILIZATION_MID", "keywords": []}, {"id": 1392, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumMetrics", "display_name": "cuptiDeviceEnumMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv422cuptiDeviceEnumMetrics8CUdeviceP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumMetrics CUdevice  device size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get the metrics for a device. Returns the metric IDs in metricArray for a device. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or else all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1393, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumMetrics::arraySizeBytes", "display_name": "cuptiDeviceEnumMetrics::arraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv422cuptiDeviceEnumMetrics8CUdeviceP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumMetrics CUdevice  device size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get the metrics for a device. Returns the metric IDs in metricArray for a device. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or else all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1394, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumMetrics::device", "display_name": "cuptiDeviceEnumMetrics::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv422cuptiDeviceEnumMetrics8CUdeviceP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumMetrics CUdevice  device size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get the metrics for a device. Returns the metric IDs in metricArray for a device. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or else all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1395, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceEnumMetrics::metricArray", "display_name": "cuptiDeviceEnumMetrics::metricArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv422cuptiDeviceEnumMetrics8CUdeviceP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiDeviceEnumMetrics CUdevice  device size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get the metrics for a device. Returns the metric IDs in metricArray for a device. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or else all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters device \u2013 The CUDA device arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1396, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetNumMetrics", "display_name": "cuptiDeviceGetNumMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiDeviceGetNumMetrics8CUdeviceP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiDeviceGetNumMetrics CUdevice  device uint32_t  * numMetrics Get the number of metrics for a device. Returns the number of metrics available for a device. Parameters device \u2013 The CUDA device numMetrics \u2013 Returns the number of metrics available for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numMetrics is NULL", "keywords": []}, {"id": 1397, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetNumMetrics::device", "display_name": "cuptiDeviceGetNumMetrics::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiDeviceGetNumMetrics8CUdeviceP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiDeviceGetNumMetrics CUdevice  device uint32_t  * numMetrics Get the number of metrics for a device. Returns the number of metrics available for a device. Parameters device \u2013 The CUDA device numMetrics \u2013 Returns the number of metrics available for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numMetrics is NULL", "keywords": []}, {"id": 1398, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiDeviceGetNumMetrics::numMetrics", "display_name": "cuptiDeviceGetNumMetrics::numMetrics", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiDeviceGetNumMetrics8CUdeviceP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiDeviceGetNumMetrics CUdevice  device uint32_t  * numMetrics Get the number of metrics for a device. Returns the number of metrics available for a device. Parameters device \u2013 The CUDA device numMetrics \u2013 Returns the number of metrics available for the device Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numMetrics is NULL", "keywords": []}, {"id": 1399, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnumMetrics", "display_name": "cuptiEnumMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv416cuptiEnumMetricsP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiEnumMetrics size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get all the metrics available on any device. Returns the metric IDs in metricArray for all CUDA-capable devices. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1400, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnumMetrics::arraySizeBytes", "display_name": "cuptiEnumMetrics::arraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv416cuptiEnumMetricsP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiEnumMetrics size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get all the metrics available on any device. Returns the metric IDs in metricArray for all CUDA-capable devices. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1401, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiEnumMetrics::metricArray", "display_name": "cuptiEnumMetrics::metricArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv416cuptiEnumMetricsP6size_tP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiEnumMetrics size_t  * arraySizeBytes CUpti_MetricID  * metricArray Get all the metrics available on any device. Returns the metric IDs in metricArray for all CUDA-capable devices. The size of the metricArray buffer is given by *arraySizeBytes . The size of the metricArray buffer must be at least numMetrics * sizeof(CUpti_MetricID) or all metric IDs will not be returned. The value returned in *arraySizeBytes contains the number of bytes returned in metricArray . Parameters arraySizeBytes \u2013 The size of metricArray in bytes, and returns the number of bytes written to metricArray  metricArray \u2013 Returns the IDs of the metrics Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if arraySizeBytes or metricArray are NULL", "keywords": []}, {"id": 1402, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetNumMetrics", "display_name": "cuptiGetNumMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv418cuptiGetNumMetricsP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetNumMetrics uint32_t  * numMetrics Get the total number of metrics available on any device. Returns the total number of metrics available on any CUDA-capable devices. Parameters numMetrics \u2013 Returns the number of metrics Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numMetrics is NULL", "keywords": []}, {"id": 1403, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetNumMetrics::numMetrics", "display_name": "cuptiGetNumMetrics::numMetrics", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv418cuptiGetNumMetricsP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetNumMetrics uint32_t  * numMetrics Get the total number of metrics available on any device. Returns the total number of metrics available on any CUDA-capable devices. Parameters numMetrics \u2013 Returns the number of metrics Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numMetrics is NULL", "keywords": []}, {"id": 1404, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricCreateEventGroupSets", "display_name": "cuptiMetricCreateEventGroupSets", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv431cuptiMetricCreateEventGroupSets9CUcontext6size_tP14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricCreateEventGroupSets CUcontext  context size_t  metricIdArraySizeBytes CUpti_MetricID  * metricIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. cuptiEventGroupSetsCreate for details on event group set creation. Parameters context \u2013 The context for event collection metricIdArraySizeBytes \u2013 Size of the metricIdArray in bytes metricIdArray \u2013 Array of metric IDs eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1405, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricCreateEventGroupSets::context", "display_name": "cuptiMetricCreateEventGroupSets::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv431cuptiMetricCreateEventGroupSets9CUcontext6size_tP14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricCreateEventGroupSets CUcontext  context size_t  metricIdArraySizeBytes CUpti_MetricID  * metricIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. cuptiEventGroupSetsCreate for details on event group set creation. Parameters context \u2013 The context for event collection metricIdArraySizeBytes \u2013 Size of the metricIdArray in bytes metricIdArray \u2013 Array of metric IDs eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1406, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricCreateEventGroupSets::eventGroupPasses", "display_name": "cuptiMetricCreateEventGroupSets::eventGroupPasses", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv431cuptiMetricCreateEventGroupSets9CUcontext6size_tP14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricCreateEventGroupSets CUcontext  context size_t  metricIdArraySizeBytes CUpti_MetricID  * metricIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. cuptiEventGroupSetsCreate for details on event group set creation. Parameters context \u2013 The context for event collection metricIdArraySizeBytes \u2013 Size of the metricIdArray in bytes metricIdArray \u2013 Array of metric IDs eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1407, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricCreateEventGroupSets::metricIdArray", "display_name": "cuptiMetricCreateEventGroupSets::metricIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv431cuptiMetricCreateEventGroupSets9CUcontext6size_tP14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricCreateEventGroupSets CUcontext  context size_t  metricIdArraySizeBytes CUpti_MetricID  * metricIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. cuptiEventGroupSetsCreate for details on event group set creation. Parameters context \u2013 The context for event collection metricIdArraySizeBytes \u2013 Size of the metricIdArray in bytes metricIdArray \u2013 Array of metric IDs eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1408, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricCreateEventGroupSets::metricIdArraySizeBytes", "display_name": "cuptiMetricCreateEventGroupSets::metricIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv431cuptiMetricCreateEventGroupSets9CUcontext6size_tP14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricCreateEventGroupSets CUcontext  context size_t  metricIdArraySizeBytes CUpti_MetricID  * metricIdArray CUpti_EventGroupSets  * * eventGroupPasses For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. cuptiEventGroupSetsCreate for details on event group set creation. Parameters context \u2013 The context for event collection metricIdArraySizeBytes \u2013 Size of the metricIdArray in bytes metricIdArray \u2013 Array of metric IDs eventGroupPasses \u2013 Returns a CUpti_EventGroupSets object that indicates the number of passes required to collect the events and the events to collect on each pass Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricIdArray or eventGroupPasses is NULL", "keywords": []}, {"id": 1409, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumEvents", "display_name": "cuptiMetricEnumEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv421cuptiMetricEnumEvents14CUpti_MetricIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumEvents CUpti_MetricID  metric size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray Get the events required to calculating a metric. Gets the event IDs in eventIdArray required to calculate a metric . The size of the eventIdArray buffer is given by *eventIdArraySizeBytes and must be at least numEvents * sizeof(CUpti_EventID) or all events will not be returned. The value returned in *eventIdArraySizeBytes contains the number of bytes returned in eventIdArray . Parameters metric \u2013 ID of the metric eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArraySizeBytes or eventIdArray are NULL.", "keywords": []}, {"id": 1410, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumEvents::eventIdArray", "display_name": "cuptiMetricEnumEvents::eventIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv421cuptiMetricEnumEvents14CUpti_MetricIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumEvents CUpti_MetricID  metric size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray Get the events required to calculating a metric. Gets the event IDs in eventIdArray required to calculate a metric . The size of the eventIdArray buffer is given by *eventIdArraySizeBytes and must be at least numEvents * sizeof(CUpti_EventID) or all events will not be returned. The value returned in *eventIdArraySizeBytes contains the number of bytes returned in eventIdArray . Parameters metric \u2013 ID of the metric eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArraySizeBytes or eventIdArray are NULL.", "keywords": []}, {"id": 1411, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumEvents::eventIdArraySizeBytes", "display_name": "cuptiMetricEnumEvents::eventIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv421cuptiMetricEnumEvents14CUpti_MetricIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumEvents CUpti_MetricID  metric size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray Get the events required to calculating a metric. Gets the event IDs in eventIdArray required to calculate a metric . The size of the eventIdArray buffer is given by *eventIdArraySizeBytes and must be at least numEvents * sizeof(CUpti_EventID) or all events will not be returned. The value returned in *eventIdArraySizeBytes contains the number of bytes returned in eventIdArray . Parameters metric \u2013 ID of the metric eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArraySizeBytes or eventIdArray are NULL.", "keywords": []}, {"id": 1412, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumEvents::metric", "display_name": "cuptiMetricEnumEvents::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv421cuptiMetricEnumEvents14CUpti_MetricIDP6size_tP13CUpti_EventID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumEvents CUpti_MetricID  metric size_t  * eventIdArraySizeBytes CUpti_EventID  * eventIdArray Get the events required to calculating a metric. Gets the event IDs in eventIdArray required to calculate a metric . The size of the eventIdArray buffer is given by *eventIdArraySizeBytes and must be at least numEvents * sizeof(CUpti_EventID) or all events will not be returned. The value returned in *eventIdArraySizeBytes contains the number of bytes returned in eventIdArray . Parameters metric \u2013 ID of the metric eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes, and returns the number of bytes written to eventIdArray  eventIdArray \u2013 Returns the IDs of the events required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if eventIdArraySizeBytes or eventIdArray are NULL.", "keywords": []}, {"id": 1413, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumProperties", "display_name": "cuptiMetricEnumProperties", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv425cuptiMetricEnumProperties14CUpti_MetricIDP6size_tP22CUpti_MetricPropertyID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumProperties CUpti_MetricID  metric size_t  * propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray Get the properties required to calculating a metric. Gets the property IDs in propIdArray required to calculate a metric . The size of the propIdArray buffer is given by *propIdArraySizeBytes and must be at least numProp * sizeof(CUpti_DeviceAttribute) or all properties will not be returned. The value returned in *propIdArraySizeBytes contains the number of bytes returned in propIdArray . Parameters metric \u2013 ID of the metric propIdArraySizeBytes \u2013 The size of propIdArray in bytes, and returns the number of bytes written to propIdArray  propIdArray \u2013 Returns the IDs of the properties required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if propIdArraySizeBytes or propIdArray are NULL.", "keywords": []}, {"id": 1414, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumProperties::metric", "display_name": "cuptiMetricEnumProperties::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv425cuptiMetricEnumProperties14CUpti_MetricIDP6size_tP22CUpti_MetricPropertyID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumProperties CUpti_MetricID  metric size_t  * propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray Get the properties required to calculating a metric. Gets the property IDs in propIdArray required to calculate a metric . The size of the propIdArray buffer is given by *propIdArraySizeBytes and must be at least numProp * sizeof(CUpti_DeviceAttribute) or all properties will not be returned. The value returned in *propIdArraySizeBytes contains the number of bytes returned in propIdArray . Parameters metric \u2013 ID of the metric propIdArraySizeBytes \u2013 The size of propIdArray in bytes, and returns the number of bytes written to propIdArray  propIdArray \u2013 Returns the IDs of the properties required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if propIdArraySizeBytes or propIdArray are NULL.", "keywords": []}, {"id": 1415, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumProperties::propIdArray", "display_name": "cuptiMetricEnumProperties::propIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv425cuptiMetricEnumProperties14CUpti_MetricIDP6size_tP22CUpti_MetricPropertyID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumProperties CUpti_MetricID  metric size_t  * propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray Get the properties required to calculating a metric. Gets the property IDs in propIdArray required to calculate a metric . The size of the propIdArray buffer is given by *propIdArraySizeBytes and must be at least numProp * sizeof(CUpti_DeviceAttribute) or all properties will not be returned. The value returned in *propIdArraySizeBytes contains the number of bytes returned in propIdArray . Parameters metric \u2013 ID of the metric propIdArraySizeBytes \u2013 The size of propIdArray in bytes, and returns the number of bytes written to propIdArray  propIdArray \u2013 Returns the IDs of the properties required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if propIdArraySizeBytes or propIdArray are NULL.", "keywords": []}, {"id": 1416, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricEnumProperties::propIdArraySizeBytes", "display_name": "cuptiMetricEnumProperties::propIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv425cuptiMetricEnumProperties14CUpti_MetricIDP6size_tP22CUpti_MetricPropertyID", "priority": 1, "content": "CUptiResult  cuptiMetricEnumProperties CUpti_MetricID  metric size_t  * propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray Get the properties required to calculating a metric. Gets the property IDs in propIdArray required to calculate a metric . The size of the propIdArray buffer is given by *propIdArraySizeBytes and must be at least numProp * sizeof(CUpti_DeviceAttribute) or all properties will not be returned. The value returned in *propIdArraySizeBytes contains the number of bytes returned in propIdArray . Parameters metric \u2013 ID of the metric propIdArraySizeBytes \u2013 The size of propIdArray in bytes, and returns the number of bytes written to propIdArray  propIdArray \u2013 Returns the IDs of the properties required to calculate metric  Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if propIdArraySizeBytes or propIdArray are NULL.", "keywords": []}, {"id": 1417, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetAttribute", "display_name": "cuptiMetricGetAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetAttribute14CUpti_MetricID21CUpti_MetricAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiMetricGetAttribute CUpti_MetricID  metric CUpti_MetricAttribute  attrib size_t  * valueSize void  * value Get a metric attribute. Returns a metric attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Parameters metric \u2013 ID of the metric attrib \u2013 The metric attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a metric attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1418, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetAttribute::attrib", "display_name": "cuptiMetricGetAttribute::attrib", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetAttribute14CUpti_MetricID21CUpti_MetricAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiMetricGetAttribute CUpti_MetricID  metric CUpti_MetricAttribute  attrib size_t  * valueSize void  * value Get a metric attribute. Returns a metric attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Parameters metric \u2013 ID of the metric attrib \u2013 The metric attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a metric attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1419, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetAttribute::metric", "display_name": "cuptiMetricGetAttribute::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetAttribute14CUpti_MetricID21CUpti_MetricAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiMetricGetAttribute CUpti_MetricID  metric CUpti_MetricAttribute  attrib size_t  * valueSize void  * value Get a metric attribute. Returns a metric attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Parameters metric \u2013 ID of the metric attrib \u2013 The metric attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a metric attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1420, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetAttribute::value", "display_name": "cuptiMetricGetAttribute::value", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetAttribute14CUpti_MetricID21CUpti_MetricAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiMetricGetAttribute CUpti_MetricID  metric CUpti_MetricAttribute  attrib size_t  * valueSize void  * value Get a metric attribute. Returns a metric attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Parameters metric \u2013 ID of the metric attrib \u2013 The metric attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a metric attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1421, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetAttribute::valueSize", "display_name": "cuptiMetricGetAttribute::valueSize", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetAttribute14CUpti_MetricID21CUpti_MetricAttributeP6size_tPv", "priority": 1, "content": "CUptiResult  cuptiMetricGetAttribute CUpti_MetricID  metric CUpti_MetricAttribute  attrib size_t  * valueSize void  * value Get a metric attribute. Returns a metric attribute in *value . The size of the value buffer is given by *valueSize . The value returned in *valueSize contains the number of bytes returned in value . If the attribute value is a c-string that is longer than *valueSize , then only the first *valueSize characters will be returned and there will be no terminating null byte. Parameters metric \u2013 ID of the metric attrib \u2013 The metric attribute to read valueSize \u2013 The size of the value buffer in bytes, and returns the number of bytes written to value  value \u2013 Returns the attribute\u2019s value Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if valueSize or value is NULL, or if attrib is not a metric attribute CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 For non-c-string attribute values, indicates that the value buffer is too small to hold the attribute value.", "keywords": []}, {"id": 1422, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetIdFromName", "display_name": "cuptiMetricGetIdFromName", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiMetricGetIdFromName8CUdevicePKcP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiMetricGetIdFromName CUdevice  device const  char  * metricName CUpti_MetricID  * metric Find an metric by name. Find a metric by name and return the metric ID in *metric . Parameters device \u2013 The CUDA device metricName \u2013 The name of metric to find metric \u2013 Returns the ID of the found metric or undefined if unable to find the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if unable to find a metric with name metricName . In this case *metric is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricName or metric are NULL.", "keywords": []}, {"id": 1423, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetIdFromName::device", "display_name": "cuptiMetricGetIdFromName::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiMetricGetIdFromName8CUdevicePKcP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiMetricGetIdFromName CUdevice  device const  char  * metricName CUpti_MetricID  * metric Find an metric by name. Find a metric by name and return the metric ID in *metric . Parameters device \u2013 The CUDA device metricName \u2013 The name of metric to find metric \u2013 Returns the ID of the found metric or undefined if unable to find the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if unable to find a metric with name metricName . In this case *metric is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricName or metric are NULL.", "keywords": []}, {"id": 1424, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetIdFromName::metric", "display_name": "cuptiMetricGetIdFromName::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiMetricGetIdFromName8CUdevicePKcP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiMetricGetIdFromName CUdevice  device const  char  * metricName CUpti_MetricID  * metric Find an metric by name. Find a metric by name and return the metric ID in *metric . Parameters device \u2013 The CUDA device metricName \u2013 The name of metric to find metric \u2013 Returns the ID of the found metric or undefined if unable to find the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if unable to find a metric with name metricName . In this case *metric is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricName or metric are NULL.", "keywords": []}, {"id": 1425, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetIdFromName::metricName", "display_name": "cuptiMetricGetIdFromName::metricName", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv424cuptiMetricGetIdFromName8CUdevicePKcP14CUpti_MetricID", "priority": 1, "content": "CUptiResult  cuptiMetricGetIdFromName CUdevice  device const  char  * metricName CUpti_MetricID  * metric Find an metric by name. Find a metric by name and return the metric ID in *metric . Parameters device \u2013 The CUDA device metricName \u2013 The name of metric to find metric \u2013 Returns the ID of the found metric or undefined if unable to find the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if unable to find a metric with name metricName . In this case *metric is undefined CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricName or metric are NULL.", "keywords": []}, {"id": 1426, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetNumEvents", "display_name": "cuptiMetricGetNumEvents", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetNumEvents14CUpti_MetricIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiMetricGetNumEvents CUpti_MetricID  metric uint32_t  * numEvents Get number of events required to calculate a metric. Returns the number of events in numEvents that are required to calculate a metric. Parameters metric \u2013 ID of the metric numEvents \u2013 Returns the number of events required for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numEvents is NULL", "keywords": []}, {"id": 1427, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetNumEvents::metric", "display_name": "cuptiMetricGetNumEvents::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetNumEvents14CUpti_MetricIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiMetricGetNumEvents CUpti_MetricID  metric uint32_t  * numEvents Get number of events required to calculate a metric. Returns the number of events in numEvents that are required to calculate a metric. Parameters metric \u2013 ID of the metric numEvents \u2013 Returns the number of events required for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numEvents is NULL", "keywords": []}, {"id": 1428, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetNumEvents::numEvents", "display_name": "cuptiMetricGetNumEvents::numEvents", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv423cuptiMetricGetNumEvents14CUpti_MetricIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiMetricGetNumEvents CUpti_MetricID  metric uint32_t  * numEvents Get number of events required to calculate a metric. Returns the number of events in numEvents that are required to calculate a metric. Parameters metric \u2013 ID of the metric numEvents \u2013 Returns the number of events required for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numEvents is NULL", "keywords": []}, {"id": 1429, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetNumProperties", "display_name": "cuptiMetricGetNumProperties", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv427cuptiMetricGetNumProperties14CUpti_MetricIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiMetricGetNumProperties CUpti_MetricID  metric uint32_t  * numProp Get number of properties required to calculate a metric. Returns the number of properties in numProp that are required to calculate a metric. Parameters metric \u2013 ID of the metric numProp \u2013 Returns the number of properties required for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numProp is NULL", "keywords": []}, {"id": 1430, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetNumProperties::metric", "display_name": "cuptiMetricGetNumProperties::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv427cuptiMetricGetNumProperties14CUpti_MetricIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiMetricGetNumProperties CUpti_MetricID  metric uint32_t  * numProp Get number of properties required to calculate a metric. Returns the number of properties in numProp that are required to calculate a metric. Parameters metric \u2013 ID of the metric numProp \u2013 Returns the number of properties required for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numProp is NULL", "keywords": []}, {"id": 1431, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetNumProperties::numProp", "display_name": "cuptiMetricGetNumProperties::numProp", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv427cuptiMetricGetNumProperties14CUpti_MetricIDP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiMetricGetNumProperties CUpti_MetricID  metric uint32_t  * numProp Get number of properties required to calculate a metric. Returns the number of properties in numProp that are required to calculate a metric. Parameters metric \u2013 ID of the metric numProp \u2013 Returns the number of properties required for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if numProp is NULL", "keywords": []}, {"id": 1432, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetRequiredEventGroupSets", "display_name": "cuptiMetricGetRequiredEventGroupSets", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv436cuptiMetricGetRequiredEventGroupSets9CUcontext14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricGetRequiredEventGroupSets CUcontext  context CUpti_MetricID  metric CUpti_EventGroupSets  * * eventGroupSets For a metric get the groups of events that must be collected in the same pass. For a metric get the groups of events that must be collected in the same pass to ensure that the metric is calculated correctly. If the events are not collected as specified then the metric value may be inaccurate. The function returns NULL if a metric does not have any required event group. In this case the events needed for the metric can be grouped in any manner for collection. Parameters context \u2013 The context for event collection metric \u2013 The metric ID eventGroupSets \u2013 Returns a CUpti_EventGroupSets object that indicates the events that must be collected in the same pass to ensure the metric is calculated correctly. Returns NULL if no grouping is required for metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013", "keywords": []}, {"id": 1433, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetRequiredEventGroupSets::context", "display_name": "cuptiMetricGetRequiredEventGroupSets::context", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv436cuptiMetricGetRequiredEventGroupSets9CUcontext14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricGetRequiredEventGroupSets CUcontext  context CUpti_MetricID  metric CUpti_EventGroupSets  * * eventGroupSets For a metric get the groups of events that must be collected in the same pass. For a metric get the groups of events that must be collected in the same pass to ensure that the metric is calculated correctly. If the events are not collected as specified then the metric value may be inaccurate. The function returns NULL if a metric does not have any required event group. In this case the events needed for the metric can be grouped in any manner for collection. Parameters context \u2013 The context for event collection metric \u2013 The metric ID eventGroupSets \u2013 Returns a CUpti_EventGroupSets object that indicates the events that must be collected in the same pass to ensure the metric is calculated correctly. Returns NULL if no grouping is required for metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013", "keywords": []}, {"id": 1434, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetRequiredEventGroupSets::eventGroupSets", "display_name": "cuptiMetricGetRequiredEventGroupSets::eventGroupSets", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv436cuptiMetricGetRequiredEventGroupSets9CUcontext14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricGetRequiredEventGroupSets CUcontext  context CUpti_MetricID  metric CUpti_EventGroupSets  * * eventGroupSets For a metric get the groups of events that must be collected in the same pass. For a metric get the groups of events that must be collected in the same pass to ensure that the metric is calculated correctly. If the events are not collected as specified then the metric value may be inaccurate. The function returns NULL if a metric does not have any required event group. In this case the events needed for the metric can be grouped in any manner for collection. Parameters context \u2013 The context for event collection metric \u2013 The metric ID eventGroupSets \u2013 Returns a CUpti_EventGroupSets object that indicates the events that must be collected in the same pass to ensure the metric is calculated correctly. Returns NULL if no grouping is required for metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013", "keywords": []}, {"id": 1435, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetRequiredEventGroupSets::metric", "display_name": "cuptiMetricGetRequiredEventGroupSets::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv436cuptiMetricGetRequiredEventGroupSets9CUcontext14CUpti_MetricIDPP20CUpti_EventGroupSets", "priority": 1, "content": "CUptiResult  cuptiMetricGetRequiredEventGroupSets CUcontext  context CUpti_MetricID  metric CUpti_EventGroupSets  * * eventGroupSets For a metric get the groups of events that must be collected in the same pass. For a metric get the groups of events that must be collected in the same pass to ensure that the metric is calculated correctly. If the events are not collected as specified then the metric value may be inaccurate. The function returns NULL if a metric does not have any required event group. In this case the events needed for the metric can be grouped in any manner for collection. Parameters context \u2013 The context for event collection metric \u2013 The metric ID eventGroupSets \u2013 Returns a CUpti_EventGroupSets object that indicates the events that must be collected in the same pass to ensure the metric is calculated correctly. Returns NULL if no grouping is required for metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013", "keywords": []}, {"id": 1436, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue", "display_name": "cuptiMetricGetValue", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1437, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2", "display_name": "cuptiMetricGetValue2", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1438, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::eventIdArray", "display_name": "cuptiMetricGetValue2::eventIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1439, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::eventIdArraySizeBytes", "display_name": "cuptiMetricGetValue2::eventIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1440, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::eventValueArray", "display_name": "cuptiMetricGetValue2::eventValueArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1441, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::eventValueArraySizeBytes", "display_name": "cuptiMetricGetValue2::eventValueArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1442, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::metric", "display_name": "cuptiMetricGetValue2::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1443, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::metricValue", "display_name": "cuptiMetricGetValue2::metricValue", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1444, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::propIdArray", "display_name": "cuptiMetricGetValue2::propIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1445, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::propIdArraySizeBytes", "display_name": "cuptiMetricGetValue2::propIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1446, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::propValueArray", "display_name": "cuptiMetricGetValue2::propValueArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1447, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue2::propValueArraySizeBytes", "display_name": "cuptiMetricGetValue2::propValueArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv420cuptiMetricGetValue214CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t6size_tP22CUpti_MetricPropertyID6size_tP8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue2 CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray size_t  propIdArraySizeBytes CUpti_MetricPropertyID  * propIdArray size_t  propValueArraySizeBytes uint64_t  * propValueArray CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events and properties collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  propIdArraySizeBytes \u2013 The size of propIdArray in bytes propIdArray \u2013 The metric property IDs required to calculate metric  propValueArraySizeBytes \u2013 The size of propValueArray in bytes propValueArray \u2013 The metric property values required to calculate metric . The values must be order to match the order of metric properties in propIdArray  metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_NOT_COMPATIBLE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1448, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::device", "display_name": "cuptiMetricGetValue::device", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1449, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::eventIdArray", "display_name": "cuptiMetricGetValue::eventIdArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1450, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::eventIdArraySizeBytes", "display_name": "cuptiMetricGetValue::eventIdArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1451, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::eventValueArray", "display_name": "cuptiMetricGetValue::eventValueArray", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1452, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::eventValueArraySizeBytes", "display_name": "cuptiMetricGetValue::eventValueArraySizeBytes", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1453, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::metric", "display_name": "cuptiMetricGetValue::metric", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1454, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::metricValue", "display_name": "cuptiMetricGetValue::metricValue", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1455, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "cpp", "name": "cuptiMetricGetValue::timeDuration", "display_name": "cuptiMetricGetValue::timeDuration", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "_CPPv419cuptiMetricGetValue8CUdevice14CUpti_MetricID6size_tP13CUpti_EventID6size_tP8uint64_t8uint64_tP17CUpti_MetricValue", "priority": 1, "content": "CUptiResult  cuptiMetricGetValue CUdevice  device CUpti_MetricID  metric size_t  eventIdArraySizeBytes CUpti_EventID  * eventIdArray size_t  eventValueArraySizeBytes uint64_t  * eventValueArray uint64_t  timeDuration CUpti_MetricValue  * metricValue Calculate the value for a metric. Use the events collected for a metric to calculate the metric value. Metric value evaluation depends on the evaluation mode CUpti_MetricEvaluationMode that the metric supports. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_PER_INSTANCE, then it assumes that the input event value is for one domain instance. If a metric has evaluation mode as CUPTI_METRIC_EVALUATION_MODE_AGGREGATE, it assumes that input event values are normalized to represent all domain instances on a device. For the most accurate metric collection, the events required for the metric should be collected for all profiled domain instances. For example, to collect all instances of an event, set the CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES attribute on the group containing the event to 1. The normalized value for the event is then: ( sum_event_values * totalInstanceCount ) / instanceCount , where sum_event_values is the summation of the event values across all profiled domain instances, totalInstanceCount is obtained from querying CUPTI_EVENT_DOMAIN_ATTR_TOTAL_INSTANCE_COUNT and instanceCount is obtained from querying CUPTI_EVENT_GROUP_ATTR_INSTANCE_COUNT (or CUPTI_EVENT_DOMAIN_ATTR_INSTANCE_COUNT). Parameters device \u2013 The CUDA device that the metric is being calculated for metric \u2013 The metric ID eventIdArraySizeBytes \u2013 The size of eventIdArray in bytes eventIdArray \u2013 The event IDs required to calculate metric  eventValueArraySizeBytes \u2013 The size of eventValueArray in bytes eventValueArray \u2013 The normalized event values required to calculate metric . The values must be order to match the order of events in eventIdArray  timeDuration \u2013 The duration over which the events were collected, in ns metricValue \u2013 Returns the value for the metric Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_NOT_INITIALIZED \u2013 CUPTI_ERROR_INVALID_METRIC_ID \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 if the eventIdArray does not contain all the events needed for metric CUPTI_ERROR_INVALID_EVENT_VALUE \u2013 if any of the event values required for the metric is CUPTI_EVENT_OVERFLOW CUPTI_ERROR_INVALID_METRIC_VALUE \u2013 if the computed metric value cannot be represented in the metric\u2019s value type. For example, if the metric value type is unsigned and the computed metric value is negative CUPTI_ERROR_INVALID_PARAMETER \u2013 if metricValue , eventIdArray or eventValueArray is NULL", "keywords": []}, {"id": 1456, "doc_id": 1456, "filename": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "display_name": "CUPTI Metric API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___m_e_t_r_i_c___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Metric API. CUPTI metric API from the header cupti_metrics.h are not supported on devices with compute capability 7.5 and higher (i.e. Turing and later GPU architectures). These API will be deprecated in a future CUDA release. These are replaced by Profiling API in the header cupti_profiler_target.h and Perfworks metrics API in the headers nvperf_host.h and nvperf_target.h which are supported on devices with compute capability 7.0 and higher (i.e. Volta and later GPU architectures). Data Structures CUpti_MetricValue  A metric value. Enumerations CUpti_MetricAttribute  Metric attributes. CUpti_MetricCategory  A metric category. CUpti_MetricEvaluationMode  A metric evaluation mode. CUpti_MetricPropertyDeviceClass  Device class. CUpti_MetricPropertyID  Metric device properties. CUpti_MetricValueKind  Kinds of metric values. CUpti_MetricValueUtilizationLevel  Enumeration of utilization levels for metrics values of kind CUPTI_METRIC_VALUE_KIND_UTILIZATION_LEVEL. Functions CUptiResult  cuptiDeviceEnumMetrics (CUdevice device, size_t *arraySizeBytes, CUpti_MetricID *metricArray) Get the metrics for a device. CUptiResult  cuptiDeviceGetNumMetrics (CUdevice device, uint32_t *numMetrics) Get the number of metrics for a device. CUptiResult  cuptiEnumMetrics (size_t *arraySizeBytes, CUpti_MetricID *metricArray) Get all the metrics available on any device. CUptiResult  cuptiGetNumMetrics (uint32_t *numMetrics) Get the total number of metrics available on any device. CUptiResult  cuptiMetricCreateEventGroupSets (CUcontext context, size_t metricIdArraySizeBytes, CUpti_MetricID *metricIdArray, CUpti_EventGroupSets **eventGroupPasses) For a set of metrics, get the grouping that indicates the number of passes and the event groups necessary to collect the events required for those metrics. CUptiResult  cuptiMetricEnumEvents (CUpti_MetricID metric, size_t *eventIdArraySizeBytes, CUpti_EventID *eventIdArray) Get the events required to calculating a metric. CUptiResult  cuptiMetricEnumProperties (CUpti_MetricID metric, size_t *propIdArraySizeBytes, CUpti_MetricPropertyID *propIdArray) Get the properties required to calculating a metric. CUptiResult  cuptiMetricGetAttribute (CUpti_MetricID metric, CUpti_MetricAttribute attrib, size_t *valueSize, void *value) Get a metric attribute. CUptiResult  cuptiMetricGetIdFromName (CUdevice device, const char *metricName, CUpti_MetricID *metric) Find an metric by name. CUptiResult  cuptiMetricGetNumEvents (CUpti_MetricID metric, uint32_t *numEvents) Get number of events required to calculate a metric. CUptiResult  cuptiMetricGetNumProperties (CUpti_MetricID metric, uint32_t *numProp) Get number of properties required to calculate a metric. CUptiResult  cuptiMetricGetRequiredEventGroupSets (CUcontext context, CUpti_MetricID metric, CUpti_EventGroupSets **eventGroupSets) For a metric get the groups of events that must be collected in the same pass. CUptiResult  cuptiMetricGetValue (CUdevice device, CUpti_MetricID metric, size_t eventIdArraySizeBytes, CUpti_EventID *eventIdArray, size_t eventValueArraySizeBytes, uint64_t *eventValueArray, uint64_t timeDuration, CUpti_MetricValue *metricValue) Calculate the value for a metric. CUptiResult  cuptiMetricGetValue2 (CUpti_MetricID metric, size_t eventIdArraySizeBytes, CUpti_EventID *eventIdArray, size_t eventValueArraySizeBytes, uint64_t *eventValueArray, size_t propIdArraySizeBytes, CUpti_MetricPropertyID *propIdArray, size_t propValueArraySizeBytes, uint64_t *propValueArray, CUpti_MetricValue *metricValue) Calculate the value for a metric. Typedefs CUpti_MetricID  ID for a metric.", "keywords": []}, {"id": 1457, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUPTI_STALL_REASON_STRING_SIZE", "display_name": "CUPTI_STALL_REASON_STRING_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUPTI_STALL_REASON_STRING_SIZE", "priority": 1, "content": "CUPTI_STALL_REASON_STRING_SIZE", "keywords": []}, {"id": 1458, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_GetCubinCrcParamsSize", "display_name": "CUpti_GetCubinCrcParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_GetCubinCrcParamsSize", "priority": 1, "content": "CUpti_GetCubinCrcParamsSize", "keywords": []}, {"id": 1459, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_GetSassToSourceCorrelationParamsSize", "display_name": "CUpti_GetSassToSourceCorrelationParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_GetSassToSourceCorrelationParamsSize", "priority": 1, "content": "CUpti_GetSassToSourceCorrelationParamsSize", "keywords": []}, {"id": 1460, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingConfigurationInfoParamsSize", "display_name": "CUpti_PCSamplingConfigurationInfoParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingConfigurationInfoParamsSize", "priority": 1, "content": "CUpti_PCSamplingConfigurationInfoParamsSize", "keywords": []}, {"id": 1461, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingDisableParamsSize", "display_name": "CUpti_PCSamplingDisableParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingDisableParamsSize", "priority": 1, "content": "CUpti_PCSamplingDisableParamsSize", "keywords": []}, {"id": 1462, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingEnableParamsSize", "display_name": "CUpti_PCSamplingEnableParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingEnableParamsSize", "priority": 1, "content": "CUpti_PCSamplingEnableParamsSize", "keywords": []}, {"id": 1463, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingGetDataParamsSize", "display_name": "CUpti_PCSamplingGetDataParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingGetDataParamsSize", "priority": 1, "content": "CUpti_PCSamplingGetDataParamsSize", "keywords": []}, {"id": 1464, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingGetNumStallReasonsParamsSize", "display_name": "CUpti_PCSamplingGetNumStallReasonsParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingGetNumStallReasonsParamsSize", "priority": 1, "content": "CUpti_PCSamplingGetNumStallReasonsParamsSize", "keywords": []}, {"id": 1465, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingGetStallReasonsParamsSize", "display_name": "CUpti_PCSamplingGetStallReasonsParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingGetStallReasonsParamsSize", "priority": 1, "content": "CUpti_PCSamplingGetStallReasonsParamsSize", "keywords": []}, {"id": 1466, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingStartParamsSize", "display_name": "CUpti_PCSamplingStartParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingStartParamsSize", "priority": 1, "content": "CUpti_PCSamplingStartParamsSize", "keywords": []}, {"id": 1467, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PCSamplingStopParamsSize", "display_name": "CUpti_PCSamplingStopParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PCSamplingStopParamsSize", "priority": 1, "content": "CUpti_PCSamplingStopParamsSize", "keywords": []}, {"id": 1468, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS", "display_name": "CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N30CUpti_PCSamplingCollectionMode44CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUSE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS Continuous mode. Kernels are not serialized in this mode.", "keywords": []}, {"id": 1469, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALID", "display_name": "CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N30CUpti_PCSamplingCollectionMode41CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALID INVALID Value.", "keywords": []}, {"id": 1470, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED", "display_name": "CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N30CUpti_PCSamplingCollectionMode51CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZEDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED Serialized mode. Kernels are serialized in this mode.", "keywords": []}, {"id": 1471, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType57CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODEE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE [rw] PC Sampling collection mode DEFAULT - CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS Input value should be of type CUpti_PCSamplingCollectionMode .", "keywords": []}, {"id": 1472, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType67CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROLE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL [rw] Control over PC Sampling data collection range Default - 0 1 - Allows user to start and stop PC Sampling using APIs - cuptiPCSamplingStart() - Start PC Sampling cuptiPCSamplingStop() - Stop PC Sampling Value is a uint32_t", "keywords": []}, {"id": 1473, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INT", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType51CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INT", "keywords": []}, {"id": 1474, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType62CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZEE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE [rw] Size of HW buffer in bytes DEFAULT - 512 MB If sampling period is too less, HW buffer can overflow and drop PC data Value is a size_t", "keywords": []}, {"id": 1475, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALID", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType49CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALID", "keywords": []}, {"id": 1476, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType60CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMATE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT [w] Value for output data format Default - CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED Input value should be of type CUpti_PCSamplingOutputDataFormat .", "keywords": []}, {"id": 1477, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType62CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFERE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER [w] Data buffer to hold collected PC Sampling data PARSED_DATA Default - none. Buffer type is void * which can point to PARSED_DATA Refer CUpti_PCSamplingData for buffer format for PARSED_DATA", "keywords": []}, {"id": 1478, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType57CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIODE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD [rw] Sampling period for PC Sampling. DEFAULT - CUPTI defined value based on number of SMs Valid values for the sampling periods are between 5 to 31 both inclusive. This will set the sampling period to (2^samplingPeriod) cycles. For e.g. for sampling period = 5 to 31, cycles = 32, 64, 128,\u2026, 2^31 Value is a uint32_t", "keywords": []}, {"id": 1479, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType61CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZEE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE [rw] Size of SW buffer for raw PC counter data downloaded from HW buffer DEFAULT - 1 MB, which can accommodate approximately 5500 PCs with all stall reasons Approximately it takes 16 Bytes (and some fixed size memory) to accommodate one PC with one stall reason For e.g. 1 PC with 1 stall reason = 32 Bytes 1 PC with 2 stall reason = 48 Bytes 1 PC with 4 stall reason = 96 Bytes Value is a size_t", "keywords": []}, {"id": 1480, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType54CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASONE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON [w] Number of stall reasons to collect. DEFAULT - All stall reasons will be collected Value is a size_t [w] Stall reasons to collect DEFAULT - All stall reasons will be collected Input value should be a pointer pointing to array of stall reason indexes containing all the stall reason indexes to collect.", "keywords": []}, {"id": 1481, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN", "display_name": "CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType75CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPANE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN [rw] Control sleep time of the worker threads created by CUPTI for various PC sampling operations. CUPTI creates multiple worker threads to offload certain operations to these threads. This includes decoding of HW data to the CUPTI PC sampling data and correlating PC data to SASS instructions. CUPTI wakes up these threads periodically. Default - 100 milliseconds. Value is a uint32_t", "keywords": []}, {"id": 1482, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALID", "display_name": "CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N32CUpti_PCSamplingOutputDataFormat44CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALID", "keywords": []}, {"id": 1483, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED", "display_name": "CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N32CUpti_PCSamplingOutputDataFormat43CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSEDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED HW buffer data will be parsed during collection of data.", "keywords": []}, {"id": 1484, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ComputeCrcCallbackFunc", "display_name": "CUpti_ComputeCrcCallbackFunc", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv428CUpti_ComputeCrcCallbackFunc", "priority": 1, "content": "typedef  void  ( * CUpti_ComputeCrcCallbackFunc ) ( const  void  * cubin ,  size_t  cubinSize ,  uint64_t  * cubinCrc ) Function type for callback used by CUPTI to request crc of loaded module. This callback function ask for crc of provided module in function. The provided crc will be stored in PC sampling records i.e. in the field \u2018cubinCrc\u2019 of the PC sampling struct CUpti_PCSamplingPCData . The CRC is uses during the offline source correlation to uniquely identify the module. Param cubin The pointer to cubin binary Param cubinSize The size of cubin binary. Param cubinCrc Returns the computed crc of cubin.", "keywords": []}, {"id": 1485, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingCollectionMode", "display_name": "CUpti_PCSamplingCollectionMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv430CUpti_PCSamplingCollectionMode", "priority": 1, "content": "enum  CUpti_PCSamplingCollectionMode PC Sampling collection mode. Values:", "keywords": []}, {"id": 1486, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingCollectionMode::CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS", "display_name": "CUpti_PCSamplingCollectionMode::CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N30CUpti_PCSamplingCollectionMode44CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUSE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS Continuous mode. Kernels are not serialized in this mode.", "keywords": []}, {"id": 1487, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingCollectionMode::CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALID", "display_name": "CUpti_PCSamplingCollectionMode::CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N30CUpti_PCSamplingCollectionMode41CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_COLLECTION_MODE_INVALID INVALID Value.", "keywords": []}, {"id": 1488, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingCollectionMode::CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED", "display_name": "CUpti_PCSamplingCollectionMode::CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N30CUpti_PCSamplingCollectionMode51CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZEDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED Serialized mode. Kernels are serialized in this mode.", "keywords": []}, {"id": 1489, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType", "display_name": "CUpti_PCSamplingConfigurationAttributeType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv442CUpti_PCSamplingConfigurationAttributeType", "priority": 1, "content": "enum  CUpti_PCSamplingConfigurationAttributeType PC Sampling configuration attributes. PC Sampling configuration attribute types. These attributes can be read using cuptiPCSamplingGetConfigurationAttribute and can be written using cuptiPCSamplingSetConfigurationAttribute . Attributes marked [r] can only be read using cuptiPCSamplingGetConfigurationAttribute [w] can only be written using cuptiPCSamplingSetConfigurationAttribute [rw] can be read using cuptiPCSamplingGetConfigurationAttribute and written using cuptiPCSamplingSetConfigurationAttribute  Values:", "keywords": []}, {"id": 1490, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType57CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODEE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE [rw] PC Sampling collection mode DEFAULT - CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS Input value should be of type CUpti_PCSamplingCollectionMode .", "keywords": []}, {"id": 1491, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType67CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROLE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL [rw] Control over PC Sampling data collection range Default - 0 1 - Allows user to start and stop PC Sampling using APIs - cuptiPCSamplingStart() - Start PC Sampling cuptiPCSamplingStop() - Stop PC Sampling Value is a uint32_t", "keywords": []}, {"id": 1492, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INT", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType51CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_FORCE_INT", "keywords": []}, {"id": 1493, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType62CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZEE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE [rw] Size of HW buffer in bytes DEFAULT - 512 MB If sampling period is too less, HW buffer can overflow and drop PC data Value is a size_t", "keywords": []}, {"id": 1494, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALID", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType49CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_INVALID", "keywords": []}, {"id": 1495, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType60CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMATE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT [w] Value for output data format Default - CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED Input value should be of type CUpti_PCSamplingOutputDataFormat .", "keywords": []}, {"id": 1496, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType62CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFERE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER [w] Data buffer to hold collected PC Sampling data PARSED_DATA Default - none. Buffer type is void * which can point to PARSED_DATA Refer CUpti_PCSamplingData for buffer format for PARSED_DATA", "keywords": []}, {"id": 1497, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType57CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIODE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD [rw] Sampling period for PC Sampling. DEFAULT - CUPTI defined value based on number of SMs Valid values for the sampling periods are between 5 to 31 both inclusive. This will set the sampling period to (2^samplingPeriod) cycles. For e.g. for sampling period = 5 to 31, cycles = 32, 64, 128,\u2026, 2^31 Value is a uint32_t", "keywords": []}, {"id": 1498, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType61CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZEE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE [rw] Size of SW buffer for raw PC counter data downloaded from HW buffer DEFAULT - 1 MB, which can accommodate approximately 5500 PCs with all stall reasons Approximately it takes 16 Bytes (and some fixed size memory) to accommodate one PC with one stall reason For e.g. 1 PC with 1 stall reason = 32 Bytes 1 PC with 2 stall reason = 48 Bytes 1 PC with 4 stall reason = 96 Bytes Value is a size_t", "keywords": []}, {"id": 1499, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType54CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASONE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON [w] Number of stall reasons to collect. DEFAULT - All stall reasons will be collected Value is a size_t [w] Stall reasons to collect DEFAULT - All stall reasons will be collected Input value should be a pointer pointing to array of stall reason indexes containing all the stall reason indexes to collect.", "keywords": []}, {"id": 1500, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN", "display_name": "CUpti_PCSamplingConfigurationAttributeType::CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N42CUpti_PCSamplingConfigurationAttributeType75CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPANE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN [rw] Control sleep time of the worker threads created by CUPTI for various PC sampling operations. CUPTI creates multiple worker threads to offload certain operations to these threads. This includes decoding of HW data to the CUPTI PC sampling data and correlating PC data to SASS instructions. CUPTI wakes up these threads periodically. Default - 100 milliseconds. Value is a uint32_t", "keywords": []}, {"id": 1501, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingOutputDataFormat", "display_name": "CUpti_PCSamplingOutputDataFormat", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv432CUpti_PCSamplingOutputDataFormat", "priority": 1, "content": "enum  CUpti_PCSamplingOutputDataFormat PC Sampling output data format. Values:", "keywords": []}, {"id": 1502, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingOutputDataFormat::CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALID", "display_name": "CUpti_PCSamplingOutputDataFormat::CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N32CUpti_PCSamplingOutputDataFormat44CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_INVALID", "keywords": []}, {"id": 1503, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PCSamplingOutputDataFormat::CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED", "display_name": "CUpti_PCSamplingOutputDataFormat::CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N32CUpti_PCSamplingOutputDataFormat43CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSEDE", "priority": 1, "content": "enumerator  CUPTI_PC_SAMPLING_OUTPUT_DATA_FORMAT_PARSED HW buffer data will be parsed during collection of data.", "keywords": []}, {"id": 1504, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCubinCrc", "display_name": "cuptiGetCubinCrc", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv416cuptiGetCubinCrcP23CUpti_GetCubinCrcParams", "priority": 1, "content": "CUptiResult  cuptiGetCubinCrc CUpti_GetCubinCrcParams  * pParams Get the CRC of cubin. This function returns the CRC of provided cubin binary. Parameters pParams \u2013 A pointer to CUpti_GetCubinCrcParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if parameter cubin is NULL or provided cubinSize is zero or size field is not set.", "keywords": []}, {"id": 1505, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetCubinCrc::pParams", "display_name": "cuptiGetCubinCrc::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv416cuptiGetCubinCrcP23CUpti_GetCubinCrcParams", "priority": 1, "content": "CUptiResult  cuptiGetCubinCrc CUpti_GetCubinCrcParams  * pParams Get the CRC of cubin. This function returns the CRC of provided cubin binary. Parameters pParams \u2013 A pointer to CUpti_GetCubinCrcParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if parameter cubin is NULL or provided cubinSize is zero or size field is not set.", "keywords": []}, {"id": 1506, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetSassToSourceCorrelation", "display_name": "cuptiGetSassToSourceCorrelation", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv431cuptiGetSassToSourceCorrelationP38CUpti_GetSassToSourceCorrelationParams", "priority": 1, "content": "CUptiResult  cuptiGetSassToSourceCorrelation CUpti_GetSassToSourceCorrelationParams  * pParams SASS to Source correlation. It is expected from user to free allocated memory for fileName and dirName after use. Parameters pParams \u2013 A pointer to CUpti_GetSassToSourceCorrelationParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if either of the parameters cubin or functionName is NULL or cubinSize is zero or size field is not set correctly. CUPTI_ERROR_INVALID_MODULE \u2013 provided cubin is invalid. CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred. This error code is also used for cases when the function is not present in the module. A better error code will be returned in the future release.", "keywords": []}, {"id": 1507, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetSassToSourceCorrelation::pParams", "display_name": "cuptiGetSassToSourceCorrelation::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv431cuptiGetSassToSourceCorrelationP38CUpti_GetSassToSourceCorrelationParams", "priority": 1, "content": "CUptiResult  cuptiGetSassToSourceCorrelation CUpti_GetSassToSourceCorrelationParams  * pParams SASS to Source correlation. It is expected from user to free allocated memory for fileName and dirName after use. Parameters pParams \u2013 A pointer to CUpti_GetSassToSourceCorrelationParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if either of the parameters cubin or functionName is NULL or cubinSize is zero or size field is not set correctly. CUPTI_ERROR_INVALID_MODULE \u2013 provided cubin is invalid. CUPTI_ERROR_UNKNOWN \u2013 an internal error occurred. This error code is also used for cases when the function is not present in the module. A better error code will be returned in the future release.", "keywords": []}, {"id": 1508, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingDisable", "display_name": "cuptiPCSamplingDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv422cuptiPCSamplingDisableP29CUpti_PCSamplingDisableParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingDisable CUpti_PCSamplingDisableParams  * pParams Disable PC sampling. For application which doesn\u2019t destroy the CUDA context explicitly, this API does the PC Sampling tear-down, joins threads and copies PC records in the buffer provided during the PC sampling configuration. PC records which can\u2019t be accommodated in the buffer are discarded. Parameters pParams \u2013 A pointer to CUpti_PCSamplingDisableParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1509, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingDisable::pParams", "display_name": "cuptiPCSamplingDisable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv422cuptiPCSamplingDisableP29CUpti_PCSamplingDisableParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingDisable CUpti_PCSamplingDisableParams  * pParams Disable PC sampling. For application which doesn\u2019t destroy the CUDA context explicitly, this API does the PC Sampling tear-down, joins threads and copies PC records in the buffer provided during the PC sampling configuration. PC records which can\u2019t be accommodated in the buffer are discarded. Parameters pParams \u2013 A pointer to CUpti_PCSamplingDisableParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1510, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingEnable", "display_name": "cuptiPCSamplingEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv421cuptiPCSamplingEnableP28CUpti_PCSamplingEnableParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingEnable CUpti_PCSamplingEnableParams  * pParams Enable PC sampling. Parameters pParams \u2013 A pointer to CUpti_PCSamplingEnableParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1511, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingEnable::pParams", "display_name": "cuptiPCSamplingEnable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv421cuptiPCSamplingEnableP28CUpti_PCSamplingEnableParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingEnable CUpti_PCSamplingEnableParams  * pParams Enable PC sampling. Parameters pParams \u2013 A pointer to CUpti_PCSamplingEnableParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1512, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetConfigurationAttribute", "display_name": "cuptiPCSamplingGetConfigurationAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv440cuptiPCSamplingGetConfigurationAttributeP39CUpti_PCSamplingConfigurationInfoParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetConfigurationAttribute CUpti_PCSamplingConfigurationInfoParams  * pParams Read PC Sampling configuration attribute. Parameters pParams \u2013 A pointer to CUpti_PCSamplingConfigurationInfoParams containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with some invalid attribute. CUPTI_ERROR_INVALID_PARAMETER \u2013 if attrib is not valid or any pParams is not valid CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 indicates that the value buffer is too small to hold the attribute value CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1513, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetConfigurationAttribute::pParams", "display_name": "cuptiPCSamplingGetConfigurationAttribute::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv440cuptiPCSamplingGetConfigurationAttributeP39CUpti_PCSamplingConfigurationInfoParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetConfigurationAttribute CUpti_PCSamplingConfigurationInfoParams  * pParams Read PC Sampling configuration attribute. Parameters pParams \u2013 A pointer to CUpti_PCSamplingConfigurationInfoParams containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with some invalid attribute. CUPTI_ERROR_INVALID_PARAMETER \u2013 if attrib is not valid or any pParams is not valid CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT \u2013 indicates that the value buffer is too small to hold the attribute value CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1514, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetData", "display_name": "cuptiPCSamplingGetData", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv422cuptiPCSamplingGetDataP29CUpti_PCSamplingGetDataParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetData CUpti_PCSamplingGetDataParams  * pParams Flush GPU PC sampling data periodically. Flushing of GPU PC Sampling data is required at following point to maintain uniqueness of PCs: For CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS, after every module load-unload-load For CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED, after every kernel ends If configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL is enabled, then after every range end i.e. cuptiPCSamplingStop() If application is profiled in CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS, with disabled CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL, and there is no module unload, user can collect data in two ways: Use cuptiPCSamplingGetData() API periodically Use cuptiPCSamplingDisable() on application exit and read GPU PC sampling data from sampling data buffer passed during configuration. Note: In case, cuptiPCSamplingGetData() API is not called periodically, then sampling data buffer passed during configuration should be large enough to hold all PCs data. cuptiPCSamplingGetData() API never does device synchronization. It is possible that when the API is called there is some unconsumed data from the HW buffer. In this case CUPTI provides only the data available with it at that moment. Parameters pParams \u2013 A pointer to CUpti_PCSamplingGetDataParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called without enabling PC sampling. CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device CUPTI_ERROR_OUT_OF_MEMORY \u2013 indicates that the HW buffer is full does not support the API", "keywords": []}, {"id": 1515, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetData::pParams", "display_name": "cuptiPCSamplingGetData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv422cuptiPCSamplingGetDataP29CUpti_PCSamplingGetDataParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetData CUpti_PCSamplingGetDataParams  * pParams Flush GPU PC sampling data periodically. Flushing of GPU PC Sampling data is required at following point to maintain uniqueness of PCs: For CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS, after every module load-unload-load For CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED, after every kernel ends If configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL is enabled, then after every range end i.e. cuptiPCSamplingStop() If application is profiled in CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS, with disabled CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL, and there is no module unload, user can collect data in two ways: Use cuptiPCSamplingGetData() API periodically Use cuptiPCSamplingDisable() on application exit and read GPU PC sampling data from sampling data buffer passed during configuration. Note: In case, cuptiPCSamplingGetData() API is not called periodically, then sampling data buffer passed during configuration should be large enough to hold all PCs data. cuptiPCSamplingGetData() API never does device synchronization. It is possible that when the API is called there is some unconsumed data from the HW buffer. In this case CUPTI provides only the data available with it at that moment. Parameters pParams \u2013 A pointer to CUpti_PCSamplingGetDataParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called without enabling PC sampling. CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device CUPTI_ERROR_OUT_OF_MEMORY \u2013 indicates that the HW buffer is full does not support the API", "keywords": []}, {"id": 1516, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetNumStallReasons", "display_name": "cuptiPCSamplingGetNumStallReasons", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433cuptiPCSamplingGetNumStallReasonsP40CUpti_PCSamplingGetNumStallReasonsParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetNumStallReasons CUpti_PCSamplingGetNumStallReasonsParams  * pParams Get PC sampling stall reason count. Parameters pParams \u2013 A pointer to CUpti_PCSamplingGetNumStallReasonsParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1517, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetNumStallReasons::pParams", "display_name": "cuptiPCSamplingGetNumStallReasons::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433cuptiPCSamplingGetNumStallReasonsP40CUpti_PCSamplingGetNumStallReasonsParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetNumStallReasons CUpti_PCSamplingGetNumStallReasonsParams  * pParams Get PC sampling stall reason count. Parameters pParams \u2013 A pointer to CUpti_PCSamplingGetNumStallReasonsParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1518, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetStallReasons", "display_name": "cuptiPCSamplingGetStallReasons", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv430cuptiPCSamplingGetStallReasonsP37CUpti_PCSamplingGetStallReasonsParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetStallReasons CUpti_PCSamplingGetStallReasonsParams  * pParams Get PC sampling stall reasons. Parameters pParams \u2013 A pointer to CUpti_PCSamplingGetStallReasonsParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1519, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingGetStallReasons::pParams", "display_name": "cuptiPCSamplingGetStallReasons::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv430cuptiPCSamplingGetStallReasonsP37CUpti_PCSamplingGetStallReasonsParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingGetStallReasons CUpti_PCSamplingGetStallReasonsParams  * pParams Get PC sampling stall reasons. Parameters pParams \u2013 A pointer to CUpti_PCSamplingGetStallReasonsParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1520, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingSetConfigurationAttribute", "display_name": "cuptiPCSamplingSetConfigurationAttribute", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv440cuptiPCSamplingSetConfigurationAttributeP39CUpti_PCSamplingConfigurationInfoParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingSetConfigurationAttribute CUpti_PCSamplingConfigurationInfoParams  * pParams Write PC Sampling configuration attribute. Parameters pParams \u2013 A pointer to CUpti_PCSamplingConfigurationInfoParams containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with some invalid attrib . CUPTI_ERROR_INVALID_PARAMETER \u2013 if attribute value is not valid or any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1521, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingSetConfigurationAttribute::pParams", "display_name": "cuptiPCSamplingSetConfigurationAttribute::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv440cuptiPCSamplingSetConfigurationAttributeP39CUpti_PCSamplingConfigurationInfoParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingSetConfigurationAttribute CUpti_PCSamplingConfigurationInfoParams  * pParams Write PC Sampling configuration attribute. Parameters pParams \u2013 A pointer to CUpti_PCSamplingConfigurationInfoParams containing PC sampling configuration. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with some invalid attrib . CUPTI_ERROR_INVALID_PARAMETER \u2013 if attribute value is not valid or any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1522, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingStart", "display_name": "cuptiPCSamplingStart", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv420cuptiPCSamplingStartP27CUpti_PCSamplingStartParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingStart CUpti_PCSamplingStartParams  * pParams Start PC sampling. User can collect PC Sampling data for user-defined range specified by Start/Stop APIs. This API can be used to mark starting of range. Set configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL to use this API. Parameters pParams \u2013 A pointer to CUpti_PCSamplingStartParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with incorrect PC Sampling configuration. CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1523, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingStart::pParams", "display_name": "cuptiPCSamplingStart::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv420cuptiPCSamplingStartP27CUpti_PCSamplingStartParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingStart CUpti_PCSamplingStartParams  * pParams Start PC sampling. User can collect PC Sampling data for user-defined range specified by Start/Stop APIs. This API can be used to mark starting of range. Set configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL to use this API. Parameters pParams \u2013 A pointer to CUpti_PCSamplingStartParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with incorrect PC Sampling configuration. CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1524, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingStop", "display_name": "cuptiPCSamplingStop", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv419cuptiPCSamplingStopP26CUpti_PCSamplingStopParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingStop CUpti_PCSamplingStopParams  * pParams Stop PC sampling. User can collect PC Sampling data for user-defined range specified by Start/Stop APIs. This API can be used to mark end of range. Set configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL to use this API. Parameters pParams \u2013 A pointer to CUpti_PCSamplingStopParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with incorrect PC Sampling configuration. CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1525, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPCSamplingStop::pParams", "display_name": "cuptiPCSamplingStop::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv419cuptiPCSamplingStopP26CUpti_PCSamplingStopParams", "priority": 1, "content": "CUptiResult  cuptiPCSamplingStop CUpti_PCSamplingStopParams  * pParams Stop PC sampling. User can collect PC Sampling data for user-defined range specified by Start/Stop APIs. This API can be used to mark end of range. Set configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL to use this API. Parameters pParams \u2013 A pointer to CUpti_PCSamplingStopParams Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called with incorrect PC Sampling configuration. CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device does not support the API", "keywords": []}, {"id": 1526, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiRegisterComputeCrcCallback", "display_name": "cuptiRegisterComputeCrcCallback", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv431cuptiRegisterComputeCrcCallback28CUpti_ComputeCrcCallbackFunc", "priority": 1, "content": "CUptiResult  cuptiRegisterComputeCrcCallback CUpti_ComputeCrcCallbackFunc  funcComputeCubinCrc Register callback function with CUPTI to use your own algorithm to compute cubin crc. This function registers a callback function and it gets called from CUPTI when a CUDA module is loaded. Parameters funcComputeCubinCrc \u2013 callback is invoked when a CUDA module is loaded. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if funcComputeCubinCrc is NULL.", "keywords": []}, {"id": 1527, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiRegisterComputeCrcCallback::funcComputeCubinCrc", "display_name": "cuptiRegisterComputeCrcCallback::funcComputeCubinCrc", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv431cuptiRegisterComputeCrcCallback28CUpti_ComputeCrcCallbackFunc", "priority": 1, "content": "CUptiResult  cuptiRegisterComputeCrcCallback CUpti_ComputeCrcCallbackFunc  funcComputeCubinCrc Register callback function with CUPTI to use your own algorithm to compute cubin crc. This function registers a callback function and it gets called from CUPTI when a CUDA module is loaded. Parameters funcComputeCubinCrc \u2013 callback is invoked when a CUDA module is loaded. Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if funcComputeCubinCrc is NULL.", "keywords": []}, {"id": 1528, "doc_id": 1528, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "display_name": "CUPTI PC Sampling API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI PC Sampling API. Data Structures CUpti_GetCubinCrcParams  Params for cuptiGetCubinCrc. CUpti_GetSassToSourceCorrelationParams  Params for cuptiGetSassToSourceCorrelation. CUpti_PCSamplingConfigurationInfo  PC sampling configuration information structure. CUpti_PCSamplingConfigurationInfoParams  PC sampling configuration structure. CUpti_PCSamplingData  Collected PC Sampling data. CUpti_PCSamplingDisableParams  Params for cuptiPCSamplingDisable. CUpti_PCSamplingEnableParams  Params for cuptiPCSamplingEnable. CUpti_PCSamplingGetDataParams  Params for cuptiPCSamplingEnable. CUpti_PCSamplingGetNumStallReasonsParams  Params for cuptiPCSamplingGetNumStallReasons. CUpti_PCSamplingGetStallReasonsParams  Params for cuptiPCSamplingGetStallReasons. CUpti_PCSamplingPCData  PC Sampling data. CUpti_PCSamplingStallReason  PC Sampling stall reasons. CUpti_PCSamplingStartParams  Params for cuptiPCSamplingStart. CUpti_PCSamplingStopParams  Params for cuptiPCSamplingStop. Macros CUPTI_STALL_REASON_STRING_SIZE   CUpti_GetCubinCrcParamsSize   CUpti_GetSassToSourceCorrelationParamsSize   CUpti_PCSamplingConfigurationInfoParamsSize   CUpti_PCSamplingDisableParamsSize   CUpti_PCSamplingEnableParamsSize   CUpti_PCSamplingGetDataParamsSize   CUpti_PCSamplingGetNumStallReasonsParamsSize   CUpti_PCSamplingGetStallReasonsParamsSize   CUpti_PCSamplingStartParamsSize   CUpti_PCSamplingStopParamsSize   Enumerations CUpti_PCSamplingCollectionMode  PC Sampling collection mode. CUpti_PCSamplingConfigurationAttributeType  PC Sampling configuration attributes. CUpti_PCSamplingOutputDataFormat  PC Sampling output data format. Functions CUptiResult  cuptiGetCubinCrc (CUpti_GetCubinCrcParams *pParams) Get the CRC of cubin. CUptiResult  cuptiGetSassToSourceCorrelation (CUpti_GetSassToSourceCorrelationParams *pParams) SASS to Source correlation. CUptiResult  cuptiPCSamplingDisable (CUpti_PCSamplingDisableParams *pParams) Disable PC sampling. CUptiResult  cuptiPCSamplingEnable (CUpti_PCSamplingEnableParams *pParams) Enable PC sampling. CUptiResult  cuptiPCSamplingGetConfigurationAttribute (CUpti_PCSamplingConfigurationInfoParams *pParams) Read PC Sampling configuration attribute. CUptiResult  cuptiPCSamplingGetData (CUpti_PCSamplingGetDataParams *pParams) Flush GPU PC sampling data periodically. CUptiResult  cuptiPCSamplingGetNumStallReasons (CUpti_PCSamplingGetNumStallReasonsParams *pParams) Get PC sampling stall reason count. CUptiResult  cuptiPCSamplingGetStallReasons (CUpti_PCSamplingGetStallReasonsParams *pParams) Get PC sampling stall reasons. CUptiResult  cuptiPCSamplingSetConfigurationAttribute (CUpti_PCSamplingConfigurationInfoParams *pParams) Write PC Sampling configuration attribute. CUptiResult  cuptiPCSamplingStart (CUpti_PCSamplingStartParams *pParams) Start PC sampling. CUptiResult  cuptiPCSamplingStop (CUpti_PCSamplingStopParams *pParams) Stop PC sampling. CUptiResult  cuptiRegisterComputeCrcCallback (CUpti_ComputeCrcCallbackFunc funcComputeCubinCrc) Register callback function with CUPTI to use your own algorithm to compute cubin crc. Typedefs CUpti_ComputeCrcCallbackFunc  Function type for callback used by CUPTI to request crc of loaded module.", "keywords": []}, {"id": 1529, "doc_id": 1534, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y.html", "domain_name": "c", "name": "CUptiUtil_GetBufferInfoParamsSize", "display_name": "CUptiUtil_GetBufferInfoParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "anchor": "c.CUptiUtil_GetBufferInfoParamsSize", "priority": 1, "content": "CUptiUtil_GetBufferInfoParamsSize", "keywords": []}, {"id": 1530, "doc_id": 1534, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y.html", "domain_name": "c", "name": "CUptiUtil_GetHeaderDataParamsSize", "display_name": "CUptiUtil_GetHeaderDataParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "anchor": "c.CUptiUtil_GetHeaderDataParamsSize", "priority": 1, "content": "CUptiUtil_GetHeaderDataParamsSize", "keywords": []}, {"id": 1531, "doc_id": 1534, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y.html", "domain_name": "c", "name": "CUptiUtil_GetPcSampDataParamsSize", "display_name": "CUptiUtil_GetPcSampDataParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "anchor": "c.CUptiUtil_GetPcSampDataParamsSize", "priority": 1, "content": "CUptiUtil_GetPcSampDataParamsSize", "keywords": []}, {"id": 1532, "doc_id": 1534, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y.html", "domain_name": "c", "name": "CUptiUtil_MergePcSampDataParamsSize", "display_name": "CUptiUtil_MergePcSampDataParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "anchor": "c.CUptiUtil_MergePcSampDataParamsSize", "priority": 1, "content": "CUptiUtil_MergePcSampDataParamsSize", "keywords": []}, {"id": 1533, "doc_id": 1534, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y.html", "domain_name": "c", "name": "CUptiUtil_PutPcSampDataParamsSize", "display_name": "CUptiUtil_PutPcSampDataParamsSize", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "anchor": "c.CUptiUtil_PutPcSampDataParamsSize", "priority": 1, "content": "CUptiUtil_PutPcSampDataParamsSize", "keywords": []}, {"id": 1534, "doc_id": 1534, "filename": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "display_name": "CUPTI PC Sampling Utility API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___p_c_s_a_m_p_l_i_n_g___u_t_i_l_i_t_y", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI PC Sampling Utility API. Data Structures CUPTI::PcSamplingUtil::BufferInfo   BufferInfo will be stored in the file for every buffer i.e for every call of UtilDumpPcSamplingBufferInFile() API. CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams  Params for CuptiUtilGetBufferInfo . CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams  Params for CuptiUtilGetHeaderData . CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams  Params for CuptiUtilGetPcSampData . CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams  Params for CuptiUtilMergePcSampData . CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams  Params for CuptiUtilPutPcSampData . CUPTI::PcSamplingUtil::Header   Header info will be stored in file. CUPTI::PcSamplingUtil::PcSamplingStallReasons  All available stall reasons name and respective indexes will be stored in it. Macros CUptiUtil_GetBufferInfoParamsSize   CUptiUtil_GetHeaderDataParamsSize   CUptiUtil_GetPcSampDataParamsSize   CUptiUtil_MergePcSampDataParamsSize   CUptiUtil_PutPcSampDataParamsSize   Enumerations CUPTI::PcSamplingUtil::CUptiUtilResult  CUPTI PC sampling utility API result codes. CUPTI::PcSamplingUtil::PcSamplingBufferType  CUPTI PC sampling buffer types. Functions CUptiUtilResult  CUPTI::PcSamplingUtil::CuptiUtilGetBufferInfo (CUptiUtil_GetBufferInfoParams *pParams) Get buffer info data of file. CUptiUtilResult  CUPTI::PcSamplingUtil::CuptiUtilGetHeaderData (CUptiUtil_GetHeaderDataParams *pParams) Get header data of file. CUptiUtilResult  CUPTI::PcSamplingUtil::CuptiUtilGetPcSampData (CUptiUtil_GetPcSampDataParams *pParams) Retrieve PC sampling data from file into allocated buffer. CUptiUtilResult  CUPTI::PcSamplingUtil::CuptiUtilMergePcSampData (CUptiUtil_MergePcSampDataParams *pParams) Merge PC sampling data range id wise. CUptiUtilResult  CUPTI::PcSamplingUtil::CuptiUtilPutPcSampData (CUptiUtil_PutPcSampDataParams *pParams) Dump PC sampling data into the file.", "keywords": []}, {"id": 1535, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_CounterDataImage_Initialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_CounterDataImage_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1536, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_CounterData_GetSampleInfo_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_CounterData_GetSampleInfo_Params_STRUCT_SIZE", "keywords": []}, {"id": 1537, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_DecodeData_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_DecodeData_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_DecodeData_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_DecodeData_Params_STRUCT_SIZE", "keywords": []}, {"id": 1538, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_Disable_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_Disable_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_Disable_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_Disable_Params_STRUCT_SIZE", "keywords": []}, {"id": 1539, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_Enable_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_Enable_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_Enable_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_Enable_Params_STRUCT_SIZE", "keywords": []}, {"id": 1540, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_GetCounterAvailability_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_GetCounterAvailability_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_GetCounterAvailability_Params_STRUCT_SIZE", "keywords": []}, {"id": 1541, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_GetCounterDataInfo_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_GetCounterDataInfo_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_GetCounterDataInfo_Params_STRUCT_SIZE", "keywords": []}, {"id": 1542, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_GetCounterDataSize_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_GetCounterDataSize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_GetCounterDataSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1543, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_SetConfig_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_SetConfig_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_SetConfig_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_SetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 1544, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_Start_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_Start_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_Start_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_Start_Params_STRUCT_SIZE", "keywords": []}, {"id": 1545, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "c", "name": "CUpti_PmSampling_Stop_Params_STRUCT_SIZE", "display_name": "CUpti_PmSampling_Stop_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "c.CUpti_PmSampling_Stop_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_PmSampling_Stop_Params_STRUCT_SIZE", "keywords": []}, {"id": 1546, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNT", "display_name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason42CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNT", "keywords": []}, {"id": 1547, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULL", "display_name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason54CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULLE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULL Counter data image is full.", "keywords": []}, {"id": 1548, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDS", "display_name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason51CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDSE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDS All the records in the hardware buffer is decoded.", "keywords": []}, {"id": 1549, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHER", "display_name": "CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason42CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHERE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHER", "keywords": []}, {"id": 1550, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNT", "display_name": "CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N28CUpti_PmSampling_TriggerMode36CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNT", "keywords": []}, {"id": 1551, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL", "display_name": "CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N28CUpti_PmSampling_TriggerMode50CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVALE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL The trigger is based off of the SYSCLK frequency, note SYS frequency by default is variable. the sample interval (set in the struct CUpti_PmSampling_SetConfig_Params ) is in terms of clocks.", "keywords": []}, {"id": 1552, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL", "display_name": "CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N28CUpti_PmSampling_TriggerMode48CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVALE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL The trigger is based off of a fixed frequency source. The sample interval (set in the struct CUpti_PmSampling_SetConfig_Params ) is in terms of nanoseconds. Note: This trigger mode is not supported on Turing GPU architecture and GA100 GPU. It is supported on Ampere GA10x and later GPU architectures.", "keywords": []}, {"id": 1553, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeStopReason", "display_name": "CUpti_PmSampling_DecodeStopReason", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433CUpti_PmSampling_DecodeStopReason", "priority": 1, "content": "enum  CUpti_PmSampling_DecodeStopReason Values:", "keywords": []}, {"id": 1554, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNT", "display_name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason42CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNT", "keywords": []}, {"id": 1555, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULL", "display_name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason54CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULLE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_COUNTER_DATA_FULL Counter data image is full.", "keywords": []}, {"id": 1556, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDS", "display_name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason51CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDSE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_END_OF_RECORDS All the records in the hardware buffer is decoded.", "keywords": []}, {"id": 1557, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHER", "display_name": "CUpti_PmSampling_DecodeStopReason::CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N33CUpti_PmSampling_DecodeStopReason42CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHERE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_DECODE_STOP_REASON_OTHER", "keywords": []}, {"id": 1558, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Object", "display_name": "CUpti_PmSampling_Object", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv423CUpti_PmSampling_Object", "priority": 1, "content": "typedef  struct  CUpti_PmSampling_Object  CUpti_PmSampling_Object", "keywords": []}, {"id": 1559, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_TriggerMode", "display_name": "CUpti_PmSampling_TriggerMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv428CUpti_PmSampling_TriggerMode", "priority": 1, "content": "enum  CUpti_PmSampling_TriggerMode Values:", "keywords": []}, {"id": 1560, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_TriggerMode::CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNT", "display_name": "CUpti_PmSampling_TriggerMode::CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N28CUpti_PmSampling_TriggerMode36CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNTE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_TRIGGER_MODE_COUNT", "keywords": []}, {"id": 1561, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_TriggerMode::CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL", "display_name": "CUpti_PmSampling_TriggerMode::CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N28CUpti_PmSampling_TriggerMode50CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVALE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL The trigger is based off of the SYSCLK frequency, note SYS frequency by default is variable. the sample interval (set in the struct CUpti_PmSampling_SetConfig_Params ) is in terms of clocks.", "keywords": []}, {"id": 1562, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "CUpti_PmSampling_TriggerMode::CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL", "display_name": "CUpti_PmSampling_TriggerMode::CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv4N28CUpti_PmSampling_TriggerMode48CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVALE", "priority": 1, "content": "enumerator  CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL The trigger is based off of a fixed frequency source. The sample interval (set in the struct CUpti_PmSampling_SetConfig_Params ) is in terms of nanoseconds. Note: This trigger mode is not supported on Turing GPU architecture and GA100 GPU. It is supported on Ampere GA10x and later GPU architectures.", "keywords": []}, {"id": 1563, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingCounterDataGetSampleInfo", "display_name": "cuptiPmSamplingCounterDataGetSampleInfo", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv439cuptiPmSamplingCounterDataGetSampleInfoP49CUpti_PmSampling_CounterData_GetSampleInfo_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingCounterDataGetSampleInfo CUpti_PmSampling_CounterData_GetSampleInfo_Params  * pParams Get the sample info (start and end time stamp) for the given sample index. Each sample is distinguished by the start and end time stamp. Parameters pParams \u2013 A pointer to CUpti_PmSampling_CounterData_GetSampleInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1564, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingCounterDataGetSampleInfo::pParams", "display_name": "cuptiPmSamplingCounterDataGetSampleInfo::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv439cuptiPmSamplingCounterDataGetSampleInfoP49CUpti_PmSampling_CounterData_GetSampleInfo_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingCounterDataGetSampleInfo CUpti_PmSampling_CounterData_GetSampleInfo_Params  * pParams Get the sample info (start and end time stamp) for the given sample index. Each sample is distinguished by the start and end time stamp. Parameters pParams \u2013 A pointer to CUpti_PmSampling_CounterData_GetSampleInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1565, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingCounterDataImageInitialize", "display_name": "cuptiPmSamplingCounterDataImageInitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv441cuptiPmSamplingCounterDataImageInitializeP51CUpti_PmSampling_CounterDataImage_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingCounterDataImageInitialize CUpti_PmSampling_CounterDataImage_Initialize_Params  * pParams Initialize the counter data to CUPTI record format for storing the metric data. Parameters pParams \u2013 A pointer to CUpti_PmSampling_CounterDataImage_Initialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling CounterDataInitialize is called without enabling PM sampling CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1566, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingCounterDataImageInitialize::pParams", "display_name": "cuptiPmSamplingCounterDataImageInitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv441cuptiPmSamplingCounterDataImageInitializeP51CUpti_PmSampling_CounterDataImage_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingCounterDataImageInitialize CUpti_PmSampling_CounterDataImage_Initialize_Params  * pParams Initialize the counter data to CUPTI record format for storing the metric data. Parameters pParams \u2013 A pointer to CUpti_PmSampling_CounterDataImage_Initialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling CounterDataInitialize is called without enabling PM sampling CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1567, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingDecodeData", "display_name": "cuptiPmSamplingDecodeData", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv425cuptiPmSamplingDecodeDataP34CUpti_PmSampling_DecodeData_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingDecodeData CUpti_PmSampling_DecodeData_Params  * pParams Decode the metrics data stored in the hardware buffer to the counter data image. Parameters pParams \u2013 A pointer to CUpti_PmSampling_DecodeData_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling DecodeData is called without enabling PM sampling CUPTI_ERROR_OUT_OF_MEMORY \u2013 if there is record overflow in the hardware buffer CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1568, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingDecodeData::pParams", "display_name": "cuptiPmSamplingDecodeData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv425cuptiPmSamplingDecodeDataP34CUpti_PmSampling_DecodeData_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingDecodeData CUpti_PmSampling_DecodeData_Params  * pParams Decode the metrics data stored in the hardware buffer to the counter data image. Parameters pParams \u2013 A pointer to CUpti_PmSampling_DecodeData_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling DecodeData is called without enabling PM sampling CUPTI_ERROR_OUT_OF_MEMORY \u2013 if there is record overflow in the hardware buffer CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1569, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingDisable", "display_name": "cuptiPmSamplingDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv422cuptiPmSamplingDisableP31CUpti_PmSampling_Disable_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingDisable CUpti_PmSampling_Disable_Params  * pParams Disable PM sampling on the CUDA device and destroy the PM sampling object. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Disable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1570, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingDisable::pParams", "display_name": "cuptiPmSamplingDisable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv422cuptiPmSamplingDisableP31CUpti_PmSampling_Disable_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingDisable CUpti_PmSampling_Disable_Params  * pParams Disable PM sampling on the CUDA device and destroy the PM sampling object. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Disable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1571, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingEnable", "display_name": "cuptiPmSamplingEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv421cuptiPmSamplingEnableP30CUpti_PmSampling_Enable_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingEnable CUpti_PmSampling_Enable_Params  * pParams Create a PM sampling object and enable PM sampling on the CUDA device. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Enable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_OUT_OF_MEMORY \u2013 if memory allocation fails while creating the PM sampling object CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling is already enabled on the device CUPTI_ERROR_INSUFFICIENT_PRIVILEGES \u2013 if the user does not have sufficient privileges to perform the operation CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1572, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingEnable::pParams", "display_name": "cuptiPmSamplingEnable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv421cuptiPmSamplingEnableP30CUpti_PmSampling_Enable_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingEnable CUpti_PmSampling_Enable_Params  * pParams Create a PM sampling object and enable PM sampling on the CUDA device. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Enable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_OUT_OF_MEMORY \u2013 if memory allocation fails while creating the PM sampling object CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling is already enabled on the device CUPTI_ERROR_INSUFFICIENT_PRIVILEGES \u2013 if the user does not have sufficient privileges to perform the operation CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1573, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingGetCounterAvailability", "display_name": "cuptiPmSamplingGetCounterAvailability", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv437cuptiPmSamplingGetCounterAvailabilityP46CUpti_PmSampling_GetCounterAvailability_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingGetCounterAvailability CUpti_PmSampling_GetCounterAvailability_Params  * pParams Query counter availibility information in a buffer which can be used to filter unavailable raw metrics on host. Note: This API may fail, if any profiling or sampling session is active on the specified device. Parameters pParams \u2013 A pointer to CUpti_PmSampling_GetCounterAvailability_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INSUFFICIENT_PRIVILEGES \u2013 if the user does not have sufficient privileges to perform the operation CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1574, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingGetCounterAvailability::pParams", "display_name": "cuptiPmSamplingGetCounterAvailability::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv437cuptiPmSamplingGetCounterAvailabilityP46CUpti_PmSampling_GetCounterAvailability_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingGetCounterAvailability CUpti_PmSampling_GetCounterAvailability_Params  * pParams Query counter availibility information in a buffer which can be used to filter unavailable raw metrics on host. Note: This API may fail, if any profiling or sampling session is active on the specified device. Parameters pParams \u2013 A pointer to CUpti_PmSampling_GetCounterAvailability_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INSUFFICIENT_PRIVILEGES \u2013 if the user does not have sufficient privileges to perform the operation CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1575, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingGetCounterDataInfo", "display_name": "cuptiPmSamplingGetCounterDataInfo", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433cuptiPmSamplingGetCounterDataInfoP42CUpti_PmSampling_GetCounterDataInfo_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingGetCounterDataInfo CUpti_PmSampling_GetCounterDataInfo_Params  * pParams Get the counter data info like number of samples, number of populated samples and number of completed samples in a counter data image. Parameters pParams \u2013 A pointer to CUpti_PmSampling_GetCounterDataInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1576, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingGetCounterDataInfo::pParams", "display_name": "cuptiPmSamplingGetCounterDataInfo::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433cuptiPmSamplingGetCounterDataInfoP42CUpti_PmSampling_GetCounterDataInfo_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingGetCounterDataInfo CUpti_PmSampling_GetCounterDataInfo_Params  * pParams Get the counter data info like number of samples, number of populated samples and number of completed samples in a counter data image. Parameters pParams \u2013 A pointer to CUpti_PmSampling_GetCounterDataInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1577, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingGetCounterDataSize", "display_name": "cuptiPmSamplingGetCounterDataSize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433cuptiPmSamplingGetCounterDataSizeP42CUpti_PmSampling_GetCounterDataSize_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingGetCounterDataSize CUpti_PmSampling_GetCounterDataSize_Params  * pParams Query the size of the counter data image which will be used to store the metrics data. User need to allocate the memory for the counter data image based on the size returned by this API. Parameters pParams \u2013 A pointer to CUpti_PmSampling_GetCounterDataSize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling GetCounterDataSize is called without enabling PM sampling CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1578, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingGetCounterDataSize::pParams", "display_name": "cuptiPmSamplingGetCounterDataSize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv433cuptiPmSamplingGetCounterDataSizeP42CUpti_PmSampling_GetCounterDataSize_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingGetCounterDataSize CUpti_PmSampling_GetCounterDataSize_Params  * pParams Query the size of the counter data image which will be used to store the metrics data. User need to allocate the memory for the counter data image based on the size returned by this API. Parameters pParams \u2013 A pointer to CUpti_PmSampling_GetCounterDataSize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling GetCounterDataSize is called without enabling PM sampling CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1579, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingSetConfig", "display_name": "cuptiPmSamplingSetConfig", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv424cuptiPmSamplingSetConfigP33CUpti_PmSampling_SetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingSetConfig CUpti_PmSampling_SetConfig_Params  * pParams Set the configuration for PM sampling like sampling interval, maximum number of samples filled in HW buffer, trigger mode and the config image which has scheduling info for metric collection. Parameters pParams \u2013 A pointer to CUpti_PmSampling_SetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 for config image which require multiple passes for data collection", "keywords": []}, {"id": 1580, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingSetConfig::pParams", "display_name": "cuptiPmSamplingSetConfig::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv424cuptiPmSamplingSetConfigP33CUpti_PmSampling_SetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingSetConfig CUpti_PmSampling_SetConfig_Params  * pParams Set the configuration for PM sampling like sampling interval, maximum number of samples filled in HW buffer, trigger mode and the config image which has scheduling info for metric collection. Parameters pParams \u2013 A pointer to CUpti_PmSampling_SetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 for config image which require multiple passes for data collection", "keywords": []}, {"id": 1581, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingStart", "display_name": "cuptiPmSamplingStart", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv420cuptiPmSamplingStartP29CUpti_PmSampling_Start_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingStart CUpti_PmSampling_Start_Params  * pParams Start the PM sampling. The GPU will start collecting the metrics data periodically based on trigger type and sampling interval passed in CUpti_PmSampling_SetConfig_Params . The collected data will be stored in the hardware buffer. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Start_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling Start is called without enabling PM sampling, and PM sampling is already started CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1582, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingStart::pParams", "display_name": "cuptiPmSamplingStart::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv420cuptiPmSamplingStartP29CUpti_PmSampling_Start_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingStart CUpti_PmSampling_Start_Params  * pParams Start the PM sampling. The GPU will start collecting the metrics data periodically based on trigger type and sampling interval passed in CUpti_PmSampling_SetConfig_Params . The collected data will be stored in the hardware buffer. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Start_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling Start is called without enabling PM sampling, and PM sampling is already started CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1583, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingStop", "display_name": "cuptiPmSamplingStop", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv419cuptiPmSamplingStopP28CUpti_PmSampling_Stop_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingStop CUpti_PmSampling_Stop_Params  * pParams Stop the PM sampling. The GPU will stop collecting the metrics data. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Stop_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling Stop is called without enabling PM sampling, and PM sampling is already stopped CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1584, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "cpp", "name": "cuptiPmSamplingStop::pParams", "display_name": "cuptiPmSamplingStop::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "_CPPv419cuptiPmSamplingStopP28CUpti_PmSampling_Stop_Params", "priority": 1, "content": "CUptiResult  cuptiPmSamplingStop CUpti_PmSampling_Stop_Params  * pParams Stop the PM sampling. The GPU will stop collecting the metrics data. Parameters pParams \u2013 A pointer to CUpti_PmSampling_Stop_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if PM sampling Stop is called without enabling PM sampling, and PM sampling is already stopped CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1585, "doc_id": 1585, "filename": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "display_name": "CUPTI PM Sampling API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___p_m___s_a_m_p_l_i_n_g___a_p_i", "anchor": "", "priority": -1, "content": "Functions to enable, disable, start, stop, and decode PM sampling. Data Structures CUpti_PmSampling_CounterDataImage_Initialize_Params  Params for cuptiPmSamplingCounterDataImageInitialize. CUpti_PmSampling_CounterData_GetSampleInfo_Params  Params for cuptiPmSamplingCounterDataGetSampleInfo. CUpti_PmSampling_DecodeData_Params  Params for cuptiPmSamplingDecodeData. CUpti_PmSampling_Disable_Params  Params for cuptiPmSamplingDisable. CUpti_PmSampling_Enable_Params  Params for cuptiPmSamplingEnable. CUpti_PmSampling_GetCounterAvailability_Params  Params for cuptiPmSamplingGetCounterData. CUpti_PmSampling_GetCounterDataInfo_Params  Params for cuptiPmSamplingGetCounterDataInfo. CUpti_PmSampling_GetCounterDataSize_Params  Params for cuptiPmSamplingGetCounterDataSize. CUpti_PmSampling_SetConfig_Params  Params for cuptiPmSamplingSetConfig. CUpti_PmSampling_Start_Params  Params for cuptiPmSamplingStart. CUpti_PmSampling_Stop_Params  Params for cuptiPmSamplingStop. Macros CUpti_PmSampling_CounterDataImage_Initialize_Params_STRUCT_SIZE   CUpti_PmSampling_CounterData_GetSampleInfo_Params_STRUCT_SIZE   CUpti_PmSampling_DecodeData_Params_STRUCT_SIZE   CUpti_PmSampling_Disable_Params_STRUCT_SIZE   CUpti_PmSampling_Enable_Params_STRUCT_SIZE   CUpti_PmSampling_GetCounterAvailability_Params_STRUCT_SIZE   CUpti_PmSampling_GetCounterDataInfo_Params_STRUCT_SIZE   CUpti_PmSampling_GetCounterDataSize_Params_STRUCT_SIZE   CUpti_PmSampling_SetConfig_Params_STRUCT_SIZE   CUpti_PmSampling_Start_Params_STRUCT_SIZE   CUpti_PmSampling_Stop_Params_STRUCT_SIZE   Enumerations CUpti_PmSampling_DecodeStopReason   CUpti_PmSampling_TriggerMode   Functions CUptiResult  cuptiPmSamplingCounterDataGetSampleInfo (CUpti_PmSampling_CounterData_GetSampleInfo_Params *pParams) Get the sample info (start and end time stamp) for the given sample index. CUptiResult  cuptiPmSamplingCounterDataImageInitialize (CUpti_PmSampling_CounterDataImage_Initialize_Params *pParams) Initialize the counter data to CUPTI record format for storing the metric data. CUptiResult  cuptiPmSamplingDecodeData (CUpti_PmSampling_DecodeData_Params *pParams) Decode the metrics data stored in the hardware buffer to the counter data image. CUptiResult  cuptiPmSamplingDisable (CUpti_PmSampling_Disable_Params *pParams) Disable PM sampling on the CUDA device and destroy the PM sampling object. CUptiResult  cuptiPmSamplingEnable (CUpti_PmSampling_Enable_Params *pParams) Create a PM sampling object and enable PM sampling on the CUDA device. CUptiResult  cuptiPmSamplingGetCounterAvailability (CUpti_PmSampling_GetCounterAvailability_Params *pParams) Query counter availibility information in a buffer which can be used to filter unavailable raw metrics on host. CUptiResult  cuptiPmSamplingGetCounterDataInfo (CUpti_PmSampling_GetCounterDataInfo_Params *pParams) Get the counter data info like number of samples, number of populated samples and number of completed samples in a counter data image. CUptiResult  cuptiPmSamplingGetCounterDataSize (CUpti_PmSampling_GetCounterDataSize_Params *pParams) Query the size of the counter data image which will be used to store the metrics data. CUptiResult  cuptiPmSamplingSetConfig (CUpti_PmSampling_SetConfig_Params *pParams) Set the configuration for PM sampling like sampling interval, maximum number of samples filled in HW buffer, trigger mode and the config image which has scheduling info for metric collection. CUptiResult  cuptiPmSamplingStart (CUpti_PmSampling_Start_Params *pParams) Start the PM sampling. CUptiResult  cuptiPmSamplingStop (CUpti_PmSampling_Stop_Params *pParams) Stop the PM sampling. Typedefs CUpti_PmSampling_Object", "keywords": []}, {"id": 1586, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_BeginPass_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_BeginPass_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_BeginPass_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_BeginPass_Params_STRUCT_SIZE", "keywords": []}, {"id": 1587, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_BeginSession_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_BeginSession_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_BeginSession_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_BeginSession_Params_STRUCT_SIZE", "keywords": []}, {"id": 1588, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE", "display_name": "CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE", "keywords": []}, {"id": 1589, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1590, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_CounterDataImage_CalculateSize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_CounterDataImage_CalculateSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1591, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params_STRUCT_SIZE", "keywords": []}, {"id": 1592, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1593, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_DeInitialize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_DeInitialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_DeInitialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_DeInitialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1594, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_DeviceSupported_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_DeviceSupported_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_DeviceSupported_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_DeviceSupported_Params_STRUCT_SIZE", "keywords": []}, {"id": 1595, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE", "keywords": []}, {"id": 1596, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE", "keywords": []}, {"id": 1597, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_EndPass_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_EndPass_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_EndPass_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_EndPass_Params_STRUCT_SIZE", "keywords": []}, {"id": 1598, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_EndSession_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_EndSession_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_EndSession_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_EndSession_Params_STRUCT_SIZE", "keywords": []}, {"id": 1599, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE", "keywords": []}, {"id": 1600, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_GetCounterAvailability_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_GetCounterAvailability_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_GetCounterAvailability_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_GetCounterAvailability_Params_STRUCT_SIZE", "keywords": []}, {"id": 1601, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Initialize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Initialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_Initialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1602, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_IsPassCollected_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_IsPassCollected_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_IsPassCollected_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_IsPassCollected_Params_STRUCT_SIZE", "keywords": []}, {"id": 1603, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_PopRange_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_PopRange_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_PopRange_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_PopRange_Params_STRUCT_SIZE", "keywords": []}, {"id": 1604, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_PushRange_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_PushRange_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_PushRange_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_PushRange_Params_STRUCT_SIZE", "keywords": []}, {"id": 1605, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_SetConfig_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_SetConfig_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_SetConfig_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_SetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 1606, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 1607, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ApplicationReplay", "display_name": "CUPTI_ApplicationReplay", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode23CUPTI_ApplicationReplayE", "priority": 1, "content": "enumerator  CUPTI_ApplicationReplay Replay is done by CUPTI user around the process.", "keywords": []}, {"id": 1608, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_AutoRange", "display_name": "CUPTI_AutoRange", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange15CUPTI_AutoRangeE", "priority": 1, "content": "enumerator  CUPTI_AutoRange Ranges are auto defined around each kernel in a profiling session.", "keywords": []}, {"id": 1609, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_KernelReplay", "display_name": "CUPTI_KernelReplay", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode18CUPTI_KernelReplayE", "priority": 1, "content": "enumerator  CUPTI_KernelReplay Replay is done around kernel implicitly by CUPTI.", "keywords": []}, {"id": 1610, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_CONFIGURATION_DISABLED", "display_name": "CUPTI_PROFILER_CONFIGURATION_DISABLED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level37CUPTI_PROFILER_CONFIGURATION_DISABLEDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_DISABLED Profiling would be available for this configuration, but was disabled by the system.", "keywords": []}, {"id": 1611, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_CONFIGURATION_SUPPORTED", "display_name": "CUPTI_PROFILER_CONFIGURATION_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level38CUPTI_PROFILER_CONFIGURATION_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_SUPPORTED Profiling is supported. For specific feature fields, this means that the current configuration of this feature works with profiling. For instance, SLI-enabled devices do not support profiling, and this value would only be returned for devices which are not SLI-enabled.", "keywords": []}, {"id": 1612, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_CONFIGURATION_UNKNOWN", "display_name": "CUPTI_PROFILER_CONFIGURATION_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level36CUPTI_PROFILER_CONFIGURATION_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_UNKNOWN Configuration support level unknown - either detection code errored out before setting this value, or unable to determine it.", "keywords": []}, {"id": 1613, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED", "display_name": "CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level40CUPTI_PROFILER_CONFIGURATION_UNSUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED Profiling is unavailable. For specific feature fields, this means that the current configuration of this feature does not work with profiling. For instance, SLI-enabled devices do not support profiling, and this value would be returned for SLI on an SLI-enabled device.", "keywords": []}, {"id": 1614, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_PC_SAMPLING", "display_name": "CUPTI_PROFILER_PC_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API26CUPTI_PROFILER_PC_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_PC_SAMPLING CUPTI APIs collecting pc sampling data (cuptiPcSampling*)", "keywords": []}, {"id": 1615, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_PM_SAMPLING", "display_name": "CUPTI_PROFILER_PM_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API26CUPTI_PROFILER_PM_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_PM_SAMPLING CUPTI APIs collecting PM Sampling data (cuptiPmSampling*)", "keywords": []}, {"id": 1616, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_RANGE_PROFILING", "display_name": "CUPTI_PROFILER_RANGE_PROFILING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API30CUPTI_PROFILER_RANGE_PROFILINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_RANGE_PROFILING CUPTI APIs for range based profiling (cuptiProfiler*)", "keywords": []}, {"id": 1617, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_SASS_METRICS", "display_name": "CUPTI_PROFILER_SASS_METRICS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API27CUPTI_PROFILER_SASS_METRICSE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_SASS_METRICS CUPTI APIs collecting SASS metrics data (cuptiSassMetrics*)", "keywords": []}, {"id": 1618, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_UNKNOWN", "display_name": "CUPTI_PROFILER_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API22CUPTI_PROFILER_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_UNKNOWN", "keywords": []}, {"id": 1619, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_Range_COUNT", "display_name": "CUPTI_Range_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange17CUPTI_Range_COUNTE", "priority": 1, "content": "enumerator  CUPTI_Range_COUNT Range count.", "keywords": []}, {"id": 1620, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_Range_INVALID", "display_name": "CUPTI_Range_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange19CUPTI_Range_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_Range_INVALID Invalid value.", "keywords": []}, {"id": 1621, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_Replay_COUNT", "display_name": "CUPTI_Replay_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode18CUPTI_Replay_COUNTE", "priority": 1, "content": "enumerator  CUPTI_Replay_COUNT Replay count.", "keywords": []}, {"id": 1622, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_Replay_INVALID", "display_name": "CUPTI_Replay_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode20CUPTI_Replay_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_Replay_INVALID Invalid Value.", "keywords": []}, {"id": 1623, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_UserRange", "display_name": "CUPTI_UserRange", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange15CUPTI_UserRangeE", "priority": 1, "content": "enumerator  CUPTI_UserRange A range in which metric data to be collected is defined by the user.", "keywords": []}, {"id": 1624, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_UserReplay", "display_name": "CUPTI_UserReplay", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode16CUPTI_UserReplayE", "priority": 1, "content": "enumerator  CUPTI_UserReplay Replay is done by CUPTI user within a process.", "keywords": []}, {"id": 1625, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerRange", "display_name": "CUpti_ProfilerRange", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv419CUpti_ProfilerRange", "priority": 1, "content": "enum  CUpti_ProfilerRange Profiler range attribute. A metric enabled in the session\u2019s configuration is collected separately per unique range-stack in the pass. This is an attribute to collect metrics around each kernel in a profiling session or in an user defined range. Values:", "keywords": []}, {"id": 1626, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerRange::CUPTI_AutoRange", "display_name": "CUpti_ProfilerRange::CUPTI_AutoRange", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange15CUPTI_AutoRangeE", "priority": 1, "content": "enumerator  CUPTI_AutoRange Ranges are auto defined around each kernel in a profiling session.", "keywords": []}, {"id": 1627, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerRange::CUPTI_Range_COUNT", "display_name": "CUpti_ProfilerRange::CUPTI_Range_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange17CUPTI_Range_COUNTE", "priority": 1, "content": "enumerator  CUPTI_Range_COUNT Range count.", "keywords": []}, {"id": 1628, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerRange::CUPTI_Range_INVALID", "display_name": "CUpti_ProfilerRange::CUPTI_Range_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange19CUPTI_Range_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_Range_INVALID Invalid value.", "keywords": []}, {"id": 1629, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerRange::CUPTI_UserRange", "display_name": "CUpti_ProfilerRange::CUPTI_UserRange", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N19CUpti_ProfilerRange15CUPTI_UserRangeE", "priority": 1, "content": "enumerator  CUPTI_UserRange A range in which metric data to be collected is defined by the user.", "keywords": []}, {"id": 1630, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerReplayMode", "display_name": "CUpti_ProfilerReplayMode", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv424CUpti_ProfilerReplayMode", "priority": 1, "content": "enum  CUpti_ProfilerReplayMode Profiler replay attribute. For metrics which require multipass collection, a replay of the GPU kernel(s) is required. This is an attribute which specify how the replay of the kernel(s) to be measured is done. Values:", "keywords": []}, {"id": 1631, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerReplayMode::CUPTI_ApplicationReplay", "display_name": "CUpti_ProfilerReplayMode::CUPTI_ApplicationReplay", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode23CUPTI_ApplicationReplayE", "priority": 1, "content": "enumerator  CUPTI_ApplicationReplay Replay is done by CUPTI user around the process.", "keywords": []}, {"id": 1632, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerReplayMode::CUPTI_KernelReplay", "display_name": "CUpti_ProfilerReplayMode::CUPTI_KernelReplay", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode18CUPTI_KernelReplayE", "priority": 1, "content": "enumerator  CUPTI_KernelReplay Replay is done around kernel implicitly by CUPTI.", "keywords": []}, {"id": 1633, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerReplayMode::CUPTI_Replay_COUNT", "display_name": "CUpti_ProfilerReplayMode::CUPTI_Replay_COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode18CUPTI_Replay_COUNTE", "priority": 1, "content": "enumerator  CUPTI_Replay_COUNT Replay count.", "keywords": []}, {"id": 1634, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerReplayMode::CUPTI_Replay_INVALID", "display_name": "CUpti_ProfilerReplayMode::CUPTI_Replay_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode20CUPTI_Replay_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_Replay_INVALID Invalid Value.", "keywords": []}, {"id": 1635, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerReplayMode::CUPTI_UserReplay", "display_name": "CUpti_ProfilerReplayMode::CUPTI_UserReplay", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N24CUpti_ProfilerReplayMode16CUPTI_UserReplayE", "priority": 1, "content": "enumerator  CUPTI_UserReplay Replay is done by CUPTI user within a process.", "keywords": []}, {"id": 1636, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_API", "display_name": "CUpti_Profiler_API", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv418CUpti_Profiler_API", "priority": 1, "content": "enum  CUpti_Profiler_API Profiler API types. Values:", "keywords": []}, {"id": 1637, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_API::CUPTI_PROFILER_PC_SAMPLING", "display_name": "CUpti_Profiler_API::CUPTI_PROFILER_PC_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API26CUPTI_PROFILER_PC_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_PC_SAMPLING CUPTI APIs collecting pc sampling data (cuptiPcSampling*)", "keywords": []}, {"id": 1638, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_API::CUPTI_PROFILER_PM_SAMPLING", "display_name": "CUpti_Profiler_API::CUPTI_PROFILER_PM_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API26CUPTI_PROFILER_PM_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_PM_SAMPLING CUPTI APIs collecting PM Sampling data (cuptiPmSampling*)", "keywords": []}, {"id": 1639, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_API::CUPTI_PROFILER_RANGE_PROFILING", "display_name": "CUpti_Profiler_API::CUPTI_PROFILER_RANGE_PROFILING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API30CUPTI_PROFILER_RANGE_PROFILINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_RANGE_PROFILING CUPTI APIs for range based profiling (cuptiProfiler*)", "keywords": []}, {"id": 1640, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_API::CUPTI_PROFILER_SASS_METRICS", "display_name": "CUpti_Profiler_API::CUPTI_PROFILER_SASS_METRICS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API27CUPTI_PROFILER_SASS_METRICSE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_SASS_METRICS CUPTI APIs collecting SASS metrics data (cuptiSassMetrics*)", "keywords": []}, {"id": 1641, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_API::CUPTI_PROFILER_UNKNOWN", "display_name": "CUpti_Profiler_API::CUPTI_PROFILER_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N18CUpti_Profiler_API22CUPTI_PROFILER_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_UNKNOWN", "keywords": []}, {"id": 1642, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_Support_Level", "display_name": "CUpti_Profiler_Support_Level", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428CUpti_Profiler_Support_Level", "priority": 1, "content": "enum  CUpti_Profiler_Support_Level Generic support level enum for CUPTI. Values:", "keywords": []}, {"id": 1643, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_DISABLED", "display_name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_DISABLED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level37CUPTI_PROFILER_CONFIGURATION_DISABLEDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_DISABLED Profiling would be available for this configuration, but was disabled by the system.", "keywords": []}, {"id": 1644, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_SUPPORTED", "display_name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level38CUPTI_PROFILER_CONFIGURATION_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_SUPPORTED Profiling is supported. For specific feature fields, this means that the current configuration of this feature works with profiling. For instance, SLI-enabled devices do not support profiling, and this value would only be returned for devices which are not SLI-enabled.", "keywords": []}, {"id": 1645, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_UNKNOWN", "display_name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level36CUPTI_PROFILER_CONFIGURATION_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_UNKNOWN Configuration support level unknown - either detection code errored out before setting this value, or unable to determine it.", "keywords": []}, {"id": 1646, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED", "display_name": "CUpti_Profiler_Support_Level::CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv4N28CUpti_Profiler_Support_Level40CUPTI_PROFILER_CONFIGURATION_UNSUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_CONFIGURATION_UNSUPPORTED Profiling is unavailable. For specific feature fields, this means that the current configuration of this feature does not work with profiling. For instance, SLI-enabled devices do not support profiling, and this value would be returned for SLI on an SLI-enabled device.", "keywords": []}, {"id": 1647, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerBeginPass", "display_name": "cuptiProfilerBeginPass", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiProfilerBeginPassP31CUpti_Profiler_BeginPass_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerBeginPass CUpti_Profiler_BeginPass_Params  * pParams Replay API: used for multipass collection. These APIs are used if user chooses to replay by itself CUPTI_UserReplay or CUPTI_ApplicationReplay for multipass collection of the metrics configurations. It\u2019s a no-op in case of CUPTI_KernelReplay .", "keywords": []}, {"id": 1648, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerBeginPass::pParams", "display_name": "cuptiProfilerBeginPass::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiProfilerBeginPassP31CUpti_Profiler_BeginPass_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerBeginPass CUpti_Profiler_BeginPass_Params  * pParams Replay API: used for multipass collection. These APIs are used if user chooses to replay by itself CUPTI_UserReplay or CUPTI_ApplicationReplay for multipass collection of the metrics configurations. It\u2019s a no-op in case of CUPTI_KernelReplay .", "keywords": []}, {"id": 1649, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerBeginSession", "display_name": "cuptiProfilerBeginSession", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv425cuptiProfilerBeginSessionP34CUpti_Profiler_BeginSession_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerBeginSession CUpti_Profiler_BeginSession_Params  * pParams Begin profiling session sets up the profiling on the device. Although, it doesn\u2019t start the profiling but GPU resources needed for profiling are allocated. Outside of a session, the GPU will return to its normal operating state.", "keywords": []}, {"id": 1650, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerBeginSession::pParams", "display_name": "cuptiProfilerBeginSession::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv425cuptiProfilerBeginSessionP34CUpti_Profiler_BeginSession_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerBeginSession CUpti_Profiler_BeginSession_Params  * pParams Begin profiling session sets up the profiling on the device. Although, it doesn\u2019t start the profiling but GPU resources needed for profiling are allocated. Outside of a session, the GPU will return to its normal operating state.", "keywords": []}, {"id": 1651, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageCalculateScratchBufferSize", "display_name": "cuptiProfilerCounterDataImageCalculateScratchBufferSize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv455cuptiProfilerCounterDataImageCalculateScratchBufferSizeP65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageCalculateScratchBufferSize CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params  * pParams A temporary storage for CounterData image needed for internal operations. Use these APIs to calculate the allocation size and initialize counterData image scratch buffer.", "keywords": []}, {"id": 1652, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageCalculateScratchBufferSize::pParams", "display_name": "cuptiProfilerCounterDataImageCalculateScratchBufferSize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv455cuptiProfilerCounterDataImageCalculateScratchBufferSizeP65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageCalculateScratchBufferSize CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params  * pParams A temporary storage for CounterData image needed for internal operations. Use these APIs to calculate the allocation size and initialize counterData image scratch buffer.", "keywords": []}, {"id": 1653, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageCalculateSize", "display_name": "cuptiProfilerCounterDataImageCalculateSize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv442cuptiProfilerCounterDataImageCalculateSizeP52CUpti_Profiler_CounterDataImage_CalculateSize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageCalculateSize CUpti_Profiler_CounterDataImage_CalculateSize_Params  * pParams A CounterData image allocates space for values for each counter for each range. User borne the resposibility of managing the counterDataImage allocations. CounterDataPrefix contains meta data about the metrics that will be stored in counterDataImage. Use these APIs to calculate the allocation size and initialize counterData image.", "keywords": []}, {"id": 1654, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageCalculateSize::pParams", "display_name": "cuptiProfilerCounterDataImageCalculateSize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv442cuptiProfilerCounterDataImageCalculateSizeP52CUpti_Profiler_CounterDataImage_CalculateSize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageCalculateSize CUpti_Profiler_CounterDataImage_CalculateSize_Params  * pParams A CounterData image allocates space for values for each counter for each range. User borne the resposibility of managing the counterDataImage allocations. CounterDataPrefix contains meta data about the metrics that will be stored in counterDataImage. Use these APIs to calculate the allocation size and initialize counterData image.", "keywords": []}, {"id": 1655, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageInitialize", "display_name": "cuptiProfilerCounterDataImageInitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv439cuptiProfilerCounterDataImageInitializeP49CUpti_Profiler_CounterDataImage_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageInitialize CUpti_Profiler_CounterDataImage_Initialize_Params  * pParams", "keywords": []}, {"id": 1656, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageInitialize::pParams", "display_name": "cuptiProfilerCounterDataImageInitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv439cuptiProfilerCounterDataImageInitializeP49CUpti_Profiler_CounterDataImage_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageInitialize CUpti_Profiler_CounterDataImage_Initialize_Params  * pParams", "keywords": []}, {"id": 1657, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageInitializeScratchBuffer", "display_name": "cuptiProfilerCounterDataImageInitializeScratchBuffer", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv452cuptiProfilerCounterDataImageInitializeScratchBufferP62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageInitializeScratchBuffer CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params  * pParams", "keywords": []}, {"id": 1658, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerCounterDataImageInitializeScratchBuffer::pParams", "display_name": "cuptiProfilerCounterDataImageInitializeScratchBuffer::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv452cuptiProfilerCounterDataImageInitializeScratchBufferP62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerCounterDataImageInitializeScratchBuffer CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params  * pParams", "keywords": []}, {"id": 1659, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerDeInitialize", "display_name": "cuptiProfilerDeInitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv425cuptiProfilerDeInitializeP34CUpti_Profiler_DeInitialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerDeInitialize CUpti_Profiler_DeInitialize_Params  * pParams DeInitializes the profiler interface.", "keywords": []}, {"id": 1660, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerDeInitialize::pParams", "display_name": "cuptiProfilerDeInitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv425cuptiProfilerDeInitializeP34CUpti_Profiler_DeInitialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerDeInitialize CUpti_Profiler_DeInitialize_Params  * pParams DeInitializes the profiler interface.", "keywords": []}, {"id": 1661, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerDeviceSupported", "display_name": "cuptiProfilerDeviceSupported", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiProfilerDeviceSupportedP37CUpti_Profiler_DeviceSupported_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerDeviceSupported CUpti_Profiler_DeviceSupported_Params  * pParams Query device compatibility with Profiling API. Use this call to determine whether a compute device and configuration are compatible with the Profiling API. If the configuration does not support profiling, one of several flags will indicate why.", "keywords": []}, {"id": 1662, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerDeviceSupported::pParams", "display_name": "cuptiProfilerDeviceSupported::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiProfilerDeviceSupportedP37CUpti_Profiler_DeviceSupported_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerDeviceSupported CUpti_Profiler_DeviceSupported_Params  * pParams Query device compatibility with Profiling API. Use this call to determine whether a compute device and configuration are compatible with the Profiling API. If the configuration does not support profiling, one of several flags will indicate why.", "keywords": []}, {"id": 1663, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerDisableProfiling", "display_name": "cuptiProfilerDisableProfiling", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv429cuptiProfilerDisableProfilingP38CUpti_Profiler_DisableProfiling_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerDisableProfiling CUpti_Profiler_DisableProfiling_Params  * pParams Disable Profiling. In CUPTI_AutoRange , these APIs are used to enable/disable profiling for the kernels to be executed in a profiling session.", "keywords": []}, {"id": 1664, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerDisableProfiling::pParams", "display_name": "cuptiProfilerDisableProfiling::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv429cuptiProfilerDisableProfilingP38CUpti_Profiler_DisableProfiling_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerDisableProfiling CUpti_Profiler_DisableProfiling_Params  * pParams Disable Profiling. In CUPTI_AutoRange , these APIs are used to enable/disable profiling for the kernels to be executed in a profiling session.", "keywords": []}, {"id": 1665, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerEnableProfiling", "display_name": "cuptiProfilerEnableProfiling", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiProfilerEnableProfilingP37CUpti_Profiler_EnableProfiling_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerEnableProfiling CUpti_Profiler_EnableProfiling_Params  * pParams Enables Profiling. In CUPTI_AutoRange , these APIs are used to enable/disable profiling for the kernels to be executed in a profiling session.", "keywords": []}, {"id": 1666, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerEnableProfiling::pParams", "display_name": "cuptiProfilerEnableProfiling::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiProfilerEnableProfilingP37CUpti_Profiler_EnableProfiling_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerEnableProfiling CUpti_Profiler_EnableProfiling_Params  * pParams Enables Profiling. In CUPTI_AutoRange , these APIs are used to enable/disable profiling for the kernels to be executed in a profiling session.", "keywords": []}, {"id": 1667, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerEndPass", "display_name": "cuptiProfilerEndPass", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv420cuptiProfilerEndPassP29CUpti_Profiler_EndPass_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerEndPass CUpti_Profiler_EndPass_Params  * pParams Replay API: used for multipass collection. These APIs are used if user chooses to replay by itself CUPTI_UserReplay or CUPTI_ApplicationReplay for multipass collection of the metrics configurations. Its a no-op in case of CUPTI_KernelReplay . Returns information for next pass.", "keywords": []}, {"id": 1668, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerEndPass::pParams", "display_name": "cuptiProfilerEndPass::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv420cuptiProfilerEndPassP29CUpti_Profiler_EndPass_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerEndPass CUpti_Profiler_EndPass_Params  * pParams Replay API: used for multipass collection. These APIs are used if user chooses to replay by itself CUPTI_UserReplay or CUPTI_ApplicationReplay for multipass collection of the metrics configurations. Its a no-op in case of CUPTI_KernelReplay . Returns information for next pass.", "keywords": []}, {"id": 1669, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerEndSession", "display_name": "cuptiProfilerEndSession", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv423cuptiProfilerEndSessionP32CUpti_Profiler_EndSession_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerEndSession CUpti_Profiler_EndSession_Params  * pParams Ends profiling session. Frees up the GPU resources acquired for profiling. Outside of a session, the GPU will return to it\u2019s normal operating state.", "keywords": []}, {"id": 1670, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerEndSession::pParams", "display_name": "cuptiProfilerEndSession::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv423cuptiProfilerEndSessionP32CUpti_Profiler_EndSession_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerEndSession CUpti_Profiler_EndSession_Params  * pParams Ends profiling session. Frees up the GPU resources acquired for profiling. Outside of a session, the GPU will return to it\u2019s normal operating state.", "keywords": []}, {"id": 1671, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerFlushCounterData", "display_name": "cuptiProfilerFlushCounterData", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv429cuptiProfilerFlushCounterDataP38CUpti_Profiler_FlushCounterData_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerFlushCounterData CUpti_Profiler_FlushCounterData_Params  * pParams Decode all the submitted passes. Flush Counter data API to ensure every pass is decoded into the counterDataImage passed at beginSession. This will cause the CPU/GPU sync to collect all the undecoded pass.", "keywords": []}, {"id": 1672, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerFlushCounterData::pParams", "display_name": "cuptiProfilerFlushCounterData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv429cuptiProfilerFlushCounterDataP38CUpti_Profiler_FlushCounterData_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerFlushCounterData CUpti_Profiler_FlushCounterData_Params  * pParams Decode all the submitted passes. Flush Counter data API to ensure every pass is decoded into the counterDataImage passed at beginSession. This will cause the CPU/GPU sync to collect all the undecoded pass.", "keywords": []}, {"id": 1673, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerGetCounterAvailability", "display_name": "cuptiProfilerGetCounterAvailability", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv435cuptiProfilerGetCounterAvailabilityP44CUpti_Profiler_GetCounterAvailability_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerGetCounterAvailability CUpti_Profiler_GetCounterAvailability_Params  * pParams Query counter availibility. Use this API to query counter availability information in a buffer which can be used to filter unavailable raw metrics on host. Note: This API may fail, if any profiling or sampling session is active on the specified context or its device.", "keywords": []}, {"id": 1674, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerGetCounterAvailability::pParams", "display_name": "cuptiProfilerGetCounterAvailability::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv435cuptiProfilerGetCounterAvailabilityP44CUpti_Profiler_GetCounterAvailability_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerGetCounterAvailability CUpti_Profiler_GetCounterAvailability_Params  * pParams Query counter availibility. Use this API to query counter availability information in a buffer which can be used to filter unavailable raw metrics on host. Note: This API may fail, if any profiling or sampling session is active on the specified context or its device.", "keywords": []}, {"id": 1675, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerInitialize", "display_name": "cuptiProfilerInitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv423cuptiProfilerInitializeP32CUpti_Profiler_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerInitialize CUpti_Profiler_Initialize_Params  * pParams Initializes the profiler interface. Loads the required libraries in the process address space. Sets up the hooks with the CUDA driver.", "keywords": []}, {"id": 1676, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerInitialize::pParams", "display_name": "cuptiProfilerInitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv423cuptiProfilerInitializeP32CUpti_Profiler_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerInitialize CUpti_Profiler_Initialize_Params  * pParams Initializes the profiler interface. Loads the required libraries in the process address space. Sets up the hooks with the CUDA driver.", "keywords": []}, {"id": 1677, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerIsPassCollected", "display_name": "cuptiProfilerIsPassCollected", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiProfilerIsPassCollectedP37CUpti_Profiler_IsPassCollected_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerIsPassCollected CUpti_Profiler_IsPassCollected_Params  * pParams Asynchronous call to query if the submitted pass to GPU is collected.", "keywords": []}, {"id": 1678, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerIsPassCollected::pParams", "display_name": "cuptiProfilerIsPassCollected::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiProfilerIsPassCollectedP37CUpti_Profiler_IsPassCollected_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerIsPassCollected CUpti_Profiler_IsPassCollected_Params  * pParams Asynchronous call to query if the submitted pass to GPU is collected.", "keywords": []}, {"id": 1679, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerPopRange", "display_name": "cuptiProfilerPopRange", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv421cuptiProfilerPopRangeP30CUpti_Profiler_PopRange_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerPopRange CUpti_Profiler_PopRange_Params  * pParams Range API\u2019s : Pop user range. Counter data is collected per unique range-stack. Identified by a string label passsed by the user. It\u2019s an invalid operation in case of CUPTI_AutoRange .", "keywords": []}, {"id": 1680, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerPopRange::pParams", "display_name": "cuptiProfilerPopRange::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv421cuptiProfilerPopRangeP30CUpti_Profiler_PopRange_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerPopRange CUpti_Profiler_PopRange_Params  * pParams Range API\u2019s : Pop user range. Counter data is collected per unique range-stack. Identified by a string label passsed by the user. It\u2019s an invalid operation in case of CUPTI_AutoRange .", "keywords": []}, {"id": 1681, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerPushRange", "display_name": "cuptiProfilerPushRange", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiProfilerPushRangeP31CUpti_Profiler_PushRange_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerPushRange CUpti_Profiler_PushRange_Params  * pParams Range API\u2019s : Push user range. Counter data is collected per unique range-stack. Identified by a string label passsed by the user. It\u2019s an invalid operation in case of CUPTI_AutoRange .", "keywords": []}, {"id": 1682, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerPushRange::pParams", "display_name": "cuptiProfilerPushRange::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiProfilerPushRangeP31CUpti_Profiler_PushRange_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerPushRange CUpti_Profiler_PushRange_Params  * pParams Range API\u2019s : Push user range. Counter data is collected per unique range-stack. Identified by a string label passsed by the user. It\u2019s an invalid operation in case of CUPTI_AutoRange .", "keywords": []}, {"id": 1683, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerSetConfig", "display_name": "cuptiProfilerSetConfig", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiProfilerSetConfigP31CUpti_Profiler_SetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerSetConfig CUpti_Profiler_SetConfig_Params  * pParams Set metrics configuration to be profiled. Use these APIs to set the config to profile in a session. It can be used for advanced cases such as where multiple configurations are collected into a single CounterData Image on the need basis, without restarting the session.", "keywords": []}, {"id": 1684, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerSetConfig::pParams", "display_name": "cuptiProfilerSetConfig::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiProfilerSetConfigP31CUpti_Profiler_SetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerSetConfig CUpti_Profiler_SetConfig_Params  * pParams Set metrics configuration to be profiled. Use these APIs to set the config to profile in a session. It can be used for advanced cases such as where multiple configurations are collected into a single CounterData Image on the need basis, without restarting the session.", "keywords": []}, {"id": 1685, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerUnsetConfig", "display_name": "cuptiProfilerUnsetConfig", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv424cuptiProfilerUnsetConfigP33CUpti_Profiler_UnsetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerUnsetConfig CUpti_Profiler_UnsetConfig_Params  * pParams Unset metrics configuration profiled.", "keywords": []}, {"id": 1686, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerUnsetConfig::pParams", "display_name": "cuptiProfilerUnsetConfig::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv424cuptiProfilerUnsetConfigP33CUpti_Profiler_UnsetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerUnsetConfig CUpti_Profiler_UnsetConfig_Params  * pParams Unset metrics configuration profiled.", "keywords": []}, {"id": 1687, "doc_id": 1687, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "display_name": "CUPTI Profiling API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Profiling API. Data Structures CUpti_Profiler_BeginPass_Params  Params for cuptiProfilerBeginPass. CUpti_Profiler_BeginSession_Params  Params for cuptiProfilerBeginSession. CUpti_Profiler_CounterDataImageOptions  Input parameter to define the counterDataImage. CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params  Params for cuptiProfilerCounterDataImageCalculateScratchBufferSize. CUpti_Profiler_CounterDataImage_CalculateSize_Params  Params for cuptiProfilerCounterDataImageCalculateSize. CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params  Params for cuptiProfilerCounterDataImageInitializeScratchBuffer. CUpti_Profiler_CounterDataImage_Initialize_Params  Params for cuptiProfilerCounterDataImageInitialize. CUpti_Profiler_DeInitialize_Params  Default parameter for cuptiProfilerDeInitialize. CUpti_Profiler_DeviceSupported_Params  Params for cuptiProfilerDeviceSupported. CUpti_Profiler_DisableProfiling_Params  Params for cuptiProfilerDisableProfiling. CUpti_Profiler_EnableProfiling_Params  Params for cuptiProfilerEnableProfiling. CUpti_Profiler_EndPass_Params  Params for cuptiProfilerEndPass. CUpti_Profiler_EndSession_Params  Params for cuptiProfilerEndSession. CUpti_Profiler_FlushCounterData_Params  Params for cuptiProfilerFlushCounterData. CUpti_Profiler_GetCounterAvailability_Params  Params for cuptiProfilerGetCounterAvailability. CUpti_Profiler_Initialize_Params  Default parameter for cuptiProfilerInitialize. CUpti_Profiler_IsPassCollected_Params  Params for cuptiProfilerIsPassCollected. CUpti_Profiler_PopRange_Params   CUpti_Profiler_PushRange_Params   CUpti_Profiler_SetConfig_Params  Params for cuptiProfilerSetConfig. CUpti_Profiler_UnsetConfig_Params  Params for cuptiProfilerUnsetConfig. Macros CUpti_Profiler_BeginPass_Params_STRUCT_SIZE   CUpti_Profiler_BeginSession_Params_STRUCT_SIZE   CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE   CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params_STRUCT_SIZE   CUpti_Profiler_CounterDataImage_CalculateSize_Params_STRUCT_SIZE   CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params_STRUCT_SIZE   CUpti_Profiler_CounterDataImage_Initialize_Params_STRUCT_SIZE   CUpti_Profiler_DeInitialize_Params_STRUCT_SIZE   CUpti_Profiler_DeviceSupported_Params_STRUCT_SIZE   CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE   CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE   CUpti_Profiler_EndPass_Params_STRUCT_SIZE   CUpti_Profiler_EndSession_Params_STRUCT_SIZE   CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE   CUpti_Profiler_GetCounterAvailability_Params_STRUCT_SIZE   CUpti_Profiler_Initialize_Params_STRUCT_SIZE   CUpti_Profiler_IsPassCollected_Params_STRUCT_SIZE   CUpti_Profiler_PopRange_Params_STRUCT_SIZE   CUpti_Profiler_PushRange_Params_STRUCT_SIZE   CUpti_Profiler_SetConfig_Params_STRUCT_SIZE   CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE   Enumerations CUpti_ProfilerRange  Profiler range attribute. CUpti_ProfilerReplayMode  Profiler replay attribute. CUpti_Profiler_API  Profiler API types. CUpti_Profiler_Support_Level  Generic support level enum for CUPTI. Functions CUptiResult  cuptiProfilerBeginPass (CUpti_Profiler_BeginPass_Params *pParams) Replay API: used for multipass collection. CUptiResult  cuptiProfilerBeginSession (CUpti_Profiler_BeginSession_Params *pParams) Begin profiling session sets up the profiling on the device. CUptiResult  cuptiProfilerCounterDataImageCalculateScratchBufferSize (CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params *pParams) A temporary storage for CounterData image needed for internal operations. CUptiResult  cuptiProfilerCounterDataImageCalculateSize (CUpti_Profiler_CounterDataImage_CalculateSize_Params *pParams) A CounterData image allocates space for values for each counter for each range. CUptiResult  cuptiProfilerCounterDataImageInitialize (CUpti_Profiler_CounterDataImage_Initialize_Params *pParams)  CUptiResult  cuptiProfilerCounterDataImageInitializeScratchBuffer (CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params *pParams)  CUptiResult  cuptiProfilerDeInitialize (CUpti_Profiler_DeInitialize_Params *pParams) DeInitializes the profiler interface. CUptiResult  cuptiProfilerDeviceSupported (CUpti_Profiler_DeviceSupported_Params *pParams) Query device compatibility with Profiling API. CUptiResult  cuptiProfilerDisableProfiling (CUpti_Profiler_DisableProfiling_Params *pParams) Disable Profiling. CUptiResult  cuptiProfilerEnableProfiling (CUpti_Profiler_EnableProfiling_Params *pParams) Enables Profiling. CUptiResult  cuptiProfilerEndPass (CUpti_Profiler_EndPass_Params *pParams) Replay API: used for multipass collection. CUptiResult  cuptiProfilerEndSession (CUpti_Profiler_EndSession_Params *pParams) Ends profiling session. CUptiResult  cuptiProfilerFlushCounterData (CUpti_Profiler_FlushCounterData_Params *pParams) Decode all the submitted passes. CUptiResult  cuptiProfilerGetCounterAvailability (CUpti_Profiler_GetCounterAvailability_Params *pParams) Query counter availibility. CUptiResult  cuptiProfilerInitialize (CUpti_Profiler_Initialize_Params *pParams) Initializes the profiler interface. CUptiResult  cuptiProfilerIsPassCollected (CUpti_Profiler_IsPassCollected_Params *pParams) Asynchronous call to query if the submitted pass to GPU is collected. CUptiResult  cuptiProfilerPopRange (CUpti_Profiler_PopRange_Params *pParams) Range API&#x27;s : Pop user range. CUptiResult  cuptiProfilerPushRange (CUpti_Profiler_PushRange_Params *pParams) Range API&#x27;s : Push user range. CUptiResult  cuptiProfilerSetConfig (CUpti_Profiler_SetConfig_Params *pParams) Set metrics configuration to be profiled. CUptiResult  cuptiProfilerUnsetConfig (CUpti_Profiler_UnsetConfig_Params *pParams) Unset metrics configuration profiled.", "keywords": []}, {"id": 1688, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_ConfigAddMetrics_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_ConfigAddMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 1689, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_Deinitialize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_Deinitialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_Deinitialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_Deinitialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1690, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_EvaluateToGpuValues_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_EvaluateToGpuValues_Params_STRUCT_SIZE", "keywords": []}, {"id": 1691, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetBaseMetrics_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetBaseMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 1692, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetConfigImageSize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetConfigImageSize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetConfigImageSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1693, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetConfigImage_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetConfigImage_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetConfigImage_Params_STRUCT_SIZE", "keywords": []}, {"id": 1694, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params_STRUCT_SIZE", "keywords": []}, {"id": 1695, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetMetricProperties_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetMetricProperties_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetMetricProperties_Params_STRUCT_SIZE", "keywords": []}, {"id": 1696, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetNumOfPasses_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetNumOfPasses_Params_STRUCT_SIZE", "keywords": []}, {"id": 1697, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetRangeName_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetRangeName_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetRangeName_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetRangeName_Params_STRUCT_SIZE", "keywords": []}, {"id": 1698, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetSubMetrics_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetSubMetrics_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetSubMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 1699, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_GetSupportedChips_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_GetSupportedChips_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_GetSupportedChips_Params_STRUCT_SIZE", "keywords": []}, {"id": 1700, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "c", "name": "CUpti_Profiler_Host_Initialize_Params_STRUCT_SIZE", "display_name": "CUpti_Profiler_Host_Initialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "c.CUpti_Profiler_Host_Initialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_Profiler_Host_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1701, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_TYPE_COUNTER", "display_name": "CUPTI_METRIC_TYPE_COUNTER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType25CUPTI_METRIC_TYPE_COUNTERE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE_COUNTER", "keywords": []}, {"id": 1702, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_TYPE_RATIO", "display_name": "CUPTI_METRIC_TYPE_RATIO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType23CUPTI_METRIC_TYPE_RATIOE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE_RATIO", "keywords": []}, {"id": 1703, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_TYPE_THROUGHPUT", "display_name": "CUPTI_METRIC_TYPE_THROUGHPUT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType28CUPTI_METRIC_TYPE_THROUGHPUTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE_THROUGHPUT", "keywords": []}, {"id": 1704, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_METRIC_TYPE__COUNT", "display_name": "CUPTI_METRIC_TYPE__COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType24CUPTI_METRIC_TYPE__COUNTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE__COUNT", "keywords": []}, {"id": 1705, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_TYPE_PM_SAMPLING", "display_name": "CUPTI_PROFILER_TYPE_PM_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N18CUpti_ProfilerType31CUPTI_PROFILER_TYPE_PM_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_TYPE_PM_SAMPLING", "keywords": []}, {"id": 1706, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_TYPE_PROFILER_INVALID", "display_name": "CUPTI_PROFILER_TYPE_PROFILER_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N18CUpti_ProfilerType36CUPTI_PROFILER_TYPE_PROFILER_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_TYPE_PROFILER_INVALID", "keywords": []}, {"id": 1707, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_PROFILER_TYPE_RANGE_PROFILER", "display_name": "CUPTI_PROFILER_TYPE_RANGE_PROFILER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N18CUpti_ProfilerType34CUPTI_PROFILER_TYPE_RANGE_PROFILERE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_TYPE_RANGE_PROFILER", "keywords": []}, {"id": 1708, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricType", "display_name": "CUpti_MetricType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv416CUpti_MetricType", "priority": 1, "content": "enum  CUpti_MetricType Values:", "keywords": []}, {"id": 1709, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricType::CUPTI_METRIC_TYPE_COUNTER", "display_name": "CUpti_MetricType::CUPTI_METRIC_TYPE_COUNTER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType25CUPTI_METRIC_TYPE_COUNTERE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE_COUNTER", "keywords": []}, {"id": 1710, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricType::CUPTI_METRIC_TYPE_RATIO", "display_name": "CUpti_MetricType::CUPTI_METRIC_TYPE_RATIO", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType23CUPTI_METRIC_TYPE_RATIOE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE_RATIO", "keywords": []}, {"id": 1711, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricType::CUPTI_METRIC_TYPE_THROUGHPUT", "display_name": "CUpti_MetricType::CUPTI_METRIC_TYPE_THROUGHPUT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType28CUPTI_METRIC_TYPE_THROUGHPUTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE_THROUGHPUT", "keywords": []}, {"id": 1712, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_MetricType::CUPTI_METRIC_TYPE__COUNT", "display_name": "CUpti_MetricType::CUPTI_METRIC_TYPE__COUNT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N16CUpti_MetricType24CUPTI_METRIC_TYPE__COUNTE", "priority": 1, "content": "enumerator  CUPTI_METRIC_TYPE__COUNT", "keywords": []}, {"id": 1713, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerType", "display_name": "CUpti_ProfilerType", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv418CUpti_ProfilerType", "priority": 1, "content": "enum  CUpti_ProfilerType Values:", "keywords": []}, {"id": 1714, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerType::CUPTI_PROFILER_TYPE_PM_SAMPLING", "display_name": "CUpti_ProfilerType::CUPTI_PROFILER_TYPE_PM_SAMPLING", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N18CUpti_ProfilerType31CUPTI_PROFILER_TYPE_PM_SAMPLINGE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_TYPE_PM_SAMPLING", "keywords": []}, {"id": 1715, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerType::CUPTI_PROFILER_TYPE_PROFILER_INVALID", "display_name": "CUpti_ProfilerType::CUPTI_PROFILER_TYPE_PROFILER_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N18CUpti_ProfilerType36CUPTI_PROFILER_TYPE_PROFILER_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_TYPE_PROFILER_INVALID", "keywords": []}, {"id": 1716, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_ProfilerType::CUPTI_PROFILER_TYPE_RANGE_PROFILER", "display_name": "CUpti_ProfilerType::CUPTI_PROFILER_TYPE_RANGE_PROFILER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv4N18CUpti_ProfilerType34CUPTI_PROFILER_TYPE_RANGE_PROFILERE", "priority": 1, "content": "enumerator  CUPTI_PROFILER_TYPE_RANGE_PROFILER", "keywords": []}, {"id": 1717, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Object", "display_name": "CUpti_Profiler_Host_Object", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv426CUpti_Profiler_Host_Object", "priority": 1, "content": "typedef  struct  CUpti_Profiler_Host_Object  CUpti_Profiler_Host_Object", "keywords": []}, {"id": 1718, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostConfigAddMetrics", "display_name": "cuptiProfilerHostConfigAddMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv433cuptiProfilerHostConfigAddMetricsP43CUpti_Profiler_Host_ConfigAddMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostConfigAddMetrics CUpti_Profiler_Host_ConfigAddMetrics_Params  * pParams Add the metrics to the profiler host object for generating the config image. The config image will have the required information to schedule the metrics for collecting the profiling data. Note: PM sampling only supports single pass config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_ConfigAddMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1719, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostConfigAddMetrics::pParams", "display_name": "cuptiProfilerHostConfigAddMetrics::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv433cuptiProfilerHostConfigAddMetricsP43CUpti_Profiler_Host_ConfigAddMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostConfigAddMetrics CUpti_Profiler_Host_ConfigAddMetrics_Params  * pParams Add the metrics to the profiler host object for generating the config image. The config image will have the required information to schedule the metrics for collecting the profiling data. Note: PM sampling only supports single pass config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_ConfigAddMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1720, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostDeinitialize", "display_name": "cuptiProfilerHostDeinitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv429cuptiProfilerHostDeinitializeP39CUpti_Profiler_Host_Deinitialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostDeinitialize CUpti_Profiler_Host_Deinitialize_Params  * pParams Deinitialize and destroy the profiler host object (CUpti_Profiler_Host_Object). Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_Deinitialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1721, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostDeinitialize::pParams", "display_name": "cuptiProfilerHostDeinitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv429cuptiProfilerHostDeinitializeP39CUpti_Profiler_Host_Deinitialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostDeinitialize CUpti_Profiler_Host_Deinitialize_Params  * pParams Deinitialize and destroy the profiler host object (CUpti_Profiler_Host_Object). Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_Deinitialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1722, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostEvaluateToGpuValues", "display_name": "cuptiProfilerHostEvaluateToGpuValues", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv436cuptiProfilerHostEvaluateToGpuValuesP46CUpti_Profiler_Host_EvaluateToGpuValues_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostEvaluateToGpuValues CUpti_Profiler_Host_EvaluateToGpuValues_Params  * pParams Evaluate the metric values for the range index stored in the counter data. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_EvaluateToGpuValues_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1723, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostEvaluateToGpuValues::pParams", "display_name": "cuptiProfilerHostEvaluateToGpuValues::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv436cuptiProfilerHostEvaluateToGpuValuesP46CUpti_Profiler_Host_EvaluateToGpuValues_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostEvaluateToGpuValues CUpti_Profiler_Host_EvaluateToGpuValues_Params  * pParams Evaluate the metric values for the range index stored in the counter data. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_EvaluateToGpuValues_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1724, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetBaseMetrics", "display_name": "cuptiProfilerHostGetBaseMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv431cuptiProfilerHostGetBaseMetricsP41CUpti_Profiler_Host_GetBaseMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetBaseMetrics CUpti_Profiler_Host_GetBaseMetrics_Params  * pParams Get the list of supported base metrics for the chip. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetBaseMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1725, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetBaseMetrics::pParams", "display_name": "cuptiProfilerHostGetBaseMetrics::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv431cuptiProfilerHostGetBaseMetricsP41CUpti_Profiler_Host_GetBaseMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetBaseMetrics CUpti_Profiler_Host_GetBaseMetrics_Params  * pParams Get the list of supported base metrics for the chip. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetBaseMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1726, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetConfigImage", "display_name": "cuptiProfilerHostGetConfigImage", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv431cuptiProfilerHostGetConfigImageP41CUpti_Profiler_Host_GetConfigImage_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetConfigImage CUpti_Profiler_Host_GetConfigImage_Params  * pParams Get the config image for the metrics added to the profiler host object. User will pass the allocated buffer to store the config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetConfigImage_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1727, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetConfigImage::pParams", "display_name": "cuptiProfilerHostGetConfigImage::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv431cuptiProfilerHostGetConfigImageP41CUpti_Profiler_Host_GetConfigImage_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetConfigImage CUpti_Profiler_Host_GetConfigImage_Params  * pParams Get the config image for the metrics added to the profiler host object. User will pass the allocated buffer to store the config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetConfigImage_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1728, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetConfigImageSize", "display_name": "cuptiProfilerHostGetConfigImageSize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv435cuptiProfilerHostGetConfigImageSizeP45CUpti_Profiler_Host_GetConfigImageSize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetConfigImageSize CUpti_Profiler_Host_GetConfigImageSize_Params  * pParams Get the size of the config image for the metrics added to the profiler host object. Users need to allocate the buffer for storing the config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetConfigImageSize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1729, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetConfigImageSize::pParams", "display_name": "cuptiProfilerHostGetConfigImageSize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv435cuptiProfilerHostGetConfigImageSizeP45CUpti_Profiler_Host_GetConfigImageSize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetConfigImageSize CUpti_Profiler_Host_GetConfigImageSize_Params  * pParams Get the size of the config image for the metrics added to the profiler host object. Users need to allocate the buffer for storing the config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetConfigImageSize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1730, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetMaxNumHardwareMetricsPerPass", "display_name": "cuptiProfilerHostGetMaxNumHardwareMetricsPerPass", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv448cuptiProfilerHostGetMaxNumHardwareMetricsPerPassP58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetMaxNumHardwareMetricsPerPass CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params  * pParams Get the maximum number of hardware metrics (metric names which doesn\u2019t include sass keyword) that can be scheduled in a single pass for a chip. While this represents a theoretical upper limit, practical constraints may prevent reaching this threshold for a specific set of metrics. Furthermore, the maximum achievable value is contingent upon the characteristics and architecture of the chip in question. Use cuptiProfilerHostGetNumOfPasses API for getting the actual number of passes required for the for collecting the profiling data for the scheduled metrics in a config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1731, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetMaxNumHardwareMetricsPerPass::pParams", "display_name": "cuptiProfilerHostGetMaxNumHardwareMetricsPerPass::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv448cuptiProfilerHostGetMaxNumHardwareMetricsPerPassP58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetMaxNumHardwareMetricsPerPass CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params  * pParams Get the maximum number of hardware metrics (metric names which doesn\u2019t include sass keyword) that can be scheduled in a single pass for a chip. While this represents a theoretical upper limit, practical constraints may prevent reaching this threshold for a specific set of metrics. Furthermore, the maximum achievable value is contingent upon the characteristics and architecture of the chip in question. Use cuptiProfilerHostGetNumOfPasses API for getting the actual number of passes required for the for collecting the profiling data for the scheduled metrics in a config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1732, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetMetricProperties", "display_name": "cuptiProfilerHostGetMetricProperties", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv436cuptiProfilerHostGetMetricPropertiesP46CUpti_Profiler_Host_GetMetricProperties_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetMetricProperties CUpti_Profiler_Host_GetMetricProperties_Params  * pParams Get the properties of the metric. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetMetricProperties_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1733, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetMetricProperties::pParams", "display_name": "cuptiProfilerHostGetMetricProperties::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv436cuptiProfilerHostGetMetricPropertiesP46CUpti_Profiler_Host_GetMetricProperties_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetMetricProperties CUpti_Profiler_Host_GetMetricProperties_Params  * pParams Get the properties of the metric. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetMetricProperties_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1734, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetNumOfPasses", "display_name": "cuptiProfilerHostGetNumOfPasses", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv431cuptiProfilerHostGetNumOfPassesP41CUpti_Profiler_Host_GetNumOfPasses_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetNumOfPasses CUpti_Profiler_Host_GetNumOfPasses_Params  * pParams Get the number of passes required for profiling the scheduled metrics in the config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetNumOfPasses_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1735, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetNumOfPasses::pParams", "display_name": "cuptiProfilerHostGetNumOfPasses::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv431cuptiProfilerHostGetNumOfPassesP41CUpti_Profiler_Host_GetNumOfPasses_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetNumOfPasses CUpti_Profiler_Host_GetNumOfPasses_Params  * pParams Get the number of passes required for profiling the scheduled metrics in the config image. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetNumOfPasses_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1736, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetRangeName", "display_name": "cuptiProfilerHostGetRangeName", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv429cuptiProfilerHostGetRangeNameP39CUpti_Profiler_Host_GetRangeName_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetRangeName CUpti_Profiler_Host_GetRangeName_Params  * pParams Get the range name for the range index stored in the counter data. In Range profiler, for Auto range mode the range name will be numeric value assigned to the kernel based on execution order. For user range mode, the name of range will be based on the range name provided by the user using Push range API. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetRangeName_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1737, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetRangeName::pParams", "display_name": "cuptiProfilerHostGetRangeName::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv429cuptiProfilerHostGetRangeNameP39CUpti_Profiler_Host_GetRangeName_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetRangeName CUpti_Profiler_Host_GetRangeName_Params  * pParams Get the range name for the range index stored in the counter data. In Range profiler, for Auto range mode the range name will be numeric value assigned to the kernel based on execution order. For user range mode, the name of range will be based on the range name provided by the user using Push range API. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetRangeName_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1738, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetSubMetrics", "display_name": "cuptiProfilerHostGetSubMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv430cuptiProfilerHostGetSubMetricsP40CUpti_Profiler_Host_GetSubMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetSubMetrics CUpti_Profiler_Host_GetSubMetrics_Params  * pParams Get the list of supported sub-metrics for the metric. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetSubMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1739, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetSubMetrics::pParams", "display_name": "cuptiProfilerHostGetSubMetrics::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv430cuptiProfilerHostGetSubMetricsP40CUpti_Profiler_Host_GetSubMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetSubMetrics CUpti_Profiler_Host_GetSubMetrics_Params  * pParams Get the list of supported sub-metrics for the metric. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetSubMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_METRIC_NAME \u2013 if the metric name is not valid or not supported for the chip CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1740, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetSupportedChips", "display_name": "cuptiProfilerHostGetSupportedChips", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv434cuptiProfilerHostGetSupportedChipsP44CUpti_Profiler_Host_GetSupportedChips_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetSupportedChips CUpti_Profiler_Host_GetSupportedChips_Params  * pParams Get the list of supported chips. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetSupportedChips_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1741, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostGetSupportedChips::pParams", "display_name": "cuptiProfilerHostGetSupportedChips::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv434cuptiProfilerHostGetSupportedChipsP44CUpti_Profiler_Host_GetSupportedChips_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostGetSupportedChips CUpti_Profiler_Host_GetSupportedChips_Params  * pParams Get the list of supported chips. Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_GetSupportedChips_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1742, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostInitialize", "display_name": "cuptiProfilerHostInitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv427cuptiProfilerHostInitializeP37CUpti_Profiler_Host_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostInitialize CUpti_Profiler_Host_Initialize_Params  * pParams Create and initialize the profiler host object (CUpti_Profiler_Host_Object). Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_Initialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1743, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiProfilerHostInitialize::pParams", "display_name": "cuptiProfilerHostInitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "_CPPv427cuptiProfilerHostInitializeP37CUpti_Profiler_Host_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiProfilerHostInitialize CUpti_Profiler_Host_Initialize_Params  * pParams Create and initialize the profiler host object (CUpti_Profiler_Host_Object). Parameters pParams \u2013 A pointer to CUpti_Profiler_Host_Initialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1744, "doc_id": 1744, "filename": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "display_name": "CUPTI Profiler Host API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___p_r_o_f_i_l_e_r___h_o_s_t___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Profiler Host API. Data Structures CUpti_Profiler_Host_ConfigAddMetrics_Params  Params for cuptiProfilerHostConfigAddMetrics. CUpti_Profiler_Host_Deinitialize_Params  Params for cuptiProfilerHostDeinitialize. CUpti_Profiler_Host_EvaluateToGpuValues_Params  Params for cuptiProfilerHostEvaluateToGpuValues. CUpti_Profiler_Host_GetBaseMetrics_Params  Params for cuptiProfilerHostGetSupportedMetrics. CUpti_Profiler_Host_GetConfigImageSize_Params  Params for cuptiProfilerHostGetConfigImageSize. CUpti_Profiler_Host_GetConfigImage_Params  Params for cuptiProfilerHostGetConfigImage. CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params  Params for cuptiProfilerHostGetMaxNumHardwareMetricsPerPass. CUpti_Profiler_Host_GetMetricProperties_Params  Params for cuptiProfilerHostGetMetricProperties. CUpti_Profiler_Host_GetNumOfPasses_Params  Params for cuptiProfilerHostGetNumOfPasses. CUpti_Profiler_Host_GetRangeName_Params  Params for cuptiProfilerHostGetRangeName. CUpti_Profiler_Host_GetSubMetrics_Params  Params for cuptiProfilerHostGetSubMetrics. CUpti_Profiler_Host_GetSupportedChips_Params  Params for cuptiProfilerHostGetSupportedChips. CUpti_Profiler_Host_Initialize_Params  Params for cuptiProfilerHostInitialize. Macros CUpti_Profiler_Host_ConfigAddMetrics_Params_STRUCT_SIZE   CUpti_Profiler_Host_Deinitialize_Params_STRUCT_SIZE   CUpti_Profiler_Host_EvaluateToGpuValues_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetBaseMetrics_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetConfigImageSize_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetConfigImage_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetMetricProperties_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetNumOfPasses_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetRangeName_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetSubMetrics_Params_STRUCT_SIZE   CUpti_Profiler_Host_GetSupportedChips_Params_STRUCT_SIZE   CUpti_Profiler_Host_Initialize_Params_STRUCT_SIZE   Enumerations CUpti_MetricType   CUpti_ProfilerType   Functions CUptiResult  cuptiProfilerHostConfigAddMetrics (CUpti_Profiler_Host_ConfigAddMetrics_Params *pParams) Add the metrics to the profiler host object for generating the config image. CUptiResult  cuptiProfilerHostDeinitialize (CUpti_Profiler_Host_Deinitialize_Params *pParams) Deinitialize and destroy the profiler host object (CUpti_Profiler_Host_Object). CUptiResult  cuptiProfilerHostEvaluateToGpuValues (CUpti_Profiler_Host_EvaluateToGpuValues_Params *pParams) Evaluate the metric values for the range index stored in the counter data. CUptiResult  cuptiProfilerHostGetBaseMetrics (CUpti_Profiler_Host_GetBaseMetrics_Params *pParams) Get the list of supported base metrics for the chip. CUptiResult  cuptiProfilerHostGetConfigImage (CUpti_Profiler_Host_GetConfigImage_Params *pParams) Get the config image for the metrics added to the profiler host object. CUptiResult  cuptiProfilerHostGetConfigImageSize (CUpti_Profiler_Host_GetConfigImageSize_Params *pParams) Get the size of the config image for the metrics added to the profiler host object. CUptiResult  cuptiProfilerHostGetMaxNumHardwareMetricsPerPass (CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params *pParams) Get the maximum number of hardware metrics (metric names which doesn&#x27;t include sass keyword) that can be scheduled in a single pass for a chip. CUptiResult  cuptiProfilerHostGetMetricProperties (CUpti_Profiler_Host_GetMetricProperties_Params *pParams) Get the properties of the metric. CUptiResult  cuptiProfilerHostGetNumOfPasses (CUpti_Profiler_Host_GetNumOfPasses_Params *pParams) Get the number of passes required for profiling the scheduled metrics in the config image. CUptiResult  cuptiProfilerHostGetRangeName (CUpti_Profiler_Host_GetRangeName_Params *pParams) Get the range name for the range index stored in the counter data. CUptiResult  cuptiProfilerHostGetSubMetrics (CUpti_Profiler_Host_GetSubMetrics_Params *pParams) Get the list of supported sub-metrics for the metric. CUptiResult  cuptiProfilerHostGetSupportedChips (CUpti_Profiler_Host_GetSupportedChips_Params *pParams) Get the list of supported chips. CUptiResult  cuptiProfilerHostInitialize (CUpti_Profiler_Host_Initialize_Params *pParams) Create and initialize the profiler host object (CUpti_Profiler_Host_Object). Typedefs CUpti_Profiler_Host_Object", "keywords": []}, {"id": 1745, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1746, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_CounterData_GetRangeInfo_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params_STRUCT_SIZE", "keywords": []}, {"id": 1747, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_DecodeData_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_DecodeData_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_DecodeData_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_DecodeData_Params_STRUCT_SIZE", "keywords": []}, {"id": 1748, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_Disable_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_Disable_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_Disable_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_Disable_Params_STRUCT_SIZE", "keywords": []}, {"id": 1749, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_Enable_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_Enable_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_Enable_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_Enable_Params_STRUCT_SIZE", "keywords": []}, {"id": 1750, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_GetCounterDataInfo_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_GetCounterDataInfo_Params_STRUCT_SIZE", "keywords": []}, {"id": 1751, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_GetCounterDataSize_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_GetCounterDataSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 1752, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_PopRange_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_PopRange_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_PopRange_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_PopRange_Params_STRUCT_SIZE", "keywords": []}, {"id": 1753, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_PushRange_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_PushRange_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_PushRange_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_PushRange_Params_STRUCT_SIZE", "keywords": []}, {"id": 1754, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_SetConfig_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_SetConfig_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_SetConfig_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_SetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 1755, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_Start_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_Start_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_Start_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_Start_Params_STRUCT_SIZE", "keywords": []}, {"id": 1756, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "c", "name": "CUpti_RangeProfiler_Stop_Params_STRUCT_SIZE", "display_name": "CUpti_RangeProfiler_Stop_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "c.CUpti_RangeProfiler_Stop_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_RangeProfiler_Stop_Params_STRUCT_SIZE", "keywords": []}, {"id": 1757, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Object", "display_name": "CUpti_RangeProfiler_Object", "type": "type", "display_type": "C++ type", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv426CUpti_RangeProfiler_Object", "priority": 1, "content": "typedef  struct  CUpti_RangeProfiler_Object  CUpti_RangeProfiler_Object", "keywords": []}, {"id": 1758, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerCounterDataGetRangeInfo", "display_name": "cuptiRangeProfilerCounterDataGetRangeInfo", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv441cuptiRangeProfilerCounterDataGetRangeInfoP51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerCounterDataGetRangeInfo CUpti_RangeProfiler_CounterData_GetRangeInfo_Params  * pParams Get the range name for the given range index. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_CounterData_GetRangeInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1759, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerCounterDataGetRangeInfo::pParams", "display_name": "cuptiRangeProfilerCounterDataGetRangeInfo::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv441cuptiRangeProfilerCounterDataGetRangeInfoP51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerCounterDataGetRangeInfo CUpti_RangeProfiler_CounterData_GetRangeInfo_Params  * pParams Get the range name for the given range index. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_CounterData_GetRangeInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1760, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerCounterDataImageInitialize", "display_name": "cuptiRangeProfilerCounterDataImageInitialize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv444cuptiRangeProfilerCounterDataImageInitializeP54CUpti_RangeProfiler_CounterDataImage_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerCounterDataImageInitialize CUpti_RangeProfiler_CounterDataImage_Initialize_Params  * pParams Initialize the counter data image with the profiling data for the ranges profiled. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_CounterDataImage_Initialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler CounterDataImageInitialize is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1761, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerCounterDataImageInitialize::pParams", "display_name": "cuptiRangeProfilerCounterDataImageInitialize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv444cuptiRangeProfilerCounterDataImageInitializeP54CUpti_RangeProfiler_CounterDataImage_Initialize_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerCounterDataImageInitialize CUpti_RangeProfiler_CounterDataImage_Initialize_Params  * pParams Initialize the counter data image with the profiling data for the ranges profiled. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_CounterDataImage_Initialize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler CounterDataImageInitialize is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1762, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerDecodeData", "display_name": "cuptiRangeProfilerDecodeData", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiRangeProfilerDecodeDataP37CUpti_RangeProfiler_DecodeData_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerDecodeData CUpti_RangeProfiler_DecodeData_Params  * pParams Decode the profiling data stored in the hardware to the counter data image passed in the SetConfig API. This API should be called after cuptiRangeProfilerStop. The counter data image will be updated with the profiling data for the ranges profiled. For the cases where the number of ranges counter data image can store is less than the number of ranges profiled (= maxRangesPerPass in SetConfig API), the counter data image will report dropped ranges. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_DecodeData_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler DecodeData is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1763, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerDecodeData::pParams", "display_name": "cuptiRangeProfilerDecodeData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv428cuptiRangeProfilerDecodeDataP37CUpti_RangeProfiler_DecodeData_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerDecodeData CUpti_RangeProfiler_DecodeData_Params  * pParams Decode the profiling data stored in the hardware to the counter data image passed in the SetConfig API. This API should be called after cuptiRangeProfilerStop. The counter data image will be updated with the profiling data for the ranges profiled. For the cases where the number of ranges counter data image can store is less than the number of ranges profiled (= maxRangesPerPass in SetConfig API), the counter data image will report dropped ranges. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_DecodeData_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler DecodeData is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1764, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerDisable", "display_name": "cuptiRangeProfilerDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv425cuptiRangeProfilerDisableP34CUpti_RangeProfiler_Disable_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerDisable CUpti_RangeProfiler_Disable_Params  * pParams Disable the range profiler on the CUDA context and destroy the range profiler object. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Disable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid", "keywords": []}, {"id": 1765, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerDisable::pParams", "display_name": "cuptiRangeProfilerDisable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv425cuptiRangeProfilerDisableP34CUpti_RangeProfiler_Disable_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerDisable CUpti_RangeProfiler_Disable_Params  * pParams Disable the range profiler on the CUDA context and destroy the range profiler object. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Disable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid", "keywords": []}, {"id": 1766, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerEnable", "display_name": "cuptiRangeProfilerEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv424cuptiRangeProfilerEnableP33CUpti_RangeProfiler_Enable_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerEnable CUpti_RangeProfiler_Enable_Params  * pParams Create a range profiler object and enable range profiling on the CUDA context. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Enable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_OUT_OF_MEMORY \u2013 if memory allocation fails while creating the PM sampling object CUPTI_ERROR_INSUFFICIENT_PRIVILEGES \u2013 if the user does not have sufficient privileges to perform the operation CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1767, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerEnable::pParams", "display_name": "cuptiRangeProfilerEnable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv424cuptiRangeProfilerEnableP33CUpti_RangeProfiler_Enable_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerEnable CUpti_RangeProfiler_Enable_Params  * pParams Create a range profiler object and enable range profiling on the CUDA context. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Enable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_OUT_OF_MEMORY \u2013 if memory allocation fails while creating the PM sampling object CUPTI_ERROR_INSUFFICIENT_PRIVILEGES \u2013 if the user does not have sufficient privileges to perform the operation CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1768, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerGetCounterDataInfo", "display_name": "cuptiRangeProfilerGetCounterDataInfo", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv436cuptiRangeProfilerGetCounterDataInfoP45CUpti_RangeProfiler_GetCounterDataInfo_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerGetCounterDataInfo CUpti_RangeProfiler_GetCounterDataInfo_Params  * pParams Get the number of ranges stored in the counter data image. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_GetCounterDataInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1769, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerGetCounterDataInfo::pParams", "display_name": "cuptiRangeProfilerGetCounterDataInfo::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv436cuptiRangeProfilerGetCounterDataInfoP45CUpti_RangeProfiler_GetCounterDataInfo_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerGetCounterDataInfo CUpti_RangeProfiler_GetCounterDataInfo_Params  * pParams Get the number of ranges stored in the counter data image. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_GetCounterDataInfo_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1770, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerGetCounterDataSize", "display_name": "cuptiRangeProfilerGetCounterDataSize", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv436cuptiRangeProfilerGetCounterDataSizeP45CUpti_RangeProfiler_GetCounterDataSize_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerGetCounterDataSize CUpti_RangeProfiler_GetCounterDataSize_Params  * pParams Get the size of the counter data image required to store the profiling data for the ranges profiled. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_GetCounterDataSize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler GetCounterDataSize is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1771, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerGetCounterDataSize::pParams", "display_name": "cuptiRangeProfilerGetCounterDataSize::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv436cuptiRangeProfilerGetCounterDataSizeP45CUpti_RangeProfiler_GetCounterDataSize_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerGetCounterDataSize CUpti_RangeProfiler_GetCounterDataSize_Params  * pParams Get the size of the counter data image required to store the profiling data for the ranges profiled. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_GetCounterDataSize_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler GetCounterDataSize is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1772, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerPopRange", "display_name": "cuptiRangeProfilerPopRange", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv426cuptiRangeProfilerPopRangeP35CUpti_RangeProfiler_PopRange_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerPopRange CUpti_RangeProfiler_PopRange_Params  * pParams pop the current range to the Range Profiler. The number of pop range API call should be same as number of push ranges in the same order. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_PopRange_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler PopRange is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1773, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerPopRange::pParams", "display_name": "cuptiRangeProfilerPopRange::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv426cuptiRangeProfilerPopRangeP35CUpti_RangeProfiler_PopRange_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerPopRange CUpti_RangeProfiler_PopRange_Params  * pParams pop the current range to the Range Profiler. The number of pop range API call should be same as number of push ranges in the same order. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_PopRange_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler PopRange is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1774, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerPushRange", "display_name": "cuptiRangeProfilerPushRange", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv427cuptiRangeProfilerPushRangeP36CUpti_RangeProfiler_PushRange_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerPushRange CUpti_RangeProfiler_PushRange_Params  * pParams Add a new range to the Range Profiler with a given range name. For nested ranges, this API should be called again for the innermost range. For profiling the nested range, users need to set the values for minNestingLevel and numNestingLevels in the SetConfig API. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_PushRange_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler PushRange is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1775, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerPushRange::pParams", "display_name": "cuptiRangeProfilerPushRange::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv427cuptiRangeProfilerPushRangeP36CUpti_RangeProfiler_PushRange_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerPushRange CUpti_RangeProfiler_PushRange_Params  * pParams Add a new range to the Range Profiler with a given range name. For nested ranges, this API should be called again for the innermost range. For profiling the nested range, users need to set the values for minNestingLevel and numNestingLevels in the SetConfig API. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_PushRange_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler PushRange is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1776, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerSetConfig", "display_name": "cuptiRangeProfilerSetConfig", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv427cuptiRangeProfilerSetConfigP36CUpti_RangeProfiler_SetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerSetConfig CUpti_RangeProfiler_SetConfig_Params  * pParams Set the configuration for range profiler like maximum number of ranges per pass, number of nesting levels, range and replay mode and the config image which has scheduling info for metric collection. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_SetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid", "keywords": []}, {"id": 1777, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerSetConfig::pParams", "display_name": "cuptiRangeProfilerSetConfig::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv427cuptiRangeProfilerSetConfigP36CUpti_RangeProfiler_SetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerSetConfig CUpti_RangeProfiler_SetConfig_Params  * pParams Set the configuration for range profiler like maximum number of ranges per pass, number of nesting levels, range and replay mode and the config image which has scheduling info for metric collection. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_SetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid", "keywords": []}, {"id": 1778, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerStart", "display_name": "cuptiRangeProfilerStart", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv423cuptiRangeProfilerStartP32CUpti_RangeProfiler_Start_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerStart CUpti_RangeProfiler_Start_Params  * pParams Start the range profiler. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Start_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler Start is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1779, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerStart::pParams", "display_name": "cuptiRangeProfilerStart::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv423cuptiRangeProfilerStartP32CUpti_RangeProfiler_Start_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerStart CUpti_RangeProfiler_Start_Params  * pParams Start the range profiler. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Start_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler Start is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1780, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerStop", "display_name": "cuptiRangeProfilerStop", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiRangeProfilerStopP31CUpti_RangeProfiler_Stop_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerStop CUpti_RangeProfiler_Stop_Params  * pParams Stop the range profiler. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Stop_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler Stop is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1781, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "cpp", "name": "cuptiRangeProfilerStop::pParams", "display_name": "cuptiRangeProfilerStop::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "_CPPv422cuptiRangeProfilerStopP31CUpti_RangeProfiler_Stop_Params", "priority": 1, "content": "CUptiResult  cuptiRangeProfilerStop CUpti_RangeProfiler_Stop_Params  * pParams Stop the range profiler. Parameters pParams \u2013 A pointer to CUpti_RangeProfiler_Stop_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_OPERATION \u2013 if range profiler Stop is called without enabling range profiler CUPTI_ERROR_UNKNOWN \u2013 for any internal error", "keywords": []}, {"id": 1782, "doc_id": 1782, "filename": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "display_name": "CUPTI Range Profiling API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___r_a_n_g_e___p_r_o_f_i_l_e_r___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI Range Profiling API. Data Structures CUpti_RangeProfiler_CounterDataImage_Initialize_Params  Params for cuptiRangeProfilerCounterDataImageInitialize. CUpti_RangeProfiler_CounterData_GetRangeInfo_Params  Params for cuptiRangeProfilerCounterDataGetRangeInfo. CUpti_RangeProfiler_DecodeData_Params  Params for cuptiRangeProfilerDecodeData. CUpti_RangeProfiler_Disable_Params  Params for cuptiRangeProfilerDisable. CUpti_RangeProfiler_Enable_Params  Params for cuptiRangeProfilerEnable. CUpti_RangeProfiler_GetCounterDataInfo_Params  Params for cuptiRangeProfilerGetCounterDataInfo. CUpti_RangeProfiler_GetCounterDataSize_Params  Params for cuptiRangeProfilerGetCounterDataSize. CUpti_RangeProfiler_PopRange_Params  Params for cuptiRangeProfilerPopRange. CUpti_RangeProfiler_PushRange_Params  Params for cuptiRangeProfilerPushRange. CUpti_RangeProfiler_SetConfig_Params  Params for cuptiRangeProfilerSetConfig. CUpti_RangeProfiler_Start_Params  Params for cuptiRangeProfilerStart. CUpti_RangeProfiler_Stop_Params  Params for cuptiRangeProfilerStop. Macros CUpti_RangeProfiler_CounterDataImage_Initialize_Params_STRUCT_SIZE   CUpti_RangeProfiler_CounterData_GetRangeInfo_Params_STRUCT_SIZE   CUpti_RangeProfiler_DecodeData_Params_STRUCT_SIZE   CUpti_RangeProfiler_Disable_Params_STRUCT_SIZE   CUpti_RangeProfiler_Enable_Params_STRUCT_SIZE   CUpti_RangeProfiler_GetCounterDataInfo_Params_STRUCT_SIZE   CUpti_RangeProfiler_GetCounterDataSize_Params_STRUCT_SIZE   CUpti_RangeProfiler_PopRange_Params_STRUCT_SIZE   CUpti_RangeProfiler_PushRange_Params_STRUCT_SIZE   CUpti_RangeProfiler_SetConfig_Params_STRUCT_SIZE   CUpti_RangeProfiler_Start_Params_STRUCT_SIZE   CUpti_RangeProfiler_Stop_Params_STRUCT_SIZE   Functions CUptiResult  cuptiRangeProfilerCounterDataGetRangeInfo (CUpti_RangeProfiler_CounterData_GetRangeInfo_Params *pParams) Get the range name for the given range index. CUptiResult  cuptiRangeProfilerCounterDataImageInitialize (CUpti_RangeProfiler_CounterDataImage_Initialize_Params *pParams) Initialize the counter data image with the profiling data for the ranges profiled. CUptiResult  cuptiRangeProfilerDecodeData (CUpti_RangeProfiler_DecodeData_Params *pParams) Decode the profiling data stored in the hardware to the counter data image passed in the SetConfig API. CUptiResult  cuptiRangeProfilerDisable (CUpti_RangeProfiler_Disable_Params *pParams) Disable the range profiler on the CUDA context and destroy the range profiler object. CUptiResult  cuptiRangeProfilerEnable (CUpti_RangeProfiler_Enable_Params *pParams) Create a range profiler object and enable range profiling on the CUDA context. CUptiResult  cuptiRangeProfilerGetCounterDataInfo (CUpti_RangeProfiler_GetCounterDataInfo_Params *pParams) Get the number of ranges stored in the counter data image. CUptiResult  cuptiRangeProfilerGetCounterDataSize (CUpti_RangeProfiler_GetCounterDataSize_Params *pParams) Get the size of the counter data image required to store the profiling data for the ranges profiled. CUptiResult  cuptiRangeProfilerPopRange (CUpti_RangeProfiler_PopRange_Params *pParams) pop the current range to the Range Profiler. CUptiResult  cuptiRangeProfilerPushRange (CUpti_RangeProfiler_PushRange_Params *pParams) Add a new range to the Range Profiler with a given range name. CUptiResult  cuptiRangeProfilerSetConfig (CUpti_RangeProfiler_SetConfig_Params *pParams) Set the configuration for range profiler like maximum number of ranges per pass, number of nesting levels, range and replay mode and the config image which has scheduling info for metric collection. CUptiResult  cuptiRangeProfilerStart (CUpti_RangeProfiler_Start_Params *pParams) Start the range profiler. CUptiResult  cuptiRangeProfilerStop (CUpti_RangeProfiler_Stop_Params *pParams) Stop the range profiler. Typedefs CUpti_RangeProfiler_Object   Variables size_t  CUpti_RangeProfiler_CounterDataImage_Initialize_Params::counterDataSize  [in] Size of the counter data image. uint8_t *  CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pCounterData  [in] Counter data image. void *  CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pRangeProfilerObject  [in] Periodic sampler object. size_t  CUpti_RangeProfiler_CounterDataImage_Initialize_Params::structSize  [in] Size of the data structure. size_t  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::counterDataImageSize  [in] Size of the counter data image. const uint8_t *  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::pCounterDataImage  [in] Counter data image. void *  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::pPriv  [in] Set to NULL. const char *  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeDelimiter  [in] range delimiter. size_t  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeIndex  [in] Index of the sample. const char *  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeName  [out] RangeName; size_t  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::structSize  [in] Size of the data structure. size_t  CUpti_RangeProfiler_DecodeData_Params::numOfRangeDropped  [out] Number of ranges dropped in the processed passes. void *  CUpti_RangeProfiler_DecodeData_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_DecodeData_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_DecodeData_Params::structSize  [in] Size of the data structure. void *  CUpti_RangeProfiler_Disable_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_Disable_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_Disable_Params::structSize  [in] Size of the data structure. CUcontext  CUpti_RangeProfiler_Enable_Params::ctx  [in] Context to be used for profiling. void *  CUpti_RangeProfiler_Enable_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_Enable_Params::pRangeProfilerObject  [out] Range Profiler Object. size_t  CUpti_RangeProfiler_Enable_Params::structSize  [in] Size of the data structure. size_t  CUpti_RangeProfiler_GetCounterDataInfo_Params::counterDataImageSize  [in] Size of the counter data image. size_t  CUpti_RangeProfiler_GetCounterDataInfo_Params::numTotalRanges  [out] Number of ranges in the counter data image. const uint8_t *  CUpti_RangeProfiler_GetCounterDataInfo_Params::pCounterDataImage  [in] Counter data image. void *  CUpti_RangeProfiler_GetCounterDataInfo_Params::pPriv  [in] Set to NULL. size_t  CUpti_RangeProfiler_GetCounterDataInfo_Params::structSize  [in] Size of the data structure. size_t  CUpti_RangeProfiler_GetCounterDataSize_Params::counterDataSize  [out] Size of the counter data image. size_t  CUpti_RangeProfiler_GetCounterDataSize_Params::maxNumOfRanges  [in] Maximum number of ranges to be stored in the counter data image. uint32_t  CUpti_RangeProfiler_GetCounterDataSize_Params::maxNumRangeTreeNodes  [in] Maximum number of RangeTree nodes; must be &gt;= maxNumOfRanges size_t  CUpti_RangeProfiler_GetCounterDataSize_Params::numMetrics  [in] Number of metrics to be collected. const char **  CUpti_RangeProfiler_GetCounterDataSize_Params::pMetricNames  [in] Names of the metrics to be collected. void *  CUpti_RangeProfiler_GetCounterDataSize_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_GetCounterDataSize_Params::pRangeProfilerObject  [in] Periodic sampler object. size_t  CUpti_RangeProfiler_GetCounterDataSize_Params::structSize  [in] Size of the data structure. void *  CUpti_RangeProfiler_PopRange_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_PopRange_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_PopRange_Params::structSize  [in] Size of the data structure. void *  CUpti_RangeProfiler_PushRange_Params::pPriv  [in] Set to NULL. const char *  CUpti_RangeProfiler_PushRange_Params::pRangeName  [in] Name of the range to be profiled (only valid for User range mode). CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_PushRange_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_PushRange_Params::structSize  [in] Size of the data structure. size_t  CUpti_RangeProfiler_SetConfig_Params::configSize  [in] Size of the config image. size_t  CUpti_RangeProfiler_SetConfig_Params::counterDataImageSize  [in] Size of the counter data image. size_t  CUpti_RangeProfiler_SetConfig_Params::maxRangesPerPass  [in] Maximum number of ranges that can be profiled in a pass. uint16_t  CUpti_RangeProfiler_SetConfig_Params::minNestingLevel  [in] minimum nesting level to be profiled. uint16_t  CUpti_RangeProfiler_SetConfig_Params::numNestingLevels  [in] number of nesting level to be profiled. For Auto range mode, this should be set to 1. const uint8_t *  CUpti_RangeProfiler_SetConfig_Params::pConfig  [in] Config image. uint8_t *  CUpti_RangeProfiler_SetConfig_Params::pCounterDataImage  [in] Counter data image. void *  CUpti_RangeProfiler_SetConfig_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_SetConfig_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_SetConfig_Params::passIndex  [in] Pass index for the replay session. CUpti_ProfilerRange  CUpti_RangeProfiler_SetConfig_Params::range  [in] Profiling Range mode. CUpti_ProfilerReplayMode  CUpti_RangeProfiler_SetConfig_Params::replayMode  [in] Replay mode. size_t  CUpti_RangeProfiler_SetConfig_Params::structSize  [in] Size of the data structure. uint16_t  CUpti_RangeProfiler_SetConfig_Params::targetNestingLevel  [in] Target nesting level for the replay session. void *  CUpti_RangeProfiler_Start_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_Start_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_Start_Params::structSize  [in] Size of the data structure. uint8_t  CUpti_RangeProfiler_Stop_Params::isAllPassSubmitted  [out] 1 if all passes are submitted to GPU for collection, 0 otherwise. void *  CUpti_RangeProfiler_Stop_Params::pPriv  [in] Set to NULL. CUpti_RangeProfiler_Object *  CUpti_RangeProfiler_Stop_Params::pRangeProfilerObject  [in] Range Profiler Object. size_t  CUpti_RangeProfiler_Stop_Params::passIndex  [out] pass index for the replay session. size_t  CUpti_RangeProfiler_Stop_Params::structSize  [in] Size of the data structure. size_t  CUpti_RangeProfiler_Stop_Params::targetNestingLevel  [out] target nesting level for the replay session.", "keywords": []}, {"id": 1783, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_API_NOT_IMPLEMENTED", "display_name": "CUPTI_ERROR_API_NOT_IMPLEMENTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult31CUPTI_ERROR_API_NOT_IMPLEMENTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_API_NOT_IMPLEMENTED API is not implemented.", "keywords": []}, {"id": 1784, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult37CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED In CUDA 9.0, devices with compute capability 7.0 don\u2019t support CDP tracing.", "keywords": []}, {"id": 1785, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult36CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED CUPTI does not support NVIDIA Crypto Mining Processors (CMP). For more information, please visit https://developer.nvidia.com/ERR_NVCMPGPU", "keywords": []}, {"id": 1786, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult48CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED Profiling and tracing are not allowed when confidential computing mode is enabled.", "keywords": []}, {"id": 1787, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE", "display_name": "CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult40CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE Profiling results might be incorrect for CUDA applications compiled with nvcc version older than 9.0 for devices with compute capability 6.0 and 6.1. Profiling session will continue and CUPTI will notify it using this error code. User is advised to recompile the application code with nvcc version 9.0 or later. Ignore this warning if code is already compiled with the recommended nvcc version.", "keywords": []}, {"id": 1788, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_DISABLED", "display_name": "CUPTI_ERROR_DISABLED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult20CUPTI_ERROR_DISABLEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_DISABLED CUPTI is disabled due to conflicts with other enabled profilers.", "keywords": []}, {"id": 1789, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_FORCE_INT", "display_name": "CUPTI_ERROR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult21CUPTI_ERROR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ERROR_FORCE_INT", "keywords": []}, {"id": 1790, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_HARDWARE", "display_name": "CUPTI_ERROR_HARDWARE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult20CUPTI_ERROR_HARDWAREE", "priority": 1, "content": "enumerator  CUPTI_ERROR_HARDWARE An error occurred on the performance monitoring hardware.", "keywords": []}, {"id": 1791, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_HARDWARE_BUSY", "display_name": "CUPTI_ERROR_HARDWARE_BUSY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult25CUPTI_ERROR_HARDWARE_BUSYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_HARDWARE_BUSY The performance monitoring hardware is in use by other client.", "keywords": []}, {"id": 1792, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INSUFFICIENT_PRIVILEGES", "display_name": "CUPTI_ERROR_INSUFFICIENT_PRIVILEGES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult35CUPTI_ERROR_INSUFFICIENT_PRIVILEGESE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INSUFFICIENT_PRIVILEGES User doesn\u2019t have sufficient privileges which are required to start the profiling session. One possible reason for this may be that the NVIDIA driver or your system administrator may have restricted access to the NVIDIA GPU performance counters. To learn how to resolve this issue and find more information, please visit https://developer.nvidia.com/CUPTI_ERROR_INSUFFICIENT_PRIVILEGES", "keywords": []}, {"id": 1793, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_CONTEXT", "display_name": "CUPTI_ERROR_INVALID_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult27CUPTI_ERROR_INVALID_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_CONTEXT The context is NULL or not valid.", "keywords": []}, {"id": 1794, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_DEVICE", "display_name": "CUPTI_ERROR_INVALID_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_DEVICE The device does not correspond to a valid CUDA device.", "keywords": []}, {"id": 1795, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID", "display_name": "CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult35CUPTI_ERROR_INVALID_EVENT_DOMAIN_IDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID The event domain id is invalid.", "keywords": []}, {"id": 1796, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_EVENT_ID", "display_name": "CUPTI_ERROR_INVALID_EVENT_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult28CUPTI_ERROR_INVALID_EVENT_IDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_ID The event id is invalid.", "keywords": []}, {"id": 1797, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_EVENT_NAME", "display_name": "CUPTI_ERROR_INVALID_EVENT_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult30CUPTI_ERROR_INVALID_EVENT_NAMEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_NAME The event name is invalid.", "keywords": []}, {"id": 1798, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_EVENT_VALUE", "display_name": "CUPTI_ERROR_INVALID_EVENT_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult31CUPTI_ERROR_INVALID_EVENT_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_VALUE Invalid event value.", "keywords": []}, {"id": 1799, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_HANDLE", "display_name": "CUPTI_ERROR_INVALID_HANDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_HANDLEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_HANDLE Invalid handle (internal?).", "keywords": []}, {"id": 1800, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_KIND", "display_name": "CUPTI_ERROR_INVALID_KIND", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult24CUPTI_ERROR_INVALID_KINDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_KIND Invalid kind.", "keywords": []}, {"id": 1801, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_METRIC_ID", "display_name": "CUPTI_ERROR_INVALID_METRIC_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_INVALID_METRIC_IDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_METRIC_ID The metric id is invalid.", "keywords": []}, {"id": 1802, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_METRIC_NAME", "display_name": "CUPTI_ERROR_INVALID_METRIC_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult31CUPTI_ERROR_INVALID_METRIC_NAMEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_METRIC_NAME The metric name is invalid.", "keywords": []}, {"id": 1803, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_METRIC_VALUE", "display_name": "CUPTI_ERROR_INVALID_METRIC_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult32CUPTI_ERROR_INVALID_METRIC_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_METRIC_VALUE Invalid metric value.", "keywords": []}, {"id": 1804, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_MODULE", "display_name": "CUPTI_ERROR_INVALID_MODULE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_MODULEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_MODULE Invalid module.", "keywords": []}, {"id": 1805, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_OPERATION", "display_name": "CUPTI_ERROR_INVALID_OPERATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_INVALID_OPERATIONE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_OPERATION The current operation cannot be performed due to dependency on other factors.", "keywords": []}, {"id": 1806, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_PARAMETER", "display_name": "CUPTI_ERROR_INVALID_PARAMETER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_INVALID_PARAMETERE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_PARAMETER One or more of the parameters is invalid.", "keywords": []}, {"id": 1807, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_INVALID_STREAM", "display_name": "CUPTI_ERROR_INVALID_STREAM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_STREAME", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_STREAM Invalid stream.", "keywords": []}, {"id": 1808, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult41CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED Legacy CUPTI Profiling API i.e. event API from the header cupti_events.h and metric API from the header cupti_metrics.h are not supported on devices with compute capability 7.5 and higher (i.e. Turing and later GPU architectures). These API will be deprecated in a future CUDA release. These are replaced by Profiling API in the header cupti_profiler_target.h and Perfworks metrics API in the headers nvperf_host.h and nvperf_target.h.", "keywords": []}, {"id": 1809, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_MAX_LIMIT_REACHED", "display_name": "CUPTI_ERROR_MAX_LIMIT_REACHED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_MAX_LIMIT_REACHEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_MAX_LIMIT_REACHED The maximum limit is reached.", "keywords": []}, {"id": 1810, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult46CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED CUPTI doesn\u2019t allow multiple callback subscribers. Only a single subscriber can be registered at a time. Same error code is used when application is launched using NVIDIA tools like nvprof, Visual Profiler, Nsight Systems, Nsight Compute, cuda-gdb and cuda-memcheck.", "keywords": []}, {"id": 1811, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_NOT_COMPATIBLE", "display_name": "CUPTI_ERROR_NOT_COMPATIBLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_NOT_COMPATIBLEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_COMPATIBLE The current operation is not compatible with the current state of the object.", "keywords": []}, {"id": 1812, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_NOT_INITIALIZED", "display_name": "CUPTI_ERROR_NOT_INITIALIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult27CUPTI_ERROR_NOT_INITIALIZEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_INITIALIZED CUPTI is unable to initialize its connection to the CUDA driver.", "keywords": []}, {"id": 1813, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_NOT_READY", "display_name": "CUPTI_ERROR_NOT_READY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult21CUPTI_ERROR_NOT_READYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_READY The object is not yet ready to perform the requested operation.", "keywords": []}, {"id": 1814, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult25CUPTI_ERROR_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_SUPPORTED The attempted operation is not supported on the current system or device.", "keywords": []}, {"id": 1815, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED", "display_name": "CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult40CUPTI_ERROR_OLD_PROFILER_API_INITIALIZEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED Legacy CUPTI Profiling API i.e. event API from the header cupti_events.h and metric API from the header cupti_metrics.h are not compatible with the Profiling API in the header cupti_profiler_target.h and Perfworks metrics API in the headers nvperf_host.h and nvperf_target.h.", "keywords": []}, {"id": 1816, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE", "display_name": "CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult37CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE Missing definition of the OpenACC API routine in the linked OpenACC library. One possible reason is that OpenACC library is linked statically in the user application, which might not have the definition of all the OpenACC API routines needed for the OpenACC profiling, as compiler might ignore definitions for the functions not used in the application. This issue can be mitigated by linking the OpenACC library dynamically.", "keywords": []}, {"id": 1817, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_OUT_OF_MEMORY", "display_name": "CUPTI_ERROR_OUT_OF_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult25CUPTI_ERROR_OUT_OF_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_OUT_OF_MEMORY Unable to allocate enough memory to perform the requested operation.", "keywords": []}, {"id": 1818, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT", "display_name": "CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult41CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENTE", "priority": 1, "content": "enumerator  CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT The output buffer size is not sufficient to return all requested data.", "keywords": []}, {"id": 1819, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_QUEUE_EMPTY", "display_name": "CUPTI_ERROR_QUEUE_EMPTY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult23CUPTI_ERROR_QUEUE_EMPTYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_QUEUE_EMPTY The queue is empty.", "keywords": []}, {"id": 1820, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult38CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED Unified memory profiling is not supported on the system. Potential reason could be unsupported OS or architecture.", "keywords": []}, {"id": 1821, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE", "display_name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult48CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE Unified memory profiling is not supported on the device.", "keywords": []}, {"id": 1822, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES", "display_name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult57CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICESE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES Unified memory profiling is not supported on a multi-GPU configuration without P2P support between any pair of devices.", "keywords": []}, {"id": 1823, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS", "display_name": "CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult47CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPSE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS Unified memory profiling is not supported under the Multi-Process Service (MPS) environment. CUDA 7.5 removes this restriction.", "keywords": []}, {"id": 1824, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_UNKNOWN", "display_name": "CUPTI_ERROR_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult19CUPTI_ERROR_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UNKNOWN An unknown internal error has occurred.", "keywords": []}, {"id": 1825, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES", "display_name": "CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult54CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGESE", "priority": 1, "content": "enumerator  CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES Profiling on virtualized GPU is not allowed by hypervisor.", "keywords": []}, {"id": 1826, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED", "display_name": "CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult44CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED Profiling on virtualized GPU is not supported.", "keywords": []}, {"id": 1827, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_SUCCESS", "display_name": "CUPTI_SUCCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult13CUPTI_SUCCESSE", "priority": 1, "content": "enumerator  CUPTI_SUCCESS No error.", "keywords": []}, {"id": 1828, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult", "display_name": "CUptiResult", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv411CUptiResult", "priority": 1, "content": "enum  CUptiResult CUPTI result codes. Error and result codes returned by CUPTI functions. Values:", "keywords": []}, {"id": 1829, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_API_NOT_IMPLEMENTED", "display_name": "CUptiResult::CUPTI_ERROR_API_NOT_IMPLEMENTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult31CUPTI_ERROR_API_NOT_IMPLEMENTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_API_NOT_IMPLEMENTED API is not implemented.", "keywords": []}, {"id": 1830, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult37CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CDP_TRACING_NOT_SUPPORTED In CUDA 9.0, devices with compute capability 7.0 don\u2019t support CDP tracing.", "keywords": []}, {"id": 1831, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult36CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED CUPTI does not support NVIDIA Crypto Mining Processors (CMP). For more information, please visit https://developer.nvidia.com/ERR_NVCMPGPU", "keywords": []}, {"id": 1832, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult48CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CONFIDENTIAL_COMPUTING_NOT_SUPPORTED Profiling and tracing are not allowed when confidential computing mode is enabled.", "keywords": []}, {"id": 1833, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE", "display_name": "CUptiResult::CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult40CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE Profiling results might be incorrect for CUDA applications compiled with nvcc version older than 9.0 for devices with compute capability 6.0 and 6.1. Profiling session will continue and CUPTI will notify it using this error code. User is advised to recompile the application code with nvcc version 9.0 or later. Ignore this warning if code is already compiled with the recommended nvcc version.", "keywords": []}, {"id": 1834, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_DISABLED", "display_name": "CUptiResult::CUPTI_ERROR_DISABLED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult20CUPTI_ERROR_DISABLEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_DISABLED CUPTI is disabled due to conflicts with other enabled profilers.", "keywords": []}, {"id": 1835, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_FORCE_INT", "display_name": "CUptiResult::CUPTI_ERROR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult21CUPTI_ERROR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_ERROR_FORCE_INT", "keywords": []}, {"id": 1836, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_HARDWARE", "display_name": "CUptiResult::CUPTI_ERROR_HARDWARE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult20CUPTI_ERROR_HARDWAREE", "priority": 1, "content": "enumerator  CUPTI_ERROR_HARDWARE An error occurred on the performance monitoring hardware.", "keywords": []}, {"id": 1837, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_HARDWARE_BUSY", "display_name": "CUptiResult::CUPTI_ERROR_HARDWARE_BUSY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult25CUPTI_ERROR_HARDWARE_BUSYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_HARDWARE_BUSY The performance monitoring hardware is in use by other client.", "keywords": []}, {"id": 1838, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INSUFFICIENT_PRIVILEGES", "display_name": "CUptiResult::CUPTI_ERROR_INSUFFICIENT_PRIVILEGES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult35CUPTI_ERROR_INSUFFICIENT_PRIVILEGESE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INSUFFICIENT_PRIVILEGES User doesn\u2019t have sufficient privileges which are required to start the profiling session. One possible reason for this may be that the NVIDIA driver or your system administrator may have restricted access to the NVIDIA GPU performance counters. To learn how to resolve this issue and find more information, please visit https://developer.nvidia.com/CUPTI_ERROR_INSUFFICIENT_PRIVILEGES", "keywords": []}, {"id": 1839, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_CONTEXT", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_CONTEXT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult27CUPTI_ERROR_INVALID_CONTEXTE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_CONTEXT The context is NULL or not valid.", "keywords": []}, {"id": 1840, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_DEVICE", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_DEVICE The device does not correspond to a valid CUDA device.", "keywords": []}, {"id": 1841, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult35CUPTI_ERROR_INVALID_EVENT_DOMAIN_IDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_DOMAIN_ID The event domain id is invalid.", "keywords": []}, {"id": 1842, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_ID", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult28CUPTI_ERROR_INVALID_EVENT_IDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_ID The event id is invalid.", "keywords": []}, {"id": 1843, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_NAME", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult30CUPTI_ERROR_INVALID_EVENT_NAMEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_NAME The event name is invalid.", "keywords": []}, {"id": 1844, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_VALUE", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_EVENT_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult31CUPTI_ERROR_INVALID_EVENT_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_EVENT_VALUE Invalid event value.", "keywords": []}, {"id": 1845, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_HANDLE", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_HANDLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_HANDLEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_HANDLE Invalid handle (internal?).", "keywords": []}, {"id": 1846, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_KIND", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_KIND", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult24CUPTI_ERROR_INVALID_KINDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_KIND Invalid kind.", "keywords": []}, {"id": 1847, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_METRIC_ID", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_METRIC_ID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_INVALID_METRIC_IDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_METRIC_ID The metric id is invalid.", "keywords": []}, {"id": 1848, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_METRIC_NAME", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_METRIC_NAME", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult31CUPTI_ERROR_INVALID_METRIC_NAMEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_METRIC_NAME The metric name is invalid.", "keywords": []}, {"id": 1849, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_METRIC_VALUE", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_METRIC_VALUE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult32CUPTI_ERROR_INVALID_METRIC_VALUEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_METRIC_VALUE Invalid metric value.", "keywords": []}, {"id": 1850, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_MODULE", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_MODULE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_MODULEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_MODULE Invalid module.", "keywords": []}, {"id": 1851, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_OPERATION", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_OPERATION", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_INVALID_OPERATIONE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_OPERATION The current operation cannot be performed due to dependency on other factors.", "keywords": []}, {"id": 1852, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_PARAMETER", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_PARAMETER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_INVALID_PARAMETERE", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_PARAMETER One or more of the parameters is invalid.", "keywords": []}, {"id": 1853, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_INVALID_STREAM", "display_name": "CUptiResult::CUPTI_ERROR_INVALID_STREAM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_INVALID_STREAME", "priority": 1, "content": "enumerator  CUPTI_ERROR_INVALID_STREAM Invalid stream.", "keywords": []}, {"id": 1854, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult41CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_LEGACY_PROFILER_NOT_SUPPORTED Legacy CUPTI Profiling API i.e. event API from the header cupti_events.h and metric API from the header cupti_metrics.h are not supported on devices with compute capability 7.5 and higher (i.e. Turing and later GPU architectures). These API will be deprecated in a future CUDA release. These are replaced by Profiling API in the header cupti_profiler_target.h and Perfworks metrics API in the headers nvperf_host.h and nvperf_target.h.", "keywords": []}, {"id": 1855, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_MAX_LIMIT_REACHED", "display_name": "CUptiResult::CUPTI_ERROR_MAX_LIMIT_REACHED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult29CUPTI_ERROR_MAX_LIMIT_REACHEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_MAX_LIMIT_REACHED The maximum limit is reached.", "keywords": []}, {"id": 1856, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult46CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED CUPTI doesn\u2019t allow multiple callback subscribers. Only a single subscriber can be registered at a time. Same error code is used when application is launched using NVIDIA tools like nvprof, Visual Profiler, Nsight Systems, Nsight Compute, cuda-gdb and cuda-memcheck.", "keywords": []}, {"id": 1857, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_NOT_COMPATIBLE", "display_name": "CUptiResult::CUPTI_ERROR_NOT_COMPATIBLE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult26CUPTI_ERROR_NOT_COMPATIBLEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_COMPATIBLE The current operation is not compatible with the current state of the object.", "keywords": []}, {"id": 1858, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_NOT_INITIALIZED", "display_name": "CUptiResult::CUPTI_ERROR_NOT_INITIALIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult27CUPTI_ERROR_NOT_INITIALIZEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_INITIALIZED CUPTI is unable to initialize its connection to the CUDA driver.", "keywords": []}, {"id": 1859, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_NOT_READY", "display_name": "CUptiResult::CUPTI_ERROR_NOT_READY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult21CUPTI_ERROR_NOT_READYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_READY The object is not yet ready to perform the requested operation.", "keywords": []}, {"id": 1860, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult25CUPTI_ERROR_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_NOT_SUPPORTED The attempted operation is not supported on the current system or device.", "keywords": []}, {"id": 1861, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED", "display_name": "CUptiResult::CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult40CUPTI_ERROR_OLD_PROFILER_API_INITIALIZEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_OLD_PROFILER_API_INITIALIZED Legacy CUPTI Profiling API i.e. event API from the header cupti_events.h and metric API from the header cupti_metrics.h are not compatible with the Profiling API in the header cupti_profiler_target.h and Perfworks metrics API in the headers nvperf_host.h and nvperf_target.h.", "keywords": []}, {"id": 1862, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE", "display_name": "CUptiResult::CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult37CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE Missing definition of the OpenACC API routine in the linked OpenACC library. One possible reason is that OpenACC library is linked statically in the user application, which might not have the definition of all the OpenACC API routines needed for the OpenACC profiling, as compiler might ignore definitions for the functions not used in the application. This issue can be mitigated by linking the OpenACC library dynamically.", "keywords": []}, {"id": 1863, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_OUT_OF_MEMORY", "display_name": "CUptiResult::CUPTI_ERROR_OUT_OF_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult25CUPTI_ERROR_OUT_OF_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_OUT_OF_MEMORY Unable to allocate enough memory to perform the requested operation.", "keywords": []}, {"id": 1864, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT", "display_name": "CUptiResult::CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult41CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENTE", "priority": 1, "content": "enumerator  CUPTI_ERROR_PARAMETER_SIZE_NOT_SUFFICIENT The output buffer size is not sufficient to return all requested data.", "keywords": []}, {"id": 1865, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_QUEUE_EMPTY", "display_name": "CUptiResult::CUPTI_ERROR_QUEUE_EMPTY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult23CUPTI_ERROR_QUEUE_EMPTYE", "priority": 1, "content": "enumerator  CUPTI_ERROR_QUEUE_EMPTY The queue is empty.", "keywords": []}, {"id": 1866, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult38CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED Unified memory profiling is not supported on the system. Potential reason could be unsupported OS or architecture.", "keywords": []}, {"id": 1867, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE", "display_name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult48CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICEE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_DEVICE Unified memory profiling is not supported on the device.", "keywords": []}, {"id": 1868, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES", "display_name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult57CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICESE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_ON_NON_P2P_DEVICES Unified memory profiling is not supported on a multi-GPU configuration without P2P support between any pair of devices.", "keywords": []}, {"id": 1869, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS", "display_name": "CUptiResult::CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult47CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPSE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UM_PROFILING_NOT_SUPPORTED_WITH_MPS Unified memory profiling is not supported under the Multi-Process Service (MPS) environment. CUDA 7.5 removes this restriction.", "keywords": []}, {"id": 1870, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_UNKNOWN", "display_name": "CUptiResult::CUPTI_ERROR_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult19CUPTI_ERROR_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_ERROR_UNKNOWN An unknown internal error has occurred.", "keywords": []}, {"id": 1871, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES", "display_name": "CUptiResult::CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult54CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGESE", "priority": 1, "content": "enumerator  CUPTI_ERROR_VIRTUALIZED_DEVICE_INSUFFICIENT_PRIVILEGES Profiling on virtualized GPU is not allowed by hypervisor.", "keywords": []}, {"id": 1872, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED", "display_name": "CUptiResult::CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult44CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTEDE", "priority": 1, "content": "enumerator  CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED Profiling on virtualized GPU is not supported.", "keywords": []}, {"id": 1873, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "CUptiResult::CUPTI_SUCCESS", "display_name": "CUptiResult::CUPTI_SUCCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv4N11CUptiResult13CUPTI_SUCCESSE", "priority": 1, "content": "enumerator  CUPTI_SUCCESS No error.", "keywords": []}, {"id": 1874, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetErrorMessage", "display_name": "cuptiGetErrorMessage", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv420cuptiGetErrorMessage11CUptiResultPPKc", "priority": 1, "content": "CUptiResult  cuptiGetErrorMessage CUptiResult  result const  char  * * str Get the descriptive message corresponding to error codes returned by CUPTI. Return the descriptive error message for a CUptiResult in *str . Thread-safety : this function is thread safe. Parameters result \u2013 The result to get the descriptive error message for str \u2013 Returns the error message string Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if str is NULL or result is not a valid CUptiResult", "keywords": []}, {"id": 1875, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetErrorMessage::result", "display_name": "cuptiGetErrorMessage::result", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv420cuptiGetErrorMessage11CUptiResultPPKc", "priority": 1, "content": "CUptiResult  cuptiGetErrorMessage CUptiResult  result const  char  * * str Get the descriptive message corresponding to error codes returned by CUPTI. Return the descriptive error message for a CUptiResult in *str . Thread-safety : this function is thread safe. Parameters result \u2013 The result to get the descriptive error message for str \u2013 Returns the error message string Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if str is NULL or result is not a valid CUptiResult", "keywords": []}, {"id": 1876, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetErrorMessage::str", "display_name": "cuptiGetErrorMessage::str", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv420cuptiGetErrorMessage11CUptiResultPPKc", "priority": 1, "content": "CUptiResult  cuptiGetErrorMessage CUptiResult  result const  char  * * str Get the descriptive message corresponding to error codes returned by CUPTI. Return the descriptive error message for a CUptiResult in *str . Thread-safety : this function is thread safe. Parameters result \u2013 The result to get the descriptive error message for str \u2013 Returns the error message string Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if str is NULL or result is not a valid CUptiResult", "keywords": []}, {"id": 1877, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetResultString", "display_name": "cuptiGetResultString", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv420cuptiGetResultString11CUptiResultPPKc", "priority": 1, "content": "CUptiResult  cuptiGetResultString CUptiResult  result const  char  * * str Get the descriptive string for a CUptiResult. Return the descriptive string for a CUptiResult in *str . Thread-safety : this function is thread safe. Parameters result \u2013 The result to get the string for str \u2013 Returns the string Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if str is NULL or result is not a valid CUptiResult", "keywords": []}, {"id": 1878, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetResultString::result", "display_name": "cuptiGetResultString::result", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv420cuptiGetResultString11CUptiResultPPKc", "priority": 1, "content": "CUptiResult  cuptiGetResultString CUptiResult  result const  char  * * str Get the descriptive string for a CUptiResult. Return the descriptive string for a CUptiResult in *str . Thread-safety : this function is thread safe. Parameters result \u2013 The result to get the string for str \u2013 Returns the string Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if str is NULL or result is not a valid CUptiResult", "keywords": []}, {"id": 1879, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetResultString::str", "display_name": "cuptiGetResultString::str", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "_CPPv420cuptiGetResultString11CUptiResultPPKc", "priority": 1, "content": "CUptiResult  cuptiGetResultString CUptiResult  result const  char  * * str Get the descriptive string for a CUptiResult. Return the descriptive string for a CUptiResult in *str . Thread-safety : this function is thread safe. Parameters result \u2013 The result to get the string for str \u2013 Returns the string Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if str is NULL or result is not a valid CUptiResult", "keywords": []}, {"id": 1880, "doc_id": 1880, "filename": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "display_name": "CUPTI Result Codes", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___r_e_s_u_l_t___a_p_i", "anchor": "", "priority": -1, "content": "Error and result codes returned by CUPTI functions. Enumerations CUptiResult  CUPTI result codes. Functions CUptiResult  cuptiGetErrorMessage (CUptiResult result, const char **str) Get the descriptive message corresponding to error codes returned by CUPTI. CUptiResult  cuptiGetResultString (CUptiResult result, const char **str) Get the descriptive string for a CUptiResult.", "keywords": []}, {"id": 1881, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetricsDisable_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetricsDisable_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetricsDisable_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetricsDisable_Params_STRUCT_SIZE", "keywords": []}, {"id": 1882, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetricsEnable_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetricsEnable_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetricsEnable_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetricsEnable_Params_STRUCT_SIZE", "keywords": []}, {"id": 1883, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetricsFlushData_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetricsFlushData_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetricsFlushData_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetricsFlushData_Params_STRUCT_SIZE", "keywords": []}, {"id": 1884, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetricsGetDataProperties_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetricsGetDataProperties_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetricsGetDataProperties_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetricsGetDataProperties_Params_STRUCT_SIZE", "keywords": []}, {"id": 1885, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetricsSetConfig_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetricsSetConfig_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetricsSetConfig_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetricsSetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 1886, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetricsUnsetConfig_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetricsUnsetConfig_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetricsUnsetConfig_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetricsUnsetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 1887, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 1888, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetrics_GetNumOfMetrics_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetrics_GetNumOfMetrics_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetrics_GetNumOfMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 1889, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetrics_GetProperties_Params_STRUCT_SIZE", "display_name": "CUpti_SassMetrics_GetProperties_Params_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetrics_GetProperties_Params_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetrics_GetProperties_Params_STRUCT_SIZE", "keywords": []}, {"id": 1890, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "c", "name": "CUpti_SassMetrics_InstanceValue_STRUCT_SIZE", "display_name": "CUpti_SassMetrics_InstanceValue_STRUCT_SIZE", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "c.CUpti_SassMetrics_InstanceValue_STRUCT_SIZE", "priority": 1, "content": "CUpti_SassMetrics_InstanceValue_STRUCT_SIZE", "keywords": []}, {"id": 1891, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU", "display_name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity41CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPUE", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU SASS metric data will be collected at GPU level. In CUpti_SassMetricsGetDataProperties_Params struct the numOfInstances will be equal to 1.", "keywords": []}, {"id": 1892, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALID", "display_name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity45CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALID", "keywords": []}, {"id": 1893, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM", "display_name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity40CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SME", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM SASS metric data will be collected at SM level In CUpti_SassMetricsGetDataProperties_Params struct the numOfInstances will be equal to number of SMs in the GPU.", "keywords": []}, {"id": 1894, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP", "display_name": "CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity42CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSPE", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP SASS metric data will be collected at SM sub-partition level In CUpti_SassMetricsGetDataProperties_Params struct the numOfInstances will be equal to number of SM sub-partitions in the GPU.", "keywords": []}, {"id": 1895, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_OutputGranularity", "display_name": "CUpti_SassMetrics_OutputGranularity", "type": "enum", "display_type": "C++ enum", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv435CUpti_SassMetrics_OutputGranularity", "priority": 1, "content": "enum  CUpti_SassMetrics_OutputGranularity Values:", "keywords": []}, {"id": 1896, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU", "display_name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity41CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPUE", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU SASS metric data will be collected at GPU level. In CUpti_SassMetricsGetDataProperties_Params struct the numOfInstances will be equal to 1.", "keywords": []}, {"id": 1897, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALID", "display_name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity45CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALIDE", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_INVALID", "keywords": []}, {"id": 1898, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM", "display_name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity40CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SME", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM SASS metric data will be collected at SM level In CUpti_SassMetricsGetDataProperties_Params struct the numOfInstances will be equal to number of SMs in the GPU.", "keywords": []}, {"id": 1899, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP", "display_name": "CUpti_SassMetrics_OutputGranularity::CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv4N35CUpti_SassMetrics_OutputGranularity42CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSPE", "priority": 1, "content": "enumerator  CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP SASS metric data will be collected at SM sub-partition level In CUpti_SassMetricsGetDataProperties_Params struct the numOfInstances will be equal to number of SM sub-partitions in the GPU.", "keywords": []}, {"id": 1900, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsDisable", "display_name": "cuptiSassMetricsDisable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv423cuptiSassMetricsDisableP31CUpti_SassMetricsDisable_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsDisable CUpti_SassMetricsDisable_Params  * pParams SASS metric data collection disable API will mark the end of a range, any kernel launched after this API call will not be profiled for the SASS metrics. Parameters pParams \u2013 A pointer to CUpti_SassMetricsDisable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called multiple times for a cuda context without calling cuptiSassMetricsEnable() API or called before cuptiSassMetricsSetConfig() API call.", "keywords": []}, {"id": 1901, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsDisable::pParams", "display_name": "cuptiSassMetricsDisable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv423cuptiSassMetricsDisableP31CUpti_SassMetricsDisable_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsDisable CUpti_SassMetricsDisable_Params  * pParams SASS metric data collection disable API will mark the end of a range, any kernel launched after this API call will not be profiled for the SASS metrics. Parameters pParams \u2013 A pointer to CUpti_SassMetricsDisable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called multiple times for a cuda context without calling cuptiSassMetricsEnable() API or called before cuptiSassMetricsSetConfig() API call.", "keywords": []}, {"id": 1902, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsEnable", "display_name": "cuptiSassMetricsEnable", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv422cuptiSassMetricsEnableP30CUpti_SassMetricsEnable_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsEnable CUpti_SassMetricsEnable_Params  * pParams Sass metric data collection enable API will mark the start of a range, between which kernel will be profiled for SASS metrics. Parameters pParams \u2013 A pointer to CUpti_SassMetricsEnable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called multiple times for a cuda context without calling cuptiSassMetricsDisable() API or called before cuptiSassMetricsSetConfig() API call.", "keywords": []}, {"id": 1903, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsEnable::pParams", "display_name": "cuptiSassMetricsEnable::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv422cuptiSassMetricsEnableP30CUpti_SassMetricsEnable_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsEnable CUpti_SassMetricsEnable_Params  * pParams Sass metric data collection enable API will mark the start of a range, between which kernel will be profiled for SASS metrics. Parameters pParams \u2013 A pointer to CUpti_SassMetricsEnable_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called multiple times for a cuda context without calling cuptiSassMetricsDisable() API or called before cuptiSassMetricsSetConfig() API call.", "keywords": []}, {"id": 1904, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsFlushData", "display_name": "cuptiSassMetricsFlushData", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv425cuptiSassMetricsFlushDataP33CUpti_SassMetricsFlushData_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsFlushData CUpti_SassMetricsFlushData_Params  * pParams Flush SASS metrics data from CUPTI internal buffer to the user buffer. User needs to allocate the buffer for retrieving the data. The number of records collected can be queried using the API cuptiSassMetricsGetDataProperties() . Parameters pParams \u2013 A pointer to CUpti_SassMetricsFlushData_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection. CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called outside the enable/disable range.", "keywords": []}, {"id": 1905, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsFlushData::pParams", "display_name": "cuptiSassMetricsFlushData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv425cuptiSassMetricsFlushDataP33CUpti_SassMetricsFlushData_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsFlushData CUpti_SassMetricsFlushData_Params  * pParams Flush SASS metrics data from CUPTI internal buffer to the user buffer. User needs to allocate the buffer for retrieving the data. The number of records collected can be queried using the API cuptiSassMetricsGetDataProperties() . Parameters pParams \u2013 A pointer to CUpti_SassMetricsFlushData_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection. CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called outside the enable/disable range.", "keywords": []}, {"id": 1906, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetDataProperties", "display_name": "cuptiSassMetricsGetDataProperties", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv433cuptiSassMetricsGetDataPropertiesP41CUpti_SassMetricsGetDataProperties_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetDataProperties CUpti_SassMetricsGetDataProperties_Params  * pParams SASS metric data properties API will give the data regarding number of instances of a metric value and number of SASS instruction data has been collected. The number of instances of a metric will vary as per user set the output granularity level with CUpti_SassMetrics_OutputGranularity value. User need to allocate memory for retriving the SASS data using cuptiSassMetricsFlushData() API. Parameters pParams \u2013 A pointer to CUpti_SassMetricsGetDataProperties_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called outside the enable/disable range.", "keywords": []}, {"id": 1907, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetDataProperties::pParams", "display_name": "cuptiSassMetricsGetDataProperties::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv433cuptiSassMetricsGetDataPropertiesP41CUpti_SassMetricsGetDataProperties_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetDataProperties CUpti_SassMetricsGetDataProperties_Params  * pParams SASS metric data properties API will give the data regarding number of instances of a metric value and number of SASS instruction data has been collected. The number of instances of a metric will vary as per user set the output granularity level with CUpti_SassMetrics_OutputGranularity value. User need to allocate memory for retriving the SASS data using cuptiSassMetricsFlushData() API. Parameters pParams \u2013 A pointer to CUpti_SassMetricsGetDataProperties_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection CUPTI_ERROR_INVALID_OPERATION \u2013 if this API is called outside the enable/disable range.", "keywords": []}, {"id": 1908, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetMetrics", "display_name": "cuptiSassMetricsGetMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv426cuptiSassMetricsGetMetricsP35CUpti_SassMetrics_GetMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetMetrics CUpti_SassMetrics_GetMetrics_Params  * pParams Get the list of all supported SASS metrics for the chip. Parameters pParams \u2013 A pointer to CUpti_SassMetrics_GetMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric collection", "keywords": []}, {"id": 1909, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetMetrics::pParams", "display_name": "cuptiSassMetricsGetMetrics::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv426cuptiSassMetricsGetMetricsP35CUpti_SassMetrics_GetMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetMetrics CUpti_SassMetrics_GetMetrics_Params  * pParams Get the list of all supported SASS metrics for the chip. Parameters pParams \u2013 A pointer to CUpti_SassMetrics_GetMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric collection", "keywords": []}, {"id": 1910, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetNumOfMetrics", "display_name": "cuptiSassMetricsGetNumOfMetrics", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv431cuptiSassMetricsGetNumOfMetricsP40CUpti_SassMetrics_GetNumOfMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetNumOfMetrics CUpti_SassMetrics_GetNumOfMetrics_Params  * pParams Get the number of supported SASS metrics for the chip. Parameters pParams \u2013 A pointer to CUpti_SassMetrics_GetNumOfMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric collection", "keywords": []}, {"id": 1911, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetNumOfMetrics::pParams", "display_name": "cuptiSassMetricsGetNumOfMetrics::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv431cuptiSassMetricsGetNumOfMetricsP40CUpti_SassMetrics_GetNumOfMetrics_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetNumOfMetrics CUpti_SassMetrics_GetNumOfMetrics_Params  * pParams Get the number of supported SASS metrics for the chip. Parameters pParams \u2013 A pointer to CUpti_SassMetrics_GetNumOfMetrics_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric collection", "keywords": []}, {"id": 1912, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetProperties", "display_name": "cuptiSassMetricsGetProperties", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv429cuptiSassMetricsGetPropertiesP38CUpti_SassMetrics_GetProperties_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetProperties CUpti_SassMetrics_GetProperties_Params  * pParams Get metric properties for the queried metric. For a given metric the results will be put in CUpti_SassMetrics_MetricDetails which stores metric ID, description of the metric. Parameters pParams \u2013 A pointer to CUpti_SassMetrics_GetProperties_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection", "keywords": []}, {"id": 1913, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsGetProperties::pParams", "display_name": "cuptiSassMetricsGetProperties::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv429cuptiSassMetricsGetPropertiesP38CUpti_SassMetrics_GetProperties_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsGetProperties CUpti_SassMetrics_GetProperties_Params  * pParams Get metric properties for the queried metric. For a given metric the results will be put in CUpti_SassMetrics_MetricDetails which stores metric ID, description of the metric. Parameters pParams \u2013 A pointer to CUpti_SassMetrics_GetProperties_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection", "keywords": []}, {"id": 1914, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsSetConfig", "display_name": "cuptiSassMetricsSetConfig", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv425cuptiSassMetricsSetConfigP33CUpti_SassMetricsSetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsSetConfig CUpti_SassMetricsSetConfig_Params  * pParams Set config for the SASS metric data collection for a device. User need to call this API before calling any of the SASS metric data collection APIs. Each set config API call need to be followed by cuptiSassPatchingUnSetConfig API before calling the cuptiSassMetricsSetConfig() API again for the same device. Parameters pParams \u2013 A pointer to CUpti_SassMetricsSetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this is called multiple times for the device without calling unset config API CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection", "keywords": []}, {"id": 1915, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsSetConfig::pParams", "display_name": "cuptiSassMetricsSetConfig::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv425cuptiSassMetricsSetConfigP33CUpti_SassMetricsSetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsSetConfig CUpti_SassMetricsSetConfig_Params  * pParams Set config for the SASS metric data collection for a device. User need to call this API before calling any of the SASS metric data collection APIs. Each set config API call need to be followed by cuptiSassPatchingUnSetConfig API before calling the cuptiSassMetricsSetConfig() API again for the same device. Parameters pParams \u2013 A pointer to CUpti_SassMetricsSetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this is called multiple times for the device without calling unset config API CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection", "keywords": []}, {"id": 1916, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsUnsetConfig", "display_name": "cuptiSassMetricsUnsetConfig", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv427cuptiSassMetricsUnsetConfigP35CUpti_SassMetricsUnsetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsUnsetConfig CUpti_SassMetricsUnsetConfig_Params  * pParams Unset config API will reset the SASS metric data collection configuration for the device. Once this API called CUPTI will deallocate all the memory allocated and remove all the configuration for SASS metric data collection. User can only call this API for a device where cuptiSassMetricsSetConfig() API has been called earlier for the device. Parameters pParams \u2013 A pointer to CUpti_SassMetricsSetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this is called multiple times for the device without calling set config API CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection", "keywords": []}, {"id": 1917, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "cpp", "name": "cuptiSassMetricsUnsetConfig::pParams", "display_name": "cuptiSassMetricsUnsetConfig::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "_CPPv427cuptiSassMetricsUnsetConfigP35CUpti_SassMetricsUnsetConfig_Params", "priority": 1, "content": "CUptiResult  cuptiSassMetricsUnsetConfig CUpti_SassMetricsUnsetConfig_Params  * pParams Unset config API will reset the SASS metric data collection configuration for the device. Once this API called CUPTI will deallocate all the memory allocated and remove all the configuration for SASS metric data collection. User can only call this API for a device where cuptiSassMetricsSetConfig() API has been called earlier for the device. Parameters pParams \u2013 A pointer to CUpti_SassMetricsSetConfig_Params Return values CUPTI_SUCCESS \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if any pParams is not valid CUPTI_ERROR_INVALID_CONTEXT \u2013 if any cuda context has not been created prior to this API call CUPTI_ERROR_INVALID_OPERATION \u2013 if this is called multiple times for the device without calling set config API CUPTI_ERROR_NOT_SUPPORTED \u2013 indicates that the system/device doesn\u2019t support SASS metric data collection", "keywords": []}, {"id": 1918, "doc_id": 1918, "filename": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "display_name": "CUPTI SASS Metrics API", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___s_a_s_s___m_e_t_r_i_c_s___a_p_i", "anchor": "", "priority": -1, "content": "Functions, types, and enums that implement the CUPTI SASS Metrics API. Data Structures CUpti_SassMetricsDisable_Params  Params for cuptiSassMetricsDisable. CUpti_SassMetricsEnable_Params  Params for cuptiSassMetricsEnable. CUpti_SassMetricsFlushData_Params  Params for cuptiSassMetricsFlushData. CUpti_SassMetricsGetDataProperties_Params  Params for cuptiSassMetricsGetDataProperties. CUpti_SassMetricsSetConfig_Params  Params for cuptiSassMetricsSetConfig. CUpti_SassMetricsUnsetConfig_Params  Params for cuptiSassMetricsUnsetConfig. CUpti_SassMetrics_Config   CUpti_SassMetrics_Data   CUpti_SassMetrics_GetMetrics_Params  Params for cuptiSassMetricsGetMetrics. CUpti_SassMetrics_GetNumOfMetrics_Params  Params for cuptiSassMetricsGetNumOfMetrics. CUpti_SassMetrics_GetProperties_Params  Params for cuptiSassMetricsGetProperties. CUpti_SassMetrics_InstanceValue   CUpti_SassMetrics_MetricDetails   Macros CUpti_SassMetricsDisable_Params_STRUCT_SIZE   CUpti_SassMetricsEnable_Params_STRUCT_SIZE   CUpti_SassMetricsFlushData_Params_STRUCT_SIZE   CUpti_SassMetricsGetDataProperties_Params_STRUCT_SIZE   CUpti_SassMetricsSetConfig_Params_STRUCT_SIZE   CUpti_SassMetricsUnsetConfig_Params_STRUCT_SIZE   CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE   CUpti_SassMetrics_GetNumOfMetrics_Params_STRUCT_SIZE   CUpti_SassMetrics_GetProperties_Params_STRUCT_SIZE   CUpti_SassMetrics_InstanceValue_STRUCT_SIZE   Enumerations CUpti_SassMetrics_OutputGranularity   Functions CUptiResult  cuptiSassMetricsDisable (CUpti_SassMetricsDisable_Params *pParams) SASS metric data collection disable API will mark the end of a range, any kernel launched after this API call will not be profiled for the SASS metrics. CUptiResult  cuptiSassMetricsEnable (CUpti_SassMetricsEnable_Params *pParams) Sass metric data collection enable API will mark the start of a range, between which kernel will be profiled for SASS metrics. CUptiResult  cuptiSassMetricsFlushData (CUpti_SassMetricsFlushData_Params *pParams) Flush SASS metrics data from CUPTI internal buffer to the user buffer. CUptiResult  cuptiSassMetricsGetDataProperties (CUpti_SassMetricsGetDataProperties_Params *pParams) SASS metric data properties API will give the data regarding number of instances of a metric value and number of SASS instruction data has been collected. CUptiResult  cuptiSassMetricsGetMetrics (CUpti_SassMetrics_GetMetrics_Params *pParams) Get the list of all supported SASS metrics for the chip. CUptiResult  cuptiSassMetricsGetNumOfMetrics (CUpti_SassMetrics_GetNumOfMetrics_Params *pParams) Get the number of supported SASS metrics for the chip. CUptiResult  cuptiSassMetricsGetProperties (CUpti_SassMetrics_GetProperties_Params *pParams) Get metric properties for the queried metric. CUptiResult  cuptiSassMetricsSetConfig (CUpti_SassMetricsSetConfig_Params *pParams) Set config for the SASS metric data collection for a device. CUptiResult  cuptiSassMetricsUnsetConfig (CUpti_SassMetricsUnsetConfig_Params *pParams) Unset config API will reset the SASS metric data collection configuration for the device.", "keywords": []}, {"id": 1919, "doc_id": 1922, "filename": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i.html", "domain_name": "c", "name": "CUPTI_API_VERSION", "display_name": "CUPTI_API_VERSION", "type": "macro", "display_type": "C macro", "docname": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i", "anchor": "c.CUPTI_API_VERSION", "priority": 1, "content": "CUPTI_API_VERSION The API version for this implementation of CUPTI. The API version for this implementation of CUPTI. This define along with cuptiGetVersion can be used to dynamically detect if the version of CUPTI compiled against matches the version of the loaded CUPTI library. v1 : CUDAToolsSDK 4.0 v2 : CUDAToolsSDK 4.1 v3 : CUDA Toolkit 5.0 v4 : CUDA Toolkit 5.5 v5 : CUDA Toolkit 6.0 v6 : CUDA Toolkit 6.5 v7 : CUDA Toolkit 6.5(with sm_52 support) v8 : CUDA Toolkit 7.0 v9 : CUDA Toolkit 8.0 v10 : CUDA Toolkit 9.0 v11 : CUDA Toolkit 9.1 v12 : CUDA Toolkit 10.0, 10.1 and 10.2 v13 : CUDA Toolkit 11.0 v14 : CUDA Toolkit 11.1 v15 : CUDA Toolkit 11.2, 11.3 and 11.4 v16 : CUDA Toolkit 11.5 v17 : CUDA Toolkit 11.6 v18 : CUDA Toolkit 11.8 v19 : CUDA Toolkit 12.0 v20 : CUDA Toolkit 12.2 v21 : CUDA Toolkit 12.3 v22 : CUDA Toolkit 12.4 v23 : CUDA Toolkit 12.5 v24 : CUDA Toolkit 12.6", "keywords": []}, {"id": 1920, "doc_id": 1922, "filename": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetVersion", "display_name": "cuptiGetVersion", "type": "function", "display_type": "C++ function", "docname": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i", "anchor": "_CPPv415cuptiGetVersionP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetVersion uint32_t  * version Get the CUPTI API version. Return the API version in *version . CUPTI_API_VERSION  Parameters version \u2013 Returns the version Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if version is NULL", "keywords": []}, {"id": 1921, "doc_id": 1922, "filename": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i.html", "domain_name": "cpp", "name": "cuptiGetVersion::version", "display_name": "cuptiGetVersion::version", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i", "anchor": "_CPPv415cuptiGetVersionP8uint32_t", "priority": 1, "content": "CUptiResult  cuptiGetVersion uint32_t  * version Get the CUPTI API version. Return the API version in *version . CUPTI_API_VERSION  Parameters version \u2013 Returns the version Return values CUPTI_SUCCESS \u2013 on success CUPTI_ERROR_INVALID_PARAMETER \u2013 if version is NULL", "keywords": []}, {"id": 1922, "doc_id": 1922, "filename": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i.html", "domain_name": "std", "name": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i", "display_name": "CUPTI Version", "type": "doc", "display_type": "Page", "docname": "api/group___c_u_p_t_i___v_e_r_s_i_o_n___a_p_i", "anchor": "", "priority": -1, "content": "Function and macro to determine the CUPTI version. Macros CUPTI_API_VERSION  The API version for this implementation of CUPTI. Functions CUptiResult  cuptiGetVersion (uint32_t *version) Get the CUPTI API version.", "keywords": []}, {"id": 1923, "doc_id": 1923, "filename": "api/modules.html", "domain_name": "std", "name": "api/modules", "display_name": "Modules", "type": "doc", "display_type": "Page", "docname": "api/modules", "anchor": "", "priority": -1, "content": "CUPTI Activity API  Functions, types, and enums that implement the CUPTI Activity API. CUPTI Callback API  Functions, types, and enums that implement the CUPTI Callback API. CUPTI Checkpoint API  Functions, types, and enums that implement the CUPTI Checkpoint API. CUPTI Event API  Functions, types, and enums that implement the CUPTI Event API. CUPTI Metric API  Functions, types, and enums that implement the CUPTI Metric API. CUPTI PC Sampling API  Functions, types, and enums that implement the CUPTI PC Sampling API. CUPTI PC Sampling Utility API  Functions, types, and enums that implement the CUPTI PC Sampling Utility API. CUPTI PM Sampling API  Functions to enable, disable, start, stop, and decode PM sampling. CUPTI Profiler Host API  Functions, types, and enums that implement the CUPTI Profiler Host API. CUPTI Profiling API  Functions, types, and enums that implement the CUPTI Profiling API. CUPTI Range Profiling API  Functions, types, and enums that implement the CUPTI Range Profiling API. CUPTI Result Codes  Error and result codes returned by CUPTI functions. CUPTI SASS Metrics API  Functions, types, and enums that implement the CUPTI SASS Metrics API. CUPTI Version  Function and macro to determine the CUPTI version.", "keywords": []}, {"id": 1924, "doc_id": 1925, "filename": "api/namespace_c_u_p_t_i.html", "domain_name": "cpp", "name": "CUPTI", "display_name": "CUPTI", "type": "type", "display_type": "C++ type", "docname": "api/namespace_c_u_p_t_i", "anchor": "_CPPv45CUPTI", "priority": 1, "content": "namespace  CUPTI Namespaces PcSamplingUtil", "keywords": []}, {"id": 1925, "doc_id": 1925, "filename": "api/namespace_c_u_p_t_i.html", "domain_name": "std", "name": "api/namespace_c_u_p_t_i", "display_name": "CUPTI", "type": "doc", "display_type": "Page", "docname": "api/namespace_c_u_p_t_i", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1926, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil", "display_name": "CUPTI::PcSamplingUtil", "type": "type", "display_type": "C++ type", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtilE", "priority": 1, "content": "namespace  PcSamplingUtil Data Structures BufferInfo   BufferInfo will be stored in the file for every buffer i.e for every call of UtilDumpPcSamplingBufferInFile() API. CUptiUtil_GetBufferInfoParams  Params for CuptiUtilGetBufferInfo . CUptiUtil_GetHeaderDataParams  Params for CuptiUtilGetHeaderData . CUptiUtil_GetPcSampDataParams  Params for CuptiUtilGetPcSampData . CUptiUtil_MergePcSampDataParams  Params for CuptiUtilMergePcSampData . CUptiUtil_PutPcSampDataParams  Params for CuptiUtilPutPcSampData . Header   Header info will be stored in file. PcSamplingStallReasons  All available stall reasons name and respective indexes will be stored in it. Enumerations CUptiUtilResult  CUPTI PC sampling utility API result codes. PcSamplingBufferType  CUPTI PC sampling buffer types. Functions CUptiUtilResult  CuptiUtilGetBufferInfo (CUptiUtil_GetBufferInfoParams *pParams) Get buffer info data of file. CUptiUtilResult  CuptiUtilGetHeaderData (CUptiUtil_GetHeaderDataParams *pParams) Get header data of file. CUptiUtilResult  CuptiUtilGetPcSampData (CUptiUtil_GetPcSampDataParams *pParams) Retrieve PC sampling data from file into allocated buffer. CUptiUtilResult  CuptiUtilMergePcSampData (CUptiUtil_MergePcSampDataParams *pParams) Merge PC sampling data range id wise. CUptiUtilResult  CuptiUtilPutPcSampData (CUptiUtil_PutPcSampDataParams *pParams) Dump PC sampling data into the file.", "keywords": []}, {"id": 1927, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult38CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTEDE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED Provided file handle is corrupted.", "keywords": []}, {"id": 1928, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_FORCE_INT", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult26CUPTI_UTIL_ERROR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_FORCE_INT", "keywords": []}, {"id": 1929, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_INVALID_PARAMETER", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_INVALID_PARAMETER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult34CUPTI_UTIL_ERROR_INVALID_PARAMETERE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_INVALID_PARAMETER One or more of the parameters are invalid.", "keywords": []}, {"id": 1930, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_OUT_OF_MEMORY", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_OUT_OF_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult30CUPTI_UTIL_ERROR_OUT_OF_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_OUT_OF_MEMORY Unable to allocate enough memory to perform the requested operation.", "keywords": []}, {"id": 1931, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult44CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILEDE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED Read or write operation failed.", "keywords": []}, {"id": 1932, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILED", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult38CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILEDE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILED seek operation failed.", "keywords": []}, {"id": 1933, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult38CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILEE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE Unable to create a new file.", "keywords": []}, {"id": 1934, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult36CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILEE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE Unable to open a file.", "keywords": []}, {"id": 1935, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_UNKNOWN", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_ERROR_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult24CUPTI_UTIL_ERROR_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_UNKNOWN An unknown internal error has occurred.", "keywords": []}, {"id": 1936, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_SUCCESS", "display_name": "CUPTI::PcSamplingUtil::CUPTI_UTIL_SUCCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult18CUPTI_UTIL_SUCCESSE", "priority": 1, "content": "enumerator  CUPTI_UTIL_SUCCESS No error.", "keywords": []}, {"id": 1937, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult", "type": "enum", "display_type": "C++ enum", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResultE", "priority": 1, "content": "enum  CUPTI :: PcSamplingUtil :: CUptiUtilResult CUPTI PC sampling utility API result codes. Error and result codes returned by CUPTI PC sampling utility API. Values:", "keywords": []}, {"id": 1938, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult38CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTEDE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED Provided file handle is corrupted.", "keywords": []}, {"id": 1939, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_FORCE_INT", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_FORCE_INT", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult26CUPTI_UTIL_ERROR_FORCE_INTE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_FORCE_INT", "keywords": []}, {"id": 1940, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_INVALID_PARAMETER", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_INVALID_PARAMETER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult34CUPTI_UTIL_ERROR_INVALID_PARAMETERE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_INVALID_PARAMETER One or more of the parameters are invalid.", "keywords": []}, {"id": 1941, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_OUT_OF_MEMORY", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_OUT_OF_MEMORY", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult30CUPTI_UTIL_ERROR_OUT_OF_MEMORYE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_OUT_OF_MEMORY Unable to allocate enough memory to perform the requested operation.", "keywords": []}, {"id": 1942, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult44CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILEDE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED Read or write operation failed.", "keywords": []}, {"id": 1943, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILED", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILED", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult38CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILEDE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_SEEK_OPERATION_FAILED seek operation failed.", "keywords": []}, {"id": 1944, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult38CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILEE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE Unable to create a new file.", "keywords": []}, {"id": 1945, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult36CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILEE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE Unable to open a file.", "keywords": []}, {"id": 1946, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_UNKNOWN", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_ERROR_UNKNOWN", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult24CUPTI_UTIL_ERROR_UNKNOWNE", "priority": 1, "content": "enumerator  CUPTI_UTIL_ERROR_UNKNOWN An unknown internal error has occurred.", "keywords": []}, {"id": 1947, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_SUCCESS", "display_name": "CUPTI::PcSamplingUtil::CUptiUtilResult::CUPTI_UTIL_SUCCESS", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil15CUptiUtilResult18CUPTI_UTIL_SUCCESSE", "priority": 1, "content": "enumerator  CUPTI_UTIL_SUCCESS No error.", "keywords": []}, {"id": 1948, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilGetBufferInfo", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilGetBufferInfo", "type": "function", "display_type": "C++ function", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilGetBufferInfoEP29CUptiUtil_GetBufferInfoParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilGetBufferInfo CUptiUtil_GetBufferInfoParams  * pParams Get buffer info data of file. This API must be called every time before calling CuptiUtilGetPcSampData API. BufferInfo structure, it gives info about recordCount and stallReasonCount of every record in the buffer. This will help to allocate exact buffer to retrieve data into it. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if either of pParam or fileHandle is NULL or param struct size is incorrect. CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED \u2013 file handle is not in good state to read data from file. CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013 failed to read data from file.", "keywords": []}, {"id": 1949, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilGetBufferInfo::pParams", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilGetBufferInfo::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilGetBufferInfoEP29CUptiUtil_GetBufferInfoParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilGetBufferInfo CUptiUtil_GetBufferInfoParams  * pParams Get buffer info data of file. This API must be called every time before calling CuptiUtilGetPcSampData API. BufferInfo structure, it gives info about recordCount and stallReasonCount of every record in the buffer. This will help to allocate exact buffer to retrieve data into it. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if either of pParam or fileHandle is NULL or param struct size is incorrect. CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED \u2013 file handle is not in good state to read data from file. CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013 failed to read data from file.", "keywords": []}, {"id": 1950, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilGetHeaderData", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilGetHeaderData", "type": "function", "display_type": "C++ function", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilGetHeaderDataEP29CUptiUtil_GetHeaderDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilGetHeaderData CUptiUtil_GetHeaderDataParams  * pParams Get header data of file. This API must be called once initially while retrieving data from file. Header structure, it gives info about total number of buffers present in the file. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if either of pParam or fileHandle is NULL or param struct size is incorrect. CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED \u2013 file handle is not in good state to read data from file CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013 failed to read data from file.", "keywords": []}, {"id": 1951, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilGetHeaderData::pParams", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilGetHeaderData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilGetHeaderDataEP29CUptiUtil_GetHeaderDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilGetHeaderData CUptiUtil_GetHeaderDataParams  * pParams Get header data of file. This API must be called once initially while retrieving data from file. Header structure, it gives info about total number of buffers present in the file. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if either of pParam or fileHandle is NULL or param struct size is incorrect. CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED \u2013 file handle is not in good state to read data from file CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013 failed to read data from file.", "keywords": []}, {"id": 1952, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilGetPcSampData", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilGetPcSampData", "type": "function", "display_type": "C++ function", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilGetPcSampDataEP29CUptiUtil_GetPcSampDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilGetPcSampData CUptiUtil_GetPcSampDataParams  * pParams Retrieve PC sampling data from file into allocated buffer. This API must be called after CuptiUtilGetBufferInfo API. It will retrieve data from file into allocated buffer. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if buffer type is invalid or if either of pSampData, pParams is NULL. If pPcSamplingStallReasons is not NULL then error out if either of stallReasonIndex, stallReasons or stallReasons array element pointer is NULL. or filename is empty. CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013 CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED \u2013 file handle is not in good state to read data from file.", "keywords": []}, {"id": 1953, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilGetPcSampData::pParams", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilGetPcSampData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilGetPcSampDataEP29CUptiUtil_GetPcSampDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilGetPcSampData CUptiUtil_GetPcSampDataParams  * pParams Retrieve PC sampling data from file into allocated buffer. This API must be called after CuptiUtilGetBufferInfo API. It will retrieve data from file into allocated buffer. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if buffer type is invalid or if either of pSampData, pParams is NULL. If pPcSamplingStallReasons is not NULL then error out if either of stallReasonIndex, stallReasons or stallReasons array element pointer is NULL. or filename is empty. CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013 CUPTI_UTIL_ERROR_FILE_HANDLE_CORRUPTED \u2013 file handle is not in good state to read data from file.", "keywords": []}, {"id": 1954, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilMergePcSampData", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilMergePcSampData", "type": "function", "display_type": "C++ function", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil24CuptiUtilMergePcSampDataEP31CUptiUtil_MergePcSampDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilMergePcSampData CUptiUtil_MergePcSampDataParams  * pParams Merge PC sampling data range id wise. This API merge PC sampling data range id wise. It allocates memory for merged data and fill data in it and provide buffer pointer in MergedPcSampDataBuffers field. It is expected from user to free merge data buffers after use. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if param struct size is invalid or count of buffers to merge is invalid i.e less than 1 or either of PcSampDataBuffer, MergedPcSampDataBuffers, numMergedBuffer is NULL CUPTI_UTIL_ERROR_OUT_OF_MEMORY \u2013 Unable to allocate memory for merged buffer.", "keywords": []}, {"id": 1955, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilMergePcSampData::pParams", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilMergePcSampData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil24CuptiUtilMergePcSampDataEP31CUptiUtil_MergePcSampDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilMergePcSampData CUptiUtil_MergePcSampDataParams  * pParams Merge PC sampling data range id wise. This API merge PC sampling data range id wise. It allocates memory for merged data and fill data in it and provide buffer pointer in MergedPcSampDataBuffers field. It is expected from user to free merge data buffers after use. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if param struct size is invalid or count of buffers to merge is invalid i.e less than 1 or either of PcSampDataBuffer, MergedPcSampDataBuffers, numMergedBuffer is NULL CUPTI_UTIL_ERROR_OUT_OF_MEMORY \u2013 Unable to allocate memory for merged buffer.", "keywords": []}, {"id": 1956, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilPutPcSampData", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilPutPcSampData", "type": "function", "display_type": "C++ function", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilPutPcSampDataEP29CUptiUtil_PutPcSampDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilPutPcSampData CUptiUtil_PutPcSampDataParams  * pParams Dump PC sampling data into the file. This API can be called multiple times. It will append buffer in the file. For every buffer it will store BufferInfo so that before retrieving data it will help to allocate buffer to store retrieved data. This API creates file if file does not present. If stallReasonIndex or stallReasons pointer of CUptiUtil_PutPcSampDataParams is NULL then stall reasons data will not be stored in file. It is expected to store all available stall reason data at least once to refer it during offline correlation. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if buffer type is invalid or if either of pSamplingData, pParams pointer is NULL or stall reason configuration details not provided or filename is empty. CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE \u2013 CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE \u2013 CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013", "keywords": []}, {"id": 1957, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CuptiUtilPutPcSampData::pParams", "display_name": "CUPTI::PcSamplingUtil::CuptiUtilPutPcSampData::pParams", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22CuptiUtilPutPcSampDataEP29CUptiUtil_PutPcSampDataParams", "priority": 1, "content": "CUptiUtilResult  CUPTI :: PcSamplingUtil :: CuptiUtilPutPcSampData CUptiUtil_PutPcSampDataParams  * pParams Dump PC sampling data into the file. This API can be called multiple times. It will append buffer in the file. For every buffer it will store BufferInfo so that before retrieving data it will help to allocate buffer to store retrieved data. This API creates file if file does not present. If stallReasonIndex or stallReasons pointer of CUptiUtil_PutPcSampDataParams is NULL then stall reasons data will not be stored in file. It is expected to store all available stall reason data at least once to refer it during offline correlation. Return values CUPTI_UTIL_SUCCESS \u2013 CUPTI_UTIL_ERROR_INVALID_PARAMETER \u2013 error out if buffer type is invalid or if either of pSamplingData, pParams pointer is NULL or stall reason configuration details not provided or filename is empty. CUPTI_UTIL_ERROR_UNABLE_TO_CREATE_FILE \u2013 CUPTI_UTIL_ERROR_UNABLE_TO_OPEN_FILE \u2013 CUPTI_UTIL_ERROR_READ_WRITE_OPERATION_FAILED \u2013", "keywords": []}, {"id": 1958, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PC_SAMPLING_BUFFER_INVALID", "display_name": "CUPTI::PcSamplingUtil::PC_SAMPLING_BUFFER_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil20PcSamplingBufferType26PC_SAMPLING_BUFFER_INVALIDE", "priority": 1, "content": "enumerator  PC_SAMPLING_BUFFER_INVALID Invalid buffer type.", "keywords": []}, {"id": 1959, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATA", "display_name": "CUPTI::PcSamplingUtil::PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil20PcSamplingBufferType37PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATAE", "priority": 1, "content": "enumerator  PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATA Refers to CUpti_PCSamplingData buffer.", "keywords": []}, {"id": 1960, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingBufferType", "display_name": "CUPTI::PcSamplingUtil::PcSamplingBufferType", "type": "enum", "display_type": "C++ enum", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil20PcSamplingBufferTypeE", "priority": 1, "content": "enum  CUPTI :: PcSamplingUtil :: PcSamplingBufferType CUPTI PC sampling buffer types. Values:", "keywords": []}, {"id": 1961, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingBufferType::PC_SAMPLING_BUFFER_INVALID", "display_name": "CUPTI::PcSamplingUtil::PcSamplingBufferType::PC_SAMPLING_BUFFER_INVALID", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil20PcSamplingBufferType26PC_SAMPLING_BUFFER_INVALIDE", "priority": 1, "content": "enumerator  PC_SAMPLING_BUFFER_INVALID Invalid buffer type.", "keywords": []}, {"id": 1962, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingBufferType::PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATA", "display_name": "CUPTI::PcSamplingUtil::PcSamplingBufferType::PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATA", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil20PcSamplingBufferType37PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATAE", "priority": 1, "content": "enumerator  PC_SAMPLING_BUFFER_PC_TO_COUNTER_DATA Refers to CUpti_PCSamplingData buffer.", "keywords": []}, {"id": 1963, "doc_id": 1963, "filename": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util.html", "domain_name": "std", "name": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "display_name": "CUPTI::PcSamplingUtil", "type": "doc", "display_type": "Page", "docname": "api/namespace_c_u_p_t_i_1_1_pc_sampling_util", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1964, "doc_id": 1965, "filename": "api/namespace_n_v.html", "domain_name": "cpp", "name": "NV", "display_name": "NV", "type": "type", "display_type": "C++ type", "docname": "api/namespace_n_v", "anchor": "_CPPv42NV", "priority": 1, "content": "namespace  NV Namespaces Cupti", "keywords": []}, {"id": 1965, "doc_id": 1965, "filename": "api/namespace_n_v.html", "domain_name": "std", "name": "api/namespace_n_v", "display_name": "NV", "type": "doc", "display_type": "Page", "docname": "api/namespace_n_v", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1966, "doc_id": 1967, "filename": "api/namespace_n_v_1_1_cupti.html", "domain_name": "cpp", "name": "NV::Cupti", "display_name": "NV::Cupti", "type": "type", "display_type": "C++ type", "docname": "api/namespace_n_v_1_1_cupti", "anchor": "_CPPv4N2NV5CuptiE", "priority": 1, "content": "namespace  Cupti Namespaces Checkpoint", "keywords": []}, {"id": 1967, "doc_id": 1967, "filename": "api/namespace_n_v_1_1_cupti.html", "domain_name": "std", "name": "api/namespace_n_v_1_1_cupti", "display_name": "NV::Cupti", "type": "doc", "display_type": "Page", "docname": "api/namespace_n_v_1_1_cupti", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1968, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint", "display_name": "NV::Cupti::Checkpoint", "type": "type", "display_type": "C++ type", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10CheckpointE", "priority": 1, "content": "namespace  Checkpoint Data Structures CUpti_Checkpoint  Configuration and handle for a CUPTI Checkpoint. Enumerations CUpti_CheckpointOptimizations  Specifies optimization options for a checkpoint, may be OR&#x27;d together to specify multiple options. Functions CUptiResult  cuptiCheckpointFree (CUpti_Checkpoint *const handle) Free the backing data for a checkpoint. CUptiResult  cuptiCheckpointRestore (CUpti_Checkpoint *const handle) Restore a checkpoint to the device associated with its context. CUptiResult  cuptiCheckpointSave (CUpti_Checkpoint *const handle) Initialize and save a checkpoint of the device state associated with the handle context.", "keywords": []}, {"id": 1969, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUPTI_CHECKPOINT_OPT_NONE", "display_name": "NV::Cupti::Checkpoint::CUPTI_CHECKPOINT_OPT_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint29CUpti_CheckpointOptimizations25CUPTI_CHECKPOINT_OPT_NONEE", "priority": 1, "content": "enumerator  CUPTI_CHECKPOINT_OPT_NONE Default behavior.", "keywords": []}, {"id": 1970, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUPTI_CHECKPOINT_OPT_TRANSFER", "display_name": "NV::Cupti::Checkpoint::CUPTI_CHECKPOINT_OPT_TRANSFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint29CUpti_CheckpointOptimizations29CUPTI_CHECKPOINT_OPT_TRANSFERE", "priority": 1, "content": "enumerator  CUPTI_CHECKPOINT_OPT_TRANSFER Determine which mem blocks have changed, and only restore those. This optimization is cached, which means cuptiCheckpointRestore must always be called at the same point in the application when this option is enabled, or the result may be incorrect.", "keywords": []}, {"id": 1971, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations", "display_name": "NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations", "type": "enum", "display_type": "C++ enum", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint29CUpti_CheckpointOptimizationsE", "priority": 1, "content": "enum  NV :: Cupti :: Checkpoint :: CUpti_CheckpointOptimizations Specifies optimization options for a checkpoint, may be OR\u2019d together to specify multiple options. Values:", "keywords": []}, {"id": 1972, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations::CUPTI_CHECKPOINT_OPT_NONE", "display_name": "NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations::CUPTI_CHECKPOINT_OPT_NONE", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint29CUpti_CheckpointOptimizations25CUPTI_CHECKPOINT_OPT_NONEE", "priority": 1, "content": "enumerator  CUPTI_CHECKPOINT_OPT_NONE Default behavior.", "keywords": []}, {"id": 1973, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations::CUPTI_CHECKPOINT_OPT_TRANSFER", "display_name": "NV::Cupti::Checkpoint::CUpti_CheckpointOptimizations::CUPTI_CHECKPOINT_OPT_TRANSFER", "type": "enumerator", "display_type": "C++ enumerator", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint29CUpti_CheckpointOptimizations29CUPTI_CHECKPOINT_OPT_TRANSFERE", "priority": 1, "content": "enumerator  CUPTI_CHECKPOINT_OPT_TRANSFER Determine which mem blocks have changed, and only restore those. This optimization is cached, which means cuptiCheckpointRestore must always be called at the same point in the application when this option is enabled, or the result may be incorrect.", "keywords": []}, {"id": 1974, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::cuptiCheckpointFree", "display_name": "NV::Cupti::Checkpoint::cuptiCheckpointFree", "type": "function", "display_type": "C++ function", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint19cuptiCheckpointFreeEPC16CUpti_Checkpoint", "priority": 1, "content": "CUptiResult  NV :: Cupti :: Checkpoint :: cuptiCheckpointFree CUpti_Checkpoint  * const  handle Free the backing data for a checkpoint. Frees all associated device, host memory and filesystem storage used for this context. After freeing a handle, it may be re-used as if it was new - options may be re-configured and will take effect on the next call to cuptiCheckpointSave . Parameters handle \u2013 A pointer to a previously saved CUpti_Checkpoint object Return values CUPTI_SUCCESS \u2013 if the handle was successfully freed CUPTI_ERROR_INVALID_PARAMETER \u2013 if the handle was already freed or appears invalid CUPTI_ERROR_INVALID_CONTEXT \u2013 if the context is no longer valid", "keywords": []}, {"id": 1975, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::cuptiCheckpointFree::handle", "display_name": "NV::Cupti::Checkpoint::cuptiCheckpointFree::handle", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint19cuptiCheckpointFreeEPC16CUpti_Checkpoint", "priority": 1, "content": "CUptiResult  NV :: Cupti :: Checkpoint :: cuptiCheckpointFree CUpti_Checkpoint  * const  handle Free the backing data for a checkpoint. Frees all associated device, host memory and filesystem storage used for this context. After freeing a handle, it may be re-used as if it was new - options may be re-configured and will take effect on the next call to cuptiCheckpointSave . Parameters handle \u2013 A pointer to a previously saved CUpti_Checkpoint object Return values CUPTI_SUCCESS \u2013 if the handle was successfully freed CUPTI_ERROR_INVALID_PARAMETER \u2013 if the handle was already freed or appears invalid CUPTI_ERROR_INVALID_CONTEXT \u2013 if the context is no longer valid", "keywords": []}, {"id": 1976, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::cuptiCheckpointRestore", "display_name": "NV::Cupti::Checkpoint::cuptiCheckpointRestore", "type": "function", "display_type": "C++ function", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint22cuptiCheckpointRestoreEPC16CUpti_Checkpoint", "priority": 1, "content": "CUptiResult  NV :: Cupti :: Checkpoint :: cuptiCheckpointRestore CUpti_Checkpoint  * const  handle Restore a checkpoint to the device associated with its context. Restores device, pinned, and allocated memory to the state when the checkpoint was saved Parameters handle \u2013 A pointer to a previously saved CUpti_Checkpoint object Return values CUTPI_SUCCESS \u2013 if the checkpoint was successfully restored CUPTI_ERROR_NOT_INITIALIZED \u2013 if the checkpoint was not previously initialized CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if the handle appears invalid CUPTI_ERROR_UNKNOWN \u2013 if the restore or optimization operation fails", "keywords": []}, {"id": 1977, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::cuptiCheckpointRestore::handle", "display_name": "NV::Cupti::Checkpoint::cuptiCheckpointRestore::handle", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint22cuptiCheckpointRestoreEPC16CUpti_Checkpoint", "priority": 1, "content": "CUptiResult  NV :: Cupti :: Checkpoint :: cuptiCheckpointRestore CUpti_Checkpoint  * const  handle Restore a checkpoint to the device associated with its context. Restores device, pinned, and allocated memory to the state when the checkpoint was saved Parameters handle \u2013 A pointer to a previously saved CUpti_Checkpoint object Return values CUTPI_SUCCESS \u2013 if the checkpoint was successfully restored CUPTI_ERROR_NOT_INITIALIZED \u2013 if the checkpoint was not previously initialized CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_PARAMETER \u2013 if the handle appears invalid CUPTI_ERROR_UNKNOWN \u2013 if the restore or optimization operation fails", "keywords": []}, {"id": 1978, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::cuptiCheckpointSave", "display_name": "NV::Cupti::Checkpoint::cuptiCheckpointSave", "type": "function", "display_type": "C++ function", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint19cuptiCheckpointSaveEPC16CUpti_Checkpoint", "priority": 1, "content": "CUptiResult  NV :: Cupti :: Checkpoint :: cuptiCheckpointSave CUpti_Checkpoint  * const  handle Initialize and save a checkpoint of the device state associated with the handle context. Uses the handle options to configure and save a checkpoint of the device state associated with the specified context. Parameters handle \u2013 A pointer to a CUpti_Checkpoint object Return values CUPTI_SUCCESS \u2013 if a checkpoint was successfully initialized and saved CUPTI_ERROR_INVALID_PARAMETER \u2013 if handle does not appear to refer to a valid CUpti_Checkpoint  CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if device associated with context is not compatible with checkpoint API CUPTI_ERROR_INVALID_OPERATION \u2013 if Save is requested over an existing checkpoint, but allowOverwrite was not originally specified CUPTI_ERROR_OUT_OF_MEMORY \u2013 if as configured, not enough backing storage space to save the checkpoint", "keywords": []}, {"id": 1979, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::cuptiCheckpointSave::handle", "display_name": "NV::Cupti::Checkpoint::cuptiCheckpointSave::handle", "type": "functionParam", "display_type": "C++ function parameter", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint19cuptiCheckpointSaveEPC16CUpti_Checkpoint", "priority": 1, "content": "CUptiResult  NV :: Cupti :: Checkpoint :: cuptiCheckpointSave CUpti_Checkpoint  * const  handle Initialize and save a checkpoint of the device state associated with the handle context. Uses the handle options to configure and save a checkpoint of the device state associated with the specified context. Parameters handle \u2013 A pointer to a CUpti_Checkpoint object Return values CUPTI_SUCCESS \u2013 if a checkpoint was successfully initialized and saved CUPTI_ERROR_INVALID_PARAMETER \u2013 if handle does not appear to refer to a valid CUpti_Checkpoint  CUPTI_ERROR_INVALID_CONTEXT \u2013 CUPTI_ERROR_INVALID_DEVICE \u2013 if device associated with context is not compatible with checkpoint API CUPTI_ERROR_INVALID_OPERATION \u2013 if Save is requested over an existing checkpoint, but allowOverwrite was not originally specified CUPTI_ERROR_OUT_OF_MEMORY \u2013 if as configured, not enough backing storage space to save the checkpoint", "keywords": []}, {"id": 1980, "doc_id": 1980, "filename": "api/namespace_n_v_1_1_cupti_1_1_checkpoint.html", "domain_name": "std", "name": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "display_name": "NV::Cupti::Checkpoint", "type": "doc", "display_type": "Page", "docname": "api/namespace_n_v_1_1_cupti_1_1_checkpoint", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1981, "doc_id": 1981, "filename": "api/namespaces.html", "domain_name": "std", "name": "api/namespaces", "display_name": "Namespaces", "type": "doc", "display_type": "Page", "docname": "api/namespaces", "anchor": "", "priority": -1, "content": "CUPTI   CUPTI::PcSamplingUtil   NV   NV::Cupti   NV::Cupti::Checkpoint", "keywords": []}, {"id": 1982, "doc_id": 1987, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::BufferInfo", "display_name": "CUPTI::PcSamplingUtil::BufferInfo", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil10BufferInfoE", "priority": 1, "content": "struct  BufferInfo BufferInfo will be stored in the file for every buffer i.e for every call of UtilDumpPcSamplingBufferInFile() API. Public Members", "keywords": []}, {"id": 1983, "doc_id": 1987, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::BufferInfo::bufferByteSize", "display_name": "CUPTI::PcSamplingUtil::BufferInfo::bufferByteSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil10BufferInfo14bufferByteSizeE", "priority": 1, "content": "uint64_t  bufferByteSize Buffer size in Bytes.", "keywords": []}, {"id": 1984, "doc_id": 1987, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::BufferInfo::numSelectedStallReasons", "display_name": "CUPTI::PcSamplingUtil::BufferInfo::numSelectedStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil10BufferInfo23numSelectedStallReasonsE", "priority": 1, "content": "uint64_t  numSelectedStallReasons Total number of stall reasons in single record.", "keywords": []}, {"id": 1985, "doc_id": 1987, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::BufferInfo::numStallReasons", "display_name": "CUPTI::PcSamplingUtil::BufferInfo::numStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil10BufferInfo15numStallReasonsE", "priority": 1, "content": "size_t  numStallReasons Count of all stall reasons supported on the GPU.", "keywords": []}, {"id": 1986, "doc_id": 1987, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::BufferInfo::recordCount", "display_name": "CUPTI::PcSamplingUtil::BufferInfo::recordCount", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil10BufferInfo11recordCountE", "priority": 1, "content": "uint64_t  recordCount Total number of PC records.", "keywords": []}, {"id": 1987, "doc_id": 1987, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "display_name": "CUPTI::PcSamplingUtil::BufferInfo", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_buffer_info", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1988, "doc_id": 1992, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetBufferInfoParamsE", "priority": 1, "content": "struct  CUptiUtil_GetBufferInfoParams Params for CuptiUtilGetBufferInfo . Public Members", "keywords": []}, {"id": 1989, "doc_id": 1992, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams::bufferInfoData", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams::bufferInfoData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetBufferInfoParams14bufferInfoDataE", "priority": 1, "content": "BufferInfo  bufferInfoData Buffer Info.", "keywords": []}, {"id": 1990, "doc_id": 1992, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams::fileHandler", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams::fileHandler", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetBufferInfoParams11fileHandlerE", "priority": 1, "content": "std :: ifstream  * fileHandler File handle.", "keywords": []}, {"id": 1991, "doc_id": 1992, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams::size", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetBufferInfoParams4sizeE", "priority": 1, "content": "size_t  size Size of the data structure i.e. CUpti_PCSamplingDisableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 1992, "doc_id": 1992, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetBufferInfoParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_buffer_info_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1993, "doc_id": 1997, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetHeaderDataParamsE", "priority": 1, "content": "struct  CUptiUtil_GetHeaderDataParams Params for CuptiUtilGetHeaderData . Public Members", "keywords": []}, {"id": 1994, "doc_id": 1997, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams::fileHandler", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams::fileHandler", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetHeaderDataParams11fileHandlerE", "priority": 1, "content": "std :: ifstream  * fileHandler File handle.", "keywords": []}, {"id": 1995, "doc_id": 1997, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams::headerInfo", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams::headerInfo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetHeaderDataParams10headerInfoE", "priority": 1, "content": "Header  headerInfo Header Info.", "keywords": []}, {"id": 1996, "doc_id": 1997, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams::size", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetHeaderDataParams4sizeE", "priority": 1, "content": "size_t  size Size of the data structure i.e. CUpti_PCSamplingDisableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 1997, "doc_id": 1997, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetHeaderDataParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_header_data_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 1998, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParamsE", "priority": 1, "content": "struct  CUptiUtil_GetPcSampDataParams Params for CuptiUtilGetPcSampData . Public Members", "keywords": []}, {"id": 1999, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::bufferType", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::bufferType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams10bufferTypeE", "priority": 1, "content": "PcSamplingBufferType  bufferType Type of buffer to store in file.", "keywords": []}, {"id": 2000, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::fileHandler", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::fileHandler", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams11fileHandlerE", "priority": 1, "content": "std :: ifstream  * fileHandler File handle.", "keywords": []}, {"id": 2001, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::numAttributes", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::numAttributes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams13numAttributesE", "priority": 1, "content": "size_t  numAttributes Number of configuration attributes.", "keywords": []}, {"id": 2002, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pBufferInfoData", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pBufferInfoData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams15pBufferInfoDataE", "priority": 1, "content": "BufferInfo  * pBufferInfoData Pointer to collected buffer info using CuptiUtilGetBufferInfo .", "keywords": []}, {"id": 2003, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pPCSamplingConfigurationInfo", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pPCSamplingConfigurationInfo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams28pPCSamplingConfigurationInfoE", "priority": 1, "content": "CUpti_PCSamplingConfigurationInfo  * pPCSamplingConfigurationInfo Refer CUpti_PCSamplingConfigurationInfo .", "keywords": []}, {"id": 2004, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pPcSamplingStallReasons", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pPcSamplingStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams23pPcSamplingStallReasonsE", "priority": 1, "content": "PcSamplingStallReasons  * pPcSamplingStallReasons Refer PcSamplingStallReasons . For stallReasons field of PcSamplingStallReasons it is expected to allocate memory for each string element of array.", "keywords": []}, {"id": 2005, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pSamplingData", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::pSamplingData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams13pSamplingDataE", "priority": 1, "content": "void  * pSamplingData Pointer to allocated memory to store retrieved data from file.", "keywords": []}, {"id": 2006, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::size", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_GetPcSampDataParams4sizeE", "priority": 1, "content": "size_t  size Size of the data structure i.e. CUpti_PCSamplingDisableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 2007, "doc_id": 2007, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_GetPcSampDataParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___get_pc_samp_data_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2008, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil31CUptiUtil_MergePcSampDataParamsE", "priority": 1, "content": "struct  CUptiUtil_MergePcSampDataParams Params for CuptiUtilMergePcSampData . Public Members", "keywords": []}, {"id": 2009, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::MergedPcSampDataBuffers", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::MergedPcSampDataBuffers", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil31CUptiUtil_MergePcSampDataParams23MergedPcSampDataBuffersE", "priority": 1, "content": "CUpti_PCSamplingData  * * MergedPcSampDataBuffers Pointer to array of merged buffers as per the range id.", "keywords": []}, {"id": 2010, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::PcSampDataBuffer", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::PcSampDataBuffer", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil31CUptiUtil_MergePcSampDataParams16PcSampDataBufferE", "priority": 1, "content": "CUpti_PCSamplingData  * PcSampDataBuffer Pointer to array of buffers to merge.", "keywords": []}, {"id": 2011, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::numMergedBuffer", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::numMergedBuffer", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil31CUptiUtil_MergePcSampDataParams15numMergedBufferE", "priority": 1, "content": "size_t  * numMergedBuffer Number of merged buffers.", "keywords": []}, {"id": 2012, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::numberOfBuffers", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::numberOfBuffers", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil31CUptiUtil_MergePcSampDataParams15numberOfBuffersE", "priority": 1, "content": "size_t  numberOfBuffers Number of buffers to merge.", "keywords": []}, {"id": 2013, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::size", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil31CUptiUtil_MergePcSampDataParams4sizeE", "priority": 1, "content": "size_t  size Size of the data structure i.e. CUpti_PCSamplingDisableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 2014, "doc_id": 2014, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_MergePcSampDataParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___merge_pc_samp_data_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2015, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParamsE", "priority": 1, "content": "struct  CUptiUtil_PutPcSampDataParams Params for CuptiUtilPutPcSampData . Public Members", "keywords": []}, {"id": 2016, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::bufferType", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::bufferType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams10bufferTypeE", "priority": 1, "content": "PcSamplingBufferType  bufferType Type of buffer to store in file.", "keywords": []}, {"id": 2017, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::fileName", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::fileName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams8fileNameE", "priority": 1, "content": "const  char  * fileName File name to store buffer into it.", "keywords": []}, {"id": 2018, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::numAttributes", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::numAttributes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams13numAttributesE", "priority": 1, "content": "size_t  numAttributes Number of configured attributes.", "keywords": []}, {"id": 2019, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::pPCSamplingConfigurationInfo", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::pPCSamplingConfigurationInfo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams28pPCSamplingConfigurationInfoE", "priority": 1, "content": "CUpti_PCSamplingConfigurationInfo  * pPCSamplingConfigurationInfo Refer CUpti_PCSamplingConfigurationInfo It is expected to provide configuration details of at least CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON attribute.", "keywords": []}, {"id": 2020, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::pPcSamplingStallReasons", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::pPcSamplingStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams23pPcSamplingStallReasonsE", "priority": 1, "content": "PcSamplingStallReasons  * pPcSamplingStallReasons Refer PcSamplingStallReasons .", "keywords": []}, {"id": 2021, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::pSamplingData", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::pSamplingData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams13pSamplingDataE", "priority": 1, "content": "void  * pSamplingData PC sampling buffer.", "keywords": []}, {"id": 2022, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::size", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil29CUptiUtil_PutPcSampDataParams4sizeE", "priority": 1, "content": "size_t  size Size of the data structure i.e. CUpti_PCSamplingDisableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 2023, "doc_id": 2023, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "display_name": "CUPTI::PcSamplingUtil::CUptiUtil_PutPcSampDataParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_c_upti_util___put_pc_samp_data_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2024, "doc_id": 2027, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::Header", "display_name": "CUPTI::PcSamplingUtil::Header", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil6HeaderE", "priority": 1, "content": "struct  Header Header info will be stored in file. Public Members", "keywords": []}, {"id": 2025, "doc_id": 2027, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::Header::totalBuffers", "display_name": "CUPTI::PcSamplingUtil::Header::totalBuffers", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil6Header12totalBuffersE", "priority": 1, "content": "uint32_t  totalBuffers Total number of buffers present in the file.", "keywords": []}, {"id": 2026, "doc_id": 2027, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::Header::version", "display_name": "CUPTI::PcSamplingUtil::Header::version", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil6Header7versionE", "priority": 1, "content": "uint32_t  version Version of file format.", "keywords": []}, {"id": 2027, "doc_id": 2027, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header", "display_name": "CUPTI::PcSamplingUtil::Header", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_header", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2028, "doc_id": 2032, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons", "display_name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22PcSamplingStallReasonsE", "priority": 1, "content": "struct  PcSamplingStallReasons All available stall reasons name and respective indexes will be stored in it. Public Members", "keywords": []}, {"id": 2029, "doc_id": 2032, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons::numStallReasons", "display_name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons::numStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22PcSamplingStallReasons15numStallReasonsE", "priority": 1, "content": "size_t  numStallReasons Number of all available stall reasons.", "keywords": []}, {"id": 2030, "doc_id": 2032, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons::stallReasonIndex", "display_name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons::stallReasonIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22PcSamplingStallReasons16stallReasonIndexE", "priority": 1, "content": "uint32_t  * stallReasonIndex Stall reason index of all available stall reasons.", "keywords": []}, {"id": 2031, "doc_id": 2032, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons.html", "domain_name": "cpp", "name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons::stallReasons", "display_name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons::stallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons", "anchor": "_CPPv4N5CUPTI14PcSamplingUtil22PcSamplingStallReasons12stallReasonsE", "priority": 1, "content": "char  * * stallReasons Stall reasons names of all available stall reasons.", "keywords": []}, {"id": 2032, "doc_id": 2032, "filename": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons.html", "domain_name": "std", "name": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons", "display_name": "CUPTI::PcSamplingUtil::PcSamplingStallReasons", "type": "doc", "display_type": "Page", "docname": "api/struct_c_u_p_t_i_1_1_pc_sampling_util_1_1_pc_sampling_stall_reasons", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2033, "doc_id": 2035, "filename": "api/struct_c_upti___activity.html", "domain_name": "cpp", "name": "CUpti_Activity", "display_name": "CUpti_Activity", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity", "anchor": "_CPPv414CUpti_Activity", "priority": 1, "content": "struct  CUpti_Activity The base activity record. The activity API uses a CUpti_Activity as a generic representation for any activity. The \u2018kind\u2019 field is used to determine the specific activity kind, and from that the CUpti_Activity object can be cast to the specific activity record type appropriate for that kind. Note that all activity record types are padded and aligned to ensure that each member of the record is naturally aligned. CUpti_ActivityKind  Public Members", "keywords": []}, {"id": 2034, "doc_id": 2035, "filename": "api/struct_c_upti___activity.html", "domain_name": "cpp", "name": "CUpti_Activity::kind", "display_name": "CUpti_Activity::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity", "anchor": "_CPPv4N14CUpti_Activity4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The kind of this activity.", "keywords": []}, {"id": 2035, "doc_id": 2035, "filename": "api/struct_c_upti___activity.html", "domain_name": "std", "name": "api/struct_c_upti___activity", "display_name": "CUpti_Activity", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2036, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI", "display_name": "CUpti_ActivityAPI", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv417CUpti_ActivityAPI", "priority": 1, "content": "struct  CUpti_ActivityAPI The activity record for a driver or runtime API invocation. This activity record represents an invocation of a driver or runtime API (CUPTI_ACTIVITY_KIND_DRIVER and CUPTI_ACTIVITY_KIND_RUNTIME). Public Members", "keywords": []}, {"id": 2037, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::cbid", "display_name": "CUpti_ActivityAPI::cbid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI4cbidE", "priority": 1, "content": "CUpti_CallbackId  cbid The ID of the driver or runtime function.", "keywords": []}, {"id": 2038, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::correlationId", "display_name": "CUpti_ActivityAPI::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the driver or runtime CUDA function. Each function invocation is assigned a unique correlation ID that is identical to the correlation ID in the memcpy, memset, or kernel activity record that is associated with this function.", "keywords": []}, {"id": 2039, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::end", "display_name": "CUpti_ActivityAPI::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the function, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the function.", "keywords": []}, {"id": 2040, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::kind", "display_name": "CUpti_ActivityAPI::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DRIVER, CUPTI_ACTIVITY_KIND_RUNTIME, or CUPTI_ACTIVITY_KIND_INTERNAL_LAUNCH_API.", "keywords": []}, {"id": 2041, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::processId", "display_name": "CUpti_ActivityAPI::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI9processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process where the driver or runtime CUDA function is executing.", "keywords": []}, {"id": 2042, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::returnValue", "display_name": "CUpti_ActivityAPI::returnValue", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI11returnValueE", "priority": 1, "content": "uint32_t  returnValue The return value for the function. For a CUDA driver function with will be a CUresult value, and for a CUDA runtime function this will be a cudaError_t value.", "keywords": []}, {"id": 2043, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::start", "display_name": "CUpti_ActivityAPI::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the function, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the function.", "keywords": []}, {"id": 2044, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "cpp", "name": "CUpti_ActivityAPI::threadId", "display_name": "CUpti_ActivityAPI::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "_CPPv4N17CUpti_ActivityAPI8threadIdE", "priority": 1, "content": "uint32_t  threadId The ID of the thread where the driver or runtime CUDA function is executing.", "keywords": []}, {"id": 2045, "doc_id": 2045, "filename": "api/struct_c_upti___activity_a_p_i.html", "domain_name": "std", "name": "api/struct_c_upti___activity_a_p_i", "display_name": "CUpti_ActivityAPI", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_a_p_i", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2046, "doc_id": 2049, "filename": "api/struct_c_upti___activity_auto_boost_state.html", "domain_name": "cpp", "name": "CUpti_ActivityAutoBoostState", "display_name": "CUpti_ActivityAutoBoostState", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_auto_boost_state", "anchor": "_CPPv428CUpti_ActivityAutoBoostState", "priority": 1, "content": "struct  CUpti_ActivityAutoBoostState Device auto boost state structure. This structure defines auto boost state for a device. See function cuptiGetAutoBoostState  Public Members", "keywords": []}, {"id": 2047, "doc_id": 2049, "filename": "api/struct_c_upti___activity_auto_boost_state.html", "domain_name": "cpp", "name": "CUpti_ActivityAutoBoostState::enabled", "display_name": "CUpti_ActivityAutoBoostState::enabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_auto_boost_state", "anchor": "_CPPv4N28CUpti_ActivityAutoBoostState7enabledE", "priority": 1, "content": "uint32_t  enabled Returned auto boost state. 1 is returned in case auto boost is enabled, 0 otherwise", "keywords": []}, {"id": 2048, "doc_id": 2049, "filename": "api/struct_c_upti___activity_auto_boost_state.html", "domain_name": "cpp", "name": "CUpti_ActivityAutoBoostState::pid", "display_name": "CUpti_ActivityAutoBoostState::pid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_auto_boost_state", "anchor": "_CPPv4N28CUpti_ActivityAutoBoostState3pidE", "priority": 1, "content": "uint32_t  pid Id of process that has set the current boost state. The value will be CUPTI_AUTO_BOOST_INVALID_CLIENT_PID if the user does not have the permission to query process ids or there is an error in querying the process id.", "keywords": []}, {"id": 2049, "doc_id": 2049, "filename": "api/struct_c_upti___activity_auto_boost_state.html", "domain_name": "std", "name": "api/struct_c_upti___activity_auto_boost_state", "display_name": "CUpti_ActivityAutoBoostState", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_auto_boost_state", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2050, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch", "display_name": "CUpti_ActivityBranch", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv420CUpti_ActivityBranch", "priority": 1, "content": "struct  CUpti_ActivityBranch The activity record for source level result branch. (deprecated) This activity record the locations of the branches in the source (CUPTI_ACTIVITY_KIND_BRANCH). Branch activities are now reported using the CUpti_ActivityBranch2 activity record. Public Members", "keywords": []}, {"id": 2051, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::correlationId", "display_name": "CUpti_ActivityBranch::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 2052, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::diverged", "display_name": "CUpti_ActivityBranch::diverged", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch8divergedE", "priority": 1, "content": "uint32_t  diverged Number of times this branch diverged.", "keywords": []}, {"id": 2053, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::executed", "display_name": "CUpti_ActivityBranch::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch8executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented regardless of predicate or condition code.", "keywords": []}, {"id": 2054, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::kind", "display_name": "CUpti_ActivityBranch::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_BRANCH.", "keywords": []}, {"id": 2055, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::pcOffset", "display_name": "CUpti_ActivityBranch::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the branch.", "keywords": []}, {"id": 2056, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::sourceLocatorId", "display_name": "CUpti_ActivityBranch::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch15sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2057, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch::threadsExecuted", "display_name": "CUpti_ActivityBranch::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch", "anchor": "_CPPv4N20CUpti_ActivityBranch15threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction.", "keywords": []}, {"id": 2058, "doc_id": 2058, "filename": "api/struct_c_upti___activity_branch.html", "domain_name": "std", "name": "api/struct_c_upti___activity_branch", "display_name": "CUpti_ActivityBranch", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_branch", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2059, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2", "display_name": "CUpti_ActivityBranch2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv421CUpti_ActivityBranch2", "priority": 1, "content": "struct  CUpti_ActivityBranch2 The activity record for source level result branch. This activity record the locations of the branches in the source (CUPTI_ACTIVITY_KIND_BRANCH). Public Members", "keywords": []}, {"id": 2060, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::correlationId", "display_name": "CUpti_ActivityBranch2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 2061, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::diverged", "display_name": "CUpti_ActivityBranch2::diverged", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch28divergedE", "priority": 1, "content": "uint32_t  diverged Number of times this branch diverged.", "keywords": []}, {"id": 2062, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::executed", "display_name": "CUpti_ActivityBranch2::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch28executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented regardless of predicate or condition code.", "keywords": []}, {"id": 2063, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::functionId", "display_name": "CUpti_ActivityBranch2::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch210functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 2064, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::kind", "display_name": "CUpti_ActivityBranch2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_BRANCH.", "keywords": []}, {"id": 2065, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::pad", "display_name": "CUpti_ActivityBranch2::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch23padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2066, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::pcOffset", "display_name": "CUpti_ActivityBranch2::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch28pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the branch.", "keywords": []}, {"id": 2067, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::sourceLocatorId", "display_name": "CUpti_ActivityBranch2::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch215sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2068, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "cpp", "name": "CUpti_ActivityBranch2::threadsExecuted", "display_name": "CUpti_ActivityBranch2::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_branch2", "anchor": "_CPPv4N21CUpti_ActivityBranch215threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction.", "keywords": []}, {"id": 2069, "doc_id": 2069, "filename": "api/struct_c_upti___activity_branch2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_branch2", "display_name": "CUpti_ActivityBranch2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_branch2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2070, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel", "display_name": "CUpti_ActivityCdpKernel", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv423CUpti_ActivityCdpKernel", "priority": 1, "content": "struct  CUpti_ActivityCdpKernel The activity record for CDP (CUDA Dynamic Parallelism) kernel. This activity record represents a CDP kernel execution. Public Members", "keywords": []}, {"id": 2071, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::blockX", "display_name": "CUpti_ActivityCdpKernel::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel6blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2072, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::blockY", "display_name": "CUpti_ActivityCdpKernel::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel6blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2073, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::blockZ", "display_name": "CUpti_ActivityCdpKernel::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel6blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2074, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::completed", "display_name": "CUpti_ActivityCdpKernel::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel9completedE", "priority": 1, "content": "uint64_t  completed The timestamp when kernel is marked as completed, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2075, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::contextId", "display_name": "CUpti_ActivityCdpKernel::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2076, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::correlationId", "display_name": "CUpti_ActivityCdpKernel::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the kernel.", "keywords": []}, {"id": 2077, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::deviceId", "display_name": "CUpti_ActivityCdpKernel::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2078, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::dynamicSharedMemory", "display_name": "CUpti_ActivityCdpKernel::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel19dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2079, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::end", "display_name": "CUpti_ActivityCdpKernel::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2080, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::executed", "display_name": "CUpti_ActivityCdpKernel::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel8executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2081, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::gridId", "display_name": "CUpti_ActivityCdpKernel::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel6gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel execution is assigned a unique grid ID.", "keywords": []}, {"id": 2082, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::gridX", "display_name": "CUpti_ActivityCdpKernel::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel5gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2083, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::gridY", "display_name": "CUpti_ActivityCdpKernel::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel5gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2084, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::gridZ", "display_name": "CUpti_ActivityCdpKernel::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel5gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2085, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::kind", "display_name": "CUpti_ActivityCdpKernel::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_CDP_KERNEL.", "keywords": []}, {"id": 2086, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::localMemoryPerThread", "display_name": "CUpti_ActivityCdpKernel::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel20localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2087, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::localMemoryTotal", "display_name": "CUpti_ActivityCdpKernel::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel16localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2088, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::name", "display_name": "CUpti_ActivityCdpKernel::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel4nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2089, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::pad", "display_name": "CUpti_ActivityCdpKernel::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2090, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::parentBlockX", "display_name": "CUpti_ActivityCdpKernel::parentBlockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel12parentBlockXE", "priority": 1, "content": "uint32_t  parentBlockX The X-dimension of the parent block.", "keywords": []}, {"id": 2091, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::parentBlockY", "display_name": "CUpti_ActivityCdpKernel::parentBlockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel12parentBlockYE", "priority": 1, "content": "uint32_t  parentBlockY The Y-dimension of the parent block.", "keywords": []}, {"id": 2092, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::parentBlockZ", "display_name": "CUpti_ActivityCdpKernel::parentBlockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel12parentBlockZE", "priority": 1, "content": "uint32_t  parentBlockZ The Z-dimension of the parent block.", "keywords": []}, {"id": 2093, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::parentGridId", "display_name": "CUpti_ActivityCdpKernel::parentGridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel12parentGridIdE", "priority": 1, "content": "int64_t  parentGridId The grid ID of the parent kernel.", "keywords": []}, {"id": 2094, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::queued", "display_name": "CUpti_ActivityCdpKernel::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel6queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when kernel is queued up, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time is unknown.", "keywords": []}, {"id": 2095, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::registersPerThread", "display_name": "CUpti_ActivityCdpKernel::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel18registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2096, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::requested", "display_name": "CUpti_ActivityCdpKernel::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel9requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2097, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::sharedMemoryConfig", "display_name": "CUpti_ActivityCdpKernel::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel18sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2098, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::start", "display_name": "CUpti_ActivityCdpKernel::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2099, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::staticSharedMemory", "display_name": "CUpti_ActivityCdpKernel::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel18staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2100, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::streamId", "display_name": "CUpti_ActivityCdpKernel::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel8streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2101, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityCdpKernel::submitted", "display_name": "CUpti_ActivityCdpKernel::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "_CPPv4N23CUpti_ActivityCdpKernel9submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when kernel is submitted to the gpu, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submission time is unknown.", "keywords": []}, {"id": 2102, "doc_id": 2102, "filename": "api/struct_c_upti___activity_cdp_kernel.html", "domain_name": "std", "name": "api/struct_c_upti___activity_cdp_kernel", "display_name": "CUpti_ActivityCdpKernel", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_cdp_kernel", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2103, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "cpp", "name": "CUpti_ActivityContext", "display_name": "CUpti_ActivityContext", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_context", "anchor": "_CPPv421CUpti_ActivityContext", "priority": 1, "content": "struct  CUpti_ActivityContext The activity record for a context. This activity record represents information about a context (CUPTI_ACTIVITY_KIND_CONTEXT). Context activity is now reported using CUpti_ActivityContext3 record Public Members", "keywords": []}, {"id": 2104, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "cpp", "name": "CUpti_ActivityContext::computeApiKind", "display_name": "CUpti_ActivityContext::computeApiKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context", "anchor": "_CPPv4N21CUpti_ActivityContext14computeApiKindE", "priority": 1, "content": "uint16_t  computeApiKind The compute API kind. CUpti_ActivityComputeApiKind", "keywords": []}, {"id": 2105, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "cpp", "name": "CUpti_ActivityContext::contextId", "display_name": "CUpti_ActivityContext::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context", "anchor": "_CPPv4N21CUpti_ActivityContext9contextIdE", "priority": 1, "content": "uint32_t  contextId The context ID.", "keywords": []}, {"id": 2106, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "cpp", "name": "CUpti_ActivityContext::deviceId", "display_name": "CUpti_ActivityContext::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context", "anchor": "_CPPv4N21CUpti_ActivityContext8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device ID.", "keywords": []}, {"id": 2107, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "cpp", "name": "CUpti_ActivityContext::kind", "display_name": "CUpti_ActivityContext::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context", "anchor": "_CPPv4N21CUpti_ActivityContext4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_CONTEXT.", "keywords": []}, {"id": 2108, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "cpp", "name": "CUpti_ActivityContext::nullStreamId", "display_name": "CUpti_ActivityContext::nullStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context", "anchor": "_CPPv4N21CUpti_ActivityContext12nullStreamIdE", "priority": 1, "content": "uint16_t  nullStreamId The ID for the NULL stream in this context.", "keywords": []}, {"id": 2109, "doc_id": 2109, "filename": "api/struct_c_upti___activity_context.html", "domain_name": "std", "name": "api/struct_c_upti___activity_context", "display_name": "CUpti_ActivityContext", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_context", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2110, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2", "display_name": "CUpti_ActivityContext2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv422CUpti_ActivityContext2", "priority": 1, "content": "struct  CUpti_ActivityContext2 The activity record for a context. This activity record represents information about a context (CUPTI_ACTIVITY_KIND_CONTEXT). Context activity is now reported using CUpti_ActivityContext3 record Public Members", "keywords": []}, {"id": 2111, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::computeApiKind", "display_name": "CUpti_ActivityContext2::computeApiKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext214computeApiKindE", "priority": 1, "content": "uint16_t  computeApiKind The compute API kind. CUpti_ActivityComputeApiKind", "keywords": []}, {"id": 2112, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::contextId", "display_name": "CUpti_ActivityContext2::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext29contextIdE", "priority": 1, "content": "uint32_t  contextId The context ID.", "keywords": []}, {"id": 2113, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::deviceId", "display_name": "CUpti_ActivityContext2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device ID.", "keywords": []}, {"id": 2114, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::isGreenContext", "display_name": "CUpti_ActivityContext2::isGreenContext", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext214isGreenContextE", "priority": 1, "content": "uint8_t  isGreenContext This field indicates whether the context is a green context.", "keywords": []}, {"id": 2115, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::kind", "display_name": "CUpti_ActivityContext2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_CONTEXT.", "keywords": []}, {"id": 2116, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::nullStreamId", "display_name": "CUpti_ActivityContext2::nullStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext212nullStreamIdE", "priority": 1, "content": "uint16_t  nullStreamId The ID for the NULL stream in this context.", "keywords": []}, {"id": 2117, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::numMultiprocessors", "display_name": "CUpti_ActivityContext2::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext218numMultiprocessorsE", "priority": 1, "content": "uint16_t  numMultiprocessors Number of multiprocessors assigned to the green context Invalid if the field \u2018isGreenContext\u2019 is 0.", "keywords": []}, {"id": 2118, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "cpp", "name": "CUpti_ActivityContext2::parentContextId", "display_name": "CUpti_ActivityContext2::parentContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context2", "anchor": "_CPPv4N22CUpti_ActivityContext215parentContextIdE", "priority": 1, "content": "uint32_t  parentContextId The ID of the parent context. It would be 0 if context does not have parent", "keywords": []}, {"id": 2119, "doc_id": 2119, "filename": "api/struct_c_upti___activity_context2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_context2", "display_name": "CUpti_ActivityContext2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_context2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2120, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3", "display_name": "CUpti_ActivityContext3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv422CUpti_ActivityContext3", "priority": 1, "content": "struct  CUpti_ActivityContext3 The activity record for a context. This activity record represents information about a context (CUPTI_ACTIVITY_KIND_CONTEXT). Public Members", "keywords": []}, {"id": 2121, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::cigMode", "display_name": "CUpti_ActivityContext3::cigMode", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext37cigModeE", "priority": 1, "content": "CUpti_ContextCigMode  cigMode This field indicates the CIG mode.", "keywords": []}, {"id": 2122, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::computeApiKind", "display_name": "CUpti_ActivityContext3::computeApiKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext314computeApiKindE", "priority": 1, "content": "uint16_t  computeApiKind The compute API kind. CUpti_ActivityComputeApiKind", "keywords": []}, {"id": 2123, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::contextId", "display_name": "CUpti_ActivityContext3::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext39contextIdE", "priority": 1, "content": "uint32_t  contextId The context ID.", "keywords": []}, {"id": 2124, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::deviceId", "display_name": "CUpti_ActivityContext3::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext38deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device ID.", "keywords": []}, {"id": 2125, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::isGreenContext", "display_name": "CUpti_ActivityContext3::isGreenContext", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext314isGreenContextE", "priority": 1, "content": "uint8_t  isGreenContext This field indicates whether the context is a green context.", "keywords": []}, {"id": 2126, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::kind", "display_name": "CUpti_ActivityContext3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_CONTEXT.", "keywords": []}, {"id": 2127, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::nullStreamId", "display_name": "CUpti_ActivityContext3::nullStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext312nullStreamIdE", "priority": 1, "content": "uint16_t  nullStreamId The ID for the NULL stream in this context.", "keywords": []}, {"id": 2128, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::numMultiprocessors", "display_name": "CUpti_ActivityContext3::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext318numMultiprocessorsE", "priority": 1, "content": "uint16_t  numMultiprocessors Number of multiprocessors assigned to the green context Invalid if the field \u2018isGreenContext\u2019 is 0.", "keywords": []}, {"id": 2129, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "cpp", "name": "CUpti_ActivityContext3::parentContextId", "display_name": "CUpti_ActivityContext3::parentContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_context3", "anchor": "_CPPv4N22CUpti_ActivityContext315parentContextIdE", "priority": 1, "content": "uint32_t  parentContextId The ID of the parent context. It would be 0 if context does not have parent", "keywords": []}, {"id": 2130, "doc_id": 2130, "filename": "api/struct_c_upti___activity_context3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_context3", "display_name": "CUpti_ActivityContext3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_context3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2131, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent", "display_name": "CUpti_ActivityCudaEvent", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv423CUpti_ActivityCudaEvent", "priority": 1, "content": "struct  CUpti_ActivityCudaEvent The activity record for CUDA event. This activity is used to track recorded events. (CUPTI_ACTIVITY_KIND_CUDA_EVENT). Public Members", "keywords": []}, {"id": 2132, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent::contextId", "display_name": "CUpti_ActivityCudaEvent::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv4N23CUpti_ActivityCudaEvent9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the event was recorded.", "keywords": []}, {"id": 2133, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent::correlationId", "display_name": "CUpti_ActivityCudaEvent::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv4N23CUpti_ActivityCudaEvent13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the API to which this result is associated.", "keywords": []}, {"id": 2134, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent::eventId", "display_name": "CUpti_ActivityCudaEvent::eventId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv4N23CUpti_ActivityCudaEvent7eventIdE", "priority": 1, "content": "uint32_t  eventId A unique event ID to identify the event record.", "keywords": []}, {"id": 2135, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent::kind", "display_name": "CUpti_ActivityCudaEvent::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv4N23CUpti_ActivityCudaEvent4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_CUDA_EVENT.", "keywords": []}, {"id": 2136, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent::pad", "display_name": "CUpti_ActivityCudaEvent::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv4N23CUpti_ActivityCudaEvent3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2137, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "cpp", "name": "CUpti_ActivityCudaEvent::streamId", "display_name": "CUpti_ActivityCudaEvent::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "_CPPv4N23CUpti_ActivityCudaEvent8streamIdE", "priority": 1, "content": "uint32_t  streamId The compute stream where the event was recorded.", "keywords": []}, {"id": 2138, "doc_id": 2138, "filename": "api/struct_c_upti___activity_cuda_event.html", "domain_name": "std", "name": "api/struct_c_upti___activity_cuda_event", "display_name": "CUpti_ActivityCudaEvent", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_cuda_event", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2139, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice", "display_name": "CUpti_ActivityDevice", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv420CUpti_ActivityDevice", "priority": 1, "content": "struct  CUpti_ActivityDevice The activity record for a device. (deprecated) This activity record represents information about a GPU device (CUPTI_ACTIVITY_KIND_DEVICE). Device activity is now reported using the CUpti_ActivityDevice5 activity record. Public Members", "keywords": []}, {"id": 2140, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::computeCapabilityMajor", "display_name": "CUpti_ActivityDevice::computeCapabilityMajor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice22computeCapabilityMajorE", "priority": 1, "content": "uint32_t  computeCapabilityMajor Compute capability for the device, major number.", "keywords": []}, {"id": 2141, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::computeCapabilityMinor", "display_name": "CUpti_ActivityDevice::computeCapabilityMinor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice22computeCapabilityMinorE", "priority": 1, "content": "uint32_t  computeCapabilityMinor Compute capability for the device, minor number.", "keywords": []}, {"id": 2142, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::constantMemorySize", "display_name": "CUpti_ActivityDevice::constantMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice18constantMemorySizeE", "priority": 1, "content": "uint32_t  constantMemorySize The amount of constant memory on the device, in bytes.", "keywords": []}, {"id": 2143, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::coreClockRate", "display_name": "CUpti_ActivityDevice::coreClockRate", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice13coreClockRateE", "priority": 1, "content": "uint32_t  coreClockRate The core clock rate of the device, in kHz.", "keywords": []}, {"id": 2144, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::flags", "display_name": "CUpti_ActivityDevice::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the device. CUpti_ActivityFlag", "keywords": []}, {"id": 2145, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::globalMemoryBandwidth", "display_name": "CUpti_ActivityDevice::globalMemoryBandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice21globalMemoryBandwidthE", "priority": 1, "content": "uint64_t  globalMemoryBandwidth The global memory bandwidth available on the device, in kBytes/sec.", "keywords": []}, {"id": 2146, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::globalMemorySize", "display_name": "CUpti_ActivityDevice::globalMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice16globalMemorySizeE", "priority": 1, "content": "uint64_t  globalMemorySize The amount of global memory on the device, in bytes.", "keywords": []}, {"id": 2147, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::id", "display_name": "CUpti_ActivityDevice::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice2idE", "priority": 1, "content": "uint32_t  id The device ID.", "keywords": []}, {"id": 2148, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::kind", "display_name": "CUpti_ActivityDevice::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 2149, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::l2CacheSize", "display_name": "CUpti_ActivityDevice::l2CacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice11l2CacheSizeE", "priority": 1, "content": "uint32_t  l2CacheSize The size of the L2 cache on the device, in bytes.", "keywords": []}, {"id": 2150, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxBlockDimX", "display_name": "CUpti_ActivityDevice::maxBlockDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice12maxBlockDimXE", "priority": 1, "content": "uint32_t  maxBlockDimX Maximum allowed X dimension for a block.", "keywords": []}, {"id": 2151, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxBlockDimY", "display_name": "CUpti_ActivityDevice::maxBlockDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice12maxBlockDimYE", "priority": 1, "content": "uint32_t  maxBlockDimY Maximum allowed Y dimension for a block.", "keywords": []}, {"id": 2152, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxBlockDimZ", "display_name": "CUpti_ActivityDevice::maxBlockDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice12maxBlockDimZE", "priority": 1, "content": "uint32_t  maxBlockDimZ Maximum allowed Z dimension for a block.", "keywords": []}, {"id": 2153, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxBlocksPerMultiprocessor", "display_name": "CUpti_ActivityDevice::maxBlocksPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice26maxBlocksPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxBlocksPerMultiprocessor Maximum number of blocks that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2154, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxGridDimX", "display_name": "CUpti_ActivityDevice::maxGridDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice11maxGridDimXE", "priority": 1, "content": "uint32_t  maxGridDimX Maximum allowed X dimension for a grid.", "keywords": []}, {"id": 2155, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxGridDimY", "display_name": "CUpti_ActivityDevice::maxGridDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice11maxGridDimYE", "priority": 1, "content": "uint32_t  maxGridDimY Maximum allowed Y dimension for a grid.", "keywords": []}, {"id": 2156, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxGridDimZ", "display_name": "CUpti_ActivityDevice::maxGridDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice11maxGridDimZE", "priority": 1, "content": "uint32_t  maxGridDimZ Maximum allowed Z dimension for a grid.", "keywords": []}, {"id": 2157, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxIPC", "display_name": "CUpti_ActivityDevice::maxIPC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice6maxIPCE", "priority": 1, "content": "uint32_t  maxIPC The maximum \u201cinstructions per cycle\u201d possible on each device multiprocessor.", "keywords": []}, {"id": 2158, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxRegistersPerBlock", "display_name": "CUpti_ActivityDevice::maxRegistersPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice20maxRegistersPerBlockE", "priority": 1, "content": "uint32_t  maxRegistersPerBlock Maximum number of registers that can be allocated to a block.", "keywords": []}, {"id": 2159, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxSharedMemoryPerBlock", "display_name": "CUpti_ActivityDevice::maxSharedMemoryPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice23maxSharedMemoryPerBlockE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerBlock Maximum amount of shared memory that can be assigned to a block, in bytes.", "keywords": []}, {"id": 2160, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxThreadsPerBlock", "display_name": "CUpti_ActivityDevice::maxThreadsPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice18maxThreadsPerBlockE", "priority": 1, "content": "uint32_t  maxThreadsPerBlock Maximum number of threads allowed in a block.", "keywords": []}, {"id": 2161, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::maxWarpsPerMultiprocessor", "display_name": "CUpti_ActivityDevice::maxWarpsPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice25maxWarpsPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxWarpsPerMultiprocessor Maximum number of warps that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2162, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::name", "display_name": "CUpti_ActivityDevice::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice4nameE", "priority": 1, "content": "const  char  * name The device name. This name is shared across all activity records representing instances of the device, and so should not be modified.", "keywords": []}, {"id": 2163, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::numMemcpyEngines", "display_name": "CUpti_ActivityDevice::numMemcpyEngines", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice16numMemcpyEnginesE", "priority": 1, "content": "uint32_t  numMemcpyEngines Number of memory copy engines on the device.", "keywords": []}, {"id": 2164, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::numMultiprocessors", "display_name": "CUpti_ActivityDevice::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice18numMultiprocessorsE", "priority": 1, "content": "uint32_t  numMultiprocessors Number of multiprocessors on the device.", "keywords": []}, {"id": 2165, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::numThreadsPerWarp", "display_name": "CUpti_ActivityDevice::numThreadsPerWarp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice17numThreadsPerWarpE", "priority": 1, "content": "uint32_t  numThreadsPerWarp The number of threads per warp on the device.", "keywords": []}, {"id": 2166, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice::pad", "display_name": "CUpti_ActivityDevice::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device", "anchor": "_CPPv4N20CUpti_ActivityDevice3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2167, "doc_id": 2167, "filename": "api/struct_c_upti___activity_device.html", "domain_name": "std", "name": "api/struct_c_upti___activity_device", "display_name": "CUpti_ActivityDevice", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_device", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2168, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2", "display_name": "CUpti_ActivityDevice2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv421CUpti_ActivityDevice2", "priority": 1, "content": "struct  CUpti_ActivityDevice2 The activity record for a device. (deprecated) This activity record represents information about a GPU device (CUPTI_ACTIVITY_KIND_DEVICE). Device activity is now reported using the CUpti_ActivityDevice5 activity record. Public Members", "keywords": []}, {"id": 2169, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::computeCapabilityMajor", "display_name": "CUpti_ActivityDevice2::computeCapabilityMajor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice222computeCapabilityMajorE", "priority": 1, "content": "uint32_t  computeCapabilityMajor Compute capability for the device, major number.", "keywords": []}, {"id": 2170, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::computeCapabilityMinor", "display_name": "CUpti_ActivityDevice2::computeCapabilityMinor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice222computeCapabilityMinorE", "priority": 1, "content": "uint32_t  computeCapabilityMinor Compute capability for the device, minor number.", "keywords": []}, {"id": 2171, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::constantMemorySize", "display_name": "CUpti_ActivityDevice2::constantMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice218constantMemorySizeE", "priority": 1, "content": "uint32_t  constantMemorySize The amount of constant memory on the device, in bytes.", "keywords": []}, {"id": 2172, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::coreClockRate", "display_name": "CUpti_ActivityDevice2::coreClockRate", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice213coreClockRateE", "priority": 1, "content": "uint32_t  coreClockRate The core clock rate of the device, in kHz.", "keywords": []}, {"id": 2173, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::eccEnabled", "display_name": "CUpti_ActivityDevice2::eccEnabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice210eccEnabledE", "priority": 1, "content": "uint32_t  eccEnabled ECC enabled flag for device.", "keywords": []}, {"id": 2174, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::flags", "display_name": "CUpti_ActivityDevice2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice25flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the device. CUpti_ActivityFlag", "keywords": []}, {"id": 2175, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::globalMemoryBandwidth", "display_name": "CUpti_ActivityDevice2::globalMemoryBandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice221globalMemoryBandwidthE", "priority": 1, "content": "uint64_t  globalMemoryBandwidth The global memory bandwidth available on the device, in kBytes/sec.", "keywords": []}, {"id": 2176, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::globalMemorySize", "display_name": "CUpti_ActivityDevice2::globalMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice216globalMemorySizeE", "priority": 1, "content": "uint64_t  globalMemorySize The amount of global memory on the device, in bytes.", "keywords": []}, {"id": 2177, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::id", "display_name": "CUpti_ActivityDevice2::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice22idE", "priority": 1, "content": "uint32_t  id The device ID.", "keywords": []}, {"id": 2178, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::kind", "display_name": "CUpti_ActivityDevice2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 2179, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::l2CacheSize", "display_name": "CUpti_ActivityDevice2::l2CacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice211l2CacheSizeE", "priority": 1, "content": "uint32_t  l2CacheSize The size of the L2 cache on the device, in bytes.", "keywords": []}, {"id": 2180, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxBlockDimX", "display_name": "CUpti_ActivityDevice2::maxBlockDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice212maxBlockDimXE", "priority": 1, "content": "uint32_t  maxBlockDimX Maximum allowed X dimension for a block.", "keywords": []}, {"id": 2181, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxBlockDimY", "display_name": "CUpti_ActivityDevice2::maxBlockDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice212maxBlockDimYE", "priority": 1, "content": "uint32_t  maxBlockDimY Maximum allowed Y dimension for a block.", "keywords": []}, {"id": 2182, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxBlockDimZ", "display_name": "CUpti_ActivityDevice2::maxBlockDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice212maxBlockDimZE", "priority": 1, "content": "uint32_t  maxBlockDimZ Maximum allowed Z dimension for a block.", "keywords": []}, {"id": 2183, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxBlocksPerMultiprocessor", "display_name": "CUpti_ActivityDevice2::maxBlocksPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice226maxBlocksPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxBlocksPerMultiprocessor Maximum number of blocks that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2184, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxGridDimX", "display_name": "CUpti_ActivityDevice2::maxGridDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice211maxGridDimXE", "priority": 1, "content": "uint32_t  maxGridDimX Maximum allowed X dimension for a grid.", "keywords": []}, {"id": 2185, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxGridDimY", "display_name": "CUpti_ActivityDevice2::maxGridDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice211maxGridDimYE", "priority": 1, "content": "uint32_t  maxGridDimY Maximum allowed Y dimension for a grid.", "keywords": []}, {"id": 2186, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxGridDimZ", "display_name": "CUpti_ActivityDevice2::maxGridDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice211maxGridDimZE", "priority": 1, "content": "uint32_t  maxGridDimZ Maximum allowed Z dimension for a grid.", "keywords": []}, {"id": 2187, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxIPC", "display_name": "CUpti_ActivityDevice2::maxIPC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice26maxIPCE", "priority": 1, "content": "uint32_t  maxIPC The maximum \u201cinstructions per cycle\u201d possible on each device multiprocessor.", "keywords": []}, {"id": 2188, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxRegistersPerBlock", "display_name": "CUpti_ActivityDevice2::maxRegistersPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice220maxRegistersPerBlockE", "priority": 1, "content": "uint32_t  maxRegistersPerBlock Maximum number of registers that can be allocated to a block.", "keywords": []}, {"id": 2189, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxRegistersPerMultiprocessor", "display_name": "CUpti_ActivityDevice2::maxRegistersPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice229maxRegistersPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxRegistersPerMultiprocessor Maximum number of 32-bit registers available per multiprocessor.", "keywords": []}, {"id": 2190, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxSharedMemoryPerBlock", "display_name": "CUpti_ActivityDevice2::maxSharedMemoryPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice223maxSharedMemoryPerBlockE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerBlock Maximum amount of shared memory that can be assigned to a block, in bytes.", "keywords": []}, {"id": 2191, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxSharedMemoryPerMultiprocessor", "display_name": "CUpti_ActivityDevice2::maxSharedMemoryPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice232maxSharedMemoryPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerMultiprocessor Maximum amount of shared memory available per multiprocessor, in bytes.", "keywords": []}, {"id": 2192, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxThreadsPerBlock", "display_name": "CUpti_ActivityDevice2::maxThreadsPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice218maxThreadsPerBlockE", "priority": 1, "content": "uint32_t  maxThreadsPerBlock Maximum number of threads allowed in a block.", "keywords": []}, {"id": 2193, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::maxWarpsPerMultiprocessor", "display_name": "CUpti_ActivityDevice2::maxWarpsPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice225maxWarpsPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxWarpsPerMultiprocessor Maximum number of warps that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2194, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::name", "display_name": "CUpti_ActivityDevice2::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice24nameE", "priority": 1, "content": "const  char  * name The device name. This name is shared across all activity records representing instances of the device, and so should not be modified.", "keywords": []}, {"id": 2195, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::numMemcpyEngines", "display_name": "CUpti_ActivityDevice2::numMemcpyEngines", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice216numMemcpyEnginesE", "priority": 1, "content": "uint32_t  numMemcpyEngines Number of memory copy engines on the device.", "keywords": []}, {"id": 2196, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::numMultiprocessors", "display_name": "CUpti_ActivityDevice2::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice218numMultiprocessorsE", "priority": 1, "content": "uint32_t  numMultiprocessors Number of multiprocessors on the device.", "keywords": []}, {"id": 2197, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::numThreadsPerWarp", "display_name": "CUpti_ActivityDevice2::numThreadsPerWarp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice217numThreadsPerWarpE", "priority": 1, "content": "uint32_t  numThreadsPerWarp The number of threads per warp on the device.", "keywords": []}, {"id": 2198, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice2::uuid", "display_name": "CUpti_ActivityDevice2::uuid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device2", "anchor": "_CPPv4N21CUpti_ActivityDevice24uuidE", "priority": 1, "content": "CUuuid  uuid The device UUID. This value is the globally unique immutable alphanumeric identifier of the device.", "keywords": []}, {"id": 2199, "doc_id": 2199, "filename": "api/struct_c_upti___activity_device2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_device2", "display_name": "CUpti_ActivityDevice2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_device2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2200, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3", "display_name": "CUpti_ActivityDevice3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv421CUpti_ActivityDevice3", "priority": 1, "content": "struct  CUpti_ActivityDevice3 The activity record for a device. (CUDA 7.0 onwards) This activity record represents information about a GPU device (CUPTI_ACTIVITY_KIND_DEVICE). Device activity is now reported using the CUpti_ActivityDevice5 activity record. Public Members", "keywords": []}, {"id": 2201, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::computeCapabilityMajor", "display_name": "CUpti_ActivityDevice3::computeCapabilityMajor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice322computeCapabilityMajorE", "priority": 1, "content": "uint32_t  computeCapabilityMajor Compute capability for the device, major number.", "keywords": []}, {"id": 2202, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::computeCapabilityMinor", "display_name": "CUpti_ActivityDevice3::computeCapabilityMinor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice322computeCapabilityMinorE", "priority": 1, "content": "uint32_t  computeCapabilityMinor Compute capability for the device, minor number.", "keywords": []}, {"id": 2203, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::constantMemorySize", "display_name": "CUpti_ActivityDevice3::constantMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice318constantMemorySizeE", "priority": 1, "content": "uint32_t  constantMemorySize The amount of constant memory on the device, in bytes.", "keywords": []}, {"id": 2204, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::coreClockRate", "display_name": "CUpti_ActivityDevice3::coreClockRate", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice313coreClockRateE", "priority": 1, "content": "uint32_t  coreClockRate The core clock rate of the device, in kHz.", "keywords": []}, {"id": 2205, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::eccEnabled", "display_name": "CUpti_ActivityDevice3::eccEnabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice310eccEnabledE", "priority": 1, "content": "uint32_t  eccEnabled ECC enabled flag for device.", "keywords": []}, {"id": 2206, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::flags", "display_name": "CUpti_ActivityDevice3::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice35flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the device. CUpti_ActivityFlag", "keywords": []}, {"id": 2207, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::globalMemoryBandwidth", "display_name": "CUpti_ActivityDevice3::globalMemoryBandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice321globalMemoryBandwidthE", "priority": 1, "content": "uint64_t  globalMemoryBandwidth The global memory bandwidth available on the device, in kBytes/sec.", "keywords": []}, {"id": 2208, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::globalMemorySize", "display_name": "CUpti_ActivityDevice3::globalMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice316globalMemorySizeE", "priority": 1, "content": "uint64_t  globalMemorySize The amount of global memory on the device, in bytes.", "keywords": []}, {"id": 2209, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::id", "display_name": "CUpti_ActivityDevice3::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice32idE", "priority": 1, "content": "uint32_t  id The device ID.", "keywords": []}, {"id": 2210, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::isCudaVisible", "display_name": "CUpti_ActivityDevice3::isCudaVisible", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice313isCudaVisibleE", "priority": 1, "content": "uint8_t  isCudaVisible Flag to indicate whether the device is visible to CUDA. Users can set the device visibility using CUDA_VISIBLE_DEVICES environment", "keywords": []}, {"id": 2211, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::kind", "display_name": "CUpti_ActivityDevice3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 2212, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::l2CacheSize", "display_name": "CUpti_ActivityDevice3::l2CacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice311l2CacheSizeE", "priority": 1, "content": "uint32_t  l2CacheSize The size of the L2 cache on the device, in bytes.", "keywords": []}, {"id": 2213, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxBlockDimX", "display_name": "CUpti_ActivityDevice3::maxBlockDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice312maxBlockDimXE", "priority": 1, "content": "uint32_t  maxBlockDimX Maximum allowed X dimension for a block.", "keywords": []}, {"id": 2214, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxBlockDimY", "display_name": "CUpti_ActivityDevice3::maxBlockDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice312maxBlockDimYE", "priority": 1, "content": "uint32_t  maxBlockDimY Maximum allowed Y dimension for a block.", "keywords": []}, {"id": 2215, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxBlockDimZ", "display_name": "CUpti_ActivityDevice3::maxBlockDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice312maxBlockDimZE", "priority": 1, "content": "uint32_t  maxBlockDimZ Maximum allowed Z dimension for a block.", "keywords": []}, {"id": 2216, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxBlocksPerMultiprocessor", "display_name": "CUpti_ActivityDevice3::maxBlocksPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice326maxBlocksPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxBlocksPerMultiprocessor Maximum number of blocks that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2217, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxGridDimX", "display_name": "CUpti_ActivityDevice3::maxGridDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice311maxGridDimXE", "priority": 1, "content": "uint32_t  maxGridDimX Maximum allowed X dimension for a grid.", "keywords": []}, {"id": 2218, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxGridDimY", "display_name": "CUpti_ActivityDevice3::maxGridDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice311maxGridDimYE", "priority": 1, "content": "uint32_t  maxGridDimY Maximum allowed Y dimension for a grid.", "keywords": []}, {"id": 2219, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxGridDimZ", "display_name": "CUpti_ActivityDevice3::maxGridDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice311maxGridDimZE", "priority": 1, "content": "uint32_t  maxGridDimZ Maximum allowed Z dimension for a grid.", "keywords": []}, {"id": 2220, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxIPC", "display_name": "CUpti_ActivityDevice3::maxIPC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice36maxIPCE", "priority": 1, "content": "uint32_t  maxIPC The maximum \u201cinstructions per cycle\u201d possible on each device multiprocessor.", "keywords": []}, {"id": 2221, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxRegistersPerBlock", "display_name": "CUpti_ActivityDevice3::maxRegistersPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice320maxRegistersPerBlockE", "priority": 1, "content": "uint32_t  maxRegistersPerBlock Maximum number of registers that can be allocated to a block.", "keywords": []}, {"id": 2222, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxRegistersPerMultiprocessor", "display_name": "CUpti_ActivityDevice3::maxRegistersPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice329maxRegistersPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxRegistersPerMultiprocessor Maximum number of 32-bit registers available per multiprocessor.", "keywords": []}, {"id": 2223, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxSharedMemoryPerBlock", "display_name": "CUpti_ActivityDevice3::maxSharedMemoryPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice323maxSharedMemoryPerBlockE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerBlock Maximum amount of shared memory that can be assigned to a block, in bytes.", "keywords": []}, {"id": 2224, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxSharedMemoryPerMultiprocessor", "display_name": "CUpti_ActivityDevice3::maxSharedMemoryPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice332maxSharedMemoryPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerMultiprocessor Maximum amount of shared memory available per multiprocessor, in bytes.", "keywords": []}, {"id": 2225, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxThreadsPerBlock", "display_name": "CUpti_ActivityDevice3::maxThreadsPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice318maxThreadsPerBlockE", "priority": 1, "content": "uint32_t  maxThreadsPerBlock Maximum number of threads allowed in a block.", "keywords": []}, {"id": 2226, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::maxWarpsPerMultiprocessor", "display_name": "CUpti_ActivityDevice3::maxWarpsPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice325maxWarpsPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxWarpsPerMultiprocessor Maximum number of warps that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2227, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::name", "display_name": "CUpti_ActivityDevice3::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice34nameE", "priority": 1, "content": "const  char  * name The device name. This name is shared across all activity records representing instances of the device, and so should not be modified.", "keywords": []}, {"id": 2228, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::numMemcpyEngines", "display_name": "CUpti_ActivityDevice3::numMemcpyEngines", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice316numMemcpyEnginesE", "priority": 1, "content": "uint32_t  numMemcpyEngines Number of memory copy engines on the device.", "keywords": []}, {"id": 2229, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::numMultiprocessors", "display_name": "CUpti_ActivityDevice3::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice318numMultiprocessorsE", "priority": 1, "content": "uint32_t  numMultiprocessors Number of multiprocessors on the device.", "keywords": []}, {"id": 2230, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::numThreadsPerWarp", "display_name": "CUpti_ActivityDevice3::numThreadsPerWarp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice317numThreadsPerWarpE", "priority": 1, "content": "uint32_t  numThreadsPerWarp The number of threads per warp on the device.", "keywords": []}, {"id": 2231, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice3::uuid", "display_name": "CUpti_ActivityDevice3::uuid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device3", "anchor": "_CPPv4N21CUpti_ActivityDevice34uuidE", "priority": 1, "content": "CUuuid  uuid The device UUID. This value is the globally unique immutable alphanumeric identifier of the device.", "keywords": []}, {"id": 2232, "doc_id": 2232, "filename": "api/struct_c_upti___activity_device3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_device3", "display_name": "CUpti_ActivityDevice3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_device3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2233, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4", "display_name": "CUpti_ActivityDevice4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv421CUpti_ActivityDevice4", "priority": 1, "content": "struct  CUpti_ActivityDevice4 The activity record for a device. (CUDA 11.6 onwards) This activity record represents information about a GPU device (CUPTI_ACTIVITY_KIND_DEVICE). Device activity is now reported using the CUpti_ActivityDevice5 activity record. Public Members", "keywords": []}, {"id": 2234, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::computeCapabilityMajor", "display_name": "CUpti_ActivityDevice4::computeCapabilityMajor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice422computeCapabilityMajorE", "priority": 1, "content": "uint32_t  computeCapabilityMajor Compute capability for the device, major number.", "keywords": []}, {"id": 2235, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::computeCapabilityMinor", "display_name": "CUpti_ActivityDevice4::computeCapabilityMinor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice422computeCapabilityMinorE", "priority": 1, "content": "uint32_t  computeCapabilityMinor Compute capability for the device, minor number.", "keywords": []}, {"id": 2236, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::computeInstanceId", "display_name": "CUpti_ActivityDevice4::computeInstanceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice417computeInstanceIdE", "priority": 1, "content": "uint32_t  computeInstanceId Compute Instance id for MIG enabled devices. If mig mode is disabled value is set to UINT32_MAX", "keywords": []}, {"id": 2237, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::constantMemorySize", "display_name": "CUpti_ActivityDevice4::constantMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice418constantMemorySizeE", "priority": 1, "content": "uint32_t  constantMemorySize The amount of constant memory on the device, in bytes.", "keywords": []}, {"id": 2238, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::coreClockRate", "display_name": "CUpti_ActivityDevice4::coreClockRate", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice413coreClockRateE", "priority": 1, "content": "uint32_t  coreClockRate The core clock rate of the device, in kHz.", "keywords": []}, {"id": 2239, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::eccEnabled", "display_name": "CUpti_ActivityDevice4::eccEnabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice410eccEnabledE", "priority": 1, "content": "uint32_t  eccEnabled ECC enabled flag for device.", "keywords": []}, {"id": 2240, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::flags", "display_name": "CUpti_ActivityDevice4::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice45flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the device. CUpti_ActivityFlag", "keywords": []}, {"id": 2241, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::globalMemoryBandwidth", "display_name": "CUpti_ActivityDevice4::globalMemoryBandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice421globalMemoryBandwidthE", "priority": 1, "content": "uint64_t  globalMemoryBandwidth The global memory bandwidth available on the device, in kBytes/sec.", "keywords": []}, {"id": 2242, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::globalMemorySize", "display_name": "CUpti_ActivityDevice4::globalMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice416globalMemorySizeE", "priority": 1, "content": "uint64_t  globalMemorySize The amount of global memory on the device, in bytes.", "keywords": []}, {"id": 2243, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::gpuInstanceId", "display_name": "CUpti_ActivityDevice4::gpuInstanceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice413gpuInstanceIdE", "priority": 1, "content": "uint32_t  gpuInstanceId GPU Instance id for MIG enabled devices. If mig mode is disabled value is set to UINT32_MAX", "keywords": []}, {"id": 2244, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::id", "display_name": "CUpti_ActivityDevice4::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice42idE", "priority": 1, "content": "uint32_t  id The device ID.", "keywords": []}, {"id": 2245, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::isCudaVisible", "display_name": "CUpti_ActivityDevice4::isCudaVisible", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice413isCudaVisibleE", "priority": 1, "content": "uint8_t  isCudaVisible Flag to indicate whether the device is visible to CUDA. Users can set the device visibility using CUDA_VISIBLE_DEVICES environment", "keywords": []}, {"id": 2246, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::isMigEnabled", "display_name": "CUpti_ActivityDevice4::isMigEnabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice412isMigEnabledE", "priority": 1, "content": "uint8_t  isMigEnabled MIG enabled flag for device.", "keywords": []}, {"id": 2247, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::kind", "display_name": "CUpti_ActivityDevice4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 2248, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::l2CacheSize", "display_name": "CUpti_ActivityDevice4::l2CacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice411l2CacheSizeE", "priority": 1, "content": "uint32_t  l2CacheSize The size of the L2 cache on the device, in bytes.", "keywords": []}, {"id": 2249, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxBlockDimX", "display_name": "CUpti_ActivityDevice4::maxBlockDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice412maxBlockDimXE", "priority": 1, "content": "uint32_t  maxBlockDimX Maximum allowed X dimension for a block.", "keywords": []}, {"id": 2250, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxBlockDimY", "display_name": "CUpti_ActivityDevice4::maxBlockDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice412maxBlockDimYE", "priority": 1, "content": "uint32_t  maxBlockDimY Maximum allowed Y dimension for a block.", "keywords": []}, {"id": 2251, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxBlockDimZ", "display_name": "CUpti_ActivityDevice4::maxBlockDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice412maxBlockDimZE", "priority": 1, "content": "uint32_t  maxBlockDimZ Maximum allowed Z dimension for a block.", "keywords": []}, {"id": 2252, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxBlocksPerMultiprocessor", "display_name": "CUpti_ActivityDevice4::maxBlocksPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice426maxBlocksPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxBlocksPerMultiprocessor Maximum number of blocks that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2253, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxGridDimX", "display_name": "CUpti_ActivityDevice4::maxGridDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice411maxGridDimXE", "priority": 1, "content": "uint32_t  maxGridDimX Maximum allowed X dimension for a grid.", "keywords": []}, {"id": 2254, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxGridDimY", "display_name": "CUpti_ActivityDevice4::maxGridDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice411maxGridDimYE", "priority": 1, "content": "uint32_t  maxGridDimY Maximum allowed Y dimension for a grid.", "keywords": []}, {"id": 2255, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxGridDimZ", "display_name": "CUpti_ActivityDevice4::maxGridDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice411maxGridDimZE", "priority": 1, "content": "uint32_t  maxGridDimZ Maximum allowed Z dimension for a grid.", "keywords": []}, {"id": 2256, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxIPC", "display_name": "CUpti_ActivityDevice4::maxIPC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice46maxIPCE", "priority": 1, "content": "uint32_t  maxIPC The maximum \u201cinstructions per cycle\u201d possible on each device multiprocessor.", "keywords": []}, {"id": 2257, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxRegistersPerBlock", "display_name": "CUpti_ActivityDevice4::maxRegistersPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice420maxRegistersPerBlockE", "priority": 1, "content": "uint32_t  maxRegistersPerBlock Maximum number of registers that can be allocated to a block.", "keywords": []}, {"id": 2258, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxRegistersPerMultiprocessor", "display_name": "CUpti_ActivityDevice4::maxRegistersPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice429maxRegistersPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxRegistersPerMultiprocessor Maximum number of 32-bit registers available per multiprocessor.", "keywords": []}, {"id": 2259, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxSharedMemoryPerBlock", "display_name": "CUpti_ActivityDevice4::maxSharedMemoryPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice423maxSharedMemoryPerBlockE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerBlock Maximum amount of shared memory that can be assigned to a block, in bytes.", "keywords": []}, {"id": 2260, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxSharedMemoryPerMultiprocessor", "display_name": "CUpti_ActivityDevice4::maxSharedMemoryPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice432maxSharedMemoryPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerMultiprocessor Maximum amount of shared memory available per multiprocessor, in bytes.", "keywords": []}, {"id": 2261, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxThreadsPerBlock", "display_name": "CUpti_ActivityDevice4::maxThreadsPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice418maxThreadsPerBlockE", "priority": 1, "content": "uint32_t  maxThreadsPerBlock Maximum number of threads allowed in a block.", "keywords": []}, {"id": 2262, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::maxWarpsPerMultiprocessor", "display_name": "CUpti_ActivityDevice4::maxWarpsPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice425maxWarpsPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxWarpsPerMultiprocessor Maximum number of warps that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2263, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::migUuid", "display_name": "CUpti_ActivityDevice4::migUuid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice47migUuidE", "priority": 1, "content": "CUuuid  migUuid The MIG UUID. This value is the globally unique immutable alphanumeric identifier of the device.", "keywords": []}, {"id": 2264, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::name", "display_name": "CUpti_ActivityDevice4::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice44nameE", "priority": 1, "content": "const  char  * name The device name. This name is shared across all activity records representing instances of the device, and so should not be modified.", "keywords": []}, {"id": 2265, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::numMemcpyEngines", "display_name": "CUpti_ActivityDevice4::numMemcpyEngines", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice416numMemcpyEnginesE", "priority": 1, "content": "uint32_t  numMemcpyEngines Number of memory copy engines on the device.", "keywords": []}, {"id": 2266, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::numMultiprocessors", "display_name": "CUpti_ActivityDevice4::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice418numMultiprocessorsE", "priority": 1, "content": "uint32_t  numMultiprocessors Number of multiprocessors on the device.", "keywords": []}, {"id": 2267, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::numThreadsPerWarp", "display_name": "CUpti_ActivityDevice4::numThreadsPerWarp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice417numThreadsPerWarpE", "priority": 1, "content": "uint32_t  numThreadsPerWarp The number of threads per warp on the device.", "keywords": []}, {"id": 2268, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice4::uuid", "display_name": "CUpti_ActivityDevice4::uuid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device4", "anchor": "_CPPv4N21CUpti_ActivityDevice44uuidE", "priority": 1, "content": "CUuuid  uuid The device UUID. This value is the globally unique immutable alphanumeric identifier of the device.", "keywords": []}, {"id": 2269, "doc_id": 2269, "filename": "api/struct_c_upti___activity_device4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_device4", "display_name": "CUpti_ActivityDevice4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_device4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2270, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5", "display_name": "CUpti_ActivityDevice5", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv421CUpti_ActivityDevice5", "priority": 1, "content": "struct  CUpti_ActivityDevice5 The activity record for a device. (CUDA 11.6 onwards) This activity record represents information about a GPU device (CUPTI_ACTIVITY_KIND_DEVICE). Public Members", "keywords": []}, {"id": 2271, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::computeCapabilityMajor", "display_name": "CUpti_ActivityDevice5::computeCapabilityMajor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice522computeCapabilityMajorE", "priority": 1, "content": "uint32_t  computeCapabilityMajor Compute capability for the device, major number.", "keywords": []}, {"id": 2272, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::computeCapabilityMinor", "display_name": "CUpti_ActivityDevice5::computeCapabilityMinor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice522computeCapabilityMinorE", "priority": 1, "content": "uint32_t  computeCapabilityMinor Compute capability for the device, minor number.", "keywords": []}, {"id": 2273, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::computeInstanceId", "display_name": "CUpti_ActivityDevice5::computeInstanceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice517computeInstanceIdE", "priority": 1, "content": "uint32_t  computeInstanceId Compute Instance id for MIG enabled devices. If mig mode is disabled value is set to UINT32_MAX", "keywords": []}, {"id": 2274, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::constantMemorySize", "display_name": "CUpti_ActivityDevice5::constantMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice518constantMemorySizeE", "priority": 1, "content": "uint32_t  constantMemorySize The amount of constant memory on the device, in bytes.", "keywords": []}, {"id": 2275, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::coreClockRate", "display_name": "CUpti_ActivityDevice5::coreClockRate", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice513coreClockRateE", "priority": 1, "content": "uint32_t  coreClockRate The core clock rate of the device, in kHz.", "keywords": []}, {"id": 2276, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::eccEnabled", "display_name": "CUpti_ActivityDevice5::eccEnabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice510eccEnabledE", "priority": 1, "content": "uint32_t  eccEnabled ECC enabled flag for device.", "keywords": []}, {"id": 2277, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::flags", "display_name": "CUpti_ActivityDevice5::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice55flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the device. CUpti_ActivityFlag", "keywords": []}, {"id": 2278, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::globalMemoryBandwidth", "display_name": "CUpti_ActivityDevice5::globalMemoryBandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice521globalMemoryBandwidthE", "priority": 1, "content": "uint64_t  globalMemoryBandwidth The global memory bandwidth available on the device, in kBytes/sec.", "keywords": []}, {"id": 2279, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::globalMemorySize", "display_name": "CUpti_ActivityDevice5::globalMemorySize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice516globalMemorySizeE", "priority": 1, "content": "uint64_t  globalMemorySize The amount of global memory on the device, in bytes.", "keywords": []}, {"id": 2280, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::gpuInstanceId", "display_name": "CUpti_ActivityDevice5::gpuInstanceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice513gpuInstanceIdE", "priority": 1, "content": "uint32_t  gpuInstanceId GPU Instance id for MIG enabled devices. If mig mode is disabled value is set to UINT32_MAX", "keywords": []}, {"id": 2281, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::id", "display_name": "CUpti_ActivityDevice5::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice52idE", "priority": 1, "content": "uint32_t  id The device ID.", "keywords": []}, {"id": 2282, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::isCudaVisible", "display_name": "CUpti_ActivityDevice5::isCudaVisible", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice513isCudaVisibleE", "priority": 1, "content": "uint8_t  isCudaVisible Flag to indicate whether the device is visible to CUDA. Users can set the device visibility using CUDA_VISIBLE_DEVICES environment", "keywords": []}, {"id": 2283, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::isMigEnabled", "display_name": "CUpti_ActivityDevice5::isMigEnabled", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice512isMigEnabledE", "priority": 1, "content": "uint8_t  isMigEnabled MIG enabled flag for device.", "keywords": []}, {"id": 2284, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::isNumaNode", "display_name": "CUpti_ActivityDevice5::isNumaNode", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice510isNumaNodeE", "priority": 1, "content": "uint32_t  isNumaNode Numa (Non-uniform memory access) information for device GPU is a NUMA node or not.", "keywords": []}, {"id": 2285, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::kind", "display_name": "CUpti_ActivityDevice5::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice54kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DEVICE.", "keywords": []}, {"id": 2286, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::l2CacheSize", "display_name": "CUpti_ActivityDevice5::l2CacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice511l2CacheSizeE", "priority": 1, "content": "uint32_t  l2CacheSize The size of the L2 cache on the device, in bytes.", "keywords": []}, {"id": 2287, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxBlockDimX", "display_name": "CUpti_ActivityDevice5::maxBlockDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice512maxBlockDimXE", "priority": 1, "content": "uint32_t  maxBlockDimX Maximum allowed X dimension for a block.", "keywords": []}, {"id": 2288, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxBlockDimY", "display_name": "CUpti_ActivityDevice5::maxBlockDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice512maxBlockDimYE", "priority": 1, "content": "uint32_t  maxBlockDimY Maximum allowed Y dimension for a block.", "keywords": []}, {"id": 2289, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxBlockDimZ", "display_name": "CUpti_ActivityDevice5::maxBlockDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice512maxBlockDimZE", "priority": 1, "content": "uint32_t  maxBlockDimZ Maximum allowed Z dimension for a block.", "keywords": []}, {"id": 2290, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxBlocksPerMultiprocessor", "display_name": "CUpti_ActivityDevice5::maxBlocksPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice526maxBlocksPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxBlocksPerMultiprocessor Maximum number of blocks that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2291, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxGridDimX", "display_name": "CUpti_ActivityDevice5::maxGridDimX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice511maxGridDimXE", "priority": 1, "content": "uint32_t  maxGridDimX Maximum allowed X dimension for a grid.", "keywords": []}, {"id": 2292, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxGridDimY", "display_name": "CUpti_ActivityDevice5::maxGridDimY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice511maxGridDimYE", "priority": 1, "content": "uint32_t  maxGridDimY Maximum allowed Y dimension for a grid.", "keywords": []}, {"id": 2293, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxGridDimZ", "display_name": "CUpti_ActivityDevice5::maxGridDimZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice511maxGridDimZE", "priority": 1, "content": "uint32_t  maxGridDimZ Maximum allowed Z dimension for a grid.", "keywords": []}, {"id": 2294, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxIPC", "display_name": "CUpti_ActivityDevice5::maxIPC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice56maxIPCE", "priority": 1, "content": "uint32_t  maxIPC The maximum \u201cinstructions per cycle\u201d possible on each device multiprocessor.", "keywords": []}, {"id": 2295, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxRegistersPerBlock", "display_name": "CUpti_ActivityDevice5::maxRegistersPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice520maxRegistersPerBlockE", "priority": 1, "content": "uint32_t  maxRegistersPerBlock Maximum number of registers that can be allocated to a block.", "keywords": []}, {"id": 2296, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxRegistersPerMultiprocessor", "display_name": "CUpti_ActivityDevice5::maxRegistersPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice529maxRegistersPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxRegistersPerMultiprocessor Maximum number of 32-bit registers available per multiprocessor.", "keywords": []}, {"id": 2297, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxSharedMemoryPerBlock", "display_name": "CUpti_ActivityDevice5::maxSharedMemoryPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice523maxSharedMemoryPerBlockE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerBlock Maximum amount of shared memory that can be assigned to a block, in bytes.", "keywords": []}, {"id": 2298, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxSharedMemoryPerMultiprocessor", "display_name": "CUpti_ActivityDevice5::maxSharedMemoryPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice532maxSharedMemoryPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxSharedMemoryPerMultiprocessor Maximum amount of shared memory available per multiprocessor, in bytes.", "keywords": []}, {"id": 2299, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxThreadsPerBlock", "display_name": "CUpti_ActivityDevice5::maxThreadsPerBlock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice518maxThreadsPerBlockE", "priority": 1, "content": "uint32_t  maxThreadsPerBlock Maximum number of threads allowed in a block.", "keywords": []}, {"id": 2300, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::maxWarpsPerMultiprocessor", "display_name": "CUpti_ActivityDevice5::maxWarpsPerMultiprocessor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice525maxWarpsPerMultiprocessorE", "priority": 1, "content": "uint32_t  maxWarpsPerMultiprocessor Maximum number of warps that can be present on a multiprocessor at any given time.", "keywords": []}, {"id": 2301, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::migUuid", "display_name": "CUpti_ActivityDevice5::migUuid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice57migUuidE", "priority": 1, "content": "CUuuid  migUuid The MIG UUID. This value is the globally unique immutable alphanumeric identifier of the device.", "keywords": []}, {"id": 2302, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::name", "display_name": "CUpti_ActivityDevice5::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice54nameE", "priority": 1, "content": "const  char  * name The device name. This name is shared across all activity records representing instances of the device, and so should not be modified.", "keywords": []}, {"id": 2303, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::numMemcpyEngines", "display_name": "CUpti_ActivityDevice5::numMemcpyEngines", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice516numMemcpyEnginesE", "priority": 1, "content": "uint32_t  numMemcpyEngines Number of memory copy engines on the device.", "keywords": []}, {"id": 2304, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::numMultiprocessors", "display_name": "CUpti_ActivityDevice5::numMultiprocessors", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice518numMultiprocessorsE", "priority": 1, "content": "uint32_t  numMultiprocessors Number of multiprocessors on the device.", "keywords": []}, {"id": 2305, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::numThreadsPerWarp", "display_name": "CUpti_ActivityDevice5::numThreadsPerWarp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice517numThreadsPerWarpE", "priority": 1, "content": "uint32_t  numThreadsPerWarp The number of threads per warp on the device.", "keywords": []}, {"id": 2306, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::numaId", "display_name": "CUpti_ActivityDevice5::numaId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice56numaIdE", "priority": 1, "content": "uint32_t  numaId Numa (Non-uniform memory access) information for device NUMA node ID of the GPU memory if GPU is not a NUMA node, it returns invalidNumaId.", "keywords": []}, {"id": 2307, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "cpp", "name": "CUpti_ActivityDevice5::uuid", "display_name": "CUpti_ActivityDevice5::uuid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device5", "anchor": "_CPPv4N21CUpti_ActivityDevice54uuidE", "priority": 1, "content": "CUuuid  uuid The device UUID. This value is the globally unique immutable alphanumeric identifier of the device.", "keywords": []}, {"id": 2308, "doc_id": 2308, "filename": "api/struct_c_upti___activity_device5.html", "domain_name": "std", "name": "api/struct_c_upti___activity_device5", "display_name": "CUpti_ActivityDevice5", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_device5", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2309, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "cpp", "name": "CUpti_ActivityDeviceAttribute", "display_name": "CUpti_ActivityDeviceAttribute", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "_CPPv429CUpti_ActivityDeviceAttribute", "priority": 1, "content": "struct  CUpti_ActivityDeviceAttribute The activity record for a device attribute. This activity record represents information about a GPU device: either a CUpti_DeviceAttribute or CUdevice_attribute value (CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE). Public Members", "keywords": []}, {"id": 2310, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "cpp", "name": "CUpti_ActivityDeviceAttribute::attribute", "display_name": "CUpti_ActivityDeviceAttribute::attribute", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "_CPPv4N29CUpti_ActivityDeviceAttribute9attributeE", "priority": 1, "content": "union  CUpti_ActivityDeviceAttribute :: [anonymous]  attribute The attribute, either a CUpti_DeviceAttribute or CUdevice_attribute. Flag CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE is used to indicate what kind of attribute this is. If CUPTI_ACTIVITY_FLAG_DEVICE_ATTRIBUTE_CUDEVICE is 1 then CUdevice_attribute field is value, otherwise CUpti_DeviceAttribute field is valid.", "keywords": []}, {"id": 2311, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "cpp", "name": "CUpti_ActivityDeviceAttribute::deviceId", "display_name": "CUpti_ActivityDeviceAttribute::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "_CPPv4N29CUpti_ActivityDeviceAttribute8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device that this attribute applies to.", "keywords": []}, {"id": 2312, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "cpp", "name": "CUpti_ActivityDeviceAttribute::flags", "display_name": "CUpti_ActivityDeviceAttribute::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "_CPPv4N29CUpti_ActivityDeviceAttribute5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the device. CUpti_ActivityFlag", "keywords": []}, {"id": 2313, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "cpp", "name": "CUpti_ActivityDeviceAttribute::kind", "display_name": "CUpti_ActivityDeviceAttribute::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "_CPPv4N29CUpti_ActivityDeviceAttribute4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_DEVICE_ATTRIBUTE.", "keywords": []}, {"id": 2314, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "cpp", "name": "CUpti_ActivityDeviceAttribute::value", "display_name": "CUpti_ActivityDeviceAttribute::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "_CPPv4N29CUpti_ActivityDeviceAttribute5valueE", "priority": 1, "content": "union  CUpti_ActivityDeviceAttribute :: [anonymous]  value The value for the attribute. See CUpti_DeviceAttribute and CUdevice_attribute for the type of the value for a given attribute.", "keywords": []}, {"id": 2315, "doc_id": 2315, "filename": "api/struct_c_upti___activity_device_attribute.html", "domain_name": "std", "name": "api/struct_c_upti___activity_device_attribute", "display_name": "CUpti_ActivityDeviceAttribute", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_device_attribute", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2316, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment", "display_name": "CUpti_ActivityEnvironment", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv425CUpti_ActivityEnvironment", "priority": 1, "content": "struct  CUpti_ActivityEnvironment The activity record for CUPTI environmental data. This activity record provides CUPTI environmental data, include power, clocks, and thermals. This information is sampled at various rates and returned in this activity record. The consumer of the record needs to check the environmentKind field to figure out what kind of environmental record this is. Public Members", "keywords": []}, {"id": 2317, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::clocksThrottleReasons", "display_name": "CUpti_ActivityEnvironment::clocksThrottleReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment21clocksThrottleReasonsE", "priority": 1, "content": "CUpti_EnvironmentClocksThrottleReason  clocksThrottleReasons The clocks throttle reasons.", "keywords": []}, {"id": 2318, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::cooling", "display_name": "CUpti_ActivityEnvironment::cooling", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment7coolingE", "priority": 1, "content": "struct  CUpti_ActivityEnvironment :: [anonymous] :: [anonymous]  cooling Data returned for CUPTI_ACTIVITY_ENVIRONMENT_COOLING environment kind.", "keywords": []}, {"id": 2319, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::deviceId", "display_name": "CUpti_ActivityEnvironment::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device.", "keywords": []}, {"id": 2320, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::environmentKind", "display_name": "CUpti_ActivityEnvironment::environmentKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment15environmentKindE", "priority": 1, "content": "CUpti_ActivityEnvironmentKind  environmentKind The kind of data reported in this record.", "keywords": []}, {"id": 2321, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::fanSpeed", "display_name": "CUpti_ActivityEnvironment::fanSpeed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment8fanSpeedE", "priority": 1, "content": "uint32_t  fanSpeed The fan speed as percentage of maximum.", "keywords": []}, {"id": 2322, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::gpuTemperature", "display_name": "CUpti_ActivityEnvironment::gpuTemperature", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment14gpuTemperatureE", "priority": 1, "content": "uint32_t  gpuTemperature The GPU temperature in degrees C.", "keywords": []}, {"id": 2323, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::kind", "display_name": "CUpti_ActivityEnvironment::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_ENVIRONMENT.", "keywords": []}, {"id": 2324, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::memoryClock", "display_name": "CUpti_ActivityEnvironment::memoryClock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment11memoryClockE", "priority": 1, "content": "uint32_t  memoryClock The memory frequency in MHz.", "keywords": []}, {"id": 2325, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::pcieLinkGen", "display_name": "CUpti_ActivityEnvironment::pcieLinkGen", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment11pcieLinkGenE", "priority": 1, "content": "uint32_t  pcieLinkGen The PCIe link generation.", "keywords": []}, {"id": 2326, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::pcieLinkWidth", "display_name": "CUpti_ActivityEnvironment::pcieLinkWidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment13pcieLinkWidthE", "priority": 1, "content": "uint32_t  pcieLinkWidth The PCIe link width.", "keywords": []}, {"id": 2327, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::power", "display_name": "CUpti_ActivityEnvironment::power", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment5powerE", "priority": 1, "content": "struct  CUpti_ActivityEnvironment :: [anonymous] :: [anonymous]  power Data returned for CUPTI_ACTIVITY_ENVIRONMENT_POWER environment kind. The power in milliwatts consumed by GPU and associated circuitry. The power in milliwatts that will trigger power management algorithm.", "keywords": []}, {"id": 2328, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::smClock", "display_name": "CUpti_ActivityEnvironment::smClock", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment7smClockE", "priority": 1, "content": "uint32_t  smClock The SM frequency in MHz.", "keywords": []}, {"id": 2329, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::speed", "display_name": "CUpti_ActivityEnvironment::speed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment5speedE", "priority": 1, "content": "struct  CUpti_ActivityEnvironment :: [anonymous] :: [anonymous]  speed Data returned for CUPTI_ACTIVITY_ENVIRONMENT_SPEED environment kind.", "keywords": []}, {"id": 2330, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::temperature", "display_name": "CUpti_ActivityEnvironment::temperature", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment11temperatureE", "priority": 1, "content": "struct  CUpti_ActivityEnvironment :: [anonymous] :: [anonymous]  temperature Data returned for CUPTI_ACTIVITY_ENVIRONMENT_TEMPERATURE environment kind.", "keywords": []}, {"id": 2331, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "cpp", "name": "CUpti_ActivityEnvironment::timestamp", "display_name": "CUpti_ActivityEnvironment::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_environment", "anchor": "_CPPv4N25CUpti_ActivityEnvironment9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp when this sample was retrieved, in ns. A value of 0 indicates that timestamp information could not be collected for the marker.", "keywords": []}, {"id": 2332, "doc_id": 2332, "filename": "api/struct_c_upti___activity_environment.html", "domain_name": "std", "name": "api/struct_c_upti___activity_environment", "display_name": "CUpti_ActivityEnvironment", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_environment", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2333, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "cpp", "name": "CUpti_ActivityEvent", "display_name": "CUpti_ActivityEvent", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_event", "anchor": "_CPPv419CUpti_ActivityEvent", "priority": 1, "content": "struct  CUpti_ActivityEvent The activity record for a CUPTI event. This activity record represents a CUPTI event value (CUPTI_ACTIVITY_KIND_EVENT). This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profile frameworks built on top of CUPTI that collect event data may choose to use this type to store the collected event data. Public Members", "keywords": []}, {"id": 2334, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "cpp", "name": "CUpti_ActivityEvent::correlationId", "display_name": "CUpti_ActivityEvent::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event", "anchor": "_CPPv4N19CUpti_ActivityEvent13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the event. Use of this ID is user-defined, but typically this ID value will equal the correlation ID of the kernel for which the event was gathered.", "keywords": []}, {"id": 2335, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "cpp", "name": "CUpti_ActivityEvent::domain", "display_name": "CUpti_ActivityEvent::domain", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event", "anchor": "_CPPv4N19CUpti_ActivityEvent6domainE", "priority": 1, "content": "CUpti_EventDomainID  domain The event domain ID.", "keywords": []}, {"id": 2336, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "cpp", "name": "CUpti_ActivityEvent::id", "display_name": "CUpti_ActivityEvent::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event", "anchor": "_CPPv4N19CUpti_ActivityEvent2idE", "priority": 1, "content": "CUpti_EventID  id The event ID.", "keywords": []}, {"id": 2337, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "cpp", "name": "CUpti_ActivityEvent::kind", "display_name": "CUpti_ActivityEvent::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event", "anchor": "_CPPv4N19CUpti_ActivityEvent4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_EVENT.", "keywords": []}, {"id": 2338, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "cpp", "name": "CUpti_ActivityEvent::value", "display_name": "CUpti_ActivityEvent::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event", "anchor": "_CPPv4N19CUpti_ActivityEvent5valueE", "priority": 1, "content": "uint64_t  value The event value.", "keywords": []}, {"id": 2339, "doc_id": 2339, "filename": "api/struct_c_upti___activity_event.html", "domain_name": "std", "name": "api/struct_c_upti___activity_event", "display_name": "CUpti_ActivityEvent", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_event", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2340, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance", "display_name": "CUpti_ActivityEventInstance", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv427CUpti_ActivityEventInstance", "priority": 1, "content": "struct  CUpti_ActivityEventInstance The activity record for a CUPTI event with instance information. This activity record represents the a CUPTI event value for a specific event domain instance (CUPTI_ACTIVITY_KIND_EVENT_INSTANCE). This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profile frameworks built on top of CUPTI that collect event data may choose to use this type to store the collected event data. This activity record should be used when event domain instance information needs to be associated with the event. Public Members", "keywords": []}, {"id": 2341, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::correlationId", "display_name": "CUpti_ActivityEventInstance::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the event. Use of this ID is user-defined, but typically this ID value will equal the correlation ID of the kernel for which the event was gathered.", "keywords": []}, {"id": 2342, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::domain", "display_name": "CUpti_ActivityEventInstance::domain", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance6domainE", "priority": 1, "content": "CUpti_EventDomainID  domain The event domain ID.", "keywords": []}, {"id": 2343, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::id", "display_name": "CUpti_ActivityEventInstance::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance2idE", "priority": 1, "content": "CUpti_EventID  id The event ID.", "keywords": []}, {"id": 2344, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::instance", "display_name": "CUpti_ActivityEventInstance::instance", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance8instanceE", "priority": 1, "content": "uint32_t  instance The event domain instance.", "keywords": []}, {"id": 2345, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::kind", "display_name": "CUpti_ActivityEventInstance::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_EVENT_INSTANCE.", "keywords": []}, {"id": 2346, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::pad", "display_name": "CUpti_ActivityEventInstance::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2347, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityEventInstance::value", "display_name": "CUpti_ActivityEventInstance::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "_CPPv4N27CUpti_ActivityEventInstance5valueE", "priority": 1, "content": "uint64_t  value The event value.", "keywords": []}, {"id": 2348, "doc_id": 2348, "filename": "api/struct_c_upti___activity_event_instance.html", "domain_name": "std", "name": "api/struct_c_upti___activity_event_instance", "display_name": "CUpti_ActivityEventInstance", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_event_instance", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2349, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityExternalCorrelation", "display_name": "CUpti_ActivityExternalCorrelation", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "_CPPv433CUpti_ActivityExternalCorrelation", "priority": 1, "content": "struct  CUpti_ActivityExternalCorrelation The activity record for correlation with external records. This activity record correlates native CUDA records (e.g. CUDA Driver API, kernels, memcpys, \u2026) with records from external APIs such as OpenACC. (CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION). CUpti_ActivityKind  Public Members", "keywords": []}, {"id": 2350, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityExternalCorrelation::correlationId", "display_name": "CUpti_ActivityExternalCorrelation::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "_CPPv4N33CUpti_ActivityExternalCorrelation13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the associated CUDA driver or runtime API record.", "keywords": []}, {"id": 2351, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityExternalCorrelation::externalId", "display_name": "CUpti_ActivityExternalCorrelation::externalId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "_CPPv4N33CUpti_ActivityExternalCorrelation10externalIdE", "priority": 1, "content": "uint64_t  externalId The correlation ID of the associated non-CUDA API record. The exact field in the associated external record depends on that record\u2019s activity kind ( externalKind ).", "keywords": []}, {"id": 2352, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityExternalCorrelation::externalKind", "display_name": "CUpti_ActivityExternalCorrelation::externalKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "_CPPv4N33CUpti_ActivityExternalCorrelation12externalKindE", "priority": 1, "content": "CUpti_ExternalCorrelationKind  externalKind The kind of external API this record correlated to.", "keywords": []}, {"id": 2353, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityExternalCorrelation::kind", "display_name": "CUpti_ActivityExternalCorrelation::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "_CPPv4N33CUpti_ActivityExternalCorrelation4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The kind of this activity.", "keywords": []}, {"id": 2354, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityExternalCorrelation::reserved", "display_name": "CUpti_ActivityExternalCorrelation::reserved", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "_CPPv4N33CUpti_ActivityExternalCorrelation8reservedE", "priority": 1, "content": "uint32_t  reserved Undefined. Reserved for internal use.", "keywords": []}, {"id": 2355, "doc_id": 2355, "filename": "api/struct_c_upti___activity_external_correlation.html", "domain_name": "std", "name": "api/struct_c_upti___activity_external_correlation", "display_name": "CUpti_ActivityExternalCorrelation", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_external_correlation", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2356, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction", "display_name": "CUpti_ActivityFunction", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv422CUpti_ActivityFunction", "priority": 1, "content": "struct  CUpti_ActivityFunction The activity record for global/device functions. This activity records function name and corresponding module information. (CUPTI_ACTIVITY_KIND_FUNCTION). Public Members", "keywords": []}, {"id": 2357, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::contextId", "display_name": "CUpti_ActivityFunction::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the function is launched.", "keywords": []}, {"id": 2358, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::functionIndex", "display_name": "CUpti_ActivityFunction::functionIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction13functionIndexE", "priority": 1, "content": "uint32_t  functionIndex The function\u2019s unique symbol index in the module.", "keywords": []}, {"id": 2359, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::id", "display_name": "CUpti_ActivityFunction::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction2idE", "priority": 1, "content": "uint32_t  id ID to uniquely identify the record.", "keywords": []}, {"id": 2360, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::kind", "display_name": "CUpti_ActivityFunction::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_FUNCTION.", "keywords": []}, {"id": 2361, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::moduleId", "display_name": "CUpti_ActivityFunction::moduleId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction8moduleIdE", "priority": 1, "content": "uint32_t  moduleId The module ID in which this global/device function is present.", "keywords": []}, {"id": 2362, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::name", "display_name": "CUpti_ActivityFunction::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction4nameE", "priority": 1, "content": "const  char  * name The name of the function. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2363, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "cpp", "name": "CUpti_ActivityFunction::pad", "display_name": "CUpti_ActivityFunction::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_function", "anchor": "_CPPv4N22CUpti_ActivityFunction3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2364, "doc_id": 2364, "filename": "api/struct_c_upti___activity_function.html", "domain_name": "std", "name": "api/struct_c_upti___activity_function", "display_name": "CUpti_ActivityFunction", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_function", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2365, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess", "display_name": "CUpti_ActivityGlobalAccess", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv426CUpti_ActivityGlobalAccess", "priority": 1, "content": "struct  CUpti_ActivityGlobalAccess The activity record for source-level global access. (deprecated) This activity records the locations of the global accesses in the source (CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS). Global access activities are now reported using the CUpti_ActivityGlobalAccess3 activity record. Public Members", "keywords": []}, {"id": 2366, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::correlationId", "display_name": "CUpti_ActivityGlobalAccess::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 2367, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::executed", "display_name": "CUpti_ActivityGlobalAccess::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess8executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented when at least one of thread among warp is active with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2368, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::flags", "display_name": "CUpti_ActivityGlobalAccess::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this global access.", "keywords": []}, {"id": 2369, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::kind", "display_name": "CUpti_ActivityGlobalAccess::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS.", "keywords": []}, {"id": 2370, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::l2_transactions", "display_name": "CUpti_ActivityGlobalAccess::l2_transactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess15l2_transactionsE", "priority": 1, "content": "uint64_t  l2_transactions The total number of 32 bytes transactions to L2 cache generated by this access.", "keywords": []}, {"id": 2371, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::pcOffset", "display_name": "CUpti_ActivityGlobalAccess::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the access.", "keywords": []}, {"id": 2372, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::sourceLocatorId", "display_name": "CUpti_ActivityGlobalAccess::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess15sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2373, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess::threadsExecuted", "display_name": "CUpti_ActivityGlobalAccess::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access", "anchor": "_CPPv4N26CUpti_ActivityGlobalAccess15threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2374, "doc_id": 2374, "filename": "api/struct_c_upti___activity_global_access.html", "domain_name": "std", "name": "api/struct_c_upti___activity_global_access", "display_name": "CUpti_ActivityGlobalAccess", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_global_access", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2375, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2", "display_name": "CUpti_ActivityGlobalAccess2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv427CUpti_ActivityGlobalAccess2", "priority": 1, "content": "struct  CUpti_ActivityGlobalAccess2 The activity record for source-level global access. (deprecated in CUDA 9.0) This activity records the locations of the global accesses in the source (CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS). Global access activities are now reported using the CUpti_ActivityGlobalAccess3 activity record. Public Members", "keywords": []}, {"id": 2376, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::correlationId", "display_name": "CUpti_ActivityGlobalAccess2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 2377, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::executed", "display_name": "CUpti_ActivityGlobalAccess2::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess28executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented when at least one of thread among warp is active with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2378, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::flags", "display_name": "CUpti_ActivityGlobalAccess2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess25flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this global access.", "keywords": []}, {"id": 2379, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::functionId", "display_name": "CUpti_ActivityGlobalAccess2::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess210functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 2380, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::kind", "display_name": "CUpti_ActivityGlobalAccess2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS.", "keywords": []}, {"id": 2381, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::l2_transactions", "display_name": "CUpti_ActivityGlobalAccess2::l2_transactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess215l2_transactionsE", "priority": 1, "content": "uint64_t  l2_transactions The total number of 32 bytes transactions to L2 cache generated by this access.", "keywords": []}, {"id": 2382, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::pad", "display_name": "CUpti_ActivityGlobalAccess2::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess23padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2383, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::pcOffset", "display_name": "CUpti_ActivityGlobalAccess2::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess28pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the access.", "keywords": []}, {"id": 2384, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::sourceLocatorId", "display_name": "CUpti_ActivityGlobalAccess2::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess215sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2385, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::theoreticalL2Transactions", "display_name": "CUpti_ActivityGlobalAccess2::theoreticalL2Transactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess225theoreticalL2TransactionsE", "priority": 1, "content": "uint64_t  theoreticalL2Transactions The minimum number of L2 transactions possible based on the access pattern.", "keywords": []}, {"id": 2386, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess2::threadsExecuted", "display_name": "CUpti_ActivityGlobalAccess2::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess215threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2387, "doc_id": 2387, "filename": "api/struct_c_upti___activity_global_access2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_global_access2", "display_name": "CUpti_ActivityGlobalAccess2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_global_access2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2388, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3", "display_name": "CUpti_ActivityGlobalAccess3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv427CUpti_ActivityGlobalAccess3", "priority": 1, "content": "struct  CUpti_ActivityGlobalAccess3 The activity record for source-level global access. This activity records the locations of the global accesses in the source (CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS). Public Members", "keywords": []}, {"id": 2389, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::correlationId", "display_name": "CUpti_ActivityGlobalAccess3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 2390, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::executed", "display_name": "CUpti_ActivityGlobalAccess3::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess38executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented when at least one of thread among warp is active with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2391, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::flags", "display_name": "CUpti_ActivityGlobalAccess3::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess35flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this global access.", "keywords": []}, {"id": 2392, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::functionId", "display_name": "CUpti_ActivityGlobalAccess3::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess310functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 2393, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::kind", "display_name": "CUpti_ActivityGlobalAccess3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS.", "keywords": []}, {"id": 2394, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::l2_transactions", "display_name": "CUpti_ActivityGlobalAccess3::l2_transactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess315l2_transactionsE", "priority": 1, "content": "uint64_t  l2_transactions The total number of 32 bytes transactions to L2 cache generated by this access.", "keywords": []}, {"id": 2395, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::pcOffset", "display_name": "CUpti_ActivityGlobalAccess3::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess38pcOffsetE", "priority": 1, "content": "uint64_t  pcOffset The pc offset for the access.", "keywords": []}, {"id": 2396, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::sourceLocatorId", "display_name": "CUpti_ActivityGlobalAccess3::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess315sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2397, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::theoreticalL2Transactions", "display_name": "CUpti_ActivityGlobalAccess3::theoreticalL2Transactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess325theoreticalL2TransactionsE", "priority": 1, "content": "uint64_t  theoreticalL2Transactions The minimum number of L2 transactions possible based on the access pattern.", "keywords": []}, {"id": 2398, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "cpp", "name": "CUpti_ActivityGlobalAccess3::threadsExecuted", "display_name": "CUpti_ActivityGlobalAccess3::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "_CPPv4N27CUpti_ActivityGlobalAccess315threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2399, "doc_id": 2399, "filename": "api/struct_c_upti___activity_global_access3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_global_access3", "display_name": "CUpti_ActivityGlobalAccess3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_global_access3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2400, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace", "display_name": "CUpti_ActivityGraphTrace", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv424CUpti_ActivityGraphTrace", "priority": 1, "content": "struct  CUpti_ActivityGraphTrace The activity record for trace of graph execution. This activity record represents execution for a graph without giving visibility about the execution of its nodes. This is intended to reduce overheads in tracing each node. The activity kind is CUPTI_ACTIVITY_KIND_GRAPH_TRACE Graph trace activity is now reported using CUpti_ActivityGraphTrace2 record. Public Members", "keywords": []}, {"id": 2401, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::contextId", "display_name": "CUpti_ActivityGraphTrace::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the graph is being launched.", "keywords": []}, {"id": 2402, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::correlationId", "display_name": "CUpti_ActivityGraphTrace::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the graph launch. Each graph launch is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the graph.", "keywords": []}, {"id": 2403, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::deviceId", "display_name": "CUpti_ActivityGraphTrace::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the graph execution is occurring.", "keywords": []}, {"id": 2404, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::end", "display_name": "CUpti_ActivityGraphTrace::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the graph execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the graph.", "keywords": []}, {"id": 2405, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::graphId", "display_name": "CUpti_ActivityGraphTrace::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace7graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that is launched.", "keywords": []}, {"id": 2406, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::kind", "display_name": "CUpti_ActivityGraphTrace::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_GRAPH_TRACE.", "keywords": []}, {"id": 2407, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::reserved", "display_name": "CUpti_ActivityGraphTrace::reserved", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace8reservedE", "priority": 1, "content": "void  * reserved This field is reserved for internal use.", "keywords": []}, {"id": 2408, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::start", "display_name": "CUpti_ActivityGraphTrace::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the graph execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the graph.", "keywords": []}, {"id": 2409, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace::streamId", "display_name": "CUpti_ActivityGraphTrace::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "_CPPv4N24CUpti_ActivityGraphTrace8streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the graph is being launched.", "keywords": []}, {"id": 2410, "doc_id": 2410, "filename": "api/struct_c_upti___activity_graph_trace.html", "domain_name": "std", "name": "api/struct_c_upti___activity_graph_trace", "display_name": "CUpti_ActivityGraphTrace", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_graph_trace", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2411, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2", "display_name": "CUpti_ActivityGraphTrace2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv425CUpti_ActivityGraphTrace2", "priority": 1, "content": "struct  CUpti_ActivityGraphTrace2 The activity record for trace of graph execution. This activity record represents execution for a graph without giving visibility about the execution of its nodes. This is intended to reduce overheads in tracing each node. The activity kind is CUPTI_ACTIVITY_KIND_GRAPH_TRACE Public Members", "keywords": []}, {"id": 2412, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::contextId", "display_name": "CUpti_ActivityGraphTrace2::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace29contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the first node of the graph is executed.", "keywords": []}, {"id": 2413, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::correlationId", "display_name": "CUpti_ActivityGraphTrace2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the graph launch. Each graph launch is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the graph.", "keywords": []}, {"id": 2414, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::deviceId", "display_name": "CUpti_ActivityGraphTrace2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the first node of the graph is executed.", "keywords": []}, {"id": 2415, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::end", "display_name": "CUpti_ActivityGraphTrace2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace23endE", "priority": 1, "content": "uint64_t  end The end timestamp for the graph execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the graph.", "keywords": []}, {"id": 2416, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::endContextId", "display_name": "CUpti_ActivityGraphTrace2::endContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace212endContextIdE", "priority": 1, "content": "uint32_t  endContextId The ID of the context where the last node of the graph is executed.", "keywords": []}, {"id": 2417, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::endDeviceId", "display_name": "CUpti_ActivityGraphTrace2::endDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace211endDeviceIdE", "priority": 1, "content": "uint32_t  endDeviceId The ID of the device where last node of the graph is executed.", "keywords": []}, {"id": 2418, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::graphId", "display_name": "CUpti_ActivityGraphTrace2::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace27graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that is launched.", "keywords": []}, {"id": 2419, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::kind", "display_name": "CUpti_ActivityGraphTrace2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_GRAPH_TRACE.", "keywords": []}, {"id": 2420, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::reserved", "display_name": "CUpti_ActivityGraphTrace2::reserved", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace28reservedE", "priority": 1, "content": "void  * reserved This field is reserved for internal use.", "keywords": []}, {"id": 2421, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::start", "display_name": "CUpti_ActivityGraphTrace2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace25startE", "priority": 1, "content": "uint64_t  start The start timestamp for the graph execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the graph.", "keywords": []}, {"id": 2422, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "cpp", "name": "CUpti_ActivityGraphTrace2::streamId", "display_name": "CUpti_ActivityGraphTrace2::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "_CPPv4N25CUpti_ActivityGraphTrace28streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the graph is being launched.", "keywords": []}, {"id": 2423, "doc_id": 2423, "filename": "api/struct_c_upti___activity_graph_trace2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_graph_trace2", "display_name": "CUpti_ActivityGraphTrace2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_graph_trace2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2424, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent", "display_name": "CUpti_ActivityInstantaneousEvent", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv432CUpti_ActivityInstantaneousEvent", "priority": 1, "content": "struct  CUpti_ActivityInstantaneousEvent The activity record for an instantaneous CUPTI event. This activity record represents a CUPTI event value (CUPTI_ACTIVITY_KIND_EVENT) sampled at a particular instant. This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profiler frameworks built on top of CUPTI that collect event data at a particular time may choose to use this type to store the collected event data. Public Members", "keywords": []}, {"id": 2425, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent::deviceId", "display_name": "CUpti_ActivityInstantaneousEvent::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv4N32CUpti_ActivityInstantaneousEvent8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device id.", "keywords": []}, {"id": 2426, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent::id", "display_name": "CUpti_ActivityInstantaneousEvent::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv4N32CUpti_ActivityInstantaneousEvent2idE", "priority": 1, "content": "CUpti_EventID  id The event ID.", "keywords": []}, {"id": 2427, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent::kind", "display_name": "CUpti_ActivityInstantaneousEvent::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv4N32CUpti_ActivityInstantaneousEvent4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT.", "keywords": []}, {"id": 2428, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent::reserved", "display_name": "CUpti_ActivityInstantaneousEvent::reserved", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv4N32CUpti_ActivityInstantaneousEvent8reservedE", "priority": 1, "content": "uint32_t  reserved Undefined. reserved for internal use", "keywords": []}, {"id": 2429, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent::timestamp", "display_name": "CUpti_ActivityInstantaneousEvent::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv4N32CUpti_ActivityInstantaneousEvent9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp at which event is sampled.", "keywords": []}, {"id": 2430, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEvent::value", "display_name": "CUpti_ActivityInstantaneousEvent::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "_CPPv4N32CUpti_ActivityInstantaneousEvent5valueE", "priority": 1, "content": "uint64_t  value The event value.", "keywords": []}, {"id": 2431, "doc_id": 2431, "filename": "api/struct_c_upti___activity_instantaneous_event.html", "domain_name": "std", "name": "api/struct_c_upti___activity_instantaneous_event", "display_name": "CUpti_ActivityInstantaneousEvent", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_instantaneous_event", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2432, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance", "display_name": "CUpti_ActivityInstantaneousEventInstance", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv440CUpti_ActivityInstantaneousEventInstance", "priority": 1, "content": "struct  CUpti_ActivityInstantaneousEventInstance The activity record for an instantaneous CUPTI event with event domain instance information. This activity record represents the a CUPTI event value for a specific event domain instance (CUPTI_ACTIVITY_KIND_EVENT_INSTANCE) sampled at a particular instant. This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profiler frameworks built on top of CUPTI that collect event data may choose to use this type to store the collected event data. This activity record should be used when event domain instance information needs to be associated with the event. Public Members", "keywords": []}, {"id": 2433, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::deviceId", "display_name": "CUpti_ActivityInstantaneousEventInstance::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device id.", "keywords": []}, {"id": 2434, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::id", "display_name": "CUpti_ActivityInstantaneousEventInstance::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance2idE", "priority": 1, "content": "CUpti_EventID  id The event ID.", "keywords": []}, {"id": 2435, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::instance", "display_name": "CUpti_ActivityInstantaneousEventInstance::instance", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance8instanceE", "priority": 1, "content": "uint8_t  instance The event domain instance.", "keywords": []}, {"id": 2436, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::kind", "display_name": "CUpti_ActivityInstantaneousEventInstance::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_INSTANTANEOUS_EVENT_INSTANCE.", "keywords": []}, {"id": 2437, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::pad", "display_name": "CUpti_ActivityInstantaneousEventInstance::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance3padE", "priority": 1, "content": "uint8_t  pad [ 3 ] Undefined. reserved for internal use", "keywords": []}, {"id": 2438, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::timestamp", "display_name": "CUpti_ActivityInstantaneousEventInstance::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp at which event is sampled.", "keywords": []}, {"id": 2439, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousEventInstance::value", "display_name": "CUpti_ActivityInstantaneousEventInstance::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "_CPPv4N40CUpti_ActivityInstantaneousEventInstance5valueE", "priority": 1, "content": "uint64_t  value The event value.", "keywords": []}, {"id": 2440, "doc_id": 2440, "filename": "api/struct_c_upti___activity_instantaneous_event_instance.html", "domain_name": "std", "name": "api/struct_c_upti___activity_instantaneous_event_instance", "display_name": "CUpti_ActivityInstantaneousEventInstance", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_instantaneous_event_instance", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2441, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric", "display_name": "CUpti_ActivityInstantaneousMetric", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv433CUpti_ActivityInstantaneousMetric", "priority": 1, "content": "struct  CUpti_ActivityInstantaneousMetric The activity record for an instantaneous CUPTI metric. This activity record represents the collection of a CUPTI metric value (CUPTI_ACTIVITY_KIND_METRIC) at a particular instance. This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profiler frameworks built on top of CUPTI that collect metric data may choose to use this type to store the collected metric data. Public Members", "keywords": []}, {"id": 2442, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::deviceId", "display_name": "CUpti_ActivityInstantaneousMetric::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device id.", "keywords": []}, {"id": 2443, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::flags", "display_name": "CUpti_ActivityInstantaneousMetric::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric5flagsE", "priority": 1, "content": "uint8_t  flags The properties of this metric. CUpti_ActivityFlag", "keywords": []}, {"id": 2444, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::id", "display_name": "CUpti_ActivityInstantaneousMetric::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric2idE", "priority": 1, "content": "CUpti_MetricID  id The metric ID.", "keywords": []}, {"id": 2445, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::kind", "display_name": "CUpti_ActivityInstantaneousMetric::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC.", "keywords": []}, {"id": 2446, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::pad", "display_name": "CUpti_ActivityInstantaneousMetric::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric3padE", "priority": 1, "content": "uint8_t  pad [ 3 ] Undefined. reserved for internal use", "keywords": []}, {"id": 2447, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::timestamp", "display_name": "CUpti_ActivityInstantaneousMetric::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp at which metric is sampled.", "keywords": []}, {"id": 2448, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetric::value", "display_name": "CUpti_ActivityInstantaneousMetric::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "_CPPv4N33CUpti_ActivityInstantaneousMetric5valueE", "priority": 1, "content": "CUpti_MetricValue  value The metric value.", "keywords": []}, {"id": 2449, "doc_id": 2449, "filename": "api/struct_c_upti___activity_instantaneous_metric.html", "domain_name": "std", "name": "api/struct_c_upti___activity_instantaneous_metric", "display_name": "CUpti_ActivityInstantaneousMetric", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_instantaneous_metric", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2450, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance", "display_name": "CUpti_ActivityInstantaneousMetricInstance", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv441CUpti_ActivityInstantaneousMetricInstance", "priority": 1, "content": "struct  CUpti_ActivityInstantaneousMetricInstance The instantaneous activity record for a CUPTI metric with instance information. This activity record represents a CUPTI metric value for a specific metric domain instance (CUPTI_ACTIVITY_KIND_METRIC_INSTANCE) sampled at a particular time. This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profiler frameworks built on top of CUPTI that collect metric data may choose to use this type to store the collected metric data. This activity record should be used when metric domain instance information needs to be associated with the metric. Public Members", "keywords": []}, {"id": 2451, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::deviceId", "display_name": "CUpti_ActivityInstantaneousMetricInstance::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device id.", "keywords": []}, {"id": 2452, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::flags", "display_name": "CUpti_ActivityInstantaneousMetricInstance::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance5flagsE", "priority": 1, "content": "uint8_t  flags The properties of this metric. CUpti_ActivityFlag", "keywords": []}, {"id": 2453, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::id", "display_name": "CUpti_ActivityInstantaneousMetricInstance::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance2idE", "priority": 1, "content": "CUpti_MetricID  id The metric ID.", "keywords": []}, {"id": 2454, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::instance", "display_name": "CUpti_ActivityInstantaneousMetricInstance::instance", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance8instanceE", "priority": 1, "content": "uint8_t  instance The metric domain instance.", "keywords": []}, {"id": 2455, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::kind", "display_name": "CUpti_ActivityInstantaneousMetricInstance::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_INSTANTANEOUS_METRIC_INSTANCE.", "keywords": []}, {"id": 2456, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::pad", "display_name": "CUpti_ActivityInstantaneousMetricInstance::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance3padE", "priority": 1, "content": "uint8_t  pad [ 2 ] Undefined. reserved for internal use", "keywords": []}, {"id": 2457, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::timestamp", "display_name": "CUpti_ActivityInstantaneousMetricInstance::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp at which metric is sampled.", "keywords": []}, {"id": 2458, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityInstantaneousMetricInstance::value", "display_name": "CUpti_ActivityInstantaneousMetricInstance::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "_CPPv4N41CUpti_ActivityInstantaneousMetricInstance5valueE", "priority": 1, "content": "CUpti_MetricValue  value The metric value.", "keywords": []}, {"id": 2459, "doc_id": 2459, "filename": "api/struct_c_upti___activity_instantaneous_metric_instance.html", "domain_name": "std", "name": "api/struct_c_upti___activity_instantaneous_metric_instance", "display_name": "CUpti_ActivityInstantaneousMetricInstance", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_instantaneous_metric_instance", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2460, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation", "display_name": "CUpti_ActivityInstructionCorrelation", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv436CUpti_ActivityInstructionCorrelation", "priority": 1, "content": "struct  CUpti_ActivityInstructionCorrelation The activity record for source-level sass/source line-by-line correlation. This activity records source level sass/source correlation information. (CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION). Public Members", "keywords": []}, {"id": 2461, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation::flags", "display_name": "CUpti_ActivityInstructionCorrelation::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv4N36CUpti_ActivityInstructionCorrelation5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this instruction.", "keywords": []}, {"id": 2462, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation::functionId", "display_name": "CUpti_ActivityInstructionCorrelation::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv4N36CUpti_ActivityInstructionCorrelation10functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 2463, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation::kind", "display_name": "CUpti_ActivityInstructionCorrelation::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv4N36CUpti_ActivityInstructionCorrelation4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION.", "keywords": []}, {"id": 2464, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation::pad", "display_name": "CUpti_ActivityInstructionCorrelation::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv4N36CUpti_ActivityInstructionCorrelation3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2465, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation::pcOffset", "display_name": "CUpti_ActivityInstructionCorrelation::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv4N36CUpti_ActivityInstructionCorrelation8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the instruction.", "keywords": []}, {"id": 2466, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionCorrelation::sourceLocatorId", "display_name": "CUpti_ActivityInstructionCorrelation::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "_CPPv4N36CUpti_ActivityInstructionCorrelation15sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2467, "doc_id": 2467, "filename": "api/struct_c_upti___activity_instruction_correlation.html", "domain_name": "std", "name": "api/struct_c_upti___activity_instruction_correlation", "display_name": "CUpti_ActivityInstructionCorrelation", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_instruction_correlation", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2468, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution", "display_name": "CUpti_ActivityInstructionExecution", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv434CUpti_ActivityInstructionExecution", "priority": 1, "content": "struct  CUpti_ActivityInstructionExecution The activity record for source-level instruction execution. This activity records result for source level instruction execution. (CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION). Public Members", "keywords": []}, {"id": 2469, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::correlationId", "display_name": "CUpti_ActivityInstructionExecution::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 2470, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::executed", "display_name": "CUpti_ActivityInstructionExecution::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution8executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented regardless of predicate or condition code.", "keywords": []}, {"id": 2471, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::flags", "display_name": "CUpti_ActivityInstructionExecution::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this instruction execution.", "keywords": []}, {"id": 2472, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::functionId", "display_name": "CUpti_ActivityInstructionExecution::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution10functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 2473, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::kind", "display_name": "CUpti_ActivityInstructionExecution::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION.", "keywords": []}, {"id": 2474, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::notPredOffThreadsExecuted", "display_name": "CUpti_ActivityInstructionExecution::notPredOffThreadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution25notPredOffThreadsExecutedE", "priority": 1, "content": "uint64_t  notPredOffThreadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction with predicate and condition code evaluating to true.", "keywords": []}, {"id": 2475, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::pad", "display_name": "CUpti_ActivityInstructionExecution::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2476, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::pcOffset", "display_name": "CUpti_ActivityInstructionExecution::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the instruction.", "keywords": []}, {"id": 2477, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::sourceLocatorId", "display_name": "CUpti_ActivityInstructionExecution::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution15sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 2478, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "cpp", "name": "CUpti_ActivityInstructionExecution::threadsExecuted", "display_name": "CUpti_ActivityInstructionExecution::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "_CPPv4N34CUpti_ActivityInstructionExecution15threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction, regardless of predicate or condition code.", "keywords": []}, {"id": 2479, "doc_id": 2479, "filename": "api/struct_c_upti___activity_instruction_execution.html", "domain_name": "std", "name": "api/struct_c_upti___activity_instruction_execution", "display_name": "CUpti_ActivityInstructionExecution", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_instruction_execution", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2480, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit", "display_name": "CUpti_ActivityJit", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv417CUpti_ActivityJit", "priority": 1, "content": "struct  CUpti_ActivityJit The activity record for JIT operations. This activity represents the JIT operations (compile, load, store) of a CUmodule from the Compute Cache. Gives the exact hashed path of where the cached module is loaded from, or where the module will be stored after Just-In-Time (JIT) compilation. JIT activity is now reported using CUpti_ActivityJit2 record Public Members", "keywords": []}, {"id": 2481, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::cachePath", "display_name": "CUpti_ActivityJit::cachePath", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit9cachePathE", "priority": 1, "content": "const  char  * cachePath The path where the fat binary is cached.", "keywords": []}, {"id": 2482, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::cacheSize", "display_name": "CUpti_ActivityJit::cacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit9cacheSizeE", "priority": 1, "content": "uint64_t  cacheSize The size of compute cache.", "keywords": []}, {"id": 2483, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::correlationId", "display_name": "CUpti_ActivityJit::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the JIT operation to which records belong to. Each JIT operation is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the JIT operation.", "keywords": []}, {"id": 2484, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::deviceId", "display_name": "CUpti_ActivityJit::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device ID.", "keywords": []}, {"id": 2485, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::end", "display_name": "CUpti_ActivityJit::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the JIT operation, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the JIT operation.", "keywords": []}, {"id": 2486, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::jitEntryType", "display_name": "CUpti_ActivityJit::jitEntryType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit12jitEntryTypeE", "priority": 1, "content": "CUpti_ActivityJitEntryType  jitEntryType The JIT entry type.", "keywords": []}, {"id": 2487, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::jitOperationCorrelationId", "display_name": "CUpti_ActivityJit::jitOperationCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit25jitOperationCorrelationIdE", "priority": 1, "content": "uint64_t  jitOperationCorrelationId The correlation ID to correlate JIT compilation, load and store operations. Each JIT compilation unit is assigned a unique correlation ID at the time of the JIT compilation. This correlation id can be used to find the matching JIT cache load/store records.", "keywords": []}, {"id": 2488, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::jitOperationType", "display_name": "CUpti_ActivityJit::jitOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit16jitOperationTypeE", "priority": 1, "content": "CUpti_ActivityJitOperationType  jitOperationType The JIT operation type.", "keywords": []}, {"id": 2489, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::kind", "display_name": "CUpti_ActivityJit::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind must be CUPTI_ACTIVITY_KIND_JIT.", "keywords": []}, {"id": 2490, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::padding", "display_name": "CUpti_ActivityJit::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit7paddingE", "priority": 1, "content": "uint32_t  padding Internal use.", "keywords": []}, {"id": 2491, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "cpp", "name": "CUpti_ActivityJit::start", "display_name": "CUpti_ActivityJit::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit", "anchor": "_CPPv4N17CUpti_ActivityJit5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the JIT operation, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the JIT operation.", "keywords": []}, {"id": 2492, "doc_id": 2492, "filename": "api/struct_c_upti___activity_jit.html", "domain_name": "std", "name": "api/struct_c_upti___activity_jit", "display_name": "CUpti_ActivityJit", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_jit", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2493, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2", "display_name": "CUpti_ActivityJit2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv418CUpti_ActivityJit2", "priority": 1, "content": "struct  CUpti_ActivityJit2 The activity record for JIT operations. This activity represents the JIT operations (compile, load, store) of a CUmodule from the Compute Cache. Gives the exact hashed path of where the cached module is loaded from, or where the module will be stored after Just-In-Time (JIT) compilation. Public Members", "keywords": []}, {"id": 2494, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::cachePath", "display_name": "CUpti_ActivityJit2::cachePath", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit29cachePathE", "priority": 1, "content": "const  char  * cachePath The path where the fat binary is cached.", "keywords": []}, {"id": 2495, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::cacheSize", "display_name": "CUpti_ActivityJit2::cacheSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit29cacheSizeE", "priority": 1, "content": "uint64_t  cacheSize The size of compute cache.", "keywords": []}, {"id": 2496, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::correlationId", "display_name": "CUpti_ActivityJit2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the JIT operation to which records belong to. Each JIT operation is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the JIT operation.", "keywords": []}, {"id": 2497, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::deviceId", "display_name": "CUpti_ActivityJit2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The device ID.", "keywords": []}, {"id": 2498, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::end", "display_name": "CUpti_ActivityJit2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit23endE", "priority": 1, "content": "uint64_t  end The end timestamp for the JIT operation, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the JIT operation.", "keywords": []}, {"id": 2499, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::jitEntryType", "display_name": "CUpti_ActivityJit2::jitEntryType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit212jitEntryTypeE", "priority": 1, "content": "CUpti_ActivityJitEntryType  jitEntryType The JIT entry type.", "keywords": []}, {"id": 2500, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::jitOperationCorrelationId", "display_name": "CUpti_ActivityJit2::jitOperationCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit225jitOperationCorrelationIdE", "priority": 1, "content": "uint64_t  jitOperationCorrelationId The correlation ID to correlate JIT compilation, load and store operations. Each JIT compilation unit is assigned a unique correlation ID at the time of the JIT compilation. This correlation id can be used to find the matching JIT cache load/store records.", "keywords": []}, {"id": 2501, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::jitOperationType", "display_name": "CUpti_ActivityJit2::jitOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit216jitOperationTypeE", "priority": 1, "content": "CUpti_ActivityJitOperationType  jitOperationType The JIT operation type.", "keywords": []}, {"id": 2502, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::kind", "display_name": "CUpti_ActivityJit2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind must be CUPTI_ACTIVITY_KIND_JIT.", "keywords": []}, {"id": 2503, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::padding", "display_name": "CUpti_ActivityJit2::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit27paddingE", "priority": 1, "content": "uint32_t  padding Internal use.", "keywords": []}, {"id": 2504, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::processId", "display_name": "CUpti_ActivityJit2::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit29processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process where the JIT operation is executing.", "keywords": []}, {"id": 2505, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::start", "display_name": "CUpti_ActivityJit2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit25startE", "priority": 1, "content": "uint64_t  start The start timestamp for the JIT operation, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the JIT operation.", "keywords": []}, {"id": 2506, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "cpp", "name": "CUpti_ActivityJit2::threadId", "display_name": "CUpti_ActivityJit2::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_jit2", "anchor": "_CPPv4N18CUpti_ActivityJit28threadIdE", "priority": 1, "content": "uint32_t  threadId The ID of the thread where the JIT operation is executing.", "keywords": []}, {"id": 2507, "doc_id": 2507, "filename": "api/struct_c_upti___activity_jit2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_jit2", "display_name": "CUpti_ActivityJit2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_jit2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2508, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel", "display_name": "CUpti_ActivityKernel", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv420CUpti_ActivityKernel", "priority": 1, "content": "struct  CUpti_ActivityKernel The activity record for kernel. (deprecated) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) but is no longer generated by CUPTI. Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2509, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::blockX", "display_name": "CUpti_ActivityKernel::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel6blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2510, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::blockY", "display_name": "CUpti_ActivityKernel::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel6blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2511, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::blockZ", "display_name": "CUpti_ActivityKernel::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel6blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2512, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::cacheConfigExecuted", "display_name": "CUpti_ActivityKernel::cacheConfigExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel19cacheConfigExecutedE", "priority": 1, "content": "uint8_t  cacheConfigExecuted The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2513, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::cacheConfigRequested", "display_name": "CUpti_ActivityKernel::cacheConfigRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel20cacheConfigRequestedE", "priority": 1, "content": "uint8_t  cacheConfigRequested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2514, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::contextId", "display_name": "CUpti_ActivityKernel::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2515, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::correlationId", "display_name": "CUpti_ActivityKernel::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the kernel.", "keywords": []}, {"id": 2516, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::deviceId", "display_name": "CUpti_ActivityKernel::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2517, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel19dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2518, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::end", "display_name": "CUpti_ActivityKernel::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2519, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::gridX", "display_name": "CUpti_ActivityKernel::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel5gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2520, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::gridY", "display_name": "CUpti_ActivityKernel::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel5gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2521, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::gridZ", "display_name": "CUpti_ActivityKernel::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel5gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2522, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::kind", "display_name": "CUpti_ActivityKernel::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2523, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::localMemoryPerThread", "display_name": "CUpti_ActivityKernel::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel20localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2524, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::localMemoryTotal", "display_name": "CUpti_ActivityKernel::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel16localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2525, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::name", "display_name": "CUpti_ActivityKernel::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel4nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2526, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::pad", "display_name": "CUpti_ActivityKernel::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2527, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::registersPerThread", "display_name": "CUpti_ActivityKernel::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel18registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2528, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::reserved0", "display_name": "CUpti_ActivityKernel::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel9reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2529, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::runtimeCorrelationId", "display_name": "CUpti_ActivityKernel::runtimeCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel20runtimeCorrelationIdE", "priority": 1, "content": "uint32_t  runtimeCorrelationId The runtime correlation ID of the kernel. Each kernel execution is assigned a unique runtime correlation ID that is identical to the correlation ID in the runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2530, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::start", "display_name": "CUpti_ActivityKernel::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2531, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::staticSharedMemory", "display_name": "CUpti_ActivityKernel::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel18staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2532, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel::streamId", "display_name": "CUpti_ActivityKernel::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel", "anchor": "_CPPv4N20CUpti_ActivityKernel8streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2533, "doc_id": 2533, "filename": "api/struct_c_upti___activity_kernel.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel", "display_name": "CUpti_ActivityKernel", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2534, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2", "display_name": "CUpti_ActivityKernel2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv421CUpti_ActivityKernel2", "priority": 1, "content": "struct  CUpti_ActivityKernel2 The activity record for kernel. (deprecated) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) but is no longer generated by CUPTI. Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2535, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::blockX", "display_name": "CUpti_ActivityKernel2::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel26blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2536, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::blockY", "display_name": "CUpti_ActivityKernel2::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel26blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2537, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::blockZ", "display_name": "CUpti_ActivityKernel2::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel26blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2538, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::completed", "display_name": "CUpti_ActivityKernel2::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel29completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2539, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::contextId", "display_name": "CUpti_ActivityKernel2::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel29contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2540, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::correlationId", "display_name": "CUpti_ActivityKernel2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2541, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::deviceId", "display_name": "CUpti_ActivityKernel2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2542, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel2::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel219dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2543, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::end", "display_name": "CUpti_ActivityKernel2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel23endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2544, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::executed", "display_name": "CUpti_ActivityKernel2::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel28executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2545, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::gridId", "display_name": "CUpti_ActivityKernel2::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel26gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2546, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::gridX", "display_name": "CUpti_ActivityKernel2::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel25gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2547, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::gridY", "display_name": "CUpti_ActivityKernel2::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel25gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2548, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::gridZ", "display_name": "CUpti_ActivityKernel2::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel25gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2549, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::kind", "display_name": "CUpti_ActivityKernel2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2550, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::localMemoryPerThread", "display_name": "CUpti_ActivityKernel2::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel220localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2551, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::localMemoryTotal", "display_name": "CUpti_ActivityKernel2::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel216localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2552, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::name", "display_name": "CUpti_ActivityKernel2::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel24nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2553, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::registersPerThread", "display_name": "CUpti_ActivityKernel2::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel218registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2554, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::requested", "display_name": "CUpti_ActivityKernel2::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel29requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2555, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::reserved0", "display_name": "CUpti_ActivityKernel2::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel29reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2556, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel2::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel218sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2557, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::start", "display_name": "CUpti_ActivityKernel2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel25startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2558, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::staticSharedMemory", "display_name": "CUpti_ActivityKernel2::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel218staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2559, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel2::streamId", "display_name": "CUpti_ActivityKernel2::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "_CPPv4N21CUpti_ActivityKernel28streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2560, "doc_id": 2560, "filename": "api/struct_c_upti___activity_kernel2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel2", "display_name": "CUpti_ActivityKernel2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2561, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3", "display_name": "CUpti_ActivityKernel3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv421CUpti_ActivityKernel3", "priority": 1, "content": "struct  CUpti_ActivityKernel3 The activity record for a kernel (CUDA 6.5(with sm_52 support) onwards). (deprecated in CUDA 9.0) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL). Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2562, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::blockX", "display_name": "CUpti_ActivityKernel3::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel36blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2563, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::blockY", "display_name": "CUpti_ActivityKernel3::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel36blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2564, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::blockZ", "display_name": "CUpti_ActivityKernel3::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel36blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2565, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::completed", "display_name": "CUpti_ActivityKernel3::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel39completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2566, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::contextId", "display_name": "CUpti_ActivityKernel3::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel39contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2567, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::correlationId", "display_name": "CUpti_ActivityKernel3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2568, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::deviceId", "display_name": "CUpti_ActivityKernel3::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel38deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2569, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel3::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel319dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2570, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::end", "display_name": "CUpti_ActivityKernel3::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel33endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2571, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::executed", "display_name": "CUpti_ActivityKernel3::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel38executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2572, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::gridId", "display_name": "CUpti_ActivityKernel3::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel36gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2573, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::gridX", "display_name": "CUpti_ActivityKernel3::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel35gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2574, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::gridY", "display_name": "CUpti_ActivityKernel3::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel35gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2575, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::gridZ", "display_name": "CUpti_ActivityKernel3::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel35gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2576, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::kind", "display_name": "CUpti_ActivityKernel3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2577, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::localMemoryPerThread", "display_name": "CUpti_ActivityKernel3::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel320localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2578, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::localMemoryTotal", "display_name": "CUpti_ActivityKernel3::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel316localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2579, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::name", "display_name": "CUpti_ActivityKernel3::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel34nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2580, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel3::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel330partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2581, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel3::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel331partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2582, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::registersPerThread", "display_name": "CUpti_ActivityKernel3::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel318registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2583, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::requested", "display_name": "CUpti_ActivityKernel3::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel39requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2584, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::reserved0", "display_name": "CUpti_ActivityKernel3::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel39reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2585, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel3::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel318sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2586, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::start", "display_name": "CUpti_ActivityKernel3::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel35startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2587, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::staticSharedMemory", "display_name": "CUpti_ActivityKernel3::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel318staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2588, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel3::streamId", "display_name": "CUpti_ActivityKernel3::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "_CPPv4N21CUpti_ActivityKernel38streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2589, "doc_id": 2589, "filename": "api/struct_c_upti___activity_kernel3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel3", "display_name": "CUpti_ActivityKernel3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2590, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4", "display_name": "CUpti_ActivityKernel4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv421CUpti_ActivityKernel4", "priority": 1, "content": "struct  CUpti_ActivityKernel4 The activity record for a kernel (CUDA 9.0(with sm_70 support) onwards). (deprecated in CUDA 11.0) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL). Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2591, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::blockX", "display_name": "CUpti_ActivityKernel4::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel46blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2592, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::blockY", "display_name": "CUpti_ActivityKernel4::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel46blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2593, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::blockZ", "display_name": "CUpti_ActivityKernel4::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel46blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2594, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::cacheConfig", "display_name": "CUpti_ActivityKernel4::cacheConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel411cacheConfigE", "priority": 1, "content": "union  CUpti_ActivityKernel4 :: [anonymous]  cacheConfig For devices with compute capability 7.0+ cacheConfig values are not updated in case field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2595, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::completed", "display_name": "CUpti_ActivityKernel4::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel49completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2596, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::contextId", "display_name": "CUpti_ActivityKernel4::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel49contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2597, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::correlationId", "display_name": "CUpti_ActivityKernel4::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel413correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2598, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::deviceId", "display_name": "CUpti_ActivityKernel4::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel48deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2599, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel4::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel419dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2600, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::end", "display_name": "CUpti_ActivityKernel4::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel43endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2601, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::executed", "display_name": "CUpti_ActivityKernel4::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel48executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2602, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::gridId", "display_name": "CUpti_ActivityKernel4::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel46gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2603, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::gridX", "display_name": "CUpti_ActivityKernel4::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel45gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2604, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::gridY", "display_name": "CUpti_ActivityKernel4::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel45gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2605, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::gridZ", "display_name": "CUpti_ActivityKernel4::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel45gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2606, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::isSharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel4::isSharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel431isSharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  isSharedMemoryCarveoutRequested This indicates if CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT was updated for the kernel launch.", "keywords": []}, {"id": 2607, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::kind", "display_name": "CUpti_ActivityKernel4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2608, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::launchType", "display_name": "CUpti_ActivityKernel4::launchType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel410launchTypeE", "priority": 1, "content": "uint8_t  launchType The indicates if the kernel was executed via a regular launch or via a single/multi device cooperative launch. CUpti_ActivityLaunchType", "keywords": []}, {"id": 2609, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::localMemoryPerThread", "display_name": "CUpti_ActivityKernel4::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel420localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2610, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::localMemoryTotal", "display_name": "CUpti_ActivityKernel4::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel416localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2611, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::name", "display_name": "CUpti_ActivityKernel4::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel44nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2612, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::padding", "display_name": "CUpti_ActivityKernel4::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel47paddingE", "priority": 1, "content": "uint8_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2613, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel4::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel430partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2614, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel4::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel431partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2615, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::queued", "display_name": "CUpti_ActivityKernel4::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel46queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when the kernel is queued up in the command buffer, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. Command buffer is a buffer written by CUDA driver to send commands like kernel launch, memory copy etc to the GPU. All launches of CUDA kernels are asynchronous with respect to the host, the host requests the launch by writing commands into the command buffer, then returns without checking the GPU\u2019s progress.", "keywords": []}, {"id": 2616, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::registersPerThread", "display_name": "CUpti_ActivityKernel4::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel418registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2617, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::requested", "display_name": "CUpti_ActivityKernel4::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel49requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2618, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::reserved0", "display_name": "CUpti_ActivityKernel4::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel49reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2619, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::sharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel4::sharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel429sharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  sharedMemoryCarveoutRequested Shared memory carveout value requested for the function in percentage of the total resource. The value will be updated only if field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2620, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel4::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel418sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2621, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::sharedMemoryExecuted", "display_name": "CUpti_ActivityKernel4::sharedMemoryExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel420sharedMemoryExecutedE", "priority": 1, "content": "uint32_t  sharedMemoryExecuted Shared memory size set by the driver.", "keywords": []}, {"id": 2622, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::start", "display_name": "CUpti_ActivityKernel4::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel45startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2623, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::staticSharedMemory", "display_name": "CUpti_ActivityKernel4::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel418staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2624, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::streamId", "display_name": "CUpti_ActivityKernel4::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel48streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2625, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel4::submitted", "display_name": "CUpti_ActivityKernel4::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "_CPPv4N21CUpti_ActivityKernel49submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when the command buffer containing the kernel launch is submitted to the GPU, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submitted time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection.", "keywords": []}, {"id": 2626, "doc_id": 2626, "filename": "api/struct_c_upti___activity_kernel4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel4", "display_name": "CUpti_ActivityKernel4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2627, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5", "display_name": "CUpti_ActivityKernel5", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv421CUpti_ActivityKernel5", "priority": 1, "content": "struct  CUpti_ActivityKernel5 The activity record for a kernel (CUDA 11.0(with sm_80 support) onwards). (deprecated in CUDA 11.2) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) but is no longer generated by CUPTI. Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2628, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::blockX", "display_name": "CUpti_ActivityKernel5::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel56blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2629, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::blockY", "display_name": "CUpti_ActivityKernel5::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel56blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2630, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::blockZ", "display_name": "CUpti_ActivityKernel5::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel56blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2631, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::cacheConfig", "display_name": "CUpti_ActivityKernel5::cacheConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel511cacheConfigE", "priority": 1, "content": "union  CUpti_ActivityKernel5 :: [anonymous]  cacheConfig For devices with compute capability 7.0+ cacheConfig values are not updated in case field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2632, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::completed", "display_name": "CUpti_ActivityKernel5::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel59completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2633, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::contextId", "display_name": "CUpti_ActivityKernel5::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel59contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2634, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::correlationId", "display_name": "CUpti_ActivityKernel5::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel513correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2635, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::deviceId", "display_name": "CUpti_ActivityKernel5::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel58deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2636, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel5::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel519dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2637, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::end", "display_name": "CUpti_ActivityKernel5::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel53endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2638, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::executed", "display_name": "CUpti_ActivityKernel5::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel58executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2639, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::graphId", "display_name": "CUpti_ActivityKernel5::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel57graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2640, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::graphNodeId", "display_name": "CUpti_ActivityKernel5::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel511graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2641, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::gridId", "display_name": "CUpti_ActivityKernel5::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel56gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2642, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::gridX", "display_name": "CUpti_ActivityKernel5::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel55gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2643, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::gridY", "display_name": "CUpti_ActivityKernel5::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel55gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2644, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::gridZ", "display_name": "CUpti_ActivityKernel5::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel55gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2645, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::isSharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel5::isSharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel531isSharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  isSharedMemoryCarveoutRequested This indicates if CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT was updated for the kernel launch.", "keywords": []}, {"id": 2646, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::kind", "display_name": "CUpti_ActivityKernel5::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel54kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2647, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::launchType", "display_name": "CUpti_ActivityKernel5::launchType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel510launchTypeE", "priority": 1, "content": "uint8_t  launchType The indicates if the kernel was executed via a regular launch or via a single/multi device cooperative launch. CUpti_ActivityLaunchType", "keywords": []}, {"id": 2648, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::localMemoryPerThread", "display_name": "CUpti_ActivityKernel5::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel520localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2649, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::localMemoryTotal", "display_name": "CUpti_ActivityKernel5::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel516localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2650, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::name", "display_name": "CUpti_ActivityKernel5::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel54nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2651, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::padding", "display_name": "CUpti_ActivityKernel5::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel57paddingE", "priority": 1, "content": "uint8_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2652, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel5::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel530partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2653, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel5::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel531partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2654, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::queued", "display_name": "CUpti_ActivityKernel5::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel56queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when the kernel is queued up in the command buffer, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. Command buffer is a buffer written by CUDA driver to send commands like kernel launch, memory copy etc to the GPU. All launches of CUDA kernels are asynchronous with respect to the host, the host requests the launch by writing commands into the command buffer, then returns without checking the GPU\u2019s progress.", "keywords": []}, {"id": 2655, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::registersPerThread", "display_name": "CUpti_ActivityKernel5::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel518registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2656, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::requested", "display_name": "CUpti_ActivityKernel5::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel59requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2657, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::reserved0", "display_name": "CUpti_ActivityKernel5::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel59reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2658, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::sharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel5::sharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel529sharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  sharedMemoryCarveoutRequested Shared memory carveout value requested for the function in percentage of the total resource. The value will be updated only if field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2659, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel5::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel518sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2660, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::sharedMemoryExecuted", "display_name": "CUpti_ActivityKernel5::sharedMemoryExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel520sharedMemoryExecutedE", "priority": 1, "content": "uint32_t  sharedMemoryExecuted Shared memory size set by the driver.", "keywords": []}, {"id": 2661, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::shmemLimitConfig", "display_name": "CUpti_ActivityKernel5::shmemLimitConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel516shmemLimitConfigE", "priority": 1, "content": "CUpti_FuncShmemLimitConfig  shmemLimitConfig The shared memory limit config for the kernel. This field shows whether user has opted for a higher per block limit of dynamic shared memory.", "keywords": []}, {"id": 2662, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::start", "display_name": "CUpti_ActivityKernel5::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel55startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2663, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::staticSharedMemory", "display_name": "CUpti_ActivityKernel5::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel518staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2664, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::streamId", "display_name": "CUpti_ActivityKernel5::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel58streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2665, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel5::submitted", "display_name": "CUpti_ActivityKernel5::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "_CPPv4N21CUpti_ActivityKernel59submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when the command buffer containing the kernel launch is submitted to the GPU, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submitted time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection.", "keywords": []}, {"id": 2666, "doc_id": 2666, "filename": "api/struct_c_upti___activity_kernel5.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel5", "display_name": "CUpti_ActivityKernel5", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel5", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2667, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6", "display_name": "CUpti_ActivityKernel6", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv421CUpti_ActivityKernel6", "priority": 1, "content": "struct  CUpti_ActivityKernel6 The activity record for kernel. (deprecated in CUDA 11.6) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) but is no longer generated by CUPTI. Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2668, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::blockX", "display_name": "CUpti_ActivityKernel6::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel66blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2669, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::blockY", "display_name": "CUpti_ActivityKernel6::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel66blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2670, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::blockZ", "display_name": "CUpti_ActivityKernel6::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel66blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2671, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::cacheConfig", "display_name": "CUpti_ActivityKernel6::cacheConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel611cacheConfigE", "priority": 1, "content": "union  CUpti_ActivityKernel6 :: [anonymous]  cacheConfig For devices with compute capability 7.0+ cacheConfig values are not updated in case field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2672, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::completed", "display_name": "CUpti_ActivityKernel6::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel69completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2673, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::contextId", "display_name": "CUpti_ActivityKernel6::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel69contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2674, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::correlationId", "display_name": "CUpti_ActivityKernel6::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel613correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2675, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::deviceId", "display_name": "CUpti_ActivityKernel6::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel68deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2676, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel6::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel619dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2677, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::end", "display_name": "CUpti_ActivityKernel6::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel63endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2678, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::executed", "display_name": "CUpti_ActivityKernel6::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel68executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2679, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::graphId", "display_name": "CUpti_ActivityKernel6::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel67graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2680, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::graphNodeId", "display_name": "CUpti_ActivityKernel6::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel611graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2681, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::gridId", "display_name": "CUpti_ActivityKernel6::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel66gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2682, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::gridX", "display_name": "CUpti_ActivityKernel6::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel65gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2683, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::gridY", "display_name": "CUpti_ActivityKernel6::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel65gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2684, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::gridZ", "display_name": "CUpti_ActivityKernel6::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel65gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2685, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::isSharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel6::isSharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel631isSharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  isSharedMemoryCarveoutRequested This indicates if CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT was updated for the kernel launch.", "keywords": []}, {"id": 2686, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::kind", "display_name": "CUpti_ActivityKernel6::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel64kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2687, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::launchType", "display_name": "CUpti_ActivityKernel6::launchType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel610launchTypeE", "priority": 1, "content": "uint8_t  launchType The indicates if the kernel was executed via a regular launch or via a single/multi device cooperative launch. CUpti_ActivityLaunchType", "keywords": []}, {"id": 2688, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::localMemoryPerThread", "display_name": "CUpti_ActivityKernel6::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel620localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2689, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::localMemoryTotal", "display_name": "CUpti_ActivityKernel6::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel616localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2690, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::name", "display_name": "CUpti_ActivityKernel6::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel64nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2691, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::pAccessPolicyWindow", "display_name": "CUpti_ActivityKernel6::pAccessPolicyWindow", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel619pAccessPolicyWindowE", "priority": 1, "content": "CUaccessPolicyWindow  * pAccessPolicyWindow The pointer to the access policy window. The structure CUaccessPolicyWindow is defined in cuda.h.", "keywords": []}, {"id": 2692, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::padding", "display_name": "CUpti_ActivityKernel6::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel67paddingE", "priority": 1, "content": "uint8_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2693, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel6::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel630partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2694, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel6::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel631partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2695, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::queued", "display_name": "CUpti_ActivityKernel6::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel66queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when the kernel is queued up in the command buffer, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. Command buffer is a buffer written by CUDA driver to send commands like kernel launch, memory copy etc to the GPU. All launches of CUDA kernels are asynchronous with respect to the host, the host requests the launch by writing commands into the command buffer, then returns without checking the GPU\u2019s progress.", "keywords": []}, {"id": 2696, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::registersPerThread", "display_name": "CUpti_ActivityKernel6::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel618registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2697, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::requested", "display_name": "CUpti_ActivityKernel6::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel69requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2698, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::reserved0", "display_name": "CUpti_ActivityKernel6::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel69reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2699, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::sharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel6::sharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel629sharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  sharedMemoryCarveoutRequested Shared memory carveout value requested for the function in percentage of the total resource. The value will be updated only if field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2700, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel6::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel618sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2701, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::sharedMemoryExecuted", "display_name": "CUpti_ActivityKernel6::sharedMemoryExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel620sharedMemoryExecutedE", "priority": 1, "content": "uint32_t  sharedMemoryExecuted Shared memory size set by the driver.", "keywords": []}, {"id": 2702, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::shmemLimitConfig", "display_name": "CUpti_ActivityKernel6::shmemLimitConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel616shmemLimitConfigE", "priority": 1, "content": "CUpti_FuncShmemLimitConfig  shmemLimitConfig The shared memory limit config for the kernel. This field shows whether user has opted for a higher per block limit of dynamic shared memory.", "keywords": []}, {"id": 2703, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::start", "display_name": "CUpti_ActivityKernel6::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel65startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2704, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::staticSharedMemory", "display_name": "CUpti_ActivityKernel6::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel618staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2705, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::streamId", "display_name": "CUpti_ActivityKernel6::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel68streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2706, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel6::submitted", "display_name": "CUpti_ActivityKernel6::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "_CPPv4N21CUpti_ActivityKernel69submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when the command buffer containing the kernel launch is submitted to the GPU, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submitted time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection.", "keywords": []}, {"id": 2707, "doc_id": 2707, "filename": "api/struct_c_upti___activity_kernel6.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel6", "display_name": "CUpti_ActivityKernel6", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel6", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2708, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7", "display_name": "CUpti_ActivityKernel7", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv421CUpti_ActivityKernel7", "priority": 1, "content": "struct  CUpti_ActivityKernel7 The activity record for kernel. (deprecated in CUDA 11.8) This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) but is no longer generated by CUPTI. Kernel activities are now reported using the CUpti_ActivityKernel9 activity record. Public Members", "keywords": []}, {"id": 2709, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::blockX", "display_name": "CUpti_ActivityKernel7::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel76blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2710, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::blockY", "display_name": "CUpti_ActivityKernel7::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel76blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2711, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::blockZ", "display_name": "CUpti_ActivityKernel7::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel76blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2712, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::cacheConfig", "display_name": "CUpti_ActivityKernel7::cacheConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel711cacheConfigE", "priority": 1, "content": "union  CUpti_ActivityKernel7 :: [anonymous]  cacheConfig For devices with compute capability 7.0+ cacheConfig values are not updated in case field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2713, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::channelID", "display_name": "CUpti_ActivityKernel7::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel79channelIDE", "priority": 1, "content": "uint32_t  channelID The ID of the HW channel on which the kernel is launched.", "keywords": []}, {"id": 2714, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::channelType", "display_name": "CUpti_ActivityKernel7::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel711channelTypeE", "priority": 1, "content": "CUpti_ChannelType  channelType The type of the channel.", "keywords": []}, {"id": 2715, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::completed", "display_name": "CUpti_ActivityKernel7::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel79completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2716, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::contextId", "display_name": "CUpti_ActivityKernel7::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel79contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2717, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::correlationId", "display_name": "CUpti_ActivityKernel7::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel713correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2718, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::deviceId", "display_name": "CUpti_ActivityKernel7::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel78deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2719, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel7::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel719dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2720, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::end", "display_name": "CUpti_ActivityKernel7::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel73endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2721, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::executed", "display_name": "CUpti_ActivityKernel7::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel78executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2722, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::graphId", "display_name": "CUpti_ActivityKernel7::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel77graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2723, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::graphNodeId", "display_name": "CUpti_ActivityKernel7::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel711graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2724, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::gridId", "display_name": "CUpti_ActivityKernel7::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel76gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2725, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::gridX", "display_name": "CUpti_ActivityKernel7::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel75gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2726, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::gridY", "display_name": "CUpti_ActivityKernel7::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel75gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2727, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::gridZ", "display_name": "CUpti_ActivityKernel7::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel75gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2728, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::isSharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel7::isSharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel731isSharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  isSharedMemoryCarveoutRequested This indicates if CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT was updated for the kernel launch.", "keywords": []}, {"id": 2729, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::kind", "display_name": "CUpti_ActivityKernel7::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel74kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2730, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::launchType", "display_name": "CUpti_ActivityKernel7::launchType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel710launchTypeE", "priority": 1, "content": "uint8_t  launchType The indicates if the kernel was executed via a regular launch or via a single/multi device cooperative launch. CUpti_ActivityLaunchType", "keywords": []}, {"id": 2731, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::localMemoryPerThread", "display_name": "CUpti_ActivityKernel7::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel720localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2732, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::localMemoryTotal", "display_name": "CUpti_ActivityKernel7::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel716localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2733, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::name", "display_name": "CUpti_ActivityKernel7::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel74nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2734, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::pAccessPolicyWindow", "display_name": "CUpti_ActivityKernel7::pAccessPolicyWindow", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel719pAccessPolicyWindowE", "priority": 1, "content": "CUaccessPolicyWindow  * pAccessPolicyWindow The pointer to the access policy window. The structure CUaccessPolicyWindow is defined in cuda.h.", "keywords": []}, {"id": 2735, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::padding", "display_name": "CUpti_ActivityKernel7::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel77paddingE", "priority": 1, "content": "uint8_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2736, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel7::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel730partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2737, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel7::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel731partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2738, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::queued", "display_name": "CUpti_ActivityKernel7::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel76queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when the kernel is queued up in the command buffer, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. Command buffer is a buffer written by CUDA driver to send commands like kernel launch, memory copy etc to the GPU. All launches of CUDA kernels are asynchronous with respect to the host, the host requests the launch by writing commands into the command buffer, then returns without checking the GPU\u2019s progress.", "keywords": []}, {"id": 2739, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::registersPerThread", "display_name": "CUpti_ActivityKernel7::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel718registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2740, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::requested", "display_name": "CUpti_ActivityKernel7::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel79requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2741, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::reserved0", "display_name": "CUpti_ActivityKernel7::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel79reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2742, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::sharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel7::sharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel729sharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  sharedMemoryCarveoutRequested Shared memory carveout value requested for the function in percentage of the total resource. The value will be updated only if field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2743, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel7::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel718sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2744, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::sharedMemoryExecuted", "display_name": "CUpti_ActivityKernel7::sharedMemoryExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel720sharedMemoryExecutedE", "priority": 1, "content": "uint32_t  sharedMemoryExecuted Shared memory size set by the driver.", "keywords": []}, {"id": 2745, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::shmemLimitConfig", "display_name": "CUpti_ActivityKernel7::shmemLimitConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel716shmemLimitConfigE", "priority": 1, "content": "CUpti_FuncShmemLimitConfig  shmemLimitConfig The shared memory limit config for the kernel. This field shows whether user has opted for a higher per block limit of dynamic shared memory.", "keywords": []}, {"id": 2746, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::start", "display_name": "CUpti_ActivityKernel7::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel75startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2747, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::staticSharedMemory", "display_name": "CUpti_ActivityKernel7::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel718staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2748, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::streamId", "display_name": "CUpti_ActivityKernel7::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel78streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2749, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel7::submitted", "display_name": "CUpti_ActivityKernel7::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "_CPPv4N21CUpti_ActivityKernel79submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when the command buffer containing the kernel launch is submitted to the GPU, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submitted time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection.", "keywords": []}, {"id": 2750, "doc_id": 2750, "filename": "api/struct_c_upti___activity_kernel7.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel7", "display_name": "CUpti_ActivityKernel7", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel7", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2751, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8", "display_name": "CUpti_ActivityKernel8", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv421CUpti_ActivityKernel8", "priority": 1, "content": "struct  CUpti_ActivityKernel8 The activity record for kernel. This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) Public Members", "keywords": []}, {"id": 2752, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::blockX", "display_name": "CUpti_ActivityKernel8::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel86blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2753, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::blockY", "display_name": "CUpti_ActivityKernel8::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel86blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2754, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::blockZ", "display_name": "CUpti_ActivityKernel8::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel86blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2755, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::cacheConfig", "display_name": "CUpti_ActivityKernel8::cacheConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel811cacheConfigE", "priority": 1, "content": "union  CUpti_ActivityKernel8 :: [anonymous]  cacheConfig For devices with compute capability 7.0+ cacheConfig values are not updated in case field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2756, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::channelID", "display_name": "CUpti_ActivityKernel8::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel89channelIDE", "priority": 1, "content": "uint32_t  channelID The ID of the HW channel on which the kernel is launched.", "keywords": []}, {"id": 2757, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::channelType", "display_name": "CUpti_ActivityKernel8::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel811channelTypeE", "priority": 1, "content": "CUpti_ChannelType  channelType The type of the channel.", "keywords": []}, {"id": 2758, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::clusterSchedulingPolicy", "display_name": "CUpti_ActivityKernel8::clusterSchedulingPolicy", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel823clusterSchedulingPolicyE", "priority": 1, "content": "uint32_t  clusterSchedulingPolicy The cluster scheduling policy for the kernel. Refer CUclusterSchedulingPolicy Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2759, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::clusterX", "display_name": "CUpti_ActivityKernel8::clusterX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel88clusterXE", "priority": 1, "content": "uint32_t  clusterX The X-dimension cluster size for the kernel. Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2760, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::clusterY", "display_name": "CUpti_ActivityKernel8::clusterY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel88clusterYE", "priority": 1, "content": "uint32_t  clusterY The Y-dimension cluster size for the kernel. Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2761, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::clusterZ", "display_name": "CUpti_ActivityKernel8::clusterZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel88clusterZE", "priority": 1, "content": "uint32_t  clusterZ The Z-dimension cluster size for the kernel. Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2762, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::completed", "display_name": "CUpti_ActivityKernel8::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel89completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2763, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::contextId", "display_name": "CUpti_ActivityKernel8::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel89contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2764, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::correlationId", "display_name": "CUpti_ActivityKernel8::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel813correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2765, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::deviceId", "display_name": "CUpti_ActivityKernel8::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel88deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2766, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel8::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel819dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2767, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::end", "display_name": "CUpti_ActivityKernel8::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel83endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2768, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::executed", "display_name": "CUpti_ActivityKernel8::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel88executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2769, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::graphId", "display_name": "CUpti_ActivityKernel8::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel87graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2770, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::graphNodeId", "display_name": "CUpti_ActivityKernel8::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel811graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2771, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::gridId", "display_name": "CUpti_ActivityKernel8::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel86gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2772, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::gridX", "display_name": "CUpti_ActivityKernel8::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel85gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2773, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::gridY", "display_name": "CUpti_ActivityKernel8::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel85gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2774, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::gridZ", "display_name": "CUpti_ActivityKernel8::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel85gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2775, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::isSharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel8::isSharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel831isSharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  isSharedMemoryCarveoutRequested This indicates if CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT was updated for the kernel launch.", "keywords": []}, {"id": 2776, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::kind", "display_name": "CUpti_ActivityKernel8::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel84kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2777, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::launchType", "display_name": "CUpti_ActivityKernel8::launchType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel810launchTypeE", "priority": 1, "content": "uint8_t  launchType The indicates if the kernel was executed via a regular launch or via a single/multi device cooperative launch. CUpti_ActivityLaunchType", "keywords": []}, {"id": 2778, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::localMemoryPerThread", "display_name": "CUpti_ActivityKernel8::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel820localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2779, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::localMemoryTotal", "display_name": "CUpti_ActivityKernel8::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel816localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes (deprecated in CUDA 11.8). Refer field localMemoryTotal_v2", "keywords": []}, {"id": 2780, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::localMemoryTotal_v2", "display_name": "CUpti_ActivityKernel8::localMemoryTotal_v2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel819localMemoryTotal_v2E", "priority": 1, "content": "uint64_t  localMemoryTotal_v2 The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2781, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::name", "display_name": "CUpti_ActivityKernel8::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel84nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2782, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::pAccessPolicyWindow", "display_name": "CUpti_ActivityKernel8::pAccessPolicyWindow", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel819pAccessPolicyWindowE", "priority": 1, "content": "CUaccessPolicyWindow  * pAccessPolicyWindow The pointer to the access policy window. The structure CUaccessPolicyWindow is defined in cuda.h.", "keywords": []}, {"id": 2783, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::padding", "display_name": "CUpti_ActivityKernel8::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel87paddingE", "priority": 1, "content": "uint8_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2784, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel8::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel830partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2785, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel8::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel831partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2786, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::queued", "display_name": "CUpti_ActivityKernel8::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel86queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when the kernel is queued up in the command buffer, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. Command buffer is a buffer written by CUDA driver to send commands like kernel launch, memory copy etc to the GPU. All launches of CUDA kernels are asynchronous with respect to the host, the host requests the launch by writing commands into the command buffer, then returns without checking the GPU\u2019s progress.", "keywords": []}, {"id": 2787, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::registersPerThread", "display_name": "CUpti_ActivityKernel8::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel818registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2788, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::requested", "display_name": "CUpti_ActivityKernel8::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel89requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2789, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::reserved0", "display_name": "CUpti_ActivityKernel8::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel89reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2790, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::sharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel8::sharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel829sharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  sharedMemoryCarveoutRequested Shared memory carveout value requested for the function in percentage of the total resource. The value will be updated only if field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2791, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel8::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel818sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2792, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::sharedMemoryExecuted", "display_name": "CUpti_ActivityKernel8::sharedMemoryExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel820sharedMemoryExecutedE", "priority": 1, "content": "uint32_t  sharedMemoryExecuted Shared memory size set by the driver.", "keywords": []}, {"id": 2793, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::shmemLimitConfig", "display_name": "CUpti_ActivityKernel8::shmemLimitConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel816shmemLimitConfigE", "priority": 1, "content": "CUpti_FuncShmemLimitConfig  shmemLimitConfig The shared memory limit config for the kernel. This field shows whether user has opted for a higher per block limit of dynamic shared memory.", "keywords": []}, {"id": 2794, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::start", "display_name": "CUpti_ActivityKernel8::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel85startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2795, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::staticSharedMemory", "display_name": "CUpti_ActivityKernel8::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel818staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2796, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::streamId", "display_name": "CUpti_ActivityKernel8::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel88streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2797, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel8::submitted", "display_name": "CUpti_ActivityKernel8::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "_CPPv4N21CUpti_ActivityKernel89submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when the command buffer containing the kernel launch is submitted to the GPU, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submitted time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection.", "keywords": []}, {"id": 2798, "doc_id": 2798, "filename": "api/struct_c_upti___activity_kernel8.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel8", "display_name": "CUpti_ActivityKernel8", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel8", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2799, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9", "display_name": "CUpti_ActivityKernel9", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv421CUpti_ActivityKernel9", "priority": 1, "content": "struct  CUpti_ActivityKernel9 The activity record for kernel. This activity record represents a kernel execution (CUPTI_ACTIVITY_KIND_KERNEL and CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL) Public Members", "keywords": []}, {"id": 2800, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::blockX", "display_name": "CUpti_ActivityKernel9::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel96blockXE", "priority": 1, "content": "int32_t  blockX The X-dimension block size for the kernel.", "keywords": []}, {"id": 2801, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::blockY", "display_name": "CUpti_ActivityKernel9::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel96blockYE", "priority": 1, "content": "int32_t  blockY The Y-dimension block size for the kernel.", "keywords": []}, {"id": 2802, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::blockZ", "display_name": "CUpti_ActivityKernel9::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel96blockZE", "priority": 1, "content": "int32_t  blockZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2803, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::cacheConfig", "display_name": "CUpti_ActivityKernel9::cacheConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel911cacheConfigE", "priority": 1, "content": "union  CUpti_ActivityKernel9 :: [anonymous]  cacheConfig For devices with compute capability 7.0+ cacheConfig values are not updated in case field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2804, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::channelID", "display_name": "CUpti_ActivityKernel9::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel99channelIDE", "priority": 1, "content": "uint32_t  channelID The ID of the HW channel on which the kernel is launched.", "keywords": []}, {"id": 2805, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::channelType", "display_name": "CUpti_ActivityKernel9::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel911channelTypeE", "priority": 1, "content": "CUpti_ChannelType  channelType The type of the channel.", "keywords": []}, {"id": 2806, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::clusterSchedulingPolicy", "display_name": "CUpti_ActivityKernel9::clusterSchedulingPolicy", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel923clusterSchedulingPolicyE", "priority": 1, "content": "uint32_t  clusterSchedulingPolicy The cluster scheduling policy for the kernel. Refer CUclusterSchedulingPolicy Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2807, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::clusterX", "display_name": "CUpti_ActivityKernel9::clusterX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel98clusterXE", "priority": 1, "content": "uint32_t  clusterX The X-dimension cluster size for the kernel. Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2808, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::clusterY", "display_name": "CUpti_ActivityKernel9::clusterY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel98clusterYE", "priority": 1, "content": "uint32_t  clusterY The Y-dimension cluster size for the kernel. Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2809, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::clusterZ", "display_name": "CUpti_ActivityKernel9::clusterZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel98clusterZE", "priority": 1, "content": "uint32_t  clusterZ The Z-dimension cluster size for the kernel. Field is valid for devices with compute capability 9.0 and higher", "keywords": []}, {"id": 2810, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::completed", "display_name": "CUpti_ActivityKernel9::completed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel99completedE", "priority": 1, "content": "uint64_t  completed The completed timestamp for the kernel execution, in ns. It represents the completion of all it\u2019s child kernels and the kernel itself. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the completion time is unknown.", "keywords": []}, {"id": 2811, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::contextId", "display_name": "CUpti_ActivityKernel9::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel99contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the kernel is executing.", "keywords": []}, {"id": 2812, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::correlationId", "display_name": "CUpti_ActivityKernel9::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel913correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel. Each kernel execution is assigned a unique correlation ID that is identical to the correlation ID in the driver or runtime API activity record that launched the kernel.", "keywords": []}, {"id": 2813, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::deviceId", "display_name": "CUpti_ActivityKernel9::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel98deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the kernel is executing.", "keywords": []}, {"id": 2814, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::dynamicSharedMemory", "display_name": "CUpti_ActivityKernel9::dynamicSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel919dynamicSharedMemoryE", "priority": 1, "content": "int32_t  dynamicSharedMemory The dynamic shared memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2815, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::end", "display_name": "CUpti_ActivityKernel9::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel93endE", "priority": 1, "content": "uint64_t  end The end timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2816, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::executed", "display_name": "CUpti_ActivityKernel9::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel98executedE", "priority": 1, "content": "uint8_t  executed The cache configuration used for the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2817, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::graphId", "display_name": "CUpti_ActivityKernel9::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel97graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2818, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::graphNodeId", "display_name": "CUpti_ActivityKernel9::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel911graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that launched this kernel through graph launch APIs. This field will be 0 if the kernel is not launched through graph launch APIs.", "keywords": []}, {"id": 2819, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::gridId", "display_name": "CUpti_ActivityKernel9::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel96gridIdE", "priority": 1, "content": "int64_t  gridId The grid ID of the kernel. Each kernel is assigned a unique grid ID at runtime.", "keywords": []}, {"id": 2820, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::gridX", "display_name": "CUpti_ActivityKernel9::gridX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel95gridXE", "priority": 1, "content": "int32_t  gridX The X-dimension grid size for the kernel.", "keywords": []}, {"id": 2821, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::gridY", "display_name": "CUpti_ActivityKernel9::gridY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel95gridYE", "priority": 1, "content": "int32_t  gridY The Y-dimension grid size for the kernel.", "keywords": []}, {"id": 2822, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::gridZ", "display_name": "CUpti_ActivityKernel9::gridZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel95gridZE", "priority": 1, "content": "int32_t  gridZ The Z-dimension grid size for the kernel.", "keywords": []}, {"id": 2823, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::isSharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel9::isSharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel931isSharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  isSharedMemoryCarveoutRequested This indicates if CU_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT was updated for the kernel launch.", "keywords": []}, {"id": 2824, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::kind", "display_name": "CUpti_ActivityKernel9::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel94kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL.", "keywords": []}, {"id": 2825, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::launchType", "display_name": "CUpti_ActivityKernel9::launchType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel910launchTypeE", "priority": 1, "content": "uint8_t  launchType The indicates if the kernel was executed via a regular launch or via a single/multi device cooperative launch. CUpti_ActivityLaunchType", "keywords": []}, {"id": 2826, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::localMemoryPerThread", "display_name": "CUpti_ActivityKernel9::localMemoryPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel920localMemoryPerThreadE", "priority": 1, "content": "uint32_t  localMemoryPerThread The amount of local memory reserved for each thread, in bytes.", "keywords": []}, {"id": 2827, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::localMemoryTotal", "display_name": "CUpti_ActivityKernel9::localMemoryTotal", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel916localMemoryTotalE", "priority": 1, "content": "uint32_t  localMemoryTotal The total amount of local memory reserved for the kernel, in bytes (deprecated in CUDA 11.8). Refer field localMemoryTotal_v2", "keywords": []}, {"id": 2828, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::localMemoryTotal_v2", "display_name": "CUpti_ActivityKernel9::localMemoryTotal_v2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel919localMemoryTotal_v2E", "priority": 1, "content": "uint64_t  localMemoryTotal_v2 The total amount of local memory reserved for the kernel, in bytes.", "keywords": []}, {"id": 2829, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::maxActiveClusters", "display_name": "CUpti_ActivityKernel9::maxActiveClusters", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel917maxActiveClustersE", "priority": 1, "content": "uint32_t  maxActiveClusters The maximum clusters that could co-exist on the target device for the kernel.", "keywords": []}, {"id": 2830, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::maxPotentialClusterSize", "display_name": "CUpti_ActivityKernel9::maxPotentialClusterSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel923maxPotentialClusterSizeE", "priority": 1, "content": "uint32_t  maxPotentialClusterSize The maximum cluster size for the kernel.", "keywords": []}, {"id": 2831, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::name", "display_name": "CUpti_ActivityKernel9::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel94nameE", "priority": 1, "content": "const  char  * name The name of the kernel. This name is shared across all activity records representing the same kernel, and so should not be modified.", "keywords": []}, {"id": 2832, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::pAccessPolicyWindow", "display_name": "CUpti_ActivityKernel9::pAccessPolicyWindow", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel919pAccessPolicyWindowE", "priority": 1, "content": "CUaccessPolicyWindow  * pAccessPolicyWindow The pointer to the access policy window. The structure CUaccessPolicyWindow is defined in cuda.h.", "keywords": []}, {"id": 2833, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::padding", "display_name": "CUpti_ActivityKernel9::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel97paddingE", "priority": 1, "content": "uint8_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2834, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::partitionedGlobalCacheExecuted", "display_name": "CUpti_ActivityKernel9::partitionedGlobalCacheExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel930partitionedGlobalCacheExecutedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheExecuted The partitioned global caching executed for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2. Partitioned global caching can be automatically disabled if the occupancy requirement of the launch cannot support caching.", "keywords": []}, {"id": 2835, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::partitionedGlobalCacheRequested", "display_name": "CUpti_ActivityKernel9::partitionedGlobalCacheRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel931partitionedGlobalCacheRequestedE", "priority": 1, "content": "CUpti_ActivityPartitionedGlobalCacheConfig  partitionedGlobalCacheRequested The partitioned global caching requested for the kernel. Partitioned global caching is required to enable caching on certain chips, such as devices with compute capability 5.2.", "keywords": []}, {"id": 2836, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::queued", "display_name": "CUpti_ActivityKernel9::queued", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel96queuedE", "priority": 1, "content": "uint64_t  queued The timestamp when the kernel is queued up in the command buffer, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the queued time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. Command buffer is a buffer written by CUDA driver to send commands like kernel launch, memory copy etc to the GPU. All launches of CUDA kernels are asynchronous with respect to the host, the host requests the launch by writing commands into the command buffer, then returns without checking the GPU\u2019s progress.", "keywords": []}, {"id": 2837, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::registersPerThread", "display_name": "CUpti_ActivityKernel9::registersPerThread", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel918registersPerThreadE", "priority": 1, "content": "uint16_t  registersPerThread The number of registers required for each thread executing the kernel.", "keywords": []}, {"id": 2838, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::requested", "display_name": "CUpti_ActivityKernel9::requested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel99requestedE", "priority": 1, "content": "uint8_t  requested The cache configuration requested by the kernel. The value is one of the CUfunc_cache enumeration values from cuda.h.", "keywords": []}, {"id": 2839, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::reserved0", "display_name": "CUpti_ActivityKernel9::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel99reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2840, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::sharedMemoryCarveoutRequested", "display_name": "CUpti_ActivityKernel9::sharedMemoryCarveoutRequested", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel929sharedMemoryCarveoutRequestedE", "priority": 1, "content": "uint8_t  sharedMemoryCarveoutRequested Shared memory carveout value requested for the function in percentage of the total resource. The value will be updated only if field isSharedMemoryCarveoutRequested is set.", "keywords": []}, {"id": 2841, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::sharedMemoryConfig", "display_name": "CUpti_ActivityKernel9::sharedMemoryConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel918sharedMemoryConfigE", "priority": 1, "content": "uint8_t  sharedMemoryConfig The shared memory configuration used for the kernel. The value is one of the CUsharedconfig enumeration values from cuda.h.", "keywords": []}, {"id": 2842, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::sharedMemoryExecuted", "display_name": "CUpti_ActivityKernel9::sharedMemoryExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel920sharedMemoryExecutedE", "priority": 1, "content": "uint32_t  sharedMemoryExecuted Shared memory size set by the driver.", "keywords": []}, {"id": 2843, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::shmemLimitConfig", "display_name": "CUpti_ActivityKernel9::shmemLimitConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel916shmemLimitConfigE", "priority": 1, "content": "CUpti_FuncShmemLimitConfig  shmemLimitConfig The shared memory limit config for the kernel. This field shows whether user has opted for a higher per block limit of dynamic shared memory.", "keywords": []}, {"id": 2844, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::start", "display_name": "CUpti_ActivityKernel9::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel95startE", "priority": 1, "content": "uint64_t  start The start timestamp for the kernel execution, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the kernel.", "keywords": []}, {"id": 2845, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::staticSharedMemory", "display_name": "CUpti_ActivityKernel9::staticSharedMemory", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel918staticSharedMemoryE", "priority": 1, "content": "int32_t  staticSharedMemory The static shared memory allocated for the kernel, in bytes.", "keywords": []}, {"id": 2846, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::streamId", "display_name": "CUpti_ActivityKernel9::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel98streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the kernel is executing.", "keywords": []}, {"id": 2847, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "cpp", "name": "CUpti_ActivityKernel9::submitted", "display_name": "CUpti_ActivityKernel9::submitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "_CPPv4N21CUpti_ActivityKernel99submittedE", "priority": 1, "content": "uint64_t  submitted The timestamp when the command buffer containing the kernel launch is submitted to the GPU, in ns. A value of CUPTI_TIMESTAMP_UNKNOWN indicates that the submitted time could not be collected for the kernel. This timestamp is not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection.", "keywords": []}, {"id": 2848, "doc_id": 2848, "filename": "api/struct_c_upti___activity_kernel9.html", "domain_name": "std", "name": "api/struct_c_upti___activity_kernel9", "display_name": "CUpti_ActivityKernel9", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_kernel9", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2849, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker", "display_name": "CUpti_ActivityMarker", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv420CUpti_ActivityMarker", "priority": 1, "content": "struct  CUpti_ActivityMarker The activity record providing a marker which is an instantaneous point in time. (deprecated in CUDA 8.0) The marker is specified with a descriptive name and unique id (CUPTI_ACTIVITY_KIND_MARKER). Marker activity is now reported using the CUpti_ActivityMarker2 activity record. Public Members", "keywords": []}, {"id": 2850, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::flags", "display_name": "CUpti_ActivityMarker::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the marker. CUpti_ActivityFlag", "keywords": []}, {"id": 2851, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::id", "display_name": "CUpti_ActivityMarker::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker2idE", "priority": 1, "content": "uint32_t  id The marker ID.", "keywords": []}, {"id": 2852, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::kind", "display_name": "CUpti_ActivityMarker::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 2853, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::name", "display_name": "CUpti_ActivityMarker::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker4nameE", "priority": 1, "content": "const  char  * name The marker name for an instantaneous or start marker. This will be NULL for an end marker.", "keywords": []}, {"id": 2854, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::objectId", "display_name": "CUpti_ActivityMarker::objectId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker8objectIdE", "priority": 1, "content": "CUpti_ActivityObjectKindId  objectId The identifier for the activity object associated with this marker. \u2018objectKind\u2019 indicates which ID is valid for this record.", "keywords": []}, {"id": 2855, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::objectKind", "display_name": "CUpti_ActivityMarker::objectKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker10objectKindE", "priority": 1, "content": "CUpti_ActivityObjectKind  objectKind The kind of activity object associated with this marker.", "keywords": []}, {"id": 2856, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::pad", "display_name": "CUpti_ActivityMarker::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2857, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker::timestamp", "display_name": "CUpti_ActivityMarker::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker", "anchor": "_CPPv4N20CUpti_ActivityMarker9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp for the marker, in ns. A value of 0 indicates that timestamp information could not be collected for the marker.", "keywords": []}, {"id": 2858, "doc_id": 2858, "filename": "api/struct_c_upti___activity_marker.html", "domain_name": "std", "name": "api/struct_c_upti___activity_marker", "display_name": "CUpti_ActivityMarker", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_marker", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2859, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2", "display_name": "CUpti_ActivityMarker2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv421CUpti_ActivityMarker2", "priority": 1, "content": "struct  CUpti_ActivityMarker2 The activity record providing a marker which is an instantaneous point in time. The marker is specified with a descriptive name and unique id (CUPTI_ACTIVITY_KIND_MARKER). Public Members", "keywords": []}, {"id": 2860, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::domain", "display_name": "CUpti_ActivityMarker2::domain", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker26domainE", "priority": 1, "content": "const  char  * domain The name of the domain to which this marker belongs to. This will be NULL for default domain.", "keywords": []}, {"id": 2861, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::flags", "display_name": "CUpti_ActivityMarker2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker25flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the marker. CUpti_ActivityFlag", "keywords": []}, {"id": 2862, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::id", "display_name": "CUpti_ActivityMarker2::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker22idE", "priority": 1, "content": "uint32_t  id The marker ID.", "keywords": []}, {"id": 2863, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::kind", "display_name": "CUpti_ActivityMarker2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MARKER.", "keywords": []}, {"id": 2864, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::name", "display_name": "CUpti_ActivityMarker2::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker24nameE", "priority": 1, "content": "const  char  * name The marker name for an instantaneous or start marker. This will be NULL for an end marker.", "keywords": []}, {"id": 2865, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::objectId", "display_name": "CUpti_ActivityMarker2::objectId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker28objectIdE", "priority": 1, "content": "CUpti_ActivityObjectKindId  objectId The identifier for the activity object associated with this marker. \u2018objectKind\u2019 indicates which ID is valid for this record.", "keywords": []}, {"id": 2866, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::objectKind", "display_name": "CUpti_ActivityMarker2::objectKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker210objectKindE", "priority": 1, "content": "CUpti_ActivityObjectKind  objectKind The kind of activity object associated with this marker.", "keywords": []}, {"id": 2867, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::pad", "display_name": "CUpti_ActivityMarker2::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker23padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2868, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "cpp", "name": "CUpti_ActivityMarker2::timestamp", "display_name": "CUpti_ActivityMarker2::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker2", "anchor": "_CPPv4N21CUpti_ActivityMarker29timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp for the marker, in ns. A value of 0 indicates that timestamp information could not be collected for the marker.", "keywords": []}, {"id": 2869, "doc_id": 2869, "filename": "api/struct_c_upti___activity_marker2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_marker2", "display_name": "CUpti_ActivityMarker2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_marker2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2870, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData", "display_name": "CUpti_ActivityMarkerData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv424CUpti_ActivityMarkerData", "priority": 1, "content": "struct  CUpti_ActivityMarkerData The activity record providing detailed information for a marker. User must enable CUPTI_ACTIVITY_KIND_MARKER as well to get records for marker data. The marker data contains color, payload, and category. (CUPTI_ACTIVITY_KIND_MARKER_DATA). Public Members", "keywords": []}, {"id": 2871, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::category", "display_name": "CUpti_ActivityMarkerData::category", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData8categoryE", "priority": 1, "content": "uint32_t  category The category for the marker.", "keywords": []}, {"id": 2872, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::color", "display_name": "CUpti_ActivityMarkerData::color", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData5colorE", "priority": 1, "content": "uint32_t  color The color for the marker.", "keywords": []}, {"id": 2873, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::flags", "display_name": "CUpti_ActivityMarkerData::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The flags associated with the marker. CUpti_ActivityFlag", "keywords": []}, {"id": 2874, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::id", "display_name": "CUpti_ActivityMarkerData::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData2idE", "priority": 1, "content": "uint32_t  id The marker ID.", "keywords": []}, {"id": 2875, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::kind", "display_name": "CUpti_ActivityMarkerData::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MARKER_DATA.", "keywords": []}, {"id": 2876, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::payload", "display_name": "CUpti_ActivityMarkerData::payload", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData7payloadE", "priority": 1, "content": "CUpti_MetricValue  payload The payload value.", "keywords": []}, {"id": 2877, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "cpp", "name": "CUpti_ActivityMarkerData::payloadKind", "display_name": "CUpti_ActivityMarkerData::payloadKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "_CPPv4N24CUpti_ActivityMarkerData11payloadKindE", "priority": 1, "content": "CUpti_MetricValueKind  payloadKind Defines the payload format for the value associated with the marker.", "keywords": []}, {"id": 2878, "doc_id": 2878, "filename": "api/struct_c_upti___activity_marker_data.html", "domain_name": "std", "name": "api/struct_c_upti___activity_marker_data", "display_name": "CUpti_ActivityMarkerData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_marker_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2879, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy", "display_name": "CUpti_ActivityMemcpy", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv420CUpti_ActivityMemcpy", "priority": 1, "content": "struct  CUpti_ActivityMemcpy The activity record for memory copies. (deprecated) This activity record represents a memory copy (CUPTI_ACTIVITY_KIND_MEMCPY). Public Members", "keywords": []}, {"id": 2880, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::bytes", "display_name": "CUpti_ActivityMemcpy::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy5bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2881, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::contextId", "display_name": "CUpti_ActivityMemcpy::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2882, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::copyKind", "display_name": "CUpti_ActivityMemcpy::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy8copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2883, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::correlationId", "display_name": "CUpti_ActivityMemcpy::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory copy.", "keywords": []}, {"id": 2884, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::deviceId", "display_name": "CUpti_ActivityMemcpy::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 2885, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::dstKind", "display_name": "CUpti_ActivityMemcpy::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy7dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2886, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::end", "display_name": "CUpti_ActivityMemcpy::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2887, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::flags", "display_name": "CUpti_ActivityMemcpy::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy5flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 2888, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::kind", "display_name": "CUpti_ActivityMemcpy::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY.", "keywords": []}, {"id": 2889, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::pad", "display_name": "CUpti_ActivityMemcpy::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2890, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::reserved0", "display_name": "CUpti_ActivityMemcpy::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy9reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2891, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::runtimeCorrelationId", "display_name": "CUpti_ActivityMemcpy::runtimeCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy20runtimeCorrelationIdE", "priority": 1, "content": "uint32_t  runtimeCorrelationId The runtime correlation ID of the memory copy. Each memory copy is assigned a unique runtime correlation ID that is identical to the correlation ID in the runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 2892, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::srcKind", "display_name": "CUpti_ActivityMemcpy::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy7srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2893, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::start", "display_name": "CUpti_ActivityMemcpy::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2894, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy::streamId", "display_name": "CUpti_ActivityMemcpy::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "_CPPv4N20CUpti_ActivityMemcpy8streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 2895, "doc_id": 2895, "filename": "api/struct_c_upti___activity_memcpy.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy", "display_name": "CUpti_ActivityMemcpy", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2896, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3", "display_name": "CUpti_ActivityMemcpy3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv421CUpti_ActivityMemcpy3", "priority": 1, "content": "struct  CUpti_ActivityMemcpy3 The activity record for memory copies. (deprecated in CUDA 11.1) This activity record represents a memory copy (CUPTI_ACTIVITY_KIND_MEMCPY). Public Members", "keywords": []}, {"id": 2897, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::bytes", "display_name": "CUpti_ActivityMemcpy3::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy35bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2898, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::contextId", "display_name": "CUpti_ActivityMemcpy3::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy39contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2899, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::copyKind", "display_name": "CUpti_ActivityMemcpy3::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy38copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2900, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::correlationId", "display_name": "CUpti_ActivityMemcpy3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory copy.", "keywords": []}, {"id": 2901, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::deviceId", "display_name": "CUpti_ActivityMemcpy3::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy38deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 2902, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::dstKind", "display_name": "CUpti_ActivityMemcpy3::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy37dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2903, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::end", "display_name": "CUpti_ActivityMemcpy3::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy33endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2904, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::flags", "display_name": "CUpti_ActivityMemcpy3::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy35flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 2905, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::graphNodeId", "display_name": "CUpti_ActivityMemcpy3::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy311graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 2906, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::kind", "display_name": "CUpti_ActivityMemcpy3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY.", "keywords": []}, {"id": 2907, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::pad", "display_name": "CUpti_ActivityMemcpy3::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy33padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2908, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::reserved0", "display_name": "CUpti_ActivityMemcpy3::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy39reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2909, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::runtimeCorrelationId", "display_name": "CUpti_ActivityMemcpy3::runtimeCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy320runtimeCorrelationIdE", "priority": 1, "content": "uint32_t  runtimeCorrelationId The runtime correlation ID of the memory copy. Each memory copy is assigned a unique runtime correlation ID that is identical to the correlation ID in the runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 2910, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::srcKind", "display_name": "CUpti_ActivityMemcpy3::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy37srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2911, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::start", "display_name": "CUpti_ActivityMemcpy3::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy35startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2912, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy3::streamId", "display_name": "CUpti_ActivityMemcpy3::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "_CPPv4N21CUpti_ActivityMemcpy38streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 2913, "doc_id": 2913, "filename": "api/struct_c_upti___activity_memcpy3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy3", "display_name": "CUpti_ActivityMemcpy3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2914, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4", "display_name": "CUpti_ActivityMemcpy4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv421CUpti_ActivityMemcpy4", "priority": 1, "content": "struct  CUpti_ActivityMemcpy4 The activity record for memory copies. (deprecated in CUDA 11.6) This activity record represents a memory copy (CUPTI_ACTIVITY_KIND_MEMCPY). Public Members", "keywords": []}, {"id": 2915, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::bytes", "display_name": "CUpti_ActivityMemcpy4::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy45bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2916, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::contextId", "display_name": "CUpti_ActivityMemcpy4::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy49contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2917, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::copyKind", "display_name": "CUpti_ActivityMemcpy4::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy48copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2918, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::correlationId", "display_name": "CUpti_ActivityMemcpy4::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy413correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory copy.", "keywords": []}, {"id": 2919, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::deviceId", "display_name": "CUpti_ActivityMemcpy4::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy48deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 2920, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::dstKind", "display_name": "CUpti_ActivityMemcpy4::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy47dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2921, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::end", "display_name": "CUpti_ActivityMemcpy4::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy43endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2922, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::flags", "display_name": "CUpti_ActivityMemcpy4::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy45flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 2923, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::graphId", "display_name": "CUpti_ActivityMemcpy4::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy47graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 2924, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::graphNodeId", "display_name": "CUpti_ActivityMemcpy4::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy411graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 2925, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::kind", "display_name": "CUpti_ActivityMemcpy4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY.", "keywords": []}, {"id": 2926, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::pad", "display_name": "CUpti_ActivityMemcpy4::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy43padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2927, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::padding", "display_name": "CUpti_ActivityMemcpy4::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy47paddingE", "priority": 1, "content": "uint32_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 2928, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::reserved0", "display_name": "CUpti_ActivityMemcpy4::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy49reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2929, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::runtimeCorrelationId", "display_name": "CUpti_ActivityMemcpy4::runtimeCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy420runtimeCorrelationIdE", "priority": 1, "content": "uint32_t  runtimeCorrelationId The runtime correlation ID of the memory copy. Each memory copy is assigned a unique runtime correlation ID that is identical to the correlation ID in the runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 2930, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::srcKind", "display_name": "CUpti_ActivityMemcpy4::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy47srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2931, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::start", "display_name": "CUpti_ActivityMemcpy4::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy45startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2932, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy4::streamId", "display_name": "CUpti_ActivityMemcpy4::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "_CPPv4N21CUpti_ActivityMemcpy48streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 2933, "doc_id": 2933, "filename": "api/struct_c_upti___activity_memcpy4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy4", "display_name": "CUpti_ActivityMemcpy4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2934, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5", "display_name": "CUpti_ActivityMemcpy5", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv421CUpti_ActivityMemcpy5", "priority": 1, "content": "struct  CUpti_ActivityMemcpy5 The activity record for memory copies. This activity record represents a memory copy (CUPTI_ACTIVITY_KIND_MEMCPY). Public Members", "keywords": []}, {"id": 2935, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::bytes", "display_name": "CUpti_ActivityMemcpy5::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy55bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2936, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::channelID", "display_name": "CUpti_ActivityMemcpy5::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy59channelIDE", "priority": 1, "content": "uint32_t  channelID The ID of the HW channel on which the memory copy is occurring.", "keywords": []}, {"id": 2937, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::channelType", "display_name": "CUpti_ActivityMemcpy5::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy511channelTypeE", "priority": 1, "content": "CUpti_ChannelType  channelType The type of the channel.", "keywords": []}, {"id": 2938, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::contextId", "display_name": "CUpti_ActivityMemcpy5::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy59contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2939, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::copyKind", "display_name": "CUpti_ActivityMemcpy5::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy58copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2940, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::correlationId", "display_name": "CUpti_ActivityMemcpy5::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy513correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory copy.", "keywords": []}, {"id": 2941, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::deviceId", "display_name": "CUpti_ActivityMemcpy5::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy58deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 2942, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::dstKind", "display_name": "CUpti_ActivityMemcpy5::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy57dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2943, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::end", "display_name": "CUpti_ActivityMemcpy5::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy53endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2944, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::flags", "display_name": "CUpti_ActivityMemcpy5::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy55flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 2945, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::graphId", "display_name": "CUpti_ActivityMemcpy5::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy57graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 2946, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::graphNodeId", "display_name": "CUpti_ActivityMemcpy5::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy511graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 2947, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::kind", "display_name": "CUpti_ActivityMemcpy5::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy54kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY.", "keywords": []}, {"id": 2948, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::pad", "display_name": "CUpti_ActivityMemcpy5::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy53padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 2949, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::pad2", "display_name": "CUpti_ActivityMemcpy5::pad2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy54pad2E", "priority": 1, "content": "uint32_t  pad2 Reserved for internal use.", "keywords": []}, {"id": 2950, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::reserved0", "display_name": "CUpti_ActivityMemcpy5::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy59reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2951, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::runtimeCorrelationId", "display_name": "CUpti_ActivityMemcpy5::runtimeCorrelationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy520runtimeCorrelationIdE", "priority": 1, "content": "uint32_t  runtimeCorrelationId The runtime correlation ID of the memory copy. Each memory copy is assigned a unique runtime correlation ID that is identical to the correlation ID in the runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 2952, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::srcKind", "display_name": "CUpti_ActivityMemcpy5::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy57srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2953, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::start", "display_name": "CUpti_ActivityMemcpy5::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy55startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2954, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpy5::streamId", "display_name": "CUpti_ActivityMemcpy5::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "_CPPv4N21CUpti_ActivityMemcpy58streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 2955, "doc_id": 2955, "filename": "api/struct_c_upti___activity_memcpy5.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy5", "display_name": "CUpti_ActivityMemcpy5", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy5", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2956, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP", "display_name": "CUpti_ActivityMemcpyPtoP", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv424CUpti_ActivityMemcpyPtoP", "priority": 1, "content": "struct  CUpti_ActivityMemcpyPtoP The activity record for peer-to-peer memory copies. This activity record represents a peer-to-peer memory copy (CUPTI_ACTIVITY_KIND_MEMCPY2) but is no longer generated by CUPTI. Peer-to-peer memory copy activities are now reported using the CUpti_ActivityMemcpyPtoP2 activity record.. Public Members", "keywords": []}, {"id": 2957, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::bytes", "display_name": "CUpti_ActivityMemcpyPtoP::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP5bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2958, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::contextId", "display_name": "CUpti_ActivityMemcpyPtoP::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2959, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::copyKind", "display_name": "CUpti_ActivityMemcpyPtoP::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP8copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2960, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::correlationId", "display_name": "CUpti_ActivityMemcpyPtoP::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 2961, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::deviceId", "display_name": "CUpti_ActivityMemcpyPtoP::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 2962, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::dstContextId", "display_name": "CUpti_ActivityMemcpyPtoP::dstContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP12dstContextIdE", "priority": 1, "content": "uint32_t  dstContextId The ID of the context owning the memory being copied to.", "keywords": []}, {"id": 2963, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::dstDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP::dstDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP11dstDeviceIdE", "priority": 1, "content": "uint32_t  dstDeviceId The ID of the device where memory is being copied to.", "keywords": []}, {"id": 2964, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::dstKind", "display_name": "CUpti_ActivityMemcpyPtoP::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP7dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2965, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::end", "display_name": "CUpti_ActivityMemcpyPtoP::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2966, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::flags", "display_name": "CUpti_ActivityMemcpyPtoP::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP5flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 2967, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::kind", "display_name": "CUpti_ActivityMemcpyPtoP::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY2.", "keywords": []}, {"id": 2968, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::reserved0", "display_name": "CUpti_ActivityMemcpyPtoP::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP9reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2969, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::srcContextId", "display_name": "CUpti_ActivityMemcpyPtoP::srcContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP12srcContextIdE", "priority": 1, "content": "uint32_t  srcContextId The ID of the context owning the memory being copied from.", "keywords": []}, {"id": 2970, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::srcDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP::srcDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP11srcDeviceIdE", "priority": 1, "content": "uint32_t  srcDeviceId The ID of the device where memory is being copied from.", "keywords": []}, {"id": 2971, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::srcKind", "display_name": "CUpti_ActivityMemcpyPtoP::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP7srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2972, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::start", "display_name": "CUpti_ActivityMemcpyPtoP::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2973, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP::streamId", "display_name": "CUpti_ActivityMemcpyPtoP::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "_CPPv4N24CUpti_ActivityMemcpyPtoP8streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 2974, "doc_id": 2974, "filename": "api/struct_c_upti___activity_memcpy_pto_p.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy_pto_p", "display_name": "CUpti_ActivityMemcpyPtoP", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy_pto_p", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2975, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2", "display_name": "CUpti_ActivityMemcpyPtoP2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv425CUpti_ActivityMemcpyPtoP2", "priority": 1, "content": "struct  CUpti_ActivityMemcpyPtoP2 The activity record for peer-to-peer memory copies. (deprecated in CUDA 11.1) This activity record represents a peer-to-peer memory copy (CUPTI_ACTIVITY_KIND_MEMCPY2). Public Members", "keywords": []}, {"id": 2976, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::bytes", "display_name": "CUpti_ActivityMemcpyPtoP2::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP25bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2977, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::contextId", "display_name": "CUpti_ActivityMemcpyPtoP2::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP29contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2978, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::copyKind", "display_name": "CUpti_ActivityMemcpyPtoP2::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP28copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2979, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::correlationId", "display_name": "CUpti_ActivityMemcpyPtoP2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 2980, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::deviceId", "display_name": "CUpti_ActivityMemcpyPtoP2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 2981, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::dstContextId", "display_name": "CUpti_ActivityMemcpyPtoP2::dstContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP212dstContextIdE", "priority": 1, "content": "uint32_t  dstContextId The ID of the context owning the memory being copied to.", "keywords": []}, {"id": 2982, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::dstDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP2::dstDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP211dstDeviceIdE", "priority": 1, "content": "uint32_t  dstDeviceId The ID of the device where memory is being copied to.", "keywords": []}, {"id": 2983, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::dstKind", "display_name": "CUpti_ActivityMemcpyPtoP2::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP27dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2984, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::end", "display_name": "CUpti_ActivityMemcpyPtoP2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP23endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2985, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::flags", "display_name": "CUpti_ActivityMemcpyPtoP2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP25flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 2986, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::graphNodeId", "display_name": "CUpti_ActivityMemcpyPtoP2::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP211graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed the memcpy through graph launch. This field will be 0 if memcpy is not done using graph launch.", "keywords": []}, {"id": 2987, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::kind", "display_name": "CUpti_ActivityMemcpyPtoP2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY2.", "keywords": []}, {"id": 2988, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::reserved0", "display_name": "CUpti_ActivityMemcpyPtoP2::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP29reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 2989, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::srcContextId", "display_name": "CUpti_ActivityMemcpyPtoP2::srcContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP212srcContextIdE", "priority": 1, "content": "uint32_t  srcContextId The ID of the context owning the memory being copied from.", "keywords": []}, {"id": 2990, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::srcDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP2::srcDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP211srcDeviceIdE", "priority": 1, "content": "uint32_t  srcDeviceId The ID of the device where memory is being copied from.", "keywords": []}, {"id": 2991, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::srcKind", "display_name": "CUpti_ActivityMemcpyPtoP2::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP27srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 2992, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::start", "display_name": "CUpti_ActivityMemcpyPtoP2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP25startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 2993, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP2::streamId", "display_name": "CUpti_ActivityMemcpyPtoP2::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP28streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 2994, "doc_id": 2994, "filename": "api/struct_c_upti___activity_memcpy_pto_p2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy_pto_p2", "display_name": "CUpti_ActivityMemcpyPtoP2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy_pto_p2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 2995, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3", "display_name": "CUpti_ActivityMemcpyPtoP3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv425CUpti_ActivityMemcpyPtoP3", "priority": 1, "content": "struct  CUpti_ActivityMemcpyPtoP3 The activity record for peer-to-peer memory copies. (deprecated in CUDA 11.6) This activity record represents a peer-to-peer memory copy (CUPTI_ACTIVITY_KIND_MEMCPY2). Public Members", "keywords": []}, {"id": 2996, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::bytes", "display_name": "CUpti_ActivityMemcpyPtoP3::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP35bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 2997, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::contextId", "display_name": "CUpti_ActivityMemcpyPtoP3::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP39contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 2998, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::copyKind", "display_name": "CUpti_ActivityMemcpyPtoP3::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP38copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 2999, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::correlationId", "display_name": "CUpti_ActivityMemcpyPtoP3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 3000, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::deviceId", "display_name": "CUpti_ActivityMemcpyPtoP3::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP38deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 3001, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::dstContextId", "display_name": "CUpti_ActivityMemcpyPtoP3::dstContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP312dstContextIdE", "priority": 1, "content": "uint32_t  dstContextId The ID of the context owning the memory being copied to.", "keywords": []}, {"id": 3002, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::dstDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP3::dstDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP311dstDeviceIdE", "priority": 1, "content": "uint32_t  dstDeviceId The ID of the device where memory is being copied to.", "keywords": []}, {"id": 3003, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::dstKind", "display_name": "CUpti_ActivityMemcpyPtoP3::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP37dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3004, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::end", "display_name": "CUpti_ActivityMemcpyPtoP3::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP33endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 3005, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::flags", "display_name": "CUpti_ActivityMemcpyPtoP3::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP35flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 3006, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::graphId", "display_name": "CUpti_ActivityMemcpyPtoP3::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP37graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 3007, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::graphNodeId", "display_name": "CUpti_ActivityMemcpyPtoP3::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP311graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed the memcpy through graph launch. This field will be 0 if memcpy is not done using graph launch.", "keywords": []}, {"id": 3008, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::kind", "display_name": "CUpti_ActivityMemcpyPtoP3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY2.", "keywords": []}, {"id": 3009, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::padding", "display_name": "CUpti_ActivityMemcpyPtoP3::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP37paddingE", "priority": 1, "content": "uint32_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 3010, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::reserved0", "display_name": "CUpti_ActivityMemcpyPtoP3::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP39reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3011, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::srcContextId", "display_name": "CUpti_ActivityMemcpyPtoP3::srcContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP312srcContextIdE", "priority": 1, "content": "uint32_t  srcContextId The ID of the context owning the memory being copied from.", "keywords": []}, {"id": 3012, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::srcDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP3::srcDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP311srcDeviceIdE", "priority": 1, "content": "uint32_t  srcDeviceId The ID of the device where memory is being copied from.", "keywords": []}, {"id": 3013, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::srcKind", "display_name": "CUpti_ActivityMemcpyPtoP3::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP37srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3014, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::start", "display_name": "CUpti_ActivityMemcpyPtoP3::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP35startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 3015, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP3::streamId", "display_name": "CUpti_ActivityMemcpyPtoP3::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP38streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 3016, "doc_id": 3016, "filename": "api/struct_c_upti___activity_memcpy_pto_p3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy_pto_p3", "display_name": "CUpti_ActivityMemcpyPtoP3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy_pto_p3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3017, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4", "display_name": "CUpti_ActivityMemcpyPtoP4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv425CUpti_ActivityMemcpyPtoP4", "priority": 1, "content": "struct  CUpti_ActivityMemcpyPtoP4 The activity record for peer-to-peer memory copies. This activity record represents a peer-to-peer memory copy (CUPTI_ACTIVITY_KIND_MEMCPY2). Public Members", "keywords": []}, {"id": 3018, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::bytes", "display_name": "CUpti_ActivityMemcpyPtoP4::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP45bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes transferred by the memory copy.", "keywords": []}, {"id": 3019, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::channelID", "display_name": "CUpti_ActivityMemcpyPtoP4::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP49channelIDE", "priority": 1, "content": "uint32_t  channelID The ID of the HW channel on which the memory copy is occurring.", "keywords": []}, {"id": 3020, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::channelType", "display_name": "CUpti_ActivityMemcpyPtoP4::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP411channelTypeE", "priority": 1, "content": "CUpti_ChannelType  channelType The type of the channel.", "keywords": []}, {"id": 3021, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::contextId", "display_name": "CUpti_ActivityMemcpyPtoP4::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP49contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory copy is occurring.", "keywords": []}, {"id": 3022, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::copyKind", "display_name": "CUpti_ActivityMemcpyPtoP4::copyKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP48copyKindE", "priority": 1, "content": "uint8_t  copyKind The kind of the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemcpyKind", "keywords": []}, {"id": 3023, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::correlationId", "display_name": "CUpti_ActivityMemcpyPtoP4::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP413correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory copy. Each memory copy is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory copy.", "keywords": []}, {"id": 3024, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::deviceId", "display_name": "CUpti_ActivityMemcpyPtoP4::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP48deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory copy is occurring.", "keywords": []}, {"id": 3025, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::dstContextId", "display_name": "CUpti_ActivityMemcpyPtoP4::dstContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP412dstContextIdE", "priority": 1, "content": "uint32_t  dstContextId The ID of the context owning the memory being copied to.", "keywords": []}, {"id": 3026, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::dstDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP4::dstDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP411dstDeviceIdE", "priority": 1, "content": "uint32_t  dstDeviceId The ID of the device where memory is being copied to.", "keywords": []}, {"id": 3027, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::dstKind", "display_name": "CUpti_ActivityMemcpyPtoP4::dstKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP47dstKindE", "priority": 1, "content": "uint8_t  dstKind The destination memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3028, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::end", "display_name": "CUpti_ActivityMemcpyPtoP4::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP43endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 3029, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::flags", "display_name": "CUpti_ActivityMemcpyPtoP4::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP45flagsE", "priority": 1, "content": "uint8_t  flags The flags associated with the memory copy. CUpti_ActivityFlag", "keywords": []}, {"id": 3030, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::graphId", "display_name": "CUpti_ActivityMemcpyPtoP4::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP47graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that executed this memcpy through graph launch. This field will be 0 if the memcpy is not done through graph launch.", "keywords": []}, {"id": 3031, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::graphNodeId", "display_name": "CUpti_ActivityMemcpyPtoP4::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP411graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed the memcpy through graph launch. This field will be 0 if memcpy is not done using graph launch.", "keywords": []}, {"id": 3032, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::kind", "display_name": "CUpti_ActivityMemcpyPtoP4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMCPY2.", "keywords": []}, {"id": 3033, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::reserved0", "display_name": "CUpti_ActivityMemcpyPtoP4::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP49reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3034, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::srcContextId", "display_name": "CUpti_ActivityMemcpyPtoP4::srcContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP412srcContextIdE", "priority": 1, "content": "uint32_t  srcContextId The ID of the context owning the memory being copied from.", "keywords": []}, {"id": 3035, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::srcDeviceId", "display_name": "CUpti_ActivityMemcpyPtoP4::srcDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP411srcDeviceIdE", "priority": 1, "content": "uint32_t  srcDeviceId The ID of the device where memory is being copied from.", "keywords": []}, {"id": 3036, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::srcKind", "display_name": "CUpti_ActivityMemcpyPtoP4::srcKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP47srcKindE", "priority": 1, "content": "uint8_t  srcKind The source memory kind read by the memory copy, stored as a byte to reduce record size. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3037, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::start", "display_name": "CUpti_ActivityMemcpyPtoP4::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP45startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory copy, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory copy.", "keywords": []}, {"id": 3038, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemcpyPtoP4::streamId", "display_name": "CUpti_ActivityMemcpyPtoP4::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "_CPPv4N25CUpti_ActivityMemcpyPtoP48streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory copy is occurring.", "keywords": []}, {"id": 3039, "doc_id": 3039, "filename": "api/struct_c_upti___activity_memcpy_pto_p4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memcpy_pto_p4", "display_name": "CUpti_ActivityMemcpyPtoP4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memcpy_pto_p4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3040, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory", "display_name": "CUpti_ActivityMemory", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv420CUpti_ActivityMemory", "priority": 1, "content": "struct  CUpti_ActivityMemory The activity record for memory. This activity record represents a memory allocation and free operation (CUPTI_ACTIVITY_KIND_MEMORY). This activity record provides a single record for the memory allocation and memory release operations. Note: It is recommended to move to the new activity record CUpti_ActivityMemory4 enabled using the kind CUPTI_ACTIVITY_KIND_MEMORY2 . CUpti_ActivityMemory4 provides separate records for memory allocation and memory release operations. This allows to correlate the corresponding driver and runtime API activity record with the memory operation. Public Members", "keywords": []}, {"id": 3041, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::address", "display_name": "CUpti_ActivityMemory::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory7addressE", "priority": 1, "content": "uint64_t  address The virtual address of the allocation.", "keywords": []}, {"id": 3042, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::allocPC", "display_name": "CUpti_ActivityMemory::allocPC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory7allocPCE", "priority": 1, "content": "uint64_t  allocPC The program counter of the allocation of memory.", "keywords": []}, {"id": 3043, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::bytes", "display_name": "CUpti_ActivityMemory::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory5bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes of memory allocated.", "keywords": []}, {"id": 3044, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::contextId", "display_name": "CUpti_ActivityMemory::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context. If context is NULL, contextId is set to CUPTI_INVALID_CONTEXT_ID.", "keywords": []}, {"id": 3045, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::deviceId", "display_name": "CUpti_ActivityMemory::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory allocation is taking place.", "keywords": []}, {"id": 3046, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::end", "display_name": "CUpti_ActivityMemory::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory operation, i.e. the time when memory was freed, in ns. This will be 0 if memory is not freed in the application", "keywords": []}, {"id": 3047, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::freePC", "display_name": "CUpti_ActivityMemory::freePC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory6freePCE", "priority": 1, "content": "uint64_t  freePC The program counter of the freeing of memory. This will be 0 if memory is not freed in the application", "keywords": []}, {"id": 3048, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::kind", "display_name": "CUpti_ActivityMemory::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMORY.", "keywords": []}, {"id": 3049, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::memoryKind", "display_name": "CUpti_ActivityMemory::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory10memoryKindE", "priority": 1, "content": "CUpti_ActivityMemoryKind  memoryKind The memory kind requested by the user.", "keywords": []}, {"id": 3050, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::name", "display_name": "CUpti_ActivityMemory::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory4nameE", "priority": 1, "content": "const  char  * name Variable name. This name is shared across all activity records representing the same symbol, and so should not be modified.", "keywords": []}, {"id": 3051, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::pad", "display_name": "CUpti_ActivityMemory::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3052, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::processId", "display_name": "CUpti_ActivityMemory::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory9processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3053, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory::start", "display_name": "CUpti_ActivityMemory::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory", "anchor": "_CPPv4N20CUpti_ActivityMemory5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory operation, i.e. the time when memory was allocated, in ns.", "keywords": []}, {"id": 3054, "doc_id": 3054, "filename": "api/struct_c_upti___activity_memory.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memory", "display_name": "CUpti_ActivityMemory", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memory", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3055, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2", "display_name": "CUpti_ActivityMemory2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv421CUpti_ActivityMemory2", "priority": 1, "content": "struct  CUpti_ActivityMemory2 The activity record for memory. This activity record represents a memory allocation and free operation (CUPTI_ACTIVITY_KIND_MEMORY2). This activity record provides separate records for memory allocation and memory release operations. This allows to correlate the corresponding driver and runtime API activity record with the memory operation. Note: This activity record is an upgrade over CUpti_ActivityMemory enabled using the kind CUPTI_ACTIVITY_KIND_MEMORY . CUpti_ActivityMemory provides a single record for the memory allocation and memory release operations. Public Members", "keywords": []}, {"id": 3056, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::PC", "display_name": "CUpti_ActivityMemory2::PC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory22PCE", "priority": 1, "content": "uint64_t  PC The program counter of the memory operation.", "keywords": []}, {"id": 3057, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::address", "display_name": "CUpti_ActivityMemory2::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory27addressE", "priority": 1, "content": "uint64_t  address The virtual address of the allocation. The base address of the memory pool.", "keywords": []}, {"id": 3058, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::bytes", "display_name": "CUpti_ActivityMemory2::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory25bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes of memory allocated.", "keywords": []}, {"id": 3059, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::contextId", "display_name": "CUpti_ActivityMemory2::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory29contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context. If context is NULL, contextId is set to CUPTI_INVALID_CONTEXT_ID.", "keywords": []}, {"id": 3060, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::correlationId", "display_name": "CUpti_ActivityMemory2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory operation. Each memory operation is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory operation.", "keywords": []}, {"id": 3061, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::deviceId", "display_name": "CUpti_ActivityMemory2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory operation is taking place.", "keywords": []}, {"id": 3062, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::isAsync", "display_name": "CUpti_ActivityMemory2::isAsync", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory27isAsyncE", "priority": 1, "content": "uint32_t  isAsync isAsync is set if memory operation happens through async memory APIs.", "keywords": []}, {"id": 3063, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::kind", "display_name": "CUpti_ActivityMemory2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMORY2.", "keywords": []}, {"id": 3064, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::memoryKind", "display_name": "CUpti_ActivityMemory2::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory210memoryKindE", "priority": 1, "content": "CUpti_ActivityMemoryKind  memoryKind The memory kind requested by the user, CUpti_ActivityMemoryKind .", "keywords": []}, {"id": 3065, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::memoryOperationType", "display_name": "CUpti_ActivityMemory2::memoryOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory219memoryOperationTypeE", "priority": 1, "content": "CUpti_ActivityMemoryOperationType  memoryOperationType The memory operation requested by the user, CUpti_ActivityMemoryOperationType .", "keywords": []}, {"id": 3066, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::memoryPoolConfig", "display_name": "CUpti_ActivityMemory2::memoryPoolConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory216memoryPoolConfigE", "priority": 1, "content": "struct  CUpti_ActivityMemory2 :: [anonymous]  memoryPoolConfig The memory pool configuration used for the memory operations.", "keywords": []}, {"id": 3067, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::memoryPoolType", "display_name": "CUpti_ActivityMemory2::memoryPoolType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory214memoryPoolTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolType  memoryPoolType The type of the memory pool, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3068, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::name", "display_name": "CUpti_ActivityMemory2::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory24nameE", "priority": 1, "content": "const  char  * name Variable name. This name is shared across all activity records representing the same symbol, and so should not be modified.", "keywords": []}, {"id": 3069, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::pad1", "display_name": "CUpti_ActivityMemory2::pad1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory24pad1E", "priority": 1, "content": "uint32_t  pad1 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3070, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::pad2", "display_name": "CUpti_ActivityMemory2::pad2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory24pad2E", "priority": 1, "content": "uint32_t  pad2 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3071, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::pool", "display_name": "CUpti_ActivityMemory2::pool", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory24poolE", "priority": 1, "content": "union  CUpti_ActivityMemory2 :: [anonymous] :: [anonymous]  pool The size of the memory pool in bytes and the processID of the memory pool. size is valid if memoryPoolType is CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType . processId is valid if memoryPoolType is CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3072, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::processId", "display_name": "CUpti_ActivityMemory2::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory29processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3073, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::releaseThreshold", "display_name": "CUpti_ActivityMemory2::releaseThreshold", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory216releaseThresholdE", "priority": 1, "content": "uint64_t  releaseThreshold The release threshold of the memory pool in bytes. releaseThreshold is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3074, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::streamId", "display_name": "CUpti_ActivityMemory2::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory28streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream. If memory operation is not async, streamId is set to CUPTI_INVALID_STREAM_ID.", "keywords": []}, {"id": 3075, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory2::timestamp", "display_name": "CUpti_ActivityMemory2::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory2", "anchor": "_CPPv4N21CUpti_ActivityMemory29timestampE", "priority": 1, "content": "uint64_t  timestamp The start timestamp for the memory operation, in ns.", "keywords": []}, {"id": 3076, "doc_id": 3076, "filename": "api/struct_c_upti___activity_memory2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memory2", "display_name": "CUpti_ActivityMemory2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memory2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3077, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3", "display_name": "CUpti_ActivityMemory3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv421CUpti_ActivityMemory3", "priority": 1, "content": "struct  CUpti_ActivityMemory3 The activity record for memory. This activity record represents a memory allocation and free operation (CUPTI_ACTIVITY_KIND_MEMORY2). This activity record provides separate records for memory allocation and memory release operations. This allows to correlate the corresponding driver and runtime API activity record with the memory operation. Note: This activity record is an upgrade over CUpti_ActivityMemory2 enabled using the kind CUPTI_ACTIVITY_KIND_MEMORY . CUpti_ActivityMemory provides a single record for the memory allocation and memory release operations. Public Members", "keywords": []}, {"id": 3078, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::PC", "display_name": "CUpti_ActivityMemory3::PC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory32PCE", "priority": 1, "content": "uint64_t  PC The program counter of the memory operation.", "keywords": []}, {"id": 3079, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::address", "display_name": "CUpti_ActivityMemory3::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory37addressE", "priority": 1, "content": "uint64_t  address The virtual address of the allocation. The base address of the memory pool.", "keywords": []}, {"id": 3080, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::bytes", "display_name": "CUpti_ActivityMemory3::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory35bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes of memory allocated.", "keywords": []}, {"id": 3081, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::contextId", "display_name": "CUpti_ActivityMemory3::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory39contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context. If context is NULL, contextId is set to CUPTI_INVALID_CONTEXT_ID.", "keywords": []}, {"id": 3082, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::correlationId", "display_name": "CUpti_ActivityMemory3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory operation. Each memory operation is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory operation.", "keywords": []}, {"id": 3083, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::deviceId", "display_name": "CUpti_ActivityMemory3::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory38deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory operation is taking place.", "keywords": []}, {"id": 3084, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::isAsync", "display_name": "CUpti_ActivityMemory3::isAsync", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory37isAsyncE", "priority": 1, "content": "uint32_t  isAsync isAsync is set if memory operation happens through async memory APIs.", "keywords": []}, {"id": 3085, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::kind", "display_name": "CUpti_ActivityMemory3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMORY2.", "keywords": []}, {"id": 3086, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::memoryKind", "display_name": "CUpti_ActivityMemory3::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory310memoryKindE", "priority": 1, "content": "CUpti_ActivityMemoryKind  memoryKind The memory kind requested by the user, CUpti_ActivityMemoryKind .", "keywords": []}, {"id": 3087, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::memoryOperationType", "display_name": "CUpti_ActivityMemory3::memoryOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory319memoryOperationTypeE", "priority": 1, "content": "CUpti_ActivityMemoryOperationType  memoryOperationType The memory operation requested by the user, CUpti_ActivityMemoryOperationType .", "keywords": []}, {"id": 3088, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::memoryPoolConfig", "display_name": "CUpti_ActivityMemory3::memoryPoolConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory316memoryPoolConfigE", "priority": 1, "content": "struct  CUpti_ActivityMemory3 :: [anonymous]  memoryPoolConfig The memory pool configuration used for the memory operations.", "keywords": []}, {"id": 3089, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::memoryPoolType", "display_name": "CUpti_ActivityMemory3::memoryPoolType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory314memoryPoolTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolType  memoryPoolType The type of the memory pool, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3090, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::name", "display_name": "CUpti_ActivityMemory3::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory34nameE", "priority": 1, "content": "const  char  * name Variable name. This name is shared across all activity records representing the same symbol, and so should not be modified.", "keywords": []}, {"id": 3091, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::pad1", "display_name": "CUpti_ActivityMemory3::pad1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory34pad1E", "priority": 1, "content": "uint32_t  pad1 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3092, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::pad2", "display_name": "CUpti_ActivityMemory3::pad2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory34pad2E", "priority": 1, "content": "uint32_t  pad2 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3093, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::pool", "display_name": "CUpti_ActivityMemory3::pool", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory34poolE", "priority": 1, "content": "union  CUpti_ActivityMemory3 :: [anonymous] :: [anonymous]  pool The size of memory pool in bytes and the processId of the memory pools size is valid if memoryPoolType is CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType . processId is valid if memoryPoolType is CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED, CUpti_ActivityMemoryPoolType", "keywords": []}, {"id": 3094, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::processId", "display_name": "CUpti_ActivityMemory3::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory39processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3095, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::releaseThreshold", "display_name": "CUpti_ActivityMemory3::releaseThreshold", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory316releaseThresholdE", "priority": 1, "content": "uint64_t  releaseThreshold The release threshold of the memory pool in bytes. releaseThreshold is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3096, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::streamId", "display_name": "CUpti_ActivityMemory3::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory38streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream. If memory operation is not async, streamId is set to CUPTI_INVALID_STREAM_ID.", "keywords": []}, {"id": 3097, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::timestamp", "display_name": "CUpti_ActivityMemory3::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory39timestampE", "priority": 1, "content": "uint64_t  timestamp The start timestamp for the memory operation, in ns.", "keywords": []}, {"id": 3098, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory3::utilizedSize", "display_name": "CUpti_ActivityMemory3::utilizedSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory3", "anchor": "_CPPv4N21CUpti_ActivityMemory312utilizedSizeE", "priority": 1, "content": "uint64_t  utilizedSize The utilized size of the memory pool. utilizedSize is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3099, "doc_id": 3099, "filename": "api/struct_c_upti___activity_memory3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memory3", "display_name": "CUpti_ActivityMemory3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memory3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3100, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4", "display_name": "CUpti_ActivityMemory4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv421CUpti_ActivityMemory4", "priority": 1, "content": "struct  CUpti_ActivityMemory4 The activity record for memory. This activity record represents a memory allocation and free operation (CUPTI_ACTIVITY_KIND_MEMORY2). This activity record provides separate records for memory allocation and memory release operations. This allows to correlate the corresponding driver and runtime API activity record with the memory operation. Note: This activity record is an upgrade over CUpti_ActivityMemory enabled using the kind CUPTI_ACTIVITY_KIND_MEMORY . CUpti_ActivityMemory provides a single record for the memory allocation and memory release operations. Public Members", "keywords": []}, {"id": 3101, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::PC", "display_name": "CUpti_ActivityMemory4::PC", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory42PCE", "priority": 1, "content": "uint64_t  PC The program counter of the memory operation.", "keywords": []}, {"id": 3102, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::address", "display_name": "CUpti_ActivityMemory4::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory47addressE", "priority": 1, "content": "uint64_t  address The virtual address of the allocation. The base address of the memory pool.", "keywords": []}, {"id": 3103, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::bytes", "display_name": "CUpti_ActivityMemory4::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory45bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes of memory allocated.", "keywords": []}, {"id": 3104, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::contextId", "display_name": "CUpti_ActivityMemory4::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory49contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context. If context is NULL, contextId is set to CUPTI_INVALID_CONTEXT_ID.", "keywords": []}, {"id": 3105, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::correlationId", "display_name": "CUpti_ActivityMemory4::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory413correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory operation. Each memory operation is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory operation.", "keywords": []}, {"id": 3106, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::deviceId", "display_name": "CUpti_ActivityMemory4::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory48deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory operation is taking place.", "keywords": []}, {"id": 3107, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::isAsync", "display_name": "CUpti_ActivityMemory4::isAsync", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory47isAsyncE", "priority": 1, "content": "uint32_t  isAsync isAsync is set if memory operation happens through async memory APIs.", "keywords": []}, {"id": 3108, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::kind", "display_name": "CUpti_ActivityMemory4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMORY2.", "keywords": []}, {"id": 3109, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::memoryKind", "display_name": "CUpti_ActivityMemory4::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory410memoryKindE", "priority": 1, "content": "CUpti_ActivityMemoryKind  memoryKind The memory kind requested by the user, CUpti_ActivityMemoryKind .", "keywords": []}, {"id": 3110, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::memoryOperationType", "display_name": "CUpti_ActivityMemory4::memoryOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory419memoryOperationTypeE", "priority": 1, "content": "CUpti_ActivityMemoryOperationType  memoryOperationType The memory operation requested by the user, CUpti_ActivityMemoryOperationType .", "keywords": []}, {"id": 3111, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::memoryPoolConfig", "display_name": "CUpti_ActivityMemory4::memoryPoolConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory416memoryPoolConfigE", "priority": 1, "content": "struct  CUpti_ActivityMemory4 :: [anonymous]  memoryPoolConfig The memory pool configuration used for the memory operations.", "keywords": []}, {"id": 3112, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::memoryPoolType", "display_name": "CUpti_ActivityMemory4::memoryPoolType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory414memoryPoolTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolType  memoryPoolType The type of the memory pool, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3113, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::name", "display_name": "CUpti_ActivityMemory4::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory44nameE", "priority": 1, "content": "const  char  * name Variable name. This name is shared across all activity records representing the same symbol, and so should not be modified.", "keywords": []}, {"id": 3114, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::pad1", "display_name": "CUpti_ActivityMemory4::pad1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory44pad1E", "priority": 1, "content": "uint32_t  pad1 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3115, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::pad2", "display_name": "CUpti_ActivityMemory4::pad2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory44pad2E", "priority": 1, "content": "uint32_t  pad2 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3116, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::pool", "display_name": "CUpti_ActivityMemory4::pool", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory44poolE", "priority": 1, "content": "union  CUpti_ActivityMemory4 :: [anonymous] :: [anonymous]  pool The size of memory pool in bytes and the processId of the memory pools size is valid if memoryPoolType is CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType . processId is valid if memoryPoolType is CUPTI_ACTIVITY_MEMORY_POOL_TYPE_IMPORTED, CUpti_ActivityMemoryPoolType", "keywords": []}, {"id": 3117, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::processId", "display_name": "CUpti_ActivityMemory4::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory49processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3118, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::releaseThreshold", "display_name": "CUpti_ActivityMemory4::releaseThreshold", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory416releaseThresholdE", "priority": 1, "content": "uint64_t  releaseThreshold The release threshold of the memory pool in bytes. releaseThreshold is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3119, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::source", "display_name": "CUpti_ActivityMemory4::source", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory46sourceE", "priority": 1, "content": "const  char  * source The shared object or binary that the memory allocation request comes from.", "keywords": []}, {"id": 3120, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::streamId", "display_name": "CUpti_ActivityMemory4::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory48streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream. If memory operation is not async, streamId is set to CUPTI_INVALID_STREAM_ID.", "keywords": []}, {"id": 3121, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::timestamp", "display_name": "CUpti_ActivityMemory4::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory49timestampE", "priority": 1, "content": "uint64_t  timestamp The start timestamp for the memory operation, in ns.", "keywords": []}, {"id": 3122, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemory4::utilizedSize", "display_name": "CUpti_ActivityMemory4::utilizedSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory4", "anchor": "_CPPv4N21CUpti_ActivityMemory412utilizedSizeE", "priority": 1, "content": "uint64_t  utilizedSize The utilized size of the memory pool. utilizedSize is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3123, "doc_id": 3123, "filename": "api/struct_c_upti___activity_memory4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memory4", "display_name": "CUpti_ActivityMemory4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memory4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3124, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool", "display_name": "CUpti_ActivityMemoryPool", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv424CUpti_ActivityMemoryPool", "priority": 1, "content": "struct  CUpti_ActivityMemoryPool The activity record for memory pool. This activity record represents a memory pool creation, destruction and trimming (CUPTI_ACTIVITY_KIND_MEMORY_POOL). This activity record provides separate records for memory pool creation, destruction and trimming operations. This allows to correlate the corresponding driver and runtime API activity record with the memory pool operation. Public Members", "keywords": []}, {"id": 3125, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::address", "display_name": "CUpti_ActivityMemoryPool::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool7addressE", "priority": 1, "content": "uint64_t  address The virtual address of the allocation.", "keywords": []}, {"id": 3126, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::correlationId", "display_name": "CUpti_ActivityMemoryPool::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory pool operation. Each memory pool operation is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory operation.", "keywords": []}, {"id": 3127, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::deviceId", "display_name": "CUpti_ActivityMemoryPool::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory pool is created.", "keywords": []}, {"id": 3128, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::kind", "display_name": "CUpti_ActivityMemoryPool::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMORY_POOL.", "keywords": []}, {"id": 3129, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::memoryPoolOperationType", "display_name": "CUpti_ActivityMemoryPool::memoryPoolOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool23memoryPoolOperationTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolOperationType  memoryPoolOperationType The memory operation requested by the user, CUpti_ActivityMemoryPoolOperationType .", "keywords": []}, {"id": 3130, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::memoryPoolType", "display_name": "CUpti_ActivityMemoryPool::memoryPoolType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool14memoryPoolTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolType  memoryPoolType The type of the memory pool, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3131, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::minBytesToKeep", "display_name": "CUpti_ActivityMemoryPool::minBytesToKeep", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool14minBytesToKeepE", "priority": 1, "content": "size_t  minBytesToKeep The minimum bytes to keep of the memory pool. minBytesToKeep is valid for CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED, CUpti_ActivityMemoryPoolOperationType", "keywords": []}, {"id": 3132, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::processId", "display_name": "CUpti_ActivityMemoryPool::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool9processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3133, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::releaseThreshold", "display_name": "CUpti_ActivityMemoryPool::releaseThreshold", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool16releaseThresholdE", "priority": 1, "content": "uint64_t  releaseThreshold The release threshold of the memory pool. releaseThreshold is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3134, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::size", "display_name": "CUpti_ActivityMemoryPool::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool4sizeE", "priority": 1, "content": "uint64_t  size The size of the memory pool operation in bytes. size is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3135, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool::timestamp", "display_name": "CUpti_ActivityMemoryPool::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "_CPPv4N24CUpti_ActivityMemoryPool9timestampE", "priority": 1, "content": "uint64_t  timestamp The start timestamp for the memory operation, in ns.", "keywords": []}, {"id": 3136, "doc_id": 3136, "filename": "api/struct_c_upti___activity_memory_pool.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memory_pool", "display_name": "CUpti_ActivityMemoryPool", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memory_pool", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3137, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2", "display_name": "CUpti_ActivityMemoryPool2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv425CUpti_ActivityMemoryPool2", "priority": 1, "content": "struct  CUpti_ActivityMemoryPool2 The activity record for memory pool. This activity record represents a memory pool creation, destruction and trimming (CUPTI_ACTIVITY_KIND_MEMORY_POOL). This activity record provides separate records for memory pool creation, destruction and trimming operations. This allows to correlate the corresponding driver and runtime API activity record with the memory pool operation. Public Members", "keywords": []}, {"id": 3138, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::address", "display_name": "CUpti_ActivityMemoryPool2::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool27addressE", "priority": 1, "content": "uint64_t  address The virtual address of the allocation.", "keywords": []}, {"id": 3139, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::correlationId", "display_name": "CUpti_ActivityMemoryPool2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory pool operation. Each memory pool operation is assigned a unique correlation ID that is identical to the correlation ID in the driver and runtime API activity record that launched the memory operation.", "keywords": []}, {"id": 3140, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::deviceId", "display_name": "CUpti_ActivityMemoryPool2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory pool is created.", "keywords": []}, {"id": 3141, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::kind", "display_name": "CUpti_ActivityMemoryPool2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMORY_POOL.", "keywords": []}, {"id": 3142, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::memoryPoolOperationType", "display_name": "CUpti_ActivityMemoryPool2::memoryPoolOperationType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool223memoryPoolOperationTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolOperationType  memoryPoolOperationType The memory operation requested by the user, CUpti_ActivityMemoryPoolOperationType .", "keywords": []}, {"id": 3143, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::memoryPoolType", "display_name": "CUpti_ActivityMemoryPool2::memoryPoolType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool214memoryPoolTypeE", "priority": 1, "content": "CUpti_ActivityMemoryPoolType  memoryPoolType The type of the memory pool, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3144, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::minBytesToKeep", "display_name": "CUpti_ActivityMemoryPool2::minBytesToKeep", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool214minBytesToKeepE", "priority": 1, "content": "size_t  minBytesToKeep The minimum bytes to keep of the memory pool. minBytesToKeep is valid for CUPTI_ACTIVITY_MEMORY_POOL_OPERATION_TYPE_TRIMMED, CUpti_ActivityMemoryPoolOperationType", "keywords": []}, {"id": 3145, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::processId", "display_name": "CUpti_ActivityMemoryPool2::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool29processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3146, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::releaseThreshold", "display_name": "CUpti_ActivityMemoryPool2::releaseThreshold", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool216releaseThresholdE", "priority": 1, "content": "uint64_t  releaseThreshold The release threshold of the memory pool. releaseThreshold is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3147, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::size", "display_name": "CUpti_ActivityMemoryPool2::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool24sizeE", "priority": 1, "content": "uint64_t  size The size of the memory pool operation in bytes. size is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3148, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::timestamp", "display_name": "CUpti_ActivityMemoryPool2::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool29timestampE", "priority": 1, "content": "uint64_t  timestamp The start timestamp for the memory operation, in ns.", "keywords": []}, {"id": 3149, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemoryPool2::utilizedSize", "display_name": "CUpti_ActivityMemoryPool2::utilizedSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "_CPPv4N25CUpti_ActivityMemoryPool212utilizedSizeE", "priority": 1, "content": "uint64_t  utilizedSize The utilized size of the memory pool. utilizedSize is valid for CUPTI_ACTIVITY_MEMORY_POOL_TYPE_LOCAL, CUpti_ActivityMemoryPoolType .", "keywords": []}, {"id": 3150, "doc_id": 3150, "filename": "api/struct_c_upti___activity_memory_pool2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memory_pool2", "display_name": "CUpti_ActivityMemoryPool2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memory_pool2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3151, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset", "display_name": "CUpti_ActivityMemset", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv420CUpti_ActivityMemset", "priority": 1, "content": "struct  CUpti_ActivityMemset The activity record for memset. (deprecated) This activity record represents a memory set operation (CUPTI_ACTIVITY_KIND_MEMSET). Public Members", "keywords": []}, {"id": 3152, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::bytes", "display_name": "CUpti_ActivityMemset::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset5bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes being set by the memory set.", "keywords": []}, {"id": 3153, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::contextId", "display_name": "CUpti_ActivityMemset::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory set is occurring.", "keywords": []}, {"id": 3154, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::correlationId", "display_name": "CUpti_ActivityMemset::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory set. Each memory set is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory set.", "keywords": []}, {"id": 3155, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::deviceId", "display_name": "CUpti_ActivityMemset::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory set is occurring.", "keywords": []}, {"id": 3156, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::end", "display_name": "CUpti_ActivityMemset::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3157, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::flags", "display_name": "CUpti_ActivityMemset::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset5flagsE", "priority": 1, "content": "uint16_t  flags The flags associated with the memset. CUpti_ActivityFlag", "keywords": []}, {"id": 3158, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::kind", "display_name": "CUpti_ActivityMemset::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMSET.", "keywords": []}, {"id": 3159, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::memoryKind", "display_name": "CUpti_ActivityMemset::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset10memoryKindE", "priority": 1, "content": "uint16_t  memoryKind The memory kind of the memory set. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3160, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::pad", "display_name": "CUpti_ActivityMemset::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3161, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::reserved0", "display_name": "CUpti_ActivityMemset::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset9reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3162, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::start", "display_name": "CUpti_ActivityMemset::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3163, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::streamId", "display_name": "CUpti_ActivityMemset::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset8streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory set is occurring.", "keywords": []}, {"id": 3164, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset::value", "display_name": "CUpti_ActivityMemset::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset", "anchor": "_CPPv4N20CUpti_ActivityMemset5valueE", "priority": 1, "content": "uint32_t  value The value being assigned to memory by the memory set.", "keywords": []}, {"id": 3165, "doc_id": 3165, "filename": "api/struct_c_upti___activity_memset.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memset", "display_name": "CUpti_ActivityMemset", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memset", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3166, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2", "display_name": "CUpti_ActivityMemset2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv421CUpti_ActivityMemset2", "priority": 1, "content": "struct  CUpti_ActivityMemset2 The activity record for memset. (deprecated in CUDA 11.1) This activity record represents a memory set operation (CUPTI_ACTIVITY_KIND_MEMSET). Public Members", "keywords": []}, {"id": 3167, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::bytes", "display_name": "CUpti_ActivityMemset2::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset25bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes being set by the memory set.", "keywords": []}, {"id": 3168, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::contextId", "display_name": "CUpti_ActivityMemset2::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset29contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory set is occurring.", "keywords": []}, {"id": 3169, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::correlationId", "display_name": "CUpti_ActivityMemset2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory set. Each memory set is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory set.", "keywords": []}, {"id": 3170, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::deviceId", "display_name": "CUpti_ActivityMemset2::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset28deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory set is occurring.", "keywords": []}, {"id": 3171, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::end", "display_name": "CUpti_ActivityMemset2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset23endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3172, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::flags", "display_name": "CUpti_ActivityMemset2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset25flagsE", "priority": 1, "content": "uint16_t  flags The flags associated with the memset. CUpti_ActivityFlag", "keywords": []}, {"id": 3173, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::graphNodeId", "display_name": "CUpti_ActivityMemset2::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset211graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed this memset through graph launch. This field will be 0 if the memset is not executed through graph launch.", "keywords": []}, {"id": 3174, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::kind", "display_name": "CUpti_ActivityMemset2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMSET.", "keywords": []}, {"id": 3175, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::memoryKind", "display_name": "CUpti_ActivityMemset2::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset210memoryKindE", "priority": 1, "content": "uint16_t  memoryKind The memory kind of the memory set. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3176, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::pad", "display_name": "CUpti_ActivityMemset2::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset23padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3177, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::reserved0", "display_name": "CUpti_ActivityMemset2::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset29reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3178, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::start", "display_name": "CUpti_ActivityMemset2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset25startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3179, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::streamId", "display_name": "CUpti_ActivityMemset2::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset28streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory set is occurring.", "keywords": []}, {"id": 3180, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset2::value", "display_name": "CUpti_ActivityMemset2::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset2", "anchor": "_CPPv4N21CUpti_ActivityMemset25valueE", "priority": 1, "content": "uint32_t  value The value being assigned to memory by the memory set.", "keywords": []}, {"id": 3181, "doc_id": 3181, "filename": "api/struct_c_upti___activity_memset2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memset2", "display_name": "CUpti_ActivityMemset2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memset2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3182, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3", "display_name": "CUpti_ActivityMemset3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv421CUpti_ActivityMemset3", "priority": 1, "content": "struct  CUpti_ActivityMemset3 The activity record for memset. (deprecated in CUDA 11.6) This activity record represents a memory set operation (CUPTI_ACTIVITY_KIND_MEMSET). Public Members", "keywords": []}, {"id": 3183, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::bytes", "display_name": "CUpti_ActivityMemset3::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset35bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes being set by the memory set.", "keywords": []}, {"id": 3184, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::contextId", "display_name": "CUpti_ActivityMemset3::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset39contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory set is occurring.", "keywords": []}, {"id": 3185, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::correlationId", "display_name": "CUpti_ActivityMemset3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory set. Each memory set is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory set.", "keywords": []}, {"id": 3186, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::deviceId", "display_name": "CUpti_ActivityMemset3::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset38deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory set is occurring.", "keywords": []}, {"id": 3187, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::end", "display_name": "CUpti_ActivityMemset3::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset33endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3188, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::flags", "display_name": "CUpti_ActivityMemset3::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset35flagsE", "priority": 1, "content": "uint16_t  flags The flags associated with the memset. CUpti_ActivityFlag", "keywords": []}, {"id": 3189, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::graphId", "display_name": "CUpti_ActivityMemset3::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset37graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that executed this memset through graph launch. This field will be 0 if the memset is not executed through graph launch.", "keywords": []}, {"id": 3190, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::graphNodeId", "display_name": "CUpti_ActivityMemset3::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset311graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed this memset through graph launch. This field will be 0 if the memset is not executed through graph launch.", "keywords": []}, {"id": 3191, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::kind", "display_name": "CUpti_ActivityMemset3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMSET.", "keywords": []}, {"id": 3192, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::memoryKind", "display_name": "CUpti_ActivityMemset3::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset310memoryKindE", "priority": 1, "content": "uint16_t  memoryKind The memory kind of the memory set. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3193, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::pad", "display_name": "CUpti_ActivityMemset3::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset33padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3194, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::padding", "display_name": "CUpti_ActivityMemset3::padding", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset37paddingE", "priority": 1, "content": "uint32_t  padding Undefined. Reserved for internal use.", "keywords": []}, {"id": 3195, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::reserved0", "display_name": "CUpti_ActivityMemset3::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset39reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3196, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::start", "display_name": "CUpti_ActivityMemset3::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset35startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3197, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::streamId", "display_name": "CUpti_ActivityMemset3::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset38streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory set is occurring.", "keywords": []}, {"id": 3198, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset3::value", "display_name": "CUpti_ActivityMemset3::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset3", "anchor": "_CPPv4N21CUpti_ActivityMemset35valueE", "priority": 1, "content": "uint32_t  value The value being assigned to memory by the memory set.", "keywords": []}, {"id": 3199, "doc_id": 3199, "filename": "api/struct_c_upti___activity_memset3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memset3", "display_name": "CUpti_ActivityMemset3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memset3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3200, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4", "display_name": "CUpti_ActivityMemset4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv421CUpti_ActivityMemset4", "priority": 1, "content": "struct  CUpti_ActivityMemset4 The activity record for memset. This activity record represents a memory set operation (CUPTI_ACTIVITY_KIND_MEMSET). Public Members", "keywords": []}, {"id": 3201, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::bytes", "display_name": "CUpti_ActivityMemset4::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset45bytesE", "priority": 1, "content": "uint64_t  bytes The number of bytes being set by the memory set.", "keywords": []}, {"id": 3202, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::channelID", "display_name": "CUpti_ActivityMemset4::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset49channelIDE", "priority": 1, "content": "uint32_t  channelID The ID of the HW channel on which the memory set is occurring.", "keywords": []}, {"id": 3203, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::channelType", "display_name": "CUpti_ActivityMemset4::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset411channelTypeE", "priority": 1, "content": "CUpti_ChannelType  channelType The type of the channel.", "keywords": []}, {"id": 3204, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::contextId", "display_name": "CUpti_ActivityMemset4::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset49contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the memory set is occurring.", "keywords": []}, {"id": 3205, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::correlationId", "display_name": "CUpti_ActivityMemset4::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset413correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the memory set. Each memory set is assigned a unique correlation ID that is identical to the correlation ID in the driver API activity record that launched the memory set.", "keywords": []}, {"id": 3206, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::deviceId", "display_name": "CUpti_ActivityMemset4::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset48deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device where the memory set is occurring.", "keywords": []}, {"id": 3207, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::end", "display_name": "CUpti_ActivityMemset4::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset43endE", "priority": 1, "content": "uint64_t  end The end timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3208, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::flags", "display_name": "CUpti_ActivityMemset4::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset45flagsE", "priority": 1, "content": "uint16_t  flags The flags associated with the memset. CUpti_ActivityFlag", "keywords": []}, {"id": 3209, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::graphId", "display_name": "CUpti_ActivityMemset4::graphId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset47graphIdE", "priority": 1, "content": "uint32_t  graphId The unique ID of the graph that executed this memset through graph launch. This field will be 0 if the memset is not executed through graph launch.", "keywords": []}, {"id": 3210, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::graphNodeId", "display_name": "CUpti_ActivityMemset4::graphNodeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset411graphNodeIdE", "priority": 1, "content": "uint64_t  graphNodeId The unique ID of the graph node that executed this memset through graph launch. This field will be 0 if the memset is not executed through graph launch.", "keywords": []}, {"id": 3211, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::kind", "display_name": "CUpti_ActivityMemset4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MEMSET.", "keywords": []}, {"id": 3212, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::memoryKind", "display_name": "CUpti_ActivityMemset4::memoryKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset410memoryKindE", "priority": 1, "content": "uint16_t  memoryKind The memory kind of the memory set. CUpti_ActivityMemoryKind", "keywords": []}, {"id": 3213, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::pad", "display_name": "CUpti_ActivityMemset4::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset43padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3214, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::pad2", "display_name": "CUpti_ActivityMemset4::pad2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset44pad2E", "priority": 1, "content": "uint32_t  pad2 Undefined. Reserved for internal use", "keywords": []}, {"id": 3215, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::reserved0", "display_name": "CUpti_ActivityMemset4::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset49reserved0E", "priority": 1, "content": "void  * reserved0 Undefined. Reserved for internal use.", "keywords": []}, {"id": 3216, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::start", "display_name": "CUpti_ActivityMemset4::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset45startE", "priority": 1, "content": "uint64_t  start The start timestamp for the memory set, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the memory set.", "keywords": []}, {"id": 3217, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::streamId", "display_name": "CUpti_ActivityMemset4::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset48streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream where the memory set is occurring.", "keywords": []}, {"id": 3218, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "cpp", "name": "CUpti_ActivityMemset4::value", "display_name": "CUpti_ActivityMemset4::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_memset4", "anchor": "_CPPv4N21CUpti_ActivityMemset45valueE", "priority": 1, "content": "uint32_t  value The value being assigned to memory by the memory set.", "keywords": []}, {"id": 3219, "doc_id": 3219, "filename": "api/struct_c_upti___activity_memset4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_memset4", "display_name": "CUpti_ActivityMemset4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_memset4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3220, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric", "display_name": "CUpti_ActivityMetric", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv420CUpti_ActivityMetric", "priority": 1, "content": "struct  CUpti_ActivityMetric The activity record for a CUPTI metric. This activity record represents the collection of a CUPTI metric value (CUPTI_ACTIVITY_KIND_METRIC). This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profile frameworks built on top of CUPTI that collect metric data may choose to use this type to store the collected metric data. Public Members", "keywords": []}, {"id": 3221, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric::correlationId", "display_name": "CUpti_ActivityMetric::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv4N20CUpti_ActivityMetric13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the metric. Use of this ID is user-defined, but typically this ID value will equal the correlation ID of the kernel for which the metric was gathered.", "keywords": []}, {"id": 3222, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric::flags", "display_name": "CUpti_ActivityMetric::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv4N20CUpti_ActivityMetric5flagsE", "priority": 1, "content": "uint8_t  flags The properties of this metric. CUpti_ActivityFlag", "keywords": []}, {"id": 3223, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric::id", "display_name": "CUpti_ActivityMetric::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv4N20CUpti_ActivityMetric2idE", "priority": 1, "content": "CUpti_MetricID  id The metric ID.", "keywords": []}, {"id": 3224, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric::kind", "display_name": "CUpti_ActivityMetric::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv4N20CUpti_ActivityMetric4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_METRIC.", "keywords": []}, {"id": 3225, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric::pad", "display_name": "CUpti_ActivityMetric::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv4N20CUpti_ActivityMetric3padE", "priority": 1, "content": "uint8_t  pad [ 3 ] Undefined. Reserved for internal use.", "keywords": []}, {"id": 3226, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "cpp", "name": "CUpti_ActivityMetric::value", "display_name": "CUpti_ActivityMetric::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric", "anchor": "_CPPv4N20CUpti_ActivityMetric5valueE", "priority": 1, "content": "CUpti_MetricValue  value The metric value.", "keywords": []}, {"id": 3227, "doc_id": 3227, "filename": "api/struct_c_upti___activity_metric.html", "domain_name": "std", "name": "api/struct_c_upti___activity_metric", "display_name": "CUpti_ActivityMetric", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_metric", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3228, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance", "display_name": "CUpti_ActivityMetricInstance", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv428CUpti_ActivityMetricInstance", "priority": 1, "content": "struct  CUpti_ActivityMetricInstance The activity record for a CUPTI metric with instance information. This activity record represents a CUPTI metric value for a specific metric domain instance (CUPTI_ACTIVITY_KIND_METRIC_INSTANCE). This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profile frameworks built on top of CUPTI that collect metric data may choose to use this type to store the collected metric data. This activity record should be used when metric domain instance information needs to be associated with the metric. Public Members", "keywords": []}, {"id": 3229, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::correlationId", "display_name": "CUpti_ActivityMetricInstance::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the metric. Use of this ID is user-defined, but typically this ID value will equal the correlation ID of the kernel for which the metric was gathered.", "keywords": []}, {"id": 3230, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::flags", "display_name": "CUpti_ActivityMetricInstance::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance5flagsE", "priority": 1, "content": "uint8_t  flags The properties of this metric. CUpti_ActivityFlag", "keywords": []}, {"id": 3231, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::id", "display_name": "CUpti_ActivityMetricInstance::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance2idE", "priority": 1, "content": "CUpti_MetricID  id The metric ID.", "keywords": []}, {"id": 3232, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::instance", "display_name": "CUpti_ActivityMetricInstance::instance", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance8instanceE", "priority": 1, "content": "uint32_t  instance The metric domain instance.", "keywords": []}, {"id": 3233, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::kind", "display_name": "CUpti_ActivityMetricInstance::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_METRIC_INSTANCE.", "keywords": []}, {"id": 3234, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::pad", "display_name": "CUpti_ActivityMetricInstance::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance3padE", "priority": 1, "content": "uint8_t  pad [ 7 ] Undefined. Reserved for internal use.", "keywords": []}, {"id": 3235, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "cpp", "name": "CUpti_ActivityMetricInstance::value", "display_name": "CUpti_ActivityMetricInstance::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "_CPPv4N28CUpti_ActivityMetricInstance5valueE", "priority": 1, "content": "CUpti_MetricValue  value The metric value.", "keywords": []}, {"id": 3236, "doc_id": 3236, "filename": "api/struct_c_upti___activity_metric_instance.html", "domain_name": "std", "name": "api/struct_c_upti___activity_metric_instance", "display_name": "CUpti_ActivityMetricInstance", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_metric_instance", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3237, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "cpp", "name": "CUpti_ActivityModule", "display_name": "CUpti_ActivityModule", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_module", "anchor": "_CPPv420CUpti_ActivityModule", "priority": 1, "content": "struct  CUpti_ActivityModule The activity record for a CUDA module. This activity record represents a CUDA module (CUPTI_ACTIVITY_KIND_MODULE). This activity record kind is not produced by the activity API but is included for completeness and ease-of-use. Profile frameworks built on top of CUPTI that collect module data from the module callback may choose to use this type to store the collected module data. Public Members", "keywords": []}, {"id": 3238, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "cpp", "name": "CUpti_ActivityModule::contextId", "display_name": "CUpti_ActivityModule::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_module", "anchor": "_CPPv4N20CUpti_ActivityModule9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the module is loaded.", "keywords": []}, {"id": 3239, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "cpp", "name": "CUpti_ActivityModule::cubin", "display_name": "CUpti_ActivityModule::cubin", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_module", "anchor": "_CPPv4N20CUpti_ActivityModule5cubinE", "priority": 1, "content": "const  void  * cubin The pointer to cubin.", "keywords": []}, {"id": 3240, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "cpp", "name": "CUpti_ActivityModule::cubinSize", "display_name": "CUpti_ActivityModule::cubinSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_module", "anchor": "_CPPv4N20CUpti_ActivityModule9cubinSizeE", "priority": 1, "content": "uint32_t  cubinSize The cubin size.", "keywords": []}, {"id": 3241, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "cpp", "name": "CUpti_ActivityModule::id", "display_name": "CUpti_ActivityModule::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_module", "anchor": "_CPPv4N20CUpti_ActivityModule2idE", "priority": 1, "content": "uint32_t  id The module ID.", "keywords": []}, {"id": 3242, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "cpp", "name": "CUpti_ActivityModule::kind", "display_name": "CUpti_ActivityModule::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_module", "anchor": "_CPPv4N20CUpti_ActivityModule4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_MODULE.", "keywords": []}, {"id": 3243, "doc_id": 3243, "filename": "api/struct_c_upti___activity_module.html", "domain_name": "std", "name": "api/struct_c_upti___activity_module", "display_name": "CUpti_ActivityModule", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_module", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3244, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "cpp", "name": "CUpti_ActivityName", "display_name": "CUpti_ActivityName", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_name", "anchor": "_CPPv418CUpti_ActivityName", "priority": 1, "content": "struct  CUpti_ActivityName The activity record providing a name. This activity record provides a name for a device, context, thread, etc. and other resource naming done via NVTX APIs (CUPTI_ACTIVITY_KIND_NAME). Public Members", "keywords": []}, {"id": 3245, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "cpp", "name": "CUpti_ActivityName::kind", "display_name": "CUpti_ActivityName::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_name", "anchor": "_CPPv4N18CUpti_ActivityName4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_NAME.", "keywords": []}, {"id": 3246, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "cpp", "name": "CUpti_ActivityName::name", "display_name": "CUpti_ActivityName::name", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_name", "anchor": "_CPPv4N18CUpti_ActivityName4nameE", "priority": 1, "content": "const  char  * name The name.", "keywords": []}, {"id": 3247, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "cpp", "name": "CUpti_ActivityName::objectId", "display_name": "CUpti_ActivityName::objectId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_name", "anchor": "_CPPv4N18CUpti_ActivityName8objectIdE", "priority": 1, "content": "CUpti_ActivityObjectKindId  objectId The identifier for the activity object. \u2018objectKind\u2019 indicates which ID is valid for this record.", "keywords": []}, {"id": 3248, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "cpp", "name": "CUpti_ActivityName::objectKind", "display_name": "CUpti_ActivityName::objectKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_name", "anchor": "_CPPv4N18CUpti_ActivityName10objectKindE", "priority": 1, "content": "CUpti_ActivityObjectKind  objectKind The kind of activity object being named.", "keywords": []}, {"id": 3249, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "cpp", "name": "CUpti_ActivityName::pad", "display_name": "CUpti_ActivityName::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_name", "anchor": "_CPPv4N18CUpti_ActivityName3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3250, "doc_id": 3250, "filename": "api/struct_c_upti___activity_name.html", "domain_name": "std", "name": "api/struct_c_upti___activity_name", "display_name": "CUpti_ActivityName", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_name", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3251, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink", "display_name": "CUpti_ActivityNvLink", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv420CUpti_ActivityNvLink", "priority": 1, "content": "struct  CUpti_ActivityNvLink NVLink information. (deprecated in CUDA 9.0) This structure gives capabilities of each logical NVLink connection between two devices, gpu&lt;-&gt;gpu or gpu&lt;-&gt;CPU which can be used to understand the topology. NVLink information are now reported using the CUpti_ActivityNvLink2 activity record. Public Members", "keywords": []}, {"id": 3252, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::bandwidth", "display_name": "CUpti_ActivityNvLink::bandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink9bandwidthE", "priority": 1, "content": "uint64_t  bandwidth Bandwidth of NVLink in kbytes/sec.", "keywords": []}, {"id": 3253, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::domainId", "display_name": "CUpti_ActivityNvLink::domainId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink8domainIdE", "priority": 1, "content": "uint32_t  domainId Domain ID of NPU. On Linux, this can be queried using lspci.", "keywords": []}, {"id": 3254, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::flag", "display_name": "CUpti_ActivityNvLink::flag", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink4flagE", "priority": 1, "content": "uint32_t  flag Flag gives capabilities of the link. CUpti_LinkFlag", "keywords": []}, {"id": 3255, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::idDev0", "display_name": "CUpti_ActivityNvLink::idDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink6idDev0E", "priority": 1, "content": "union  CUpti_ActivityNvLink :: [anonymous]  idDev0 If typeDev0 is CUPTI_DEV_TYPE_GPU, UUID for device 0. CUpti_ActivityDevice5 . If typeDev0 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3256, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::idDev1", "display_name": "CUpti_ActivityNvLink::idDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink6idDev1E", "priority": 1, "content": "union  CUpti_ActivityNvLink :: [anonymous]  idDev1 If typeDev1 is CUPTI_DEV_TYPE_GPU, UUID for device 1. CUpti_ActivityDevice5 . If typeDev1 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3257, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::index", "display_name": "CUpti_ActivityNvLink::index", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink5indexE", "priority": 1, "content": "uint32_t  index Index of the NPU. First index will always be zero.", "keywords": []}, {"id": 3258, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::kind", "display_name": "CUpti_ActivityNvLink::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_NVLINK.", "keywords": []}, {"id": 3259, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::nvlinkVersion", "display_name": "CUpti_ActivityNvLink::nvlinkVersion", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink13nvlinkVersionE", "priority": 1, "content": "uint32_t  nvlinkVersion NVLink version.", "keywords": []}, {"id": 3260, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::physicalNvLinkCount", "display_name": "CUpti_ActivityNvLink::physicalNvLinkCount", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink19physicalNvLinkCountE", "priority": 1, "content": "uint32_t  physicalNvLinkCount Number of physical NVLinks present between two devices.", "keywords": []}, {"id": 3261, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::portDev0", "display_name": "CUpti_ActivityNvLink::portDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink8portDev0E", "priority": 1, "content": "int8_t  portDev0 [ 4 ] Port numbers for maximum 4 NVLinks connected to device 0. If typeDev0 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3262, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::portDev1", "display_name": "CUpti_ActivityNvLink::portDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink8portDev1E", "priority": 1, "content": "int8_t  portDev1 [ 4 ] Port numbers for maximum 4 NVLinks connected to device 1. If typeDev1 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3263, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::typeDev0", "display_name": "CUpti_ActivityNvLink::typeDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink8typeDev0E", "priority": 1, "content": "CUpti_DevType  typeDev0 Type of device 0 CUpti_DevType .", "keywords": []}, {"id": 3264, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink::typeDev1", "display_name": "CUpti_ActivityNvLink::typeDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "_CPPv4N20CUpti_ActivityNvLink8typeDev1E", "priority": 1, "content": "CUpti_DevType  typeDev1 Type of device 1 CUpti_DevType .", "keywords": []}, {"id": 3265, "doc_id": 3265, "filename": "api/struct_c_upti___activity_nv_link.html", "domain_name": "std", "name": "api/struct_c_upti___activity_nv_link", "display_name": "CUpti_ActivityNvLink", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_nv_link", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3266, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2", "display_name": "CUpti_ActivityNvLink2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv421CUpti_ActivityNvLink2", "priority": 1, "content": "struct  CUpti_ActivityNvLink2 NVLink information. (deprecated in CUDA 10.0) This structure gives capabilities of each logical NVLink connection between two devices, gpu&lt;-&gt;gpu or gpu&lt;-&gt;CPU which can be used to understand the topology. NvLink information are now reported using the CUpti_ActivityNvLink4 activity record. Public Members", "keywords": []}, {"id": 3267, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::bandwidth", "display_name": "CUpti_ActivityNvLink2::bandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink29bandwidthE", "priority": 1, "content": "uint64_t  bandwidth Bandwidth of NVLink in kbytes/sec.", "keywords": []}, {"id": 3268, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::domainId", "display_name": "CUpti_ActivityNvLink2::domainId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink28domainIdE", "priority": 1, "content": "uint32_t  domainId Domain ID of NPU. On Linux, this can be queried using lspci.", "keywords": []}, {"id": 3269, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::flag", "display_name": "CUpti_ActivityNvLink2::flag", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink24flagE", "priority": 1, "content": "uint32_t  flag Flag gives capabilities of the link. CUpti_LinkFlag", "keywords": []}, {"id": 3270, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::idDev0", "display_name": "CUpti_ActivityNvLink2::idDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink26idDev0E", "priority": 1, "content": "union  CUpti_ActivityNvLink2 :: [anonymous]  idDev0 If typeDev0 is CUPTI_DEV_TYPE_GPU, UUID for device 0. CUpti_ActivityDevice5 . If typeDev0 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3271, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::idDev1", "display_name": "CUpti_ActivityNvLink2::idDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink26idDev1E", "priority": 1, "content": "union  CUpti_ActivityNvLink2 :: [anonymous]  idDev1 If typeDev1 is CUPTI_DEV_TYPE_GPU, UUID for device 1. CUpti_ActivityDevice5 . If typeDev1 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3272, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::index", "display_name": "CUpti_ActivityNvLink2::index", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink25indexE", "priority": 1, "content": "uint32_t  index Index of the NPU. First index will always be zero.", "keywords": []}, {"id": 3273, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::kind", "display_name": "CUpti_ActivityNvLink2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_NVLINK.", "keywords": []}, {"id": 3274, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::nvlinkVersion", "display_name": "CUpti_ActivityNvLink2::nvlinkVersion", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink213nvlinkVersionE", "priority": 1, "content": "uint32_t  nvlinkVersion NvLink version.", "keywords": []}, {"id": 3275, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::physicalNvLinkCount", "display_name": "CUpti_ActivityNvLink2::physicalNvLinkCount", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink219physicalNvLinkCountE", "priority": 1, "content": "uint32_t  physicalNvLinkCount Number of physical NVLinks present between two devices.", "keywords": []}, {"id": 3276, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::portDev0", "display_name": "CUpti_ActivityNvLink2::portDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink28portDev0E", "priority": 1, "content": "int8_t  portDev0 [ CUPTI_MAX_NVLINK_PORTS ] Port numbers for maximum 16 NVLinks connected to device 0. If typeDev0 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3277, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::portDev1", "display_name": "CUpti_ActivityNvLink2::portDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink28portDev1E", "priority": 1, "content": "int8_t  portDev1 [ CUPTI_MAX_NVLINK_PORTS ] Port numbers for maximum 16 NVLinks connected to device 1. If typeDev1 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3278, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::typeDev0", "display_name": "CUpti_ActivityNvLink2::typeDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink28typeDev0E", "priority": 1, "content": "CUpti_DevType  typeDev0 Type of device 0 CUpti_DevType .", "keywords": []}, {"id": 3279, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink2::typeDev1", "display_name": "CUpti_ActivityNvLink2::typeDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "_CPPv4N21CUpti_ActivityNvLink28typeDev1E", "priority": 1, "content": "CUpti_DevType  typeDev1 Type of device 1 CUpti_DevType .", "keywords": []}, {"id": 3280, "doc_id": 3280, "filename": "api/struct_c_upti___activity_nv_link2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_nv_link2", "display_name": "CUpti_ActivityNvLink2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_nv_link2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3281, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3", "display_name": "CUpti_ActivityNvLink3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv421CUpti_ActivityNvLink3", "priority": 1, "content": "struct  CUpti_ActivityNvLink3 NVLink information. This structure gives capabilities of each logical NVLink connection between two devices, gpu&lt;-&gt;gpu or gpu&lt;-&gt;CPU which can be used to understand the topology. NvLink information are now reported using the CUpti_ActivityNvLink4 activity record. Public Members", "keywords": []}, {"id": 3282, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::bandwidth", "display_name": "CUpti_ActivityNvLink3::bandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink39bandwidthE", "priority": 1, "content": "uint64_t  bandwidth Bandwidth of NVLink in kbytes/sec.", "keywords": []}, {"id": 3283, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::domainId", "display_name": "CUpti_ActivityNvLink3::domainId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink38domainIdE", "priority": 1, "content": "uint32_t  domainId Domain ID of NPU. On Linux, this can be queried using lspci.", "keywords": []}, {"id": 3284, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::flag", "display_name": "CUpti_ActivityNvLink3::flag", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink34flagE", "priority": 1, "content": "uint32_t  flag Flag gives capabilities of the link. CUpti_LinkFlag", "keywords": []}, {"id": 3285, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::idDev0", "display_name": "CUpti_ActivityNvLink3::idDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink36idDev0E", "priority": 1, "content": "union  CUpti_ActivityNvLink3 :: [anonymous]  idDev0 If typeDev0 is CUPTI_DEV_TYPE_GPU, UUID for device 0. CUpti_ActivityDevice5 . If typeDev0 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3286, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::idDev1", "display_name": "CUpti_ActivityNvLink3::idDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink36idDev1E", "priority": 1, "content": "union  CUpti_ActivityNvLink3 :: [anonymous]  idDev1 If typeDev1 is CUPTI_DEV_TYPE_GPU, UUID for device 1. CUpti_ActivityDevice5 . If typeDev1 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3287, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::index", "display_name": "CUpti_ActivityNvLink3::index", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink35indexE", "priority": 1, "content": "uint32_t  index Index of the NPU. First index will always be zero.", "keywords": []}, {"id": 3288, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::kind", "display_name": "CUpti_ActivityNvLink3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_NVLINK.", "keywords": []}, {"id": 3289, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::nvlinkVersion", "display_name": "CUpti_ActivityNvLink3::nvlinkVersion", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink313nvlinkVersionE", "priority": 1, "content": "uint32_t  nvlinkVersion NvLink version.", "keywords": []}, {"id": 3290, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::nvswitchConnected", "display_name": "CUpti_ActivityNvLink3::nvswitchConnected", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink317nvswitchConnectedE", "priority": 1, "content": "uint8_t  nvswitchConnected NVSwitch is connected as an intermediate node.", "keywords": []}, {"id": 3291, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::pad", "display_name": "CUpti_ActivityNvLink3::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink33padE", "priority": 1, "content": "uint8_t  pad [ 7 ] Undefined. reserved for internal use", "keywords": []}, {"id": 3292, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::physicalNvLinkCount", "display_name": "CUpti_ActivityNvLink3::physicalNvLinkCount", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink319physicalNvLinkCountE", "priority": 1, "content": "uint32_t  physicalNvLinkCount Number of physical NVLinks present between two devices.", "keywords": []}, {"id": 3293, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::portDev0", "display_name": "CUpti_ActivityNvLink3::portDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink38portDev0E", "priority": 1, "content": "int8_t  portDev0 [ CUPTI_MAX_NVLINK_PORTS ] Port numbers for maximum 16 NVLinks connected to device 0. If typeDev0 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3294, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::portDev1", "display_name": "CUpti_ActivityNvLink3::portDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink38portDev1E", "priority": 1, "content": "int8_t  portDev1 [ CUPTI_MAX_NVLINK_PORTS ] Port numbers for maximum 16 NVLinks connected to device 1. If typeDev1 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3295, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::typeDev0", "display_name": "CUpti_ActivityNvLink3::typeDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink38typeDev0E", "priority": 1, "content": "CUpti_DevType  typeDev0 Type of device 0 CUpti_DevType .", "keywords": []}, {"id": 3296, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink3::typeDev1", "display_name": "CUpti_ActivityNvLink3::typeDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "_CPPv4N21CUpti_ActivityNvLink38typeDev1E", "priority": 1, "content": "CUpti_DevType  typeDev1 Type of device 1 CUpti_DevType .", "keywords": []}, {"id": 3297, "doc_id": 3297, "filename": "api/struct_c_upti___activity_nv_link3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_nv_link3", "display_name": "CUpti_ActivityNvLink3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_nv_link3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3298, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4", "display_name": "CUpti_ActivityNvLink4", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv421CUpti_ActivityNvLink4", "priority": 1, "content": "struct  CUpti_ActivityNvLink4 NVLink information. This structure gives capabilities of each logical NVLink connection between two devices, gpu&lt;-&gt;gpu or gpu&lt;-&gt;CPU which can be used to understand the topology. Public Members", "keywords": []}, {"id": 3299, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::bandwidth", "display_name": "CUpti_ActivityNvLink4::bandwidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink49bandwidthE", "priority": 1, "content": "uint64_t  bandwidth Bandwidth of NVLink in kbytes/sec.", "keywords": []}, {"id": 3300, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::domainId", "display_name": "CUpti_ActivityNvLink4::domainId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink48domainIdE", "priority": 1, "content": "uint32_t  domainId Domain ID of NPU. On Linux, this can be queried using lspci.", "keywords": []}, {"id": 3301, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::flag", "display_name": "CUpti_ActivityNvLink4::flag", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink44flagE", "priority": 1, "content": "uint32_t  flag Flag gives capabilities of the link. CUpti_LinkFlag", "keywords": []}, {"id": 3302, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::idDev0", "display_name": "CUpti_ActivityNvLink4::idDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink46idDev0E", "priority": 1, "content": "union  CUpti_ActivityNvLink4 :: [anonymous]  idDev0 If typeDev0 is CUPTI_DEV_TYPE_GPU, UUID for device 0. CUpti_ActivityDevice5 . If typeDev0 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3303, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::idDev1", "display_name": "CUpti_ActivityNvLink4::idDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink46idDev1E", "priority": 1, "content": "union  CUpti_ActivityNvLink4 :: [anonymous]  idDev1 If typeDev1 is CUPTI_DEV_TYPE_GPU, UUID for device 1. CUpti_ActivityDevice5 . If typeDev1 is CUPTI_DEV_TYPE_NPU, struct npu for NPU.", "keywords": []}, {"id": 3304, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::index", "display_name": "CUpti_ActivityNvLink4::index", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink45indexE", "priority": 1, "content": "uint32_t  index Index of the NPU. First index will always be zero.", "keywords": []}, {"id": 3305, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::kind", "display_name": "CUpti_ActivityNvLink4::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink44kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_NVLINK.", "keywords": []}, {"id": 3306, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::nvlinkVersion", "display_name": "CUpti_ActivityNvLink4::nvlinkVersion", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink413nvlinkVersionE", "priority": 1, "content": "uint32_t  nvlinkVersion NvLink version.", "keywords": []}, {"id": 3307, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::nvswitchConnected", "display_name": "CUpti_ActivityNvLink4::nvswitchConnected", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink417nvswitchConnectedE", "priority": 1, "content": "uint8_t  nvswitchConnected NVSwitch is connected as an intermediate node.", "keywords": []}, {"id": 3308, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::pad", "display_name": "CUpti_ActivityNvLink4::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink43padE", "priority": 1, "content": "uint8_t  pad [ 7 ] Undefined. reserved for internal use", "keywords": []}, {"id": 3309, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::physicalNvLinkCount", "display_name": "CUpti_ActivityNvLink4::physicalNvLinkCount", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink419physicalNvLinkCountE", "priority": 1, "content": "uint32_t  physicalNvLinkCount Number of physical NVLinks present between two devices.", "keywords": []}, {"id": 3310, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::portDev0", "display_name": "CUpti_ActivityNvLink4::portDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink48portDev0E", "priority": 1, "content": "int8_t  portDev0 [ 32 ] Port numbers for maximum 32 NVLinks connected to device 0. If typeDev0 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3311, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::portDev1", "display_name": "CUpti_ActivityNvLink4::portDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink48portDev1E", "priority": 1, "content": "int8_t  portDev1 [ 32 ] Port numbers for maximum 32 NVLinks connected to device 1. If typeDev1 is CUPTI_DEV_TYPE_NPU, ignore this field. In case of invalid/unknown port number, this field will be set to value CUPTI_NVLINK_INVALID_PORT. This will be used to correlate the metric values to individual physical link and attribute traffic to the logical NVLink in the topology.", "keywords": []}, {"id": 3312, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::typeDev0", "display_name": "CUpti_ActivityNvLink4::typeDev0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink48typeDev0E", "priority": 1, "content": "CUpti_DevType  typeDev0 Type of device 0 CUpti_DevType .", "keywords": []}, {"id": 3313, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "cpp", "name": "CUpti_ActivityNvLink4::typeDev1", "display_name": "CUpti_ActivityNvLink4::typeDev1", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "_CPPv4N21CUpti_ActivityNvLink48typeDev1E", "priority": 1, "content": "CUpti_DevType  typeDev1 Type of device 1 CUpti_DevType .", "keywords": []}, {"id": 3314, "doc_id": 3314, "filename": "api/struct_c_upti___activity_nv_link4.html", "domain_name": "std", "name": "api/struct_c_upti___activity_nv_link4", "display_name": "CUpti_ActivityNvLink4", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_nv_link4", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3315, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc", "display_name": "CUpti_ActivityOpenAcc", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv421CUpti_ActivityOpenAcc", "priority": 1, "content": "struct  CUpti_ActivityOpenAcc The base activity record for OpenAcc records. The OpenACC activity API part uses a CUpti_ActivityOpenAcc as a generic representation for any OpenACC activity. The \u2018kind\u2019 field is used to determine the specific activity kind, and from that the CUpti_ActivityOpenAcc object can be cast to the specific OpenACC activity record type appropriate for that kind. Note that all OpenACC activity record types are padded and aligned to ensure that each member of the record is naturally aligned. CUpti_ActivityKind  Public Members", "keywords": []}, {"id": 3316, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::async", "display_name": "CUpti_ActivityOpenAcc::async", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc5asyncE", "priority": 1, "content": "uint64_t  async Value of async() clause of the corresponding directive.", "keywords": []}, {"id": 3317, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::asyncMap", "display_name": "CUpti_ActivityOpenAcc::asyncMap", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc8asyncMapE", "priority": 1, "content": "uint64_t  asyncMap Internal asynchronous queue number used.", "keywords": []}, {"id": 3318, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::cuContextId", "display_name": "CUpti_ActivityOpenAcc::cuContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc11cuContextIdE", "priority": 1, "content": "uint32_t  cuContextId CUDA context id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3319, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::cuDeviceId", "display_name": "CUpti_ActivityOpenAcc::cuDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc10cuDeviceIdE", "priority": 1, "content": "uint32_t  cuDeviceId CUDA device id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3320, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::cuProcessId", "display_name": "CUpti_ActivityOpenAcc::cuProcessId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc11cuProcessIdE", "priority": 1, "content": "uint32_t  cuProcessId The ID of the process where the OpenACC activity is executing.", "keywords": []}, {"id": 3321, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::cuStreamId", "display_name": "CUpti_ActivityOpenAcc::cuStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc10cuStreamIdE", "priority": 1, "content": "uint32_t  cuStreamId CUDA stream id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3322, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::cuThreadId", "display_name": "CUpti_ActivityOpenAcc::cuThreadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc10cuThreadIdE", "priority": 1, "content": "uint32_t  cuThreadId The ID of the thread where the OpenACC activity is executing.", "keywords": []}, {"id": 3323, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::deviceNumber", "display_name": "CUpti_ActivityOpenAcc::deviceNumber", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc12deviceNumberE", "priority": 1, "content": "uint32_t  deviceNumber Device number.", "keywords": []}, {"id": 3324, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::deviceType", "display_name": "CUpti_ActivityOpenAcc::deviceType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc10deviceTypeE", "priority": 1, "content": "uint32_t  deviceType Device type.", "keywords": []}, {"id": 3325, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::end", "display_name": "CUpti_ActivityOpenAcc::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc3endE", "priority": 1, "content": "uint64_t  end CUPTI end timestamp.", "keywords": []}, {"id": 3326, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::endLineNo", "display_name": "CUpti_ActivityOpenAcc::endLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc9endLineNoE", "priority": 1, "content": "uint32_t  endLineNo For an OpenACC construct, this contains the line number of the end of the construct. A zero value means the line number is not known.", "keywords": []}, {"id": 3327, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::eventKind", "display_name": "CUpti_ActivityOpenAcc::eventKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc9eventKindE", "priority": 1, "content": "CUpti_OpenAccEventKind  eventKind CUPTI OpenACC event kind (. CUpti_OpenAccEventKind )", "keywords": []}, {"id": 3328, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::externalId", "display_name": "CUpti_ActivityOpenAcc::externalId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc10externalIdE", "priority": 1, "content": "uint32_t  externalId The OpenACC correlation ID. Valid only if deviceType is acc_device_nvidia. If not 0, it uniquely identifies this record. It is identical to the externalId in the preceding external correlation record of type CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC.", "keywords": []}, {"id": 3329, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::funcEndLineNo", "display_name": "CUpti_ActivityOpenAcc::funcEndLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc13funcEndLineNoE", "priority": 1, "content": "uint32_t  funcEndLineNo The last line number of the function named in funcName. A zero value means the line number is not known.", "keywords": []}, {"id": 3330, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::funcLineNo", "display_name": "CUpti_ActivityOpenAcc::funcLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc10funcLineNoE", "priority": 1, "content": "uint32_t  funcLineNo The line number of the first line of the function named in funcName. A zero value means the line number is not known.", "keywords": []}, {"id": 3331, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::implicit", "display_name": "CUpti_ActivityOpenAcc::implicit", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc8implicitE", "priority": 1, "content": "uint32_t  implicit 1 for any implicit event, such as an implicit wait at a synchronous data construct 0 otherwise", "keywords": []}, {"id": 3332, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::kind", "display_name": "CUpti_ActivityOpenAcc::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The kind of this activity.", "keywords": []}, {"id": 3333, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::lineNo", "display_name": "CUpti_ActivityOpenAcc::lineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc6lineNoE", "priority": 1, "content": "uint32_t  lineNo The line number of the directive or program construct or the starting line number of the OpenACC construct corresponding to the event. A zero value means the line number is not known.", "keywords": []}, {"id": 3334, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::parentConstruct", "display_name": "CUpti_ActivityOpenAcc::parentConstruct", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc15parentConstructE", "priority": 1, "content": "CUpti_OpenAccConstructKind  parentConstruct CUPTI OpenACC parent construct kind (. Note that for applications using PGI OpenACC runtime &lt; 16.1, this will always be CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN. CUpti_OpenAccConstructKind )", "keywords": []}, {"id": 3335, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::start", "display_name": "CUpti_ActivityOpenAcc::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc5startE", "priority": 1, "content": "uint64_t  start CUPTI start timestamp.", "keywords": []}, {"id": 3336, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::threadId", "display_name": "CUpti_ActivityOpenAcc::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc8threadIdE", "priority": 1, "content": "uint32_t  threadId ThreadId.", "keywords": []}, {"id": 3337, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAcc::version", "display_name": "CUpti_ActivityOpenAcc::version", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "_CPPv4N21CUpti_ActivityOpenAcc7versionE", "priority": 1, "content": "uint32_t  version Version number.", "keywords": []}, {"id": 3338, "doc_id": 3338, "filename": "api/struct_c_upti___activity_open_acc.html", "domain_name": "std", "name": "api/struct_c_upti___activity_open_acc", "display_name": "CUpti_ActivityOpenAcc", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_open_acc", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3339, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData", "display_name": "CUpti_ActivityOpenAccData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv425CUpti_ActivityOpenAccData", "priority": 1, "content": "struct  CUpti_ActivityOpenAccData The activity record for OpenACC data. (CUPTI_ACTIVITY_KIND_OPENACC_DATA). Public Members", "keywords": []}, {"id": 3340, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::bytes", "display_name": "CUpti_ActivityOpenAccData::bytes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData5bytesE", "priority": 1, "content": "uint64_t  bytes Number of bytes.", "keywords": []}, {"id": 3341, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::cuContextId", "display_name": "CUpti_ActivityOpenAccData::cuContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData11cuContextIdE", "priority": 1, "content": "uint32_t  cuContextId CUDA context id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3342, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::cuDeviceId", "display_name": "CUpti_ActivityOpenAccData::cuDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData10cuDeviceIdE", "priority": 1, "content": "uint32_t  cuDeviceId CUDA device id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3343, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::cuProcessId", "display_name": "CUpti_ActivityOpenAccData::cuProcessId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData11cuProcessIdE", "priority": 1, "content": "uint32_t  cuProcessId The ID of the process where the OpenACC activity is executing.", "keywords": []}, {"id": 3344, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::cuStreamId", "display_name": "CUpti_ActivityOpenAccData::cuStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData10cuStreamIdE", "priority": 1, "content": "uint32_t  cuStreamId CUDA stream id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3345, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::cuThreadId", "display_name": "CUpti_ActivityOpenAccData::cuThreadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData10cuThreadIdE", "priority": 1, "content": "uint32_t  cuThreadId The ID of the thread where the OpenACC activity is executing.", "keywords": []}, {"id": 3346, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::devicePtr", "display_name": "CUpti_ActivityOpenAccData::devicePtr", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData9devicePtrE", "priority": 1, "content": "uint64_t  devicePtr Device pointer if available.", "keywords": []}, {"id": 3347, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::end", "display_name": "CUpti_ActivityOpenAccData::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData3endE", "priority": 1, "content": "uint64_t  end CUPTI end timestamp.", "keywords": []}, {"id": 3348, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::eventKind", "display_name": "CUpti_ActivityOpenAccData::eventKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData9eventKindE", "priority": 1, "content": "CUpti_OpenAccEventKind  eventKind CUPTI OpenACC event kind (. CUpti_OpenAccEventKind )", "keywords": []}, {"id": 3349, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::externalId", "display_name": "CUpti_ActivityOpenAccData::externalId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData10externalIdE", "priority": 1, "content": "uint32_t  externalId The OpenACC correlation ID. Valid only if deviceType is acc_device_nvidia. If not 0, it uniquely identifies this record. It is identical to the externalId in the preceding external correlation record of type CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC.", "keywords": []}, {"id": 3350, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::hostPtr", "display_name": "CUpti_ActivityOpenAccData::hostPtr", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData7hostPtrE", "priority": 1, "content": "uint64_t  hostPtr Host pointer if available.", "keywords": []}, {"id": 3351, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::kind", "display_name": "CUpti_ActivityOpenAccData::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_OPENACC_DATA.", "keywords": []}, {"id": 3352, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::start", "display_name": "CUpti_ActivityOpenAccData::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData5startE", "priority": 1, "content": "uint64_t  start CUPTI start timestamp.", "keywords": []}, {"id": 3353, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccData::threadId", "display_name": "CUpti_ActivityOpenAccData::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "_CPPv4N25CUpti_ActivityOpenAccData8threadIdE", "priority": 1, "content": "uint32_t  threadId ThreadId.", "keywords": []}, {"id": 3354, "doc_id": 3354, "filename": "api/struct_c_upti___activity_open_acc_data.html", "domain_name": "std", "name": "api/struct_c_upti___activity_open_acc_data", "display_name": "CUpti_ActivityOpenAccData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_open_acc_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3355, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch", "display_name": "CUpti_ActivityOpenAccLaunch", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv427CUpti_ActivityOpenAccLaunch", "priority": 1, "content": "struct  CUpti_ActivityOpenAccLaunch The activity record for OpenACC launch. (CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH). Public Members", "keywords": []}, {"id": 3356, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::async", "display_name": "CUpti_ActivityOpenAccLaunch::async", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch5asyncE", "priority": 1, "content": "uint64_t  async Value of async() clause of the corresponding directive.", "keywords": []}, {"id": 3357, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::asyncMap", "display_name": "CUpti_ActivityOpenAccLaunch::asyncMap", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch8asyncMapE", "priority": 1, "content": "uint64_t  asyncMap Internal asynchronous queue number used.", "keywords": []}, {"id": 3358, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::cuContextId", "display_name": "CUpti_ActivityOpenAccLaunch::cuContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch11cuContextIdE", "priority": 1, "content": "uint32_t  cuContextId CUDA context id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3359, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::cuDeviceId", "display_name": "CUpti_ActivityOpenAccLaunch::cuDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10cuDeviceIdE", "priority": 1, "content": "uint32_t  cuDeviceId CUDA device id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3360, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::cuProcessId", "display_name": "CUpti_ActivityOpenAccLaunch::cuProcessId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch11cuProcessIdE", "priority": 1, "content": "uint32_t  cuProcessId The ID of the process where the OpenACC activity is executing.", "keywords": []}, {"id": 3361, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::cuStreamId", "display_name": "CUpti_ActivityOpenAccLaunch::cuStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10cuStreamIdE", "priority": 1, "content": "uint32_t  cuStreamId CUDA stream id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3362, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::cuThreadId", "display_name": "CUpti_ActivityOpenAccLaunch::cuThreadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10cuThreadIdE", "priority": 1, "content": "uint32_t  cuThreadId The ID of the thread where the OpenACC activity is executing.", "keywords": []}, {"id": 3363, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::deviceNumber", "display_name": "CUpti_ActivityOpenAccLaunch::deviceNumber", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch12deviceNumberE", "priority": 1, "content": "uint32_t  deviceNumber Device number.", "keywords": []}, {"id": 3364, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::deviceType", "display_name": "CUpti_ActivityOpenAccLaunch::deviceType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10deviceTypeE", "priority": 1, "content": "uint32_t  deviceType Device type.", "keywords": []}, {"id": 3365, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::end", "display_name": "CUpti_ActivityOpenAccLaunch::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch3endE", "priority": 1, "content": "uint64_t  end CUPTI end timestamp.", "keywords": []}, {"id": 3366, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::endLineNo", "display_name": "CUpti_ActivityOpenAccLaunch::endLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch9endLineNoE", "priority": 1, "content": "uint32_t  endLineNo For an OpenACC construct, this contains the line number of the end of the construct. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3367, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::eventKind", "display_name": "CUpti_ActivityOpenAccLaunch::eventKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch9eventKindE", "priority": 1, "content": "CUpti_OpenAccEventKind  eventKind CUPTI OpenACC event kind (. CUpti_OpenAccEventKind )", "keywords": []}, {"id": 3368, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::externalId", "display_name": "CUpti_ActivityOpenAccLaunch::externalId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10externalIdE", "priority": 1, "content": "uint32_t  externalId The OpenACC correlation ID. Valid only if deviceType is acc_device_nvidia. If not 0, it uniquely identifies this record. It is identical to the externalId in the preceding external correlation record of type CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC.", "keywords": []}, {"id": 3369, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::funcEndLineNo", "display_name": "CUpti_ActivityOpenAccLaunch::funcEndLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch13funcEndLineNoE", "priority": 1, "content": "uint32_t  funcEndLineNo The last line number of the function named in func_name. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3370, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::funcLineNo", "display_name": "CUpti_ActivityOpenAccLaunch::funcLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10funcLineNoE", "priority": 1, "content": "uint32_t  funcLineNo The line number of the first line of the function named in func_name. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3371, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::funcName", "display_name": "CUpti_ActivityOpenAccLaunch::funcName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch8funcNameE", "priority": 1, "content": "const  char  * funcName A pointer to a null-terminated string containing the name of the function in which the event occurred.", "keywords": []}, {"id": 3372, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::implicit", "display_name": "CUpti_ActivityOpenAccLaunch::implicit", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch8implicitE", "priority": 1, "content": "uint32_t  implicit 1 for any implicit event, such as an implicit wait at a synchronous data construct 0 otherwise", "keywords": []}, {"id": 3373, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::kernelName", "display_name": "CUpti_ActivityOpenAccLaunch::kernelName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10kernelNameE", "priority": 1, "content": "const  char  * kernelName A pointer to null-terminated string containing the name of the kernel being launched, if known, or a null pointer if not.", "keywords": []}, {"id": 3374, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::kind", "display_name": "CUpti_ActivityOpenAccLaunch::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH.", "keywords": []}, {"id": 3375, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::lineNo", "display_name": "CUpti_ActivityOpenAccLaunch::lineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch6lineNoE", "priority": 1, "content": "uint32_t  lineNo The line number of the directive or program construct or the starting line number of the OpenACC construct corresponding to the event. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3376, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::numGangs", "display_name": "CUpti_ActivityOpenAccLaunch::numGangs", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch8numGangsE", "priority": 1, "content": "uint64_t  numGangs The number of gangs created for this kernel launch.", "keywords": []}, {"id": 3377, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::numWorkers", "display_name": "CUpti_ActivityOpenAccLaunch::numWorkers", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch10numWorkersE", "priority": 1, "content": "uint64_t  numWorkers The number of workers created for this kernel launch.", "keywords": []}, {"id": 3378, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::parentConstruct", "display_name": "CUpti_ActivityOpenAccLaunch::parentConstruct", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch15parentConstructE", "priority": 1, "content": "CUpti_OpenAccConstructKind  parentConstruct CUPTI OpenACC parent construct kind (. Note that for applications using PGI OpenACC runtime &lt; 16.1, this will always be CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN. CUpti_OpenAccConstructKind )", "keywords": []}, {"id": 3379, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::srcFile", "display_name": "CUpti_ActivityOpenAccLaunch::srcFile", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch7srcFileE", "priority": 1, "content": "const  char  * srcFile A pointer to null-terminated string containing the name of or path to the source file, if known, or a null pointer if not.", "keywords": []}, {"id": 3380, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::start", "display_name": "CUpti_ActivityOpenAccLaunch::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch5startE", "priority": 1, "content": "uint64_t  start CUPTI start timestamp.", "keywords": []}, {"id": 3381, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::threadId", "display_name": "CUpti_ActivityOpenAccLaunch::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch8threadIdE", "priority": 1, "content": "uint32_t  threadId ThreadId.", "keywords": []}, {"id": 3382, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::vectorLength", "display_name": "CUpti_ActivityOpenAccLaunch::vectorLength", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch12vectorLengthE", "priority": 1, "content": "uint64_t  vectorLength The number of vector lanes created for this kernel launch.", "keywords": []}, {"id": 3383, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccLaunch::version", "display_name": "CUpti_ActivityOpenAccLaunch::version", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "_CPPv4N27CUpti_ActivityOpenAccLaunch7versionE", "priority": 1, "content": "uint32_t  version Version number.", "keywords": []}, {"id": 3384, "doc_id": 3384, "filename": "api/struct_c_upti___activity_open_acc_launch.html", "domain_name": "std", "name": "api/struct_c_upti___activity_open_acc_launch", "display_name": "CUpti_ActivityOpenAccLaunch", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_open_acc_launch", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3385, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther", "display_name": "CUpti_ActivityOpenAccOther", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv426CUpti_ActivityOpenAccOther", "priority": 1, "content": "struct  CUpti_ActivityOpenAccOther The activity record for OpenACC other. (CUPTI_ACTIVITY_KIND_OPENACC_OTHER). Public Members", "keywords": []}, {"id": 3386, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::async", "display_name": "CUpti_ActivityOpenAccOther::async", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther5asyncE", "priority": 1, "content": "uint64_t  async Value of async() clause of the corresponding directive.", "keywords": []}, {"id": 3387, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::asyncMap", "display_name": "CUpti_ActivityOpenAccOther::asyncMap", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther8asyncMapE", "priority": 1, "content": "uint64_t  asyncMap Internal asynchronous queue number used.", "keywords": []}, {"id": 3388, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::cuContextId", "display_name": "CUpti_ActivityOpenAccOther::cuContextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther11cuContextIdE", "priority": 1, "content": "uint32_t  cuContextId CUDA context id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3389, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::cuDeviceId", "display_name": "CUpti_ActivityOpenAccOther::cuDeviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther10cuDeviceIdE", "priority": 1, "content": "uint32_t  cuDeviceId CUDA device id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3390, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::cuProcessId", "display_name": "CUpti_ActivityOpenAccOther::cuProcessId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther11cuProcessIdE", "priority": 1, "content": "uint32_t  cuProcessId The ID of the process where the OpenACC activity is executing.", "keywords": []}, {"id": 3391, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::cuStreamId", "display_name": "CUpti_ActivityOpenAccOther::cuStreamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther10cuStreamIdE", "priority": 1, "content": "uint32_t  cuStreamId CUDA stream id Valid only if deviceType is acc_device_nvidia.", "keywords": []}, {"id": 3392, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::cuThreadId", "display_name": "CUpti_ActivityOpenAccOther::cuThreadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther10cuThreadIdE", "priority": 1, "content": "uint32_t  cuThreadId The ID of the thread where the OpenACC activity is executing.", "keywords": []}, {"id": 3393, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::deviceNumber", "display_name": "CUpti_ActivityOpenAccOther::deviceNumber", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther12deviceNumberE", "priority": 1, "content": "uint32_t  deviceNumber Device number.", "keywords": []}, {"id": 3394, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::deviceType", "display_name": "CUpti_ActivityOpenAccOther::deviceType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther10deviceTypeE", "priority": 1, "content": "uint32_t  deviceType Device type.", "keywords": []}, {"id": 3395, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::end", "display_name": "CUpti_ActivityOpenAccOther::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther3endE", "priority": 1, "content": "uint64_t  end CUPTI end timestamp.", "keywords": []}, {"id": 3396, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::endLineNo", "display_name": "CUpti_ActivityOpenAccOther::endLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther9endLineNoE", "priority": 1, "content": "uint32_t  endLineNo For an OpenACC construct, this contains the line number of the end of the construct. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3397, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::eventKind", "display_name": "CUpti_ActivityOpenAccOther::eventKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther9eventKindE", "priority": 1, "content": "CUpti_OpenAccEventKind  eventKind CUPTI OpenACC event kind (. CUpti_OpenAccEventKind )", "keywords": []}, {"id": 3398, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::externalId", "display_name": "CUpti_ActivityOpenAccOther::externalId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther10externalIdE", "priority": 1, "content": "uint32_t  externalId The OpenACC correlation ID. Valid only if deviceType is acc_device_nvidia. If not 0, it uniquely identifies this record. It is identical to the externalId in the preceding external correlation record of type CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC.", "keywords": []}, {"id": 3399, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::funcEndLineNo", "display_name": "CUpti_ActivityOpenAccOther::funcEndLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther13funcEndLineNoE", "priority": 1, "content": "uint32_t  funcEndLineNo The last line number of the function named in func_name. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3400, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::funcLineNo", "display_name": "CUpti_ActivityOpenAccOther::funcLineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther10funcLineNoE", "priority": 1, "content": "uint32_t  funcLineNo The line number of the first line of the function named in func_name. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3401, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::funcName", "display_name": "CUpti_ActivityOpenAccOther::funcName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther8funcNameE", "priority": 1, "content": "const  char  * funcName A pointer to a null-terminated string containing the name of the function in which the event occurred.", "keywords": []}, {"id": 3402, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::implicit", "display_name": "CUpti_ActivityOpenAccOther::implicit", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther8implicitE", "priority": 1, "content": "uint32_t  implicit 1 for any implicit event, such as an implicit wait at a synchronous data construct 0 otherwise", "keywords": []}, {"id": 3403, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::kind", "display_name": "CUpti_ActivityOpenAccOther::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_OPENACC_OTHER.", "keywords": []}, {"id": 3404, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::lineNo", "display_name": "CUpti_ActivityOpenAccOther::lineNo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther6lineNoE", "priority": 1, "content": "uint32_t  lineNo The line number of the directive or program construct or the starting line number of the OpenACC construct corresponding to the event. A negative or zero value means the line number is not known.", "keywords": []}, {"id": 3405, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::parentConstruct", "display_name": "CUpti_ActivityOpenAccOther::parentConstruct", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther15parentConstructE", "priority": 1, "content": "CUpti_OpenAccConstructKind  parentConstruct CUPTI OpenACC parent construct kind (. Note that for applications using PGI OpenACC runtime &lt; 16.1, this will always be CUPTI_OPENACC_CONSTRUCT_KIND_UNKNOWN. CUpti_OpenAccConstructKind )", "keywords": []}, {"id": 3406, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::srcFile", "display_name": "CUpti_ActivityOpenAccOther::srcFile", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther7srcFileE", "priority": 1, "content": "const  char  * srcFile A pointer to null-terminated string containing the name of or path to the source file, if known, or a null pointer if not.", "keywords": []}, {"id": 3407, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::start", "display_name": "CUpti_ActivityOpenAccOther::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther5startE", "priority": 1, "content": "uint64_t  start CUPTI start timestamp.", "keywords": []}, {"id": 3408, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::threadId", "display_name": "CUpti_ActivityOpenAccOther::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther8threadIdE", "priority": 1, "content": "uint32_t  threadId ThreadId.", "keywords": []}, {"id": 3409, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenAccOther::version", "display_name": "CUpti_ActivityOpenAccOther::version", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "_CPPv4N26CUpti_ActivityOpenAccOther7versionE", "priority": 1, "content": "uint32_t  version Version number.", "keywords": []}, {"id": 3410, "doc_id": 3410, "filename": "api/struct_c_upti___activity_open_acc_other.html", "domain_name": "std", "name": "api/struct_c_upti___activity_open_acc_other", "display_name": "CUpti_ActivityOpenAccOther", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_open_acc_other", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3411, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp", "display_name": "CUpti_ActivityOpenMp", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv420CUpti_ActivityOpenMp", "priority": 1, "content": "struct  CUpti_ActivityOpenMp The base activity record for OpenMp records. CUpti_ActivityKind  Public Members", "keywords": []}, {"id": 3412, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::cuProcessId", "display_name": "CUpti_ActivityOpenMp::cuProcessId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp11cuProcessIdE", "priority": 1, "content": "uint32_t  cuProcessId The ID of the process where the OpenMP activity is executing.", "keywords": []}, {"id": 3413, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::cuThreadId", "display_name": "CUpti_ActivityOpenMp::cuThreadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp10cuThreadIdE", "priority": 1, "content": "uint32_t  cuThreadId The ID of the thread where the OpenMP activity is executing.", "keywords": []}, {"id": 3414, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::end", "display_name": "CUpti_ActivityOpenMp::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp3endE", "priority": 1, "content": "uint64_t  end CUPTI end timestamp.", "keywords": []}, {"id": 3415, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::eventKind", "display_name": "CUpti_ActivityOpenMp::eventKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp9eventKindE", "priority": 1, "content": "CUpti_OpenMpEventKind  eventKind CUPTI OpenMP event kind (. CUpti_OpenMpEventKind)", "keywords": []}, {"id": 3416, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::kind", "display_name": "CUpti_ActivityOpenMp::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The kind of this activity.", "keywords": []}, {"id": 3417, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::start", "display_name": "CUpti_ActivityOpenMp::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp5startE", "priority": 1, "content": "uint64_t  start CUPTI start timestamp.", "keywords": []}, {"id": 3418, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::threadId", "display_name": "CUpti_ActivityOpenMp::threadId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp8threadIdE", "priority": 1, "content": "uint32_t  threadId ThreadId.", "keywords": []}, {"id": 3419, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "cpp", "name": "CUpti_ActivityOpenMp::version", "display_name": "CUpti_ActivityOpenMp::version", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "_CPPv4N20CUpti_ActivityOpenMp7versionE", "priority": 1, "content": "uint32_t  version Version number.", "keywords": []}, {"id": 3420, "doc_id": 3420, "filename": "api/struct_c_upti___activity_open_mp.html", "domain_name": "std", "name": "api/struct_c_upti___activity_open_mp", "display_name": "CUpti_ActivityOpenMp", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_open_mp", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3421, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead", "display_name": "CUpti_ActivityOverhead", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv422CUpti_ActivityOverhead", "priority": 1, "content": "struct  CUpti_ActivityOverhead The kinds of activity records. Each activity record kind represents information about a GPU or an activity occurring on a CPU or GPU. Each kind is associated with a activity record structure that holds the information associated with the kind. The activity record for CUPTI and driver overheads. (Deprecated in CUDA 12.2) CUpti_ActivityOverhead  CUpti_ActivityOverhead2  CUpti_ActivityDevice  CUpti_ActivityDevice2  CUpti_ActivityDevice3  CUpti_ActivityDevice4  CUpti_ActivityKernel  CUpti_ActivityKernel2  CUpti_ActivityKernel3  CUpti_ActivityKernel4  CUpti_ActivityKernel5  CUpti_ActivityKernel6  CUpti_ActivityKernel7  CUpti_ActivityKernel8  CUpti_ActivityMemcpy  CUpti_ActivityMemcpy3  CUpti_ActivityMemcpy4  CUpti_ActivityMemcpyPtoP  CUpti_ActivityMemcpyPtoP2  CUpti_ActivityMemcpyPtoP3  CUpti_ActivityMemset  CUpti_ActivityMemset2  CUpti_ActivityMemset3  CUpti_ActivityMemory2  CUpti_ActivityMemory3  CUpti_ActivityMemoryPool  CUpti_ActivityMarker  CUpti_ActivityGlobalAccess  CUpti_ActivityGlobalAccess2  CUpti_ActivityBranch  CUpti_ActivityPCSampling  CUpti_ActivityPCSampling2  CUpti_ActivityUnifiedMemoryCounter  CUpti_ActivityNvLink  CUpti_ActivityNvLink2  CUpti_ActivityNvLink3 This activity record provides CUPTI and driver overhead information (CUPTI_ACTIVITY_OVERHEAD). These records are now reported using CUpti_ActivityOverhead3  Public Members", "keywords": []}, {"id": 3422, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead::end", "display_name": "CUpti_ActivityOverhead::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv4N22CUpti_ActivityOverhead3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the overhead, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the overhead.", "keywords": []}, {"id": 3423, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead::kind", "display_name": "CUpti_ActivityOverhead::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv4N22CUpti_ActivityOverhead4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_OVERHEAD.", "keywords": []}, {"id": 3424, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead::objectId", "display_name": "CUpti_ActivityOverhead::objectId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv4N22CUpti_ActivityOverhead8objectIdE", "priority": 1, "content": "CUpti_ActivityObjectKindId  objectId The identifier for the activity object. \u2018objectKind\u2019 indicates which ID is valid for this record.", "keywords": []}, {"id": 3425, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead::objectKind", "display_name": "CUpti_ActivityOverhead::objectKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv4N22CUpti_ActivityOverhead10objectKindE", "priority": 1, "content": "CUpti_ActivityObjectKind  objectKind The kind of activity object that the overhead is associated with.", "keywords": []}, {"id": 3426, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead::overheadKind", "display_name": "CUpti_ActivityOverhead::overheadKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv4N22CUpti_ActivityOverhead12overheadKindE", "priority": 1, "content": "CUpti_ActivityOverheadKind  overheadKind The kind of overhead, CUPTI, DRIVER, COMPILER etc.", "keywords": []}, {"id": 3427, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead::start", "display_name": "CUpti_ActivityOverhead::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead", "anchor": "_CPPv4N22CUpti_ActivityOverhead5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the overhead, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the overhead.", "keywords": []}, {"id": 3428, "doc_id": 3428, "filename": "api/struct_c_upti___activity_overhead.html", "domain_name": "std", "name": "api/struct_c_upti___activity_overhead", "display_name": "CUpti_ActivityOverhead", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_overhead", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3429, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2", "display_name": "CUpti_ActivityOverhead2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv423CUpti_ActivityOverhead2", "priority": 1, "content": "struct  CUpti_ActivityOverhead2 The activity record for CUPTI and driver overheads. This activity record provides CUPTI and driver overhead information (CUPTI_ACTIVITY_OVERHEAD). Public Members", "keywords": []}, {"id": 3430, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::correlationId", "display_name": "CUpti_ActivityOverhead2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the overhead operation to which records belong to. This ID is identical to the correlation ID in the driver or runtime API activity record that launched the overhead operation. In some cases, it can be zero, such as for CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH records.", "keywords": []}, {"id": 3431, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::end", "display_name": "CUpti_ActivityOverhead2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead23endE", "priority": 1, "content": "uint64_t  end The end timestamp for the overhead, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the overhead.", "keywords": []}, {"id": 3432, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::kind", "display_name": "CUpti_ActivityOverhead2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_OVERHEAD.", "keywords": []}, {"id": 3433, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::objectId", "display_name": "CUpti_ActivityOverhead2::objectId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead28objectIdE", "priority": 1, "content": "CUpti_ActivityObjectKindId  objectId The identifier for the activity object. \u2018objectKind\u2019 indicates which ID is valid for this record.", "keywords": []}, {"id": 3434, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::objectKind", "display_name": "CUpti_ActivityOverhead2::objectKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead210objectKindE", "priority": 1, "content": "CUpti_ActivityObjectKind  objectKind The kind of activity object that the overhead is associated with.", "keywords": []}, {"id": 3435, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::overheadKind", "display_name": "CUpti_ActivityOverhead2::overheadKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead212overheadKindE", "priority": 1, "content": "CUpti_ActivityOverheadKind  overheadKind The kind of overhead, CUPTI, DRIVER, COMPILER etc.", "keywords": []}, {"id": 3436, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::reserved0", "display_name": "CUpti_ActivityOverhead2::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead29reserved0E", "priority": 1, "content": "uint32_t  reserved0 Reserved for internal use.", "keywords": []}, {"id": 3437, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead2::start", "display_name": "CUpti_ActivityOverhead2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "_CPPv4N23CUpti_ActivityOverhead25startE", "priority": 1, "content": "uint64_t  start The start timestamp for the overhead, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the overhead.", "keywords": []}, {"id": 3438, "doc_id": 3438, "filename": "api/struct_c_upti___activity_overhead2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_overhead2", "display_name": "CUpti_ActivityOverhead2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_overhead2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3439, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3", "display_name": "CUpti_ActivityOverhead3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv423CUpti_ActivityOverhead3", "priority": 1, "content": "struct  CUpti_ActivityOverhead3 The activity record for CUPTI and driver overheads. This activity record provides CUPTI and driver overhead information (CUPTI_ACTIVITY_OVERHEAD). Public Members", "keywords": []}, {"id": 3440, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::correlationId", "display_name": "CUpti_ActivityOverhead3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the overhead operation to which records belong to. This ID is identical to the correlation ID in the driver or runtime API activity record that launched the overhead operation. In some cases, it can be zero, such as for CUPTI_ACTIVITY_OVERHEAD_CUPTI_BUFFER_FLUSH records.", "keywords": []}, {"id": 3441, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::end", "display_name": "CUpti_ActivityOverhead3::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead33endE", "priority": 1, "content": "uint64_t  end The end timestamp for the overhead, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the overhead.", "keywords": []}, {"id": 3442, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::kind", "display_name": "CUpti_ActivityOverhead3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_OVERHEAD.", "keywords": []}, {"id": 3443, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::objectId", "display_name": "CUpti_ActivityOverhead3::objectId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead38objectIdE", "priority": 1, "content": "CUpti_ActivityObjectKindId  objectId The identifier for the activity object. \u2018objectKind\u2019 indicates which ID is valid for this record.", "keywords": []}, {"id": 3444, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::objectKind", "display_name": "CUpti_ActivityOverhead3::objectKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead310objectKindE", "priority": 1, "content": "CUpti_ActivityObjectKind  objectKind The kind of activity object that the overhead is associated with.", "keywords": []}, {"id": 3445, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::overheadData", "display_name": "CUpti_ActivityOverhead3::overheadData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead312overheadDataE", "priority": 1, "content": "void  * overheadData Pointer to the struct with additional details about the overhead. Refer CUpti_ActivityOverheadKind enum and the corresponding structure to typecast and access additional overhead data. Client is responsible for freeing this memory using the free function when done.", "keywords": []}, {"id": 3446, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::overheadKind", "display_name": "CUpti_ActivityOverhead3::overheadKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead312overheadKindE", "priority": 1, "content": "CUpti_ActivityOverheadKind  overheadKind The kind of overhead, CUPTI, DRIVER, COMPILER etc.", "keywords": []}, {"id": 3447, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::reserved0", "display_name": "CUpti_ActivityOverhead3::reserved0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead39reserved0E", "priority": 1, "content": "uint32_t  reserved0 Reserved for internal use.", "keywords": []}, {"id": 3448, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "cpp", "name": "CUpti_ActivityOverhead3::start", "display_name": "CUpti_ActivityOverhead3::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "_CPPv4N23CUpti_ActivityOverhead35startE", "priority": 1, "content": "uint64_t  start The start timestamp for the overhead, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the overhead.", "keywords": []}, {"id": 3449, "doc_id": 3449, "filename": "api/struct_c_upti___activity_overhead3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_overhead3", "display_name": "CUpti_ActivityOverhead3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_overhead3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3450, "doc_id": 3454, "filename": "api/struct_c_upti___activity_overhead_command_buffer_full_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadCommandBufferFullData", "display_name": "CUpti_ActivityOverheadCommandBufferFullData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_overhead_command_buffer_full_data", "anchor": "_CPPv443CUpti_ActivityOverheadCommandBufferFullData", "priority": 1, "content": "struct  CUpti_ActivityOverheadCommandBufferFullData The structure to provide additional data for CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL. Public Members", "keywords": []}, {"id": 3451, "doc_id": 3454, "filename": "api/struct_c_upti___activity_overhead_command_buffer_full_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadCommandBufferFullData::channelID", "display_name": "CUpti_ActivityOverheadCommandBufferFullData::channelID", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead_command_buffer_full_data", "anchor": "_CPPv4N43CUpti_ActivityOverheadCommandBufferFullData9channelIDE", "priority": 1, "content": "uint32_t  channelID The channel ID of the command buffer.", "keywords": []}, {"id": 3452, "doc_id": 3454, "filename": "api/struct_c_upti___activity_overhead_command_buffer_full_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadCommandBufferFullData::channelType", "display_name": "CUpti_ActivityOverheadCommandBufferFullData::channelType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead_command_buffer_full_data", "anchor": "_CPPv4N43CUpti_ActivityOverheadCommandBufferFullData11channelTypeE", "priority": 1, "content": "uint32_t  channelType The channel type of the command buffer.", "keywords": []}, {"id": 3453, "doc_id": 3454, "filename": "api/struct_c_upti___activity_overhead_command_buffer_full_data.html", "domain_name": "cpp", "name": "CUpti_ActivityOverheadCommandBufferFullData::commandBufferLength", "display_name": "CUpti_ActivityOverheadCommandBufferFullData::commandBufferLength", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_overhead_command_buffer_full_data", "anchor": "_CPPv4N43CUpti_ActivityOverheadCommandBufferFullData19commandBufferLengthE", "priority": 1, "content": "uint32_t  commandBufferLength The length of the command buffer.", "keywords": []}, {"id": 3454, "doc_id": 3454, "filename": "api/struct_c_upti___activity_overhead_command_buffer_full_data.html", "domain_name": "std", "name": "api/struct_c_upti___activity_overhead_command_buffer_full_data", "display_name": "CUpti_ActivityOverheadCommandBufferFullData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_overhead_command_buffer_full_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3455, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling", "display_name": "CUpti_ActivityPCSampling", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv424CUpti_ActivityPCSampling", "priority": 1, "content": "struct  CUpti_ActivityPCSampling The activity record for PC sampling. (deprecated in CUDA 8.0) This activity records information obtained by sampling PC (CUPTI_ACTIVITY_KIND_PC_SAMPLING). PC sampling activities are now reported using the CUpti_ActivityPCSampling2 activity record. Public Members", "keywords": []}, {"id": 3456, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::correlationId", "display_name": "CUpti_ActivityPCSampling::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 3457, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::flags", "display_name": "CUpti_ActivityPCSampling::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this instruction.", "keywords": []}, {"id": 3458, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::functionId", "display_name": "CUpti_ActivityPCSampling::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling10functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 3459, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::kind", "display_name": "CUpti_ActivityPCSampling::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_PC_SAMPLING.", "keywords": []}, {"id": 3460, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::pcOffset", "display_name": "CUpti_ActivityPCSampling::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the instruction.", "keywords": []}, {"id": 3461, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::samples", "display_name": "CUpti_ActivityPCSampling::samples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling7samplesE", "priority": 1, "content": "uint32_t  samples Number of times the PC was sampled with the stallReason in the record. The same PC can be sampled with different stall reasons.", "keywords": []}, {"id": 3462, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::sourceLocatorId", "display_name": "CUpti_ActivityPCSampling::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling15sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 3463, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling::stallReason", "display_name": "CUpti_ActivityPCSampling::stallReason", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "_CPPv4N24CUpti_ActivityPCSampling11stallReasonE", "priority": 1, "content": "CUpti_ActivityPCSamplingStallReason  stallReason Current stall reason. Includes one of the reasons from CUpti_ActivityPCSamplingStallReason", "keywords": []}, {"id": 3464, "doc_id": 3464, "filename": "api/struct_c_upti___activity_p_c_sampling.html", "domain_name": "std", "name": "api/struct_c_upti___activity_p_c_sampling", "display_name": "CUpti_ActivityPCSampling", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_p_c_sampling", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3465, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2", "display_name": "CUpti_ActivityPCSampling2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv425CUpti_ActivityPCSampling2", "priority": 1, "content": "struct  CUpti_ActivityPCSampling2 The activity record for PC sampling. (deprecated in CUDA 9.0) This activity records information obtained by sampling PC (CUPTI_ACTIVITY_KIND_PC_SAMPLING). PC sampling activities are now reported using the CUpti_ActivityPCSampling3 activity record. Public Members", "keywords": []}, {"id": 3466, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::correlationId", "display_name": "CUpti_ActivityPCSampling2::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling213correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 3467, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::flags", "display_name": "CUpti_ActivityPCSampling2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling25flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this instruction.", "keywords": []}, {"id": 3468, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::functionId", "display_name": "CUpti_ActivityPCSampling2::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling210functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 3469, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::kind", "display_name": "CUpti_ActivityPCSampling2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_PC_SAMPLING.", "keywords": []}, {"id": 3470, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::latencySamples", "display_name": "CUpti_ActivityPCSampling2::latencySamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling214latencySamplesE", "priority": 1, "content": "uint32_t  latencySamples Number of times the PC was sampled with the stallReason in the record. These samples indicate that no instruction was issued in that cycle from the warp scheduler from where the warp was sampled. Field is valid for devices with compute capability 6.0 and higher", "keywords": []}, {"id": 3471, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::pcOffset", "display_name": "CUpti_ActivityPCSampling2::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling28pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the instruction.", "keywords": []}, {"id": 3472, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::samples", "display_name": "CUpti_ActivityPCSampling2::samples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling27samplesE", "priority": 1, "content": "uint32_t  samples Number of times the PC was sampled with the stallReason in the record. The same PC can be sampled with different stall reasons. The count includes latencySamples.", "keywords": []}, {"id": 3473, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::sourceLocatorId", "display_name": "CUpti_ActivityPCSampling2::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling215sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 3474, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling2::stallReason", "display_name": "CUpti_ActivityPCSampling2::stallReason", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "_CPPv4N25CUpti_ActivityPCSampling211stallReasonE", "priority": 1, "content": "CUpti_ActivityPCSamplingStallReason  stallReason Current stall reason. Includes one of the reasons from CUpti_ActivityPCSamplingStallReason", "keywords": []}, {"id": 3475, "doc_id": 3475, "filename": "api/struct_c_upti___activity_p_c_sampling2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_p_c_sampling2", "display_name": "CUpti_ActivityPCSampling2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_p_c_sampling2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3476, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3", "display_name": "CUpti_ActivityPCSampling3", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv425CUpti_ActivityPCSampling3", "priority": 1, "content": "struct  CUpti_ActivityPCSampling3 The activity record for PC sampling. This activity records information obtained by sampling PC (CUPTI_ACTIVITY_KIND_PC_SAMPLING). Public Members", "keywords": []}, {"id": 3477, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::correlationId", "display_name": "CUpti_ActivityPCSampling3::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling313correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 3478, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::flags", "display_name": "CUpti_ActivityPCSampling3::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling35flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this instruction.", "keywords": []}, {"id": 3479, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::functionId", "display_name": "CUpti_ActivityPCSampling3::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling310functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 3480, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::kind", "display_name": "CUpti_ActivityPCSampling3::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling34kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_PC_SAMPLING.", "keywords": []}, {"id": 3481, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::latencySamples", "display_name": "CUpti_ActivityPCSampling3::latencySamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling314latencySamplesE", "priority": 1, "content": "uint32_t  latencySamples Number of times the PC was sampled with the stallReason in the record. These samples indicate that no instruction was issued in that cycle from the warp scheduler from where the warp was sampled. Field is valid for devices with compute capability 6.0 and higher", "keywords": []}, {"id": 3482, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::pcOffset", "display_name": "CUpti_ActivityPCSampling3::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling38pcOffsetE", "priority": 1, "content": "uint64_t  pcOffset The pc offset for the instruction.", "keywords": []}, {"id": 3483, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::samples", "display_name": "CUpti_ActivityPCSampling3::samples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling37samplesE", "priority": 1, "content": "uint32_t  samples Number of times the PC was sampled with the stallReason in the record. The same PC can be sampled with different stall reasons. The count includes latencySamples.", "keywords": []}, {"id": 3484, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::sourceLocatorId", "display_name": "CUpti_ActivityPCSampling3::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling315sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 3485, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSampling3::stallReason", "display_name": "CUpti_ActivityPCSampling3::stallReason", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "_CPPv4N25CUpti_ActivityPCSampling311stallReasonE", "priority": 1, "content": "CUpti_ActivityPCSamplingStallReason  stallReason Current stall reason. Includes one of the reasons from CUpti_ActivityPCSamplingStallReason", "keywords": []}, {"id": 3486, "doc_id": 3486, "filename": "api/struct_c_upti___activity_p_c_sampling3.html", "domain_name": "std", "name": "api/struct_c_upti___activity_p_c_sampling3", "display_name": "CUpti_ActivityPCSampling3", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_p_c_sampling3", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3487, "doc_id": 3491, "filename": "api/struct_c_upti___activity_p_c_sampling_config.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingConfig", "display_name": "CUpti_ActivityPCSamplingConfig", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_p_c_sampling_config", "anchor": "_CPPv430CUpti_ActivityPCSamplingConfig", "priority": 1, "content": "struct  CUpti_ActivityPCSamplingConfig PC sampling configuration structure. This structure defines the pc sampling configuration. See function cuptiActivityConfigurePCSampling  Public Members", "keywords": []}, {"id": 3488, "doc_id": 3491, "filename": "api/struct_c_upti___activity_p_c_sampling_config.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingConfig::samplingPeriod", "display_name": "CUpti_ActivityPCSamplingConfig::samplingPeriod", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_config", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingConfig14samplingPeriodE", "priority": 1, "content": "CUpti_ActivityPCSamplingPeriod  samplingPeriod There are 5 level provided for sampling period. The level internally maps to a period in terms of cycles. Same level can map to different number of cycles on different gpus. No of cycles will be chosen to minimize information loss. The period chosen will be given by samplingPeriodInCycles in CUpti_ActivityPCSamplingRecordInfo for each kernel instance.", "keywords": []}, {"id": 3489, "doc_id": 3491, "filename": "api/struct_c_upti___activity_p_c_sampling_config.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingConfig::samplingPeriod2", "display_name": "CUpti_ActivityPCSamplingConfig::samplingPeriod2", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_config", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingConfig15samplingPeriod2E", "priority": 1, "content": "uint32_t  samplingPeriod2 This will override the period set by samplingPeriod. Value 0 in samplingPeriod2 will be considered as samplingPeriod2 should not be used and samplingPeriod should be used. Valid values for samplingPeriod2 are between 5 to 31 both inclusive. This will set the sampling period to (2^samplingPeriod2) cycles.", "keywords": []}, {"id": 3490, "doc_id": 3491, "filename": "api/struct_c_upti___activity_p_c_sampling_config.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingConfig::size", "display_name": "CUpti_ActivityPCSamplingConfig::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_config", "anchor": "_CPPv4N30CUpti_ActivityPCSamplingConfig4sizeE", "priority": 1, "content": "uint32_t  size Size of configuration structure. CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3491, "doc_id": 3491, "filename": "api/struct_c_upti___activity_p_c_sampling_config.html", "domain_name": "std", "name": "api/struct_c_upti___activity_p_c_sampling_config", "display_name": "CUpti_ActivityPCSamplingConfig", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_p_c_sampling_config", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3492, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingRecordInfo", "display_name": "CUpti_ActivityPCSamplingRecordInfo", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "_CPPv434CUpti_ActivityPCSamplingRecordInfo", "priority": 1, "content": "struct  CUpti_ActivityPCSamplingRecordInfo The activity record for record status for PC sampling. This activity records information obtained by sampling PC (CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO). Public Members", "keywords": []}, {"id": 3493, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingRecordInfo::correlationId", "display_name": "CUpti_ActivityPCSamplingRecordInfo::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "_CPPv4N34CUpti_ActivityPCSamplingRecordInfo13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 3494, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingRecordInfo::droppedSamples", "display_name": "CUpti_ActivityPCSamplingRecordInfo::droppedSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "_CPPv4N34CUpti_ActivityPCSamplingRecordInfo14droppedSamplesE", "priority": 1, "content": "uint64_t  droppedSamples Number of samples that were dropped by hardware due to backpressure/overflow.", "keywords": []}, {"id": 3495, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingRecordInfo::kind", "display_name": "CUpti_ActivityPCSamplingRecordInfo::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "_CPPv4N34CUpti_ActivityPCSamplingRecordInfo4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_PC_SAMPLING_RECORD_INFO.", "keywords": []}, {"id": 3496, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingRecordInfo::samplingPeriodInCycles", "display_name": "CUpti_ActivityPCSamplingRecordInfo::samplingPeriodInCycles", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "_CPPv4N34CUpti_ActivityPCSamplingRecordInfo22samplingPeriodInCyclesE", "priority": 1, "content": "uint64_t  samplingPeriodInCycles Sampling period in terms of number of cycles .", "keywords": []}, {"id": 3497, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "cpp", "name": "CUpti_ActivityPCSamplingRecordInfo::totalSamples", "display_name": "CUpti_ActivityPCSamplingRecordInfo::totalSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "_CPPv4N34CUpti_ActivityPCSamplingRecordInfo12totalSamplesE", "priority": 1, "content": "uint64_t  totalSamples Number of times the PC was sampled for this kernel instance including all dropped samples.", "keywords": []}, {"id": 3498, "doc_id": 3498, "filename": "api/struct_c_upti___activity_p_c_sampling_record_info.html", "domain_name": "std", "name": "api/struct_c_upti___activity_p_c_sampling_record_info", "display_name": "CUpti_ActivityPCSamplingRecordInfo", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_p_c_sampling_record_info", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3499, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie", "display_name": "CUpti_ActivityPcie", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv418CUpti_ActivityPcie", "priority": 1, "content": "struct  CUpti_ActivityPcie PCI devices information required to construct topology. This structure gives capabilities of GPU and PCI bridge connected to the PCIE bus which can be used to understand the topology. Public Members", "keywords": []}, {"id": 3500, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::attr", "display_name": "CUpti_ActivityPcie::attr", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie4attrE", "priority": 1, "content": "union  CUpti_ActivityPcie :: [anonymous]  attr Attributes for more information about GPU (gpuAttr) or PCI Bridge (bridgeAttr)", "keywords": []}, {"id": 3501, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::bridgeId", "display_name": "CUpti_ActivityPcie::bridgeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie8bridgeIdE", "priority": 1, "content": "uint32_t  bridgeId A unique identifier for Bridge in the Topology.", "keywords": []}, {"id": 3502, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::devId", "display_name": "CUpti_ActivityPcie::devId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie5devIdE", "priority": 1, "content": "CUdevice  devId GPU device ID.", "keywords": []}, {"id": 3503, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::deviceId", "display_name": "CUpti_ActivityPcie::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie8deviceIdE", "priority": 1, "content": "uint16_t  deviceId Device ID of the bridge.", "keywords": []}, {"id": 3504, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::domain", "display_name": "CUpti_ActivityPcie::domain", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie6domainE", "priority": 1, "content": "uint32_t  domain Domain for the GPU or Bridge, required to identify which PCIE bus it belongs to in multiple NUMA systems.", "keywords": []}, {"id": 3505, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::id", "display_name": "CUpti_ActivityPcie::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie2idE", "priority": 1, "content": "union  CUpti_ActivityPcie :: [anonymous]  id A unique identifier for GPU or Bridge in Topology.", "keywords": []}, {"id": 3506, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::kind", "display_name": "CUpti_ActivityPcie::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_PCIE.", "keywords": []}, {"id": 3507, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::linkRate", "display_name": "CUpti_ActivityPcie::linkRate", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie8linkRateE", "priority": 1, "content": "uint16_t  linkRate Link rate of the GPU or bridge in gigatransfers per second (GT/s)", "keywords": []}, {"id": 3508, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::linkWidth", "display_name": "CUpti_ActivityPcie::linkWidth", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie9linkWidthE", "priority": 1, "content": "uint16_t  linkWidth Link width of the GPU or bridge.", "keywords": []}, {"id": 3509, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::pad0", "display_name": "CUpti_ActivityPcie::pad0", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie4pad0E", "priority": 1, "content": "uint16_t  pad0 Padding for alignment.", "keywords": []}, {"id": 3510, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::pcieGeneration", "display_name": "CUpti_ActivityPcie::pcieGeneration", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie14pcieGenerationE", "priority": 1, "content": "uint16_t  pcieGeneration PCIE Generation of GPU or Bridge.", "keywords": []}, {"id": 3511, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::peerDev", "display_name": "CUpti_ActivityPcie::peerDev", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie7peerDevE", "priority": 1, "content": "CUdevice  peerDev [ 32 ] CUdevice with which this device has P2P capability. This can also be obtained by querying cuDeviceCanAccessPeer or cudaDeviceCanAccessPeer APIs", "keywords": []}, {"id": 3512, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::secondaryBus", "display_name": "CUpti_ActivityPcie::secondaryBus", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie12secondaryBusE", "priority": 1, "content": "uint16_t  secondaryBus The downstream bus number, used to search downstream devices/bridges connected to this bridge.", "keywords": []}, {"id": 3513, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::type", "display_name": "CUpti_ActivityPcie::type", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie4typeE", "priority": 1, "content": "CUpti_PcieDeviceType  type Type of device in topology, CUpti_PcieDeviceType . If type is CUPTI_PCIE_DEVICE_TYPE_GPU use devId for id and gpuAttr and if type is CUPTI_PCIE_DEVICE_TYPE_BRIDGE use bridgeId for id and bridgeAttr.", "keywords": []}, {"id": 3514, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::upstreamBus", "display_name": "CUpti_ActivityPcie::upstreamBus", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie11upstreamBusE", "priority": 1, "content": "uint16_t  upstreamBus Upstream bus ID for the GPU or PCI bridge. Required to identify which bus it is connected to in the topology.", "keywords": []}, {"id": 3515, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::uuidDev", "display_name": "CUpti_ActivityPcie::uuidDev", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie7uuidDevE", "priority": 1, "content": "CUuuid  uuidDev UUID for the device. CUpti_ActivityDevice5 .", "keywords": []}, {"id": 3516, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "cpp", "name": "CUpti_ActivityPcie::vendorId", "display_name": "CUpti_ActivityPcie::vendorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_pcie", "anchor": "_CPPv4N18CUpti_ActivityPcie8vendorIdE", "priority": 1, "content": "uint16_t  vendorId Vendor ID of the bridge.", "keywords": []}, {"id": 3517, "doc_id": 3517, "filename": "api/struct_c_upti___activity_pcie.html", "domain_name": "std", "name": "api/struct_c_upti___activity_pcie", "display_name": "CUpti_ActivityPcie", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_pcie", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3518, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption", "display_name": "CUpti_ActivityPreemption", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv424CUpti_ActivityPreemption", "priority": 1, "content": "struct  CUpti_ActivityPreemption The activity record for a preemption of a CDP kernel. This activity record represents a preemption of a CDP kernel. Public Members", "keywords": []}, {"id": 3519, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::blockX", "display_name": "CUpti_ActivityPreemption::blockX", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption6blockXE", "priority": 1, "content": "uint32_t  blockX The X-dimension of the block that is preempted.", "keywords": []}, {"id": 3520, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::blockY", "display_name": "CUpti_ActivityPreemption::blockY", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption6blockYE", "priority": 1, "content": "uint32_t  blockY The Y-dimension of the block that is preempted.", "keywords": []}, {"id": 3521, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::blockZ", "display_name": "CUpti_ActivityPreemption::blockZ", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption6blockZE", "priority": 1, "content": "uint32_t  blockZ The Z-dimension of the block that is preempted.", "keywords": []}, {"id": 3522, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::gridId", "display_name": "CUpti_ActivityPreemption::gridId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption6gridIdE", "priority": 1, "content": "int64_t  gridId The grid-id of the block that is preempted.", "keywords": []}, {"id": 3523, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::kind", "display_name": "CUpti_ActivityPreemption::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_PREEMPTION.", "keywords": []}, {"id": 3524, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::pad", "display_name": "CUpti_ActivityPreemption::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3525, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::preemptionKind", "display_name": "CUpti_ActivityPreemption::preemptionKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption14preemptionKindE", "priority": 1, "content": "CUpti_ActivityPreemptionKind  preemptionKind kind of the preemption", "keywords": []}, {"id": 3526, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "cpp", "name": "CUpti_ActivityPreemption::timestamp", "display_name": "CUpti_ActivityPreemption::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_preemption", "anchor": "_CPPv4N24CUpti_ActivityPreemption9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp of the preemption, in ns. A value of 0 indicates that timestamp information could not be collected for the preemption.", "keywords": []}, {"id": 3527, "doc_id": 3527, "filename": "api/struct_c_upti___activity_preemption.html", "domain_name": "std", "name": "api/struct_c_upti___activity_preemption", "display_name": "CUpti_ActivityPreemption", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_preemption", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3528, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess", "display_name": "CUpti_ActivitySharedAccess", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv426CUpti_ActivitySharedAccess", "priority": 1, "content": "struct  CUpti_ActivitySharedAccess The activity record for source-level shared access. This activity records the locations of the shared accesses in the source (CUPTI_ACTIVITY_KIND_SHARED_ACCESS). Public Members", "keywords": []}, {"id": 3529, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::correlationId", "display_name": "CUpti_ActivitySharedAccess::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated.", "keywords": []}, {"id": 3530, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::executed", "display_name": "CUpti_ActivitySharedAccess::executed", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess8executedE", "priority": 1, "content": "uint32_t  executed The number of times this instruction was executed per warp. It will be incremented when at least one of thread among warp is active with predicate and condition code evaluating to true.", "keywords": []}, {"id": 3531, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::flags", "display_name": "CUpti_ActivitySharedAccess::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess5flagsE", "priority": 1, "content": "CUpti_ActivityFlag  flags The properties of this shared access.", "keywords": []}, {"id": 3532, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::functionId", "display_name": "CUpti_ActivitySharedAccess::functionId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess10functionIdE", "priority": 1, "content": "uint32_t  functionId Correlation ID with global/device function name.", "keywords": []}, {"id": 3533, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::kind", "display_name": "CUpti_ActivitySharedAccess::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_SHARED_ACCESS.", "keywords": []}, {"id": 3534, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::pad", "display_name": "CUpti_ActivitySharedAccess::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3535, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::pcOffset", "display_name": "CUpti_ActivitySharedAccess::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset The pc offset for the access.", "keywords": []}, {"id": 3536, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::sharedTransactions", "display_name": "CUpti_ActivitySharedAccess::sharedTransactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess18sharedTransactionsE", "priority": 1, "content": "uint64_t  sharedTransactions The total number of shared memory transactions generated by this access.", "keywords": []}, {"id": 3537, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::sourceLocatorId", "display_name": "CUpti_ActivitySharedAccess::sourceLocatorId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess15sourceLocatorIdE", "priority": 1, "content": "uint32_t  sourceLocatorId The ID for source locator.", "keywords": []}, {"id": 3538, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::theoreticalSharedTransactions", "display_name": "CUpti_ActivitySharedAccess::theoreticalSharedTransactions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess29theoreticalSharedTransactionsE", "priority": 1, "content": "uint64_t  theoreticalSharedTransactions The minimum number of shared memory transactions possible based on the access pattern.", "keywords": []}, {"id": 3539, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "cpp", "name": "CUpti_ActivitySharedAccess::threadsExecuted", "display_name": "CUpti_ActivitySharedAccess::threadsExecuted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "_CPPv4N26CUpti_ActivitySharedAccess15threadsExecutedE", "priority": 1, "content": "uint64_t  threadsExecuted This increments each time when this instruction is executed by number of threads that executed this instruction with predicate and condition code evaluating to true.", "keywords": []}, {"id": 3540, "doc_id": 3540, "filename": "api/struct_c_upti___activity_shared_access.html", "domain_name": "std", "name": "api/struct_c_upti___activity_shared_access", "display_name": "CUpti_ActivitySharedAccess", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_shared_access", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3541, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "cpp", "name": "CUpti_ActivitySourceLocator", "display_name": "CUpti_ActivitySourceLocator", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "_CPPv427CUpti_ActivitySourceLocator", "priority": 1, "content": "struct  CUpti_ActivitySourceLocator The activity record for source locator. This activity record represents a source locator (CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR). Public Members", "keywords": []}, {"id": 3542, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "cpp", "name": "CUpti_ActivitySourceLocator::fileName", "display_name": "CUpti_ActivitySourceLocator::fileName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "_CPPv4N27CUpti_ActivitySourceLocator8fileNameE", "priority": 1, "content": "const  char  * fileName The path for the file.", "keywords": []}, {"id": 3543, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "cpp", "name": "CUpti_ActivitySourceLocator::id", "display_name": "CUpti_ActivitySourceLocator::id", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "_CPPv4N27CUpti_ActivitySourceLocator2idE", "priority": 1, "content": "uint32_t  id The ID for the source path, will be used in all the source level results.", "keywords": []}, {"id": 3544, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "cpp", "name": "CUpti_ActivitySourceLocator::kind", "display_name": "CUpti_ActivitySourceLocator::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "_CPPv4N27CUpti_ActivitySourceLocator4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR.", "keywords": []}, {"id": 3545, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "cpp", "name": "CUpti_ActivitySourceLocator::lineNumber", "display_name": "CUpti_ActivitySourceLocator::lineNumber", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "_CPPv4N27CUpti_ActivitySourceLocator10lineNumberE", "priority": 1, "content": "uint32_t  lineNumber The line number in the source .", "keywords": []}, {"id": 3546, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "cpp", "name": "CUpti_ActivitySourceLocator::pad", "display_name": "CUpti_ActivitySourceLocator::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "_CPPv4N27CUpti_ActivitySourceLocator3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3547, "doc_id": 3547, "filename": "api/struct_c_upti___activity_source_locator.html", "domain_name": "std", "name": "api/struct_c_upti___activity_source_locator", "display_name": "CUpti_ActivitySourceLocator", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_source_locator", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3548, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream", "display_name": "CUpti_ActivityStream", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv420CUpti_ActivityStream", "priority": 1, "content": "struct  CUpti_ActivityStream The activity record for CUDA stream. This activity is used to track created streams. (CUPTI_ACTIVITY_KIND_STREAM). Public Members", "keywords": []}, {"id": 3549, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream::contextId", "display_name": "CUpti_ActivityStream::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv4N20CUpti_ActivityStream9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context where the stream was created.", "keywords": []}, {"id": 3550, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream::correlationId", "display_name": "CUpti_ActivityStream::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv4N20CUpti_ActivityStream13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the API to which this result is associated.", "keywords": []}, {"id": 3551, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream::flag", "display_name": "CUpti_ActivityStream::flag", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv4N20CUpti_ActivityStream4flagE", "priority": 1, "content": "CUpti_ActivityStreamFlag  flag Flags associated with the stream.", "keywords": []}, {"id": 3552, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream::kind", "display_name": "CUpti_ActivityStream::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv4N20CUpti_ActivityStream4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_STREAM.", "keywords": []}, {"id": 3553, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream::priority", "display_name": "CUpti_ActivityStream::priority", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv4N20CUpti_ActivityStream8priorityE", "priority": 1, "content": "uint32_t  priority The clamped priority for the stream.", "keywords": []}, {"id": 3554, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "cpp", "name": "CUpti_ActivityStream::streamId", "display_name": "CUpti_ActivityStream::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_stream", "anchor": "_CPPv4N20CUpti_ActivityStream8streamIdE", "priority": 1, "content": "uint32_t  streamId A unique stream ID to identify the stream.", "keywords": []}, {"id": 3555, "doc_id": 3555, "filename": "api/struct_c_upti___activity_stream.html", "domain_name": "std", "name": "api/struct_c_upti___activity_stream", "display_name": "CUpti_ActivityStream", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_stream", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3556, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization", "display_name": "CUpti_ActivitySynchronization", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv429CUpti_ActivitySynchronization", "priority": 1, "content": "struct  CUpti_ActivitySynchronization The activity record for synchronization management. This activity is used to track various CUDA synchronization APIs. (CUPTI_ACTIVITY_KIND_SYNCHRONIZATION). Public Members", "keywords": []}, {"id": 3557, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::contextId", "display_name": "CUpti_ActivitySynchronization::contextId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization9contextIdE", "priority": 1, "content": "uint32_t  contextId The ID of the context for which the synchronization API is called. In case of context synchronization API it is the context id for which the API is called. In case of stream/event synchronization it is the ID of the context where the stream/event was created.", "keywords": []}, {"id": 3558, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::correlationId", "display_name": "CUpti_ActivitySynchronization::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the API to which this result is associated.", "keywords": []}, {"id": 3559, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::cudaEventId", "display_name": "CUpti_ActivitySynchronization::cudaEventId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization11cudaEventIdE", "priority": 1, "content": "uint32_t  cudaEventId The event ID for which the synchronization API is called. A CUPTI_SYNCHRONIZATION_INVALID_VALUE value indicate the field is not applicable for this record. Not valid for cuCtxSynchronize, cuStreamSynchronize.", "keywords": []}, {"id": 3560, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::end", "display_name": "CUpti_ActivitySynchronization::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization3endE", "priority": 1, "content": "uint64_t  end The end timestamp for the function, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the function.", "keywords": []}, {"id": 3561, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::kind", "display_name": "CUpti_ActivitySynchronization::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_SYNCHRONIZATION.", "keywords": []}, {"id": 3562, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::start", "display_name": "CUpti_ActivitySynchronization::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization5startE", "priority": 1, "content": "uint64_t  start The start timestamp for the function, in ns. A value of 0 for both the start and end timestamps indicates that timestamp information could not be collected for the function.", "keywords": []}, {"id": 3563, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::streamId", "display_name": "CUpti_ActivitySynchronization::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization8streamIdE", "priority": 1, "content": "uint32_t  streamId The compute stream for which the synchronization API is called. A CUPTI_SYNCHRONIZATION_INVALID_VALUE value indicate the field is not applicable for this record. Not valid for cuCtxSynchronize, cuEventSynchronize.", "keywords": []}, {"id": 3564, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "cpp", "name": "CUpti_ActivitySynchronization::type", "display_name": "CUpti_ActivitySynchronization::type", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "_CPPv4N29CUpti_ActivitySynchronization4typeE", "priority": 1, "content": "CUpti_ActivitySynchronizationType  type The type of record.", "keywords": []}, {"id": 3565, "doc_id": 3565, "filename": "api/struct_c_upti___activity_synchronization.html", "domain_name": "std", "name": "api/struct_c_upti___activity_synchronization", "display_name": "CUpti_ActivitySynchronization", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_synchronization", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3566, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter", "display_name": "CUpti_ActivityUnifiedMemoryCounter", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv434CUpti_ActivityUnifiedMemoryCounter", "priority": 1, "content": "struct  CUpti_ActivityUnifiedMemoryCounter The activity record for Unified Memory counters (deprecated in CUDA 7.0) This activity record represents a Unified Memory counter (CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER). Public Members", "keywords": []}, {"id": 3567, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::counterKind", "display_name": "CUpti_ActivityUnifiedMemoryCounter::counterKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter11counterKindE", "priority": 1, "content": "CUpti_ActivityUnifiedMemoryCounterKind  counterKind The Unified Memory counter kind. See CUpti_ActivityUnifiedMemoryCounterKind", "keywords": []}, {"id": 3568, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::deviceId", "display_name": "CUpti_ActivityUnifiedMemoryCounter::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter8deviceIdE", "priority": 1, "content": "uint32_t  deviceId The ID of the device involved in the memory transfer operation. It is not relevant if the scope of the counter is global (all devices).", "keywords": []}, {"id": 3569, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::kind", "display_name": "CUpti_ActivityUnifiedMemoryCounter::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter4kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER.", "keywords": []}, {"id": 3570, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::pad", "display_name": "CUpti_ActivityUnifiedMemoryCounter::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter3padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3571, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::processId", "display_name": "CUpti_ActivityUnifiedMemoryCounter::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter9processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to. In case of global scope, processId is undefined.", "keywords": []}, {"id": 3572, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::scope", "display_name": "CUpti_ActivityUnifiedMemoryCounter::scope", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter5scopeE", "priority": 1, "content": "CUpti_ActivityUnifiedMemoryCounterScope  scope Scope of the Unified Memory counter. See CUpti_ActivityUnifiedMemoryCounterScope", "keywords": []}, {"id": 3573, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::timestamp", "display_name": "CUpti_ActivityUnifiedMemoryCounter::timestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter9timestampE", "priority": 1, "content": "uint64_t  timestamp The timestamp when this sample was retrieved, in ns. A value of 0 indicates that timestamp information could not be collected", "keywords": []}, {"id": 3574, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter::value", "display_name": "CUpti_ActivityUnifiedMemoryCounter::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "_CPPv4N34CUpti_ActivityUnifiedMemoryCounter5valueE", "priority": 1, "content": "uint64_t  value Value of the counter.", "keywords": []}, {"id": 3575, "doc_id": 3575, "filename": "api/struct_c_upti___activity_unified_memory_counter.html", "domain_name": "std", "name": "api/struct_c_upti___activity_unified_memory_counter", "display_name": "CUpti_ActivityUnifiedMemoryCounter", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_unified_memory_counter", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3576, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2", "display_name": "CUpti_ActivityUnifiedMemoryCounter2", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv435CUpti_ActivityUnifiedMemoryCounter2", "priority": 1, "content": "struct  CUpti_ActivityUnifiedMemoryCounter2 The activity record for Unified Memory counters (CUDA 7.0 and beyond) This activity record represents a Unified Memory counter (CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER). Public Members", "keywords": []}, {"id": 3577, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::address", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::address", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter27addressE", "priority": 1, "content": "uint64_t  address This is the virtual base address of the page/s being transferred. For cpu and gpu faults, the virtual address for the page that faulted.", "keywords": []}, {"id": 3578, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::counterKind", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::counterKind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter211counterKindE", "priority": 1, "content": "CUpti_ActivityUnifiedMemoryCounterKind  counterKind The Unified Memory counter kind.", "keywords": []}, {"id": 3579, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::dstId", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::dstId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter25dstIdE", "priority": 1, "content": "uint32_t  dstId The ID of the destination CPU/device involved in the memory transfer or remote map operation. Ignore this field if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING", "keywords": []}, {"id": 3580, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::end", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::end", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter23endE", "priority": 1, "content": "uint64_t  end The end timestamp of the counter, in ns. Ignore this field if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD and CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH, timestamp is captured when activity finishes on GPU. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT, timestamp is captured when CUDA driver queues the replay of faulting memory accesses on the GPU For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING, timestamp is captured when throttling operation was finished by CUDA driver", "keywords": []}, {"id": 3581, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::flags", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::flags", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter25flagsE", "priority": 1, "content": "uint32_t  flags The flags associated with this record. See enums CUpti_ActivityUnifiedMemoryAccessType if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT and CUpti_ActivityUnifiedMemoryMigrationCause if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD and CUpti_ActivityUnifiedMemoryRemoteMapCause if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP and CUpti_ActivityFlag if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING or CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING", "keywords": []}, {"id": 3582, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::kind", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter24kindE", "priority": 1, "content": "CUpti_ActivityKind  kind The activity record kind, must be CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER.", "keywords": []}, {"id": 3583, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::pad", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter23padE", "priority": 1, "content": "uint32_t  pad Undefined. Reserved for internal use.", "keywords": []}, {"id": 3584, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::processId", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::processId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter29processIdE", "priority": 1, "content": "uint32_t  processId The ID of the process to which this record belongs to.", "keywords": []}, {"id": 3585, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::srcId", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::srcId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter25srcIdE", "priority": 1, "content": "uint32_t  srcId The ID of the source CPU/device involved in the memory transfer, page fault, thrashing, throttling or remote map operation. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING, it is a bitwise ORing of the device IDs fighting for the memory region. Ignore this field if counterKind is CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT", "keywords": []}, {"id": 3586, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::start", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::start", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter25startE", "priority": 1, "content": "uint64_t  start The start timestamp of the counter, in ns. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD and CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH, timestamp is captured when activity starts on GPU. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT and CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT, timestamp is captured when CUDA driver started processing the fault. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THRASHING, timestamp is captured when CUDA driver detected thrashing of memory region. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THROTTLING, timestamp is captured when throttling operation was started by CUDA driver. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP, timestamp is captured when CUDA driver has pushed all required operations to the processor specified by dstId.", "keywords": []}, {"id": 3587, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::streamId", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::streamId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter28streamIdE", "priority": 1, "content": "uint32_t  streamId The ID of the stream causing the transfer. This value of this field is invalid.", "keywords": []}, {"id": 3588, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounter2::value", "display_name": "CUpti_ActivityUnifiedMemoryCounter2::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "_CPPv4N35CUpti_ActivityUnifiedMemoryCounter25valueE", "priority": 1, "content": "uint64_t  value Value of the counter For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_HTOD, CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_BYTES_TRANSFER_DTOH, CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_THREASHING and CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_REMOTE_MAP, it is the size of the memory region in bytes. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_GPU_PAGE_FAULT, it is the number of page fault groups for the same page. For counterKind CUPTI_ACTIVITY_UNIFIED_MEMORY_COUNTER_KIND_CPU_PAGE_FAULT_COUNT, it is the program counter for the instruction that caused fault.", "keywords": []}, {"id": 3589, "doc_id": 3589, "filename": "api/struct_c_upti___activity_unified_memory_counter2.html", "domain_name": "std", "name": "api/struct_c_upti___activity_unified_memory_counter2", "display_name": "CUpti_ActivityUnifiedMemoryCounter2", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_unified_memory_counter2", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3590, "doc_id": 3595, "filename": "api/struct_c_upti___activity_unified_memory_counter_config.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterConfig", "display_name": "CUpti_ActivityUnifiedMemoryCounterConfig", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___activity_unified_memory_counter_config", "anchor": "_CPPv440CUpti_ActivityUnifiedMemoryCounterConfig", "priority": 1, "content": "struct  CUpti_ActivityUnifiedMemoryCounterConfig Unified Memory counters configuration structure. This structure controls the enable/disable of the various Unified Memory counters consisting of scope, kind and other parameters. See function cuptiActivityConfigureUnifiedMemoryCounter  Public Members", "keywords": []}, {"id": 3591, "doc_id": 3595, "filename": "api/struct_c_upti___activity_unified_memory_counter_config.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterConfig::deviceId", "display_name": "CUpti_ActivityUnifiedMemoryCounterConfig::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter_config", "anchor": "_CPPv4N40CUpti_ActivityUnifiedMemoryCounterConfig8deviceIdE", "priority": 1, "content": "uint32_t  deviceId Device id of the target device. This is relevant only for single device scopes. (deprecated in CUDA 7.0)", "keywords": []}, {"id": 3592, "doc_id": 3595, "filename": "api/struct_c_upti___activity_unified_memory_counter_config.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterConfig::enable", "display_name": "CUpti_ActivityUnifiedMemoryCounterConfig::enable", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter_config", "anchor": "_CPPv4N40CUpti_ActivityUnifiedMemoryCounterConfig6enableE", "priority": 1, "content": "uint32_t  enable Control to enable/disable the counter. To enable the counter set it to non-zero value while disable is indicated by zero.", "keywords": []}, {"id": 3593, "doc_id": 3595, "filename": "api/struct_c_upti___activity_unified_memory_counter_config.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterConfig::kind", "display_name": "CUpti_ActivityUnifiedMemoryCounterConfig::kind", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter_config", "anchor": "_CPPv4N40CUpti_ActivityUnifiedMemoryCounterConfig4kindE", "priority": 1, "content": "CUpti_ActivityUnifiedMemoryCounterKind  kind Unified Memory counter Counter kind.", "keywords": []}, {"id": 3594, "doc_id": 3595, "filename": "api/struct_c_upti___activity_unified_memory_counter_config.html", "domain_name": "cpp", "name": "CUpti_ActivityUnifiedMemoryCounterConfig::scope", "display_name": "CUpti_ActivityUnifiedMemoryCounterConfig::scope", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___activity_unified_memory_counter_config", "anchor": "_CPPv4N40CUpti_ActivityUnifiedMemoryCounterConfig5scopeE", "priority": 1, "content": "CUpti_ActivityUnifiedMemoryCounterScope  scope Unified Memory counter Counter scope. (deprecated in CUDA 7.0)", "keywords": []}, {"id": 3595, "doc_id": 3595, "filename": "api/struct_c_upti___activity_unified_memory_counter_config.html", "domain_name": "std", "name": "api/struct_c_upti___activity_unified_memory_counter_config", "display_name": "CUpti_ActivityUnifiedMemoryCounterConfig", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___activity_unified_memory_counter_config", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3596, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData", "display_name": "CUpti_CallbackData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv418CUpti_CallbackData", "priority": 1, "content": "struct  CUpti_CallbackData Data passed into a runtime or driver API callback function. Data passed into a runtime or driver API callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_DRIVER_API or CUPTI_CB_DOMAIN_RUNTIME_API. The callback data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. For example, if you make a shallow copy of CUpti_CallbackData within a callback, you cannot dereference functionParams outside of that callback to access the function parameters. functionName is an exception: the string pointed to by functionName is a global constant and so may be accessed outside of the callback. Public Members", "keywords": []}, {"id": 3597, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::callbackSite", "display_name": "CUpti_CallbackData::callbackSite", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData12callbackSiteE", "priority": 1, "content": "CUpti_ApiCallbackSite  callbackSite Point in the runtime or driver function from where the callback was issued.", "keywords": []}, {"id": 3598, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::context", "display_name": "CUpti_CallbackData::context", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData7contextE", "priority": 1, "content": "CUcontext  context Driver context current to the thread, or null if no context is current. This value can change from the entry to exit callback of a runtime API function if the runtime initializes a context.", "keywords": []}, {"id": 3599, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::contextUid", "display_name": "CUpti_CallbackData::contextUid", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData10contextUidE", "priority": 1, "content": "uint32_t  contextUid Unique ID for the CUDA context associated with the thread. The UIDs are assigned sequentially as contexts are created and are unique within a process.", "keywords": []}, {"id": 3600, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::correlationData", "display_name": "CUpti_CallbackData::correlationData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData15correlationDataE", "priority": 1, "content": "uint64_t  * correlationData Pointer to data shared between the entry and exit callbacks of a given runtime or drive API function invocation. This field can be used to pass 64-bit values from the entry callback to the corresponding exit callback.", "keywords": []}, {"id": 3601, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::correlationId", "display_name": "CUpti_CallbackData::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The activity record correlation ID for this callback. For a driver domain callback (i.e. domain CUPTI_CB_DOMAIN_DRIVER_API) this ID will equal the correlation ID in the CUpti_ActivityAPI record corresponding to the CUDA driver function call. For a runtime domain callback (i.e. domain CUPTI_CB_DOMAIN_RUNTIME_API) this ID will equal the correlation ID in the CUpti_ActivityAPI record corresponding to the CUDA runtime function call. Within the callback, this ID can be recorded to correlate user data with the activity record. This field is new in 4.1.", "keywords": []}, {"id": 3602, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::functionName", "display_name": "CUpti_CallbackData::functionName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData12functionNameE", "priority": 1, "content": "const  char  * functionName Name of the runtime or driver API function which issued the callback. This string is a global constant and so may be accessed outside of the callback.", "keywords": []}, {"id": 3603, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::functionParams", "display_name": "CUpti_CallbackData::functionParams", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData14functionParamsE", "priority": 1, "content": "const  void  * functionParams Pointer to the arguments passed to the runtime or driver API call. See generated_cuda_runtime_api_meta.h and generated_cuda_meta.h for structure definitions for the parameters for each runtime and driver API function.", "keywords": []}, {"id": 3604, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::functionReturnValue", "display_name": "CUpti_CallbackData::functionReturnValue", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData19functionReturnValueE", "priority": 1, "content": "void  * functionReturnValue Pointer to the return value of the runtime or driver API call. This field is only valid within the exit::CUPTI_API_EXIT callback. For a runtime API functionReturnValue points to a cudaError_t . For a driver API functionReturnValue points to a CUresult .", "keywords": []}, {"id": 3605, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "cpp", "name": "CUpti_CallbackData::symbolName", "display_name": "CUpti_CallbackData::symbolName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___callback_data", "anchor": "_CPPv4N18CUpti_CallbackData10symbolNameE", "priority": 1, "content": "const  char  * symbolName Name of the symbol operated on by the runtime or driver API function which issued the callback. This entry is valid only for driver and runtime launch callbacks, where it returns the name of the kernel.", "keywords": []}, {"id": 3606, "doc_id": 3606, "filename": "api/struct_c_upti___callback_data.html", "domain_name": "std", "name": "api/struct_c_upti___callback_data", "display_name": "CUpti_CallbackData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___callback_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3607, "doc_id": 3610, "filename": "api/struct_c_upti___event_group_set.html", "domain_name": "cpp", "name": "CUpti_EventGroupSet", "display_name": "CUpti_EventGroupSet", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___event_group_set", "anchor": "_CPPv419CUpti_EventGroupSet", "priority": 1, "content": "struct  CUpti_EventGroupSet A set of event groups. A set of event groups. When returned by cuptiEventGroupSetsCreate and cuptiMetricCreateEventGroupSets a set indicates that event groups that can be enabled at the same time (i.e. all the events in the set can be collected simultaneously). Public Members", "keywords": []}, {"id": 3608, "doc_id": 3610, "filename": "api/struct_c_upti___event_group_set.html", "domain_name": "cpp", "name": "CUpti_EventGroupSet::eventGroups", "display_name": "CUpti_EventGroupSet::eventGroups", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___event_group_set", "anchor": "_CPPv4N19CUpti_EventGroupSet11eventGroupsE", "priority": 1, "content": "CUpti_EventGroup  * eventGroups An array of numEventGroups event groups.", "keywords": []}, {"id": 3609, "doc_id": 3610, "filename": "api/struct_c_upti___event_group_set.html", "domain_name": "cpp", "name": "CUpti_EventGroupSet::numEventGroups", "display_name": "CUpti_EventGroupSet::numEventGroups", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___event_group_set", "anchor": "_CPPv4N19CUpti_EventGroupSet14numEventGroupsE", "priority": 1, "content": "uint32_t  numEventGroups The number of event groups in the set.", "keywords": []}, {"id": 3610, "doc_id": 3610, "filename": "api/struct_c_upti___event_group_set.html", "domain_name": "std", "name": "api/struct_c_upti___event_group_set", "display_name": "CUpti_EventGroupSet", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___event_group_set", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3611, "doc_id": 3614, "filename": "api/struct_c_upti___event_group_sets.html", "domain_name": "cpp", "name": "CUpti_EventGroupSets", "display_name": "CUpti_EventGroupSets", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___event_group_sets", "anchor": "_CPPv420CUpti_EventGroupSets", "priority": 1, "content": "struct  CUpti_EventGroupSets A set of event group sets. A set of event group sets. When returned by cuptiEventGroupSetsCreate and cuptiMetricCreateEventGroupSets a CUpti_EventGroupSets indicates the number of passes required to collect all the events, and the event groups that should be collected during each pass. Public Members", "keywords": []}, {"id": 3612, "doc_id": 3614, "filename": "api/struct_c_upti___event_group_sets.html", "domain_name": "cpp", "name": "CUpti_EventGroupSets::numSets", "display_name": "CUpti_EventGroupSets::numSets", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___event_group_sets", "anchor": "_CPPv4N20CUpti_EventGroupSets7numSetsE", "priority": 1, "content": "uint32_t  numSets Number of event group sets.", "keywords": []}, {"id": 3613, "doc_id": 3614, "filename": "api/struct_c_upti___event_group_sets.html", "domain_name": "cpp", "name": "CUpti_EventGroupSets::sets", "display_name": "CUpti_EventGroupSets::sets", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___event_group_sets", "anchor": "_CPPv4N20CUpti_EventGroupSets4setsE", "priority": 1, "content": "CUpti_EventGroupSet  * sets An array of numSets event group sets.", "keywords": []}, {"id": 3614, "doc_id": 3614, "filename": "api/struct_c_upti___event_group_sets.html", "domain_name": "std", "name": "api/struct_c_upti___event_group_sets", "display_name": "CUpti_EventGroupSets", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___event_group_sets", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3615, "doc_id": 3620, "filename": "api/struct_c_upti___get_cubin_crc_params.html", "domain_name": "cpp", "name": "CUpti_GetCubinCrcParams", "display_name": "CUpti_GetCubinCrcParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___get_cubin_crc_params", "anchor": "_CPPv423CUpti_GetCubinCrcParams", "priority": 1, "content": "struct  CUpti_GetCubinCrcParams Params for cuptiGetCubinCrc. Public Members", "keywords": []}, {"id": 3616, "doc_id": 3620, "filename": "api/struct_c_upti___get_cubin_crc_params.html", "domain_name": "cpp", "name": "CUpti_GetCubinCrcParams::cubin", "display_name": "CUpti_GetCubinCrcParams::cubin", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_cubin_crc_params", "anchor": "_CPPv4N23CUpti_GetCubinCrcParams5cubinE", "priority": 1, "content": "const  void  * cubin [w] Pointer to cubin binary", "keywords": []}, {"id": 3617, "doc_id": 3620, "filename": "api/struct_c_upti___get_cubin_crc_params.html", "domain_name": "cpp", "name": "CUpti_GetCubinCrcParams::cubinCrc", "display_name": "CUpti_GetCubinCrcParams::cubinCrc", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_cubin_crc_params", "anchor": "_CPPv4N23CUpti_GetCubinCrcParams8cubinCrcE", "priority": 1, "content": "uint64_t  cubinCrc [r] Computed CRC will be stored in it.", "keywords": []}, {"id": 3618, "doc_id": 3620, "filename": "api/struct_c_upti___get_cubin_crc_params.html", "domain_name": "cpp", "name": "CUpti_GetCubinCrcParams::cubinSize", "display_name": "CUpti_GetCubinCrcParams::cubinSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_cubin_crc_params", "anchor": "_CPPv4N23CUpti_GetCubinCrcParams9cubinSizeE", "priority": 1, "content": "size_t  cubinSize [w] Size of cubin binary.", "keywords": []}, {"id": 3619, "doc_id": 3620, "filename": "api/struct_c_upti___get_cubin_crc_params.html", "domain_name": "cpp", "name": "CUpti_GetCubinCrcParams::size", "display_name": "CUpti_GetCubinCrcParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_cubin_crc_params", "anchor": "_CPPv4N23CUpti_GetCubinCrcParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of configuration structure. CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3620, "doc_id": 3620, "filename": "api/struct_c_upti___get_cubin_crc_params.html", "domain_name": "std", "name": "api/struct_c_upti___get_cubin_crc_params", "display_name": "CUpti_GetCubinCrcParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___get_cubin_crc_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3621, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams", "display_name": "CUpti_GetSassToSourceCorrelationParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv438CUpti_GetSassToSourceCorrelationParams", "priority": 1, "content": "struct  CUpti_GetSassToSourceCorrelationParams Params for cuptiGetSassToSourceCorrelation. Public Members", "keywords": []}, {"id": 3622, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::cubin", "display_name": "CUpti_GetSassToSourceCorrelationParams::cubin", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams5cubinE", "priority": 1, "content": "const  void  * cubin [w] Pointer to cubin binary where function belongs.", "keywords": []}, {"id": 3623, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::cubinSize", "display_name": "CUpti_GetSassToSourceCorrelationParams::cubinSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams9cubinSizeE", "priority": 1, "content": "size_t  cubinSize [w] Size of cubin binary.", "keywords": []}, {"id": 3624, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::dirName", "display_name": "CUpti_GetSassToSourceCorrelationParams::dirName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams7dirNameE", "priority": 1, "content": "char  * dirName [r] Path for the directory of source file.", "keywords": []}, {"id": 3625, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::fileName", "display_name": "CUpti_GetSassToSourceCorrelationParams::fileName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams8fileNameE", "priority": 1, "content": "char  * fileName [r] Path for the source file.", "keywords": []}, {"id": 3626, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::functionName", "display_name": "CUpti_GetSassToSourceCorrelationParams::functionName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams12functionNameE", "priority": 1, "content": "const  char  * functionName [w] Function name to which PC belongs.", "keywords": []}, {"id": 3627, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::lineNumber", "display_name": "CUpti_GetSassToSourceCorrelationParams::lineNumber", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams10lineNumberE", "priority": 1, "content": "uint32_t  lineNumber [r] Line number in the source code.", "keywords": []}, {"id": 3628, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::pcOffset", "display_name": "CUpti_GetSassToSourceCorrelationParams::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams8pcOffsetE", "priority": 1, "content": "uint64_t  pcOffset [w] PC offset", "keywords": []}, {"id": 3629, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "cpp", "name": "CUpti_GetSassToSourceCorrelationParams::size", "display_name": "CUpti_GetSassToSourceCorrelationParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "_CPPv4N38CUpti_GetSassToSourceCorrelationParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_GetSassToSourceCorrelationParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3630, "doc_id": 3630, "filename": "api/struct_c_upti___get_sass_to_source_correlation_params.html", "domain_name": "std", "name": "api/struct_c_upti___get_sass_to_source_correlation_params", "display_name": "CUpti_GetSassToSourceCorrelationParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___get_sass_to_source_correlation_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3631, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData", "display_name": "CUpti_GraphData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv415CUpti_GraphData", "priority": 1, "content": "struct  CUpti_GraphData CUDA graphs data passed into a resource callback function. CUDA graphs data passed into a resource callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_RESOURCE. The graph data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 3632, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::dependency", "display_name": "CUpti_GraphData::dependency", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData10dependencyE", "priority": 1, "content": "CUgraphNode  dependency The dependent graph node The size of the array is. Param numDependencies.", "keywords": []}, {"id": 3633, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::graph", "display_name": "CUpti_GraphData::graph", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData5graphE", "priority": 1, "content": "CUgraph  graph CUDA graph.", "keywords": []}, {"id": 3634, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::graphExec", "display_name": "CUpti_GraphData::graphExec", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData9graphExecE", "priority": 1, "content": "CUgraphExec  graphExec CUDA executable graph.", "keywords": []}, {"id": 3635, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::node", "display_name": "CUpti_GraphData::node", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData4nodeE", "priority": 1, "content": "CUgraphNode  node CUDA graph node.", "keywords": []}, {"id": 3636, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::nodeType", "display_name": "CUpti_GraphData::nodeType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData8nodeTypeE", "priority": 1, "content": "CUgraphNodeType  nodeType Type of the. Param node", "keywords": []}, {"id": 3637, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::originalGraph", "display_name": "CUpti_GraphData::originalGraph", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData13originalGraphE", "priority": 1, "content": "CUgraph  originalGraph The original CUDA graph from which. Param graph is cloned", "keywords": []}, {"id": 3638, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "cpp", "name": "CUpti_GraphData::originalNode", "display_name": "CUpti_GraphData::originalNode", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___graph_data", "anchor": "_CPPv4N15CUpti_GraphData12originalNodeE", "priority": 1, "content": "CUgraphNode  originalNode The original CUDA graph node from which. Param node is cloned", "keywords": []}, {"id": 3639, "doc_id": 3639, "filename": "api/struct_c_upti___graph_data.html", "domain_name": "std", "name": "api/struct_c_upti___graph_data", "display_name": "CUpti_GraphData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___graph_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3640, "doc_id": 3644, "filename": "api/struct_c_upti___module_resource_data.html", "domain_name": "cpp", "name": "CUpti_ModuleResourceData", "display_name": "CUpti_ModuleResourceData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___module_resource_data", "anchor": "_CPPv424CUpti_ModuleResourceData", "priority": 1, "content": "struct  CUpti_ModuleResourceData Module data passed into a resource callback function. CUDA module data passed into a resource callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_RESOURCE. The module data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 3641, "doc_id": 3644, "filename": "api/struct_c_upti___module_resource_data.html", "domain_name": "cpp", "name": "CUpti_ModuleResourceData::cubinSize", "display_name": "CUpti_ModuleResourceData::cubinSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___module_resource_data", "anchor": "_CPPv4N24CUpti_ModuleResourceData9cubinSizeE", "priority": 1, "content": "size_t  cubinSize The size of the cubin.", "keywords": []}, {"id": 3642, "doc_id": 3644, "filename": "api/struct_c_upti___module_resource_data.html", "domain_name": "cpp", "name": "CUpti_ModuleResourceData::moduleId", "display_name": "CUpti_ModuleResourceData::moduleId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___module_resource_data", "anchor": "_CPPv4N24CUpti_ModuleResourceData8moduleIdE", "priority": 1, "content": "uint32_t  moduleId Identifier to associate with the CUDA module.", "keywords": []}, {"id": 3643, "doc_id": 3644, "filename": "api/struct_c_upti___module_resource_data.html", "domain_name": "cpp", "name": "CUpti_ModuleResourceData::pCubin", "display_name": "CUpti_ModuleResourceData::pCubin", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___module_resource_data", "anchor": "_CPPv4N24CUpti_ModuleResourceData6pCubinE", "priority": 1, "content": "const  char  * pCubin Pointer to the associated cubin.", "keywords": []}, {"id": 3644, "doc_id": 3644, "filename": "api/struct_c_upti___module_resource_data.html", "domain_name": "std", "name": "api/struct_c_upti___module_resource_data", "display_name": "CUpti_ModuleResourceData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___module_resource_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3645, "doc_id": 3649, "filename": "api/struct_c_upti___nvtx_data.html", "domain_name": "cpp", "name": "CUpti_NvtxData", "display_name": "CUpti_NvtxData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___nvtx_data", "anchor": "_CPPv414CUpti_NvtxData", "priority": 1, "content": "struct  CUpti_NvtxData Data passed into a NVTX callback function. Data passed into a NVTX callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_NVTX. Unless otherwise notes, the callback data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 3646, "doc_id": 3649, "filename": "api/struct_c_upti___nvtx_data.html", "domain_name": "cpp", "name": "CUpti_NvtxData::functionName", "display_name": "CUpti_NvtxData::functionName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___nvtx_data", "anchor": "_CPPv4N14CUpti_NvtxData12functionNameE", "priority": 1, "content": "const  char  * functionName Name of the NVTX API function which issued the callback. This string is a global constant and so may be accessed outside of the callback.", "keywords": []}, {"id": 3647, "doc_id": 3649, "filename": "api/struct_c_upti___nvtx_data.html", "domain_name": "cpp", "name": "CUpti_NvtxData::functionParams", "display_name": "CUpti_NvtxData::functionParams", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___nvtx_data", "anchor": "_CPPv4N14CUpti_NvtxData14functionParamsE", "priority": 1, "content": "const  void  * functionParams Pointer to the arguments passed to the NVTX API call. See generated_nvtx_meta.h for structure definitions for the parameters for each NVTX API function.", "keywords": []}, {"id": 3648, "doc_id": 3649, "filename": "api/struct_c_upti___nvtx_data.html", "domain_name": "cpp", "name": "CUpti_NvtxData::functionReturnValue", "display_name": "CUpti_NvtxData::functionReturnValue", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___nvtx_data", "anchor": "_CPPv4N14CUpti_NvtxData19functionReturnValueE", "priority": 1, "content": "const  void  * functionReturnValue Pointer to the return value of the NVTX API call. See nvToolsExt.h for each NVTX API function\u2019s return value.", "keywords": []}, {"id": 3649, "doc_id": 3649, "filename": "api/struct_c_upti___nvtx_data.html", "domain_name": "std", "name": "api/struct_c_upti___nvtx_data", "display_name": "CUpti_NvtxData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___nvtx_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3650, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo", "display_name": "CUpti_PCSamplingConfigurationInfo", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv433CUpti_PCSamplingConfigurationInfo", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo PC sampling configuration information structure. This structure provides CUpti_PCSamplingConfigurationAttributeType which can be configured or queried for PC sampling configuration Public Members", "keywords": []}, {"id": 3651, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::attributeType", "display_name": "CUpti_PCSamplingConfigurationInfo::attributeType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo13attributeTypeE", "priority": 1, "content": "CUpti_PCSamplingConfigurationAttributeType  attributeType Refer CUpti_PCSamplingConfigurationAttributeType for all supported attribute types.", "keywords": []}, {"id": 3652, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::collectionModeData", "display_name": "CUpti_PCSamplingConfigurationInfo::collectionModeData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo18collectionModeDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  collectionModeData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_COLLECTION_MODE .", "keywords": []}, {"id": 3653, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::enableStartStopControlData", "display_name": "CUpti_PCSamplingConfigurationInfo::enableStartStopControlData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo26enableStartStopControlDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  enableStartStopControlData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL .", "keywords": []}, {"id": 3654, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::hardwareBufferSizeData", "display_name": "CUpti_PCSamplingConfigurationInfo::hardwareBufferSizeData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo22hardwareBufferSizeDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  hardwareBufferSizeData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE .", "keywords": []}, {"id": 3655, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::invalidData", "display_name": "CUpti_PCSamplingConfigurationInfo::invalidData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo11invalidDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  invalidData Invalid Value.", "keywords": []}, {"id": 3656, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::outputDataFormatData", "display_name": "CUpti_PCSamplingConfigurationInfo::outputDataFormatData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo20outputDataFormatDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  outputDataFormatData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_OUTPUT_DATA_FORMAT .", "keywords": []}, {"id": 3657, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::samplingDataBufferData", "display_name": "CUpti_PCSamplingConfigurationInfo::samplingDataBufferData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo22samplingDataBufferDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  samplingDataBufferData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_DATA_BUFFER .", "keywords": []}, {"id": 3658, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::samplingPeriodData", "display_name": "CUpti_PCSamplingConfigurationInfo::samplingPeriodData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo18samplingPeriodDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  samplingPeriodData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD .", "keywords": []}, {"id": 3659, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::scratchBufferSizeData", "display_name": "CUpti_PCSamplingConfigurationInfo::scratchBufferSizeData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo21scratchBufferSizeDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  scratchBufferSizeData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SCRATCH_BUFFER_SIZE .", "keywords": []}, {"id": 3660, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::stallReasonData", "display_name": "CUpti_PCSamplingConfigurationInfo::stallReasonData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo15stallReasonDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  stallReasonData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_STALL_REASON .", "keywords": []}, {"id": 3661, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfo::workerThreadPeriodicSleepSpanData", "display_name": "CUpti_PCSamplingConfigurationInfo::workerThreadPeriodicSleepSpanData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "_CPPv4N33CUpti_PCSamplingConfigurationInfo33workerThreadPeriodicSleepSpanDataE", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfo :: [anonymous] :: [anonymous]  workerThreadPeriodicSleepSpanData Refer CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN .", "keywords": []}, {"id": 3662, "doc_id": 3662, "filename": "api/struct_c_upti___p_c_sampling_configuration_info.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_configuration_info", "display_name": "CUpti_PCSamplingConfigurationInfo", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_configuration_info", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3663, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfoParams", "display_name": "CUpti_PCSamplingConfigurationInfoParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "_CPPv439CUpti_PCSamplingConfigurationInfoParams", "priority": 1, "content": "struct  CUpti_PCSamplingConfigurationInfoParams PC sampling configuration structure. This structure configures PC sampling using cuptiPCSamplingSetConfigurationAttribute and queries PC sampling default configuration using cuptiPCSamplingGetConfigurationAttribute  Public Members", "keywords": []}, {"id": 3664, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfoParams::ctx", "display_name": "CUpti_PCSamplingConfigurationInfoParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "_CPPv4N39CUpti_PCSamplingConfigurationInfoParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3665, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfoParams::numAttributes", "display_name": "CUpti_PCSamplingConfigurationInfoParams::numAttributes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "_CPPv4N39CUpti_PCSamplingConfigurationInfoParams13numAttributesE", "priority": 1, "content": "size_t  numAttributes [w] Number of attributes to configure using cuptiPCSamplingSetConfigurationAttribute or query using cuptiPCSamplingGetConfigurationAttribute", "keywords": []}, {"id": 3666, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfoParams::pPCSamplingConfigurationInfo", "display_name": "CUpti_PCSamplingConfigurationInfoParams::pPCSamplingConfigurationInfo", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "_CPPv4N39CUpti_PCSamplingConfigurationInfoParams28pPCSamplingConfigurationInfoE", "priority": 1, "content": "CUpti_PCSamplingConfigurationInfo  * pPCSamplingConfigurationInfo Refer CUpti_PCSamplingConfigurationInfo .", "keywords": []}, {"id": 3667, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfoParams::pPriv", "display_name": "CUpti_PCSamplingConfigurationInfoParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "_CPPv4N39CUpti_PCSamplingConfigurationInfoParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3668, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingConfigurationInfoParams::size", "display_name": "CUpti_PCSamplingConfigurationInfoParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "_CPPv4N39CUpti_PCSamplingConfigurationInfoParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingConfigurationInfoParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3669, "doc_id": 3669, "filename": "api/struct_c_upti___p_c_sampling_configuration_info_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_configuration_info_params", "display_name": "CUpti_PCSamplingConfigurationInfoParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_configuration_info_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3670, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData", "display_name": "CUpti_PCSamplingData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv420CUpti_PCSamplingData", "priority": 1, "content": "struct  CUpti_PCSamplingData Collected PC Sampling data. Public Members", "keywords": []}, {"id": 3671, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::collectNumPcs", "display_name": "CUpti_PCSamplingData::collectNumPcs", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData13collectNumPcsE", "priority": 1, "content": "size_t  collectNumPcs [w] Number of PCs to be collected", "keywords": []}, {"id": 3672, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::droppedSamples", "display_name": "CUpti_PCSamplingData::droppedSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData14droppedSamplesE", "priority": 1, "content": "uint64_t  droppedSamples [r] Number of samples that were dropped by hardware due to backpressure/overflow.", "keywords": []}, {"id": 3673, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::hardwareBufferFull", "display_name": "CUpti_PCSamplingData::hardwareBufferFull", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData18hardwareBufferFullE", "priority": 1, "content": "uint8_t  hardwareBufferFull [r] Status of the hardware buffer. CUPTI returns the error code CUPTI_ERROR_OUT_OF_MEMORY when hardware buffer is full. When hardware buffer is full, user will get pc data as 0. To mitigate this issue, one or more of the below options can be tried: Increase the hardware buffer size using the attribute CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_HARDWARE_BUFFER_SIZE Decrease the thread sleep span using the attribute CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN Decrease the sampling frequency using the attribute CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_SAMPLING_PERIOD", "keywords": []}, {"id": 3674, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::nonUsrKernelsTotalSamples", "display_name": "CUpti_PCSamplingData::nonUsrKernelsTotalSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData25nonUsrKernelsTotalSamplesE", "priority": 1, "content": "uint64_t  nonUsrKernelsTotalSamples [r] Number of samples collected across all non user kernels PCs. It includes samples for non-user kernels. It includes counts for all non selected stall reasons as well. CUPTI does not provide PC records for non-user kernels.", "keywords": []}, {"id": 3675, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::pPcData", "display_name": "CUpti_PCSamplingData::pPcData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData7pPcDataE", "priority": 1, "content": "CUpti_PCSamplingPCData  * pPcData [r] Profiled PC data This data struct should have enough memory to collect number of PCs mentioned in collectNumPcs", "keywords": []}, {"id": 3676, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::rangeId", "display_name": "CUpti_PCSamplingData::rangeId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData7rangeIdE", "priority": 1, "content": "uint64_t  rangeId [r] Unique identifier for each range. Data collected across multiple ranges in multiple buffers can be identified using range id.", "keywords": []}, {"id": 3677, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::remainingNumPcs", "display_name": "CUpti_PCSamplingData::remainingNumPcs", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData15remainingNumPcsE", "priority": 1, "content": "size_t  remainingNumPcs [r] Number of PCs available for collection", "keywords": []}, {"id": 3678, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::size", "display_name": "CUpti_PCSamplingData::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure. CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3679, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::totalNumPcs", "display_name": "CUpti_PCSamplingData::totalNumPcs", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData11totalNumPcsE", "priority": 1, "content": "size_t  totalNumPcs [r] Number of PCs collected", "keywords": []}, {"id": 3680, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingData::totalSamples", "display_name": "CUpti_PCSamplingData::totalSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "_CPPv4N20CUpti_PCSamplingData12totalSamplesE", "priority": 1, "content": "uint64_t  totalSamples [r] Number of samples collected across all PCs. It includes samples for user modules, samples for non-user kernels and dropped samples. It includes counts for all non selected stall reasons. CUPTI does not provide PC records for non-user kernels. CUPTI does not provide PC records for instructions for which all selected stall reason metrics counts are zero.", "keywords": []}, {"id": 3681, "doc_id": 3681, "filename": "api/struct_c_upti___p_c_sampling_data.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_data", "display_name": "CUpti_PCSamplingData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3682, "doc_id": 3686, "filename": "api/struct_c_upti___p_c_sampling_disable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingDisableParams", "display_name": "CUpti_PCSamplingDisableParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_disable_params", "anchor": "_CPPv429CUpti_PCSamplingDisableParams", "priority": 1, "content": "struct  CUpti_PCSamplingDisableParams Params for cuptiPCSamplingDisable. Public Members", "keywords": []}, {"id": 3683, "doc_id": 3686, "filename": "api/struct_c_upti___p_c_sampling_disable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingDisableParams::ctx", "display_name": "CUpti_PCSamplingDisableParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_disable_params", "anchor": "_CPPv4N29CUpti_PCSamplingDisableParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3684, "doc_id": 3686, "filename": "api/struct_c_upti___p_c_sampling_disable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingDisableParams::pPriv", "display_name": "CUpti_PCSamplingDisableParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_disable_params", "anchor": "_CPPv4N29CUpti_PCSamplingDisableParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3685, "doc_id": 3686, "filename": "api/struct_c_upti___p_c_sampling_disable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingDisableParams::size", "display_name": "CUpti_PCSamplingDisableParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_disable_params", "anchor": "_CPPv4N29CUpti_PCSamplingDisableParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingDisableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3686, "doc_id": 3686, "filename": "api/struct_c_upti___p_c_sampling_disable_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_disable_params", "display_name": "CUpti_PCSamplingDisableParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_disable_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3687, "doc_id": 3691, "filename": "api/struct_c_upti___p_c_sampling_enable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingEnableParams", "display_name": "CUpti_PCSamplingEnableParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_enable_params", "anchor": "_CPPv428CUpti_PCSamplingEnableParams", "priority": 1, "content": "struct  CUpti_PCSamplingEnableParams Params for cuptiPCSamplingEnable. Public Members", "keywords": []}, {"id": 3688, "doc_id": 3691, "filename": "api/struct_c_upti___p_c_sampling_enable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingEnableParams::ctx", "display_name": "CUpti_PCSamplingEnableParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_enable_params", "anchor": "_CPPv4N28CUpti_PCSamplingEnableParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3689, "doc_id": 3691, "filename": "api/struct_c_upti___p_c_sampling_enable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingEnableParams::pPriv", "display_name": "CUpti_PCSamplingEnableParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_enable_params", "anchor": "_CPPv4N28CUpti_PCSamplingEnableParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3690, "doc_id": 3691, "filename": "api/struct_c_upti___p_c_sampling_enable_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingEnableParams::size", "display_name": "CUpti_PCSamplingEnableParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_enable_params", "anchor": "_CPPv4N28CUpti_PCSamplingEnableParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingEnableParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3691, "doc_id": 3691, "filename": "api/struct_c_upti___p_c_sampling_enable_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_enable_params", "display_name": "CUpti_PCSamplingEnableParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_enable_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3692, "doc_id": 3697, "filename": "api/struct_c_upti___p_c_sampling_get_data_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetDataParams", "display_name": "CUpti_PCSamplingGetDataParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_get_data_params", "anchor": "_CPPv429CUpti_PCSamplingGetDataParams", "priority": 1, "content": "struct  CUpti_PCSamplingGetDataParams Params for cuptiPCSamplingEnable. Public Members", "keywords": []}, {"id": 3693, "doc_id": 3697, "filename": "api/struct_c_upti___p_c_sampling_get_data_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetDataParams::ctx", "display_name": "CUpti_PCSamplingGetDataParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_data_params", "anchor": "_CPPv4N29CUpti_PCSamplingGetDataParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3694, "doc_id": 3697, "filename": "api/struct_c_upti___p_c_sampling_get_data_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetDataParams::pPriv", "display_name": "CUpti_PCSamplingGetDataParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_data_params", "anchor": "_CPPv4N29CUpti_PCSamplingGetDataParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3695, "doc_id": 3697, "filename": "api/struct_c_upti___p_c_sampling_get_data_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetDataParams::pcSamplingData", "display_name": "CUpti_PCSamplingGetDataParams::pcSamplingData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_data_params", "anchor": "_CPPv4N29CUpti_PCSamplingGetDataParams14pcSamplingDataE", "priority": 1, "content": "void  * pcSamplingData Param pcSamplingData Data buffer to hold collected PC Sampling data PARSED_DATA Buffer type is void * which can point to PARSED_DATA Refer CUpti_PCSamplingData for buffer format for PARSED_DATA", "keywords": []}, {"id": 3696, "doc_id": 3697, "filename": "api/struct_c_upti___p_c_sampling_get_data_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetDataParams::size", "display_name": "CUpti_PCSamplingGetDataParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_data_params", "anchor": "_CPPv4N29CUpti_PCSamplingGetDataParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingGetDataParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3697, "doc_id": 3697, "filename": "api/struct_c_upti___p_c_sampling_get_data_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_get_data_params", "display_name": "CUpti_PCSamplingGetDataParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_get_data_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3698, "doc_id": 3703, "filename": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetNumStallReasonsParams", "display_name": "CUpti_PCSamplingGetNumStallReasonsParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "anchor": "_CPPv440CUpti_PCSamplingGetNumStallReasonsParams", "priority": 1, "content": "struct  CUpti_PCSamplingGetNumStallReasonsParams Params for cuptiPCSamplingGetNumStallReasons. Public Members", "keywords": []}, {"id": 3699, "doc_id": 3703, "filename": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetNumStallReasonsParams::ctx", "display_name": "CUpti_PCSamplingGetNumStallReasonsParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "anchor": "_CPPv4N40CUpti_PCSamplingGetNumStallReasonsParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3700, "doc_id": 3703, "filename": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetNumStallReasonsParams::numStallReasons", "display_name": "CUpti_PCSamplingGetNumStallReasonsParams::numStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "anchor": "_CPPv4N40CUpti_PCSamplingGetNumStallReasonsParams15numStallReasonsE", "priority": 1, "content": "size_t  * numStallReasons [r] Number of stall reasons", "keywords": []}, {"id": 3701, "doc_id": 3703, "filename": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetNumStallReasonsParams::pPriv", "display_name": "CUpti_PCSamplingGetNumStallReasonsParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "anchor": "_CPPv4N40CUpti_PCSamplingGetNumStallReasonsParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3702, "doc_id": 3703, "filename": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetNumStallReasonsParams::size", "display_name": "CUpti_PCSamplingGetNumStallReasonsParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "anchor": "_CPPv4N40CUpti_PCSamplingGetNumStallReasonsParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingGetNumStallReasonsParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3703, "doc_id": 3703, "filename": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "display_name": "CUpti_PCSamplingGetNumStallReasonsParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_get_num_stall_reasons_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3704, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams", "display_name": "CUpti_PCSamplingGetStallReasonsParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv437CUpti_PCSamplingGetStallReasonsParams", "priority": 1, "content": "struct  CUpti_PCSamplingGetStallReasonsParams Params for cuptiPCSamplingGetStallReasons. Public Members", "keywords": []}, {"id": 3705, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams::ctx", "display_name": "CUpti_PCSamplingGetStallReasonsParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv4N37CUpti_PCSamplingGetStallReasonsParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3706, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams::numStallReasons", "display_name": "CUpti_PCSamplingGetStallReasonsParams::numStallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv4N37CUpti_PCSamplingGetStallReasonsParams15numStallReasonsE", "priority": 1, "content": "size_t  numStallReasons [w] Number of stall reasons", "keywords": []}, {"id": 3707, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams::pPriv", "display_name": "CUpti_PCSamplingGetStallReasonsParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv4N37CUpti_PCSamplingGetStallReasonsParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3708, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams::size", "display_name": "CUpti_PCSamplingGetStallReasonsParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv4N37CUpti_PCSamplingGetStallReasonsParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingGetStallReasonsParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3709, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams::stallReasonIndex", "display_name": "CUpti_PCSamplingGetStallReasonsParams::stallReasonIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv4N37CUpti_PCSamplingGetStallReasonsParams16stallReasonIndexE", "priority": 1, "content": "uint32_t  * stallReasonIndex [r] Stall reason index", "keywords": []}, {"id": 3710, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingGetStallReasonsParams::stallReasons", "display_name": "CUpti_PCSamplingGetStallReasonsParams::stallReasons", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "_CPPv4N37CUpti_PCSamplingGetStallReasonsParams12stallReasonsE", "priority": 1, "content": "char  * * stallReasons [r] Stall reasons name", "keywords": []}, {"id": 3711, "doc_id": 3711, "filename": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "display_name": "CUpti_PCSamplingGetStallReasonsParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_get_stall_reasons_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3712, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData", "display_name": "CUpti_PCSamplingPCData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv422CUpti_PCSamplingPCData", "priority": 1, "content": "struct  CUpti_PCSamplingPCData PC Sampling data. Public Members", "keywords": []}, {"id": 3713, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::correlationId", "display_name": "CUpti_PCSamplingPCData::correlationId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData13correlationIdE", "priority": 1, "content": "uint32_t  correlationId The correlation ID of the kernel to which this result is associated. Only valid for serialized mode of pc sampling collection. For continous mode of collection the correlationId will be set to 0.", "keywords": []}, {"id": 3714, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::cubinCrc", "display_name": "CUpti_PCSamplingPCData::cubinCrc", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData8cubinCrcE", "priority": 1, "content": "uint64_t  cubinCrc [r] Unique cubin id", "keywords": []}, {"id": 3715, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::functionIndex", "display_name": "CUpti_PCSamplingPCData::functionIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData13functionIndexE", "priority": 1, "content": "uint32_t  functionIndex The function\u2019s unique symbol index in the module.", "keywords": []}, {"id": 3716, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::functionName", "display_name": "CUpti_PCSamplingPCData::functionName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData12functionNameE", "priority": 1, "content": "char  * functionName [r] The function name. This name string might be shared across all the records including records from activity APIs representing the same function, and so it should not be modified or freed until post processing of all the records is done. Once done, it is user\u2019s responsibility to free the memory using free() function.", "keywords": []}, {"id": 3717, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::pad", "display_name": "CUpti_PCSamplingPCData::pad", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData3padE", "priority": 1, "content": "uint32_t  pad Padding.", "keywords": []}, {"id": 3718, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::pcOffset", "display_name": "CUpti_PCSamplingPCData::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData8pcOffsetE", "priority": 1, "content": "uint64_t  pcOffset [r] PC offset", "keywords": []}, {"id": 3719, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::size", "display_name": "CUpti_PCSamplingPCData::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure. CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3720, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::stallReason", "display_name": "CUpti_PCSamplingPCData::stallReason", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData11stallReasonE", "priority": 1, "content": "CUpti_PCSamplingStallReason  * stallReason [r] Stall reason id Total samples", "keywords": []}, {"id": 3721, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "cpp", "name": "CUpti_PCSamplingPCData::stallReasonCount", "display_name": "CUpti_PCSamplingPCData::stallReasonCount", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "_CPPv4N22CUpti_PCSamplingPCData16stallReasonCountE", "priority": 1, "content": "size_t  stallReasonCount [r] Collected stall reason count", "keywords": []}, {"id": 3722, "doc_id": 3722, "filename": "api/struct_c_upti___p_c_sampling_p_c_data.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_p_c_data", "display_name": "CUpti_PCSamplingPCData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_p_c_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3723, "doc_id": 3726, "filename": "api/struct_c_upti___p_c_sampling_stall_reason.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStallReason", "display_name": "CUpti_PCSamplingStallReason", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_stall_reason", "anchor": "_CPPv427CUpti_PCSamplingStallReason", "priority": 1, "content": "struct  CUpti_PCSamplingStallReason PC Sampling stall reasons. Public Members", "keywords": []}, {"id": 3724, "doc_id": 3726, "filename": "api/struct_c_upti___p_c_sampling_stall_reason.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStallReason::pcSamplingStallReasonIndex", "display_name": "CUpti_PCSamplingStallReason::pcSamplingStallReasonIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_stall_reason", "anchor": "_CPPv4N27CUpti_PCSamplingStallReason26pcSamplingStallReasonIndexE", "priority": 1, "content": "uint32_t  pcSamplingStallReasonIndex [r] Collected stall reason index", "keywords": []}, {"id": 3725, "doc_id": 3726, "filename": "api/struct_c_upti___p_c_sampling_stall_reason.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStallReason::samples", "display_name": "CUpti_PCSamplingStallReason::samples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_stall_reason", "anchor": "_CPPv4N27CUpti_PCSamplingStallReason7samplesE", "priority": 1, "content": "uint32_t  samples [r] Number of times the PC was sampled with the stallReason.", "keywords": []}, {"id": 3726, "doc_id": 3726, "filename": "api/struct_c_upti___p_c_sampling_stall_reason.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_stall_reason", "display_name": "CUpti_PCSamplingStallReason", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_stall_reason", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3727, "doc_id": 3731, "filename": "api/struct_c_upti___p_c_sampling_start_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStartParams", "display_name": "CUpti_PCSamplingStartParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_start_params", "anchor": "_CPPv427CUpti_PCSamplingStartParams", "priority": 1, "content": "struct  CUpti_PCSamplingStartParams Params for cuptiPCSamplingStart. Public Members", "keywords": []}, {"id": 3728, "doc_id": 3731, "filename": "api/struct_c_upti___p_c_sampling_start_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStartParams::ctx", "display_name": "CUpti_PCSamplingStartParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_start_params", "anchor": "_CPPv4N27CUpti_PCSamplingStartParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3729, "doc_id": 3731, "filename": "api/struct_c_upti___p_c_sampling_start_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStartParams::pPriv", "display_name": "CUpti_PCSamplingStartParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_start_params", "anchor": "_CPPv4N27CUpti_PCSamplingStartParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3730, "doc_id": 3731, "filename": "api/struct_c_upti___p_c_sampling_start_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStartParams::size", "display_name": "CUpti_PCSamplingStartParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_start_params", "anchor": "_CPPv4N27CUpti_PCSamplingStartParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingStartParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3731, "doc_id": 3731, "filename": "api/struct_c_upti___p_c_sampling_start_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_start_params", "display_name": "CUpti_PCSamplingStartParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_start_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3732, "doc_id": 3736, "filename": "api/struct_c_upti___p_c_sampling_stop_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStopParams", "display_name": "CUpti_PCSamplingStopParams", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___p_c_sampling_stop_params", "anchor": "_CPPv426CUpti_PCSamplingStopParams", "priority": 1, "content": "struct  CUpti_PCSamplingStopParams Params for cuptiPCSamplingStop. Public Members", "keywords": []}, {"id": 3733, "doc_id": 3736, "filename": "api/struct_c_upti___p_c_sampling_stop_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStopParams::ctx", "display_name": "CUpti_PCSamplingStopParams::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_stop_params", "anchor": "_CPPv4N26CUpti_PCSamplingStopParams3ctxE", "priority": 1, "content": "CUcontext  ctx [w] CUcontext", "keywords": []}, {"id": 3734, "doc_id": 3736, "filename": "api/struct_c_upti___p_c_sampling_stop_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStopParams::pPriv", "display_name": "CUpti_PCSamplingStopParams::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_stop_params", "anchor": "_CPPv4N26CUpti_PCSamplingStopParams5pPrivE", "priority": 1, "content": "void  * pPriv [w] Assign to NULL", "keywords": []}, {"id": 3735, "doc_id": 3736, "filename": "api/struct_c_upti___p_c_sampling_stop_params.html", "domain_name": "cpp", "name": "CUpti_PCSamplingStopParams::size", "display_name": "CUpti_PCSamplingStopParams::size", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___p_c_sampling_stop_params", "anchor": "_CPPv4N26CUpti_PCSamplingStopParams4sizeE", "priority": 1, "content": "size_t  size [w] Size of the data structure i.e. CUpti_PCSamplingStopParamsSize CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3736, "doc_id": 3736, "filename": "api/struct_c_upti___p_c_sampling_stop_params.html", "domain_name": "std", "name": "api/struct_c_upti___p_c_sampling_stop_params", "display_name": "CUpti_PCSamplingStopParams", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___p_c_sampling_stop_params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3737, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv449CUpti_PmSampling_CounterData_GetSampleInfo_Params", "priority": 1, "content": "struct  CUpti_PmSampling_CounterData_GetSampleInfo_Params Params for cuptiPmSamplingCounterDataGetSampleInfo. Public Members", "keywords": []}, {"id": 3738, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::counterDataImageSize", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size of the counter data image.", "keywords": []}, {"id": 3739, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::endTimestamp", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::endTimestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params12endTimestampE", "priority": 1, "content": "uint64_t  endTimestamp [out] End time of the sample.", "keywords": []}, {"id": 3740, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::pCounterDataImage", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params17pCounterDataImageE", "priority": 1, "content": "const  uint8_t  * pCounterDataImage [in] Counter data image.", "keywords": []}, {"id": 3741, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3742, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::pPriv", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3743, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::sampleIndex", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::sampleIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params11sampleIndexE", "priority": 1, "content": "size_t  sampleIndex [in] Index of the sample.", "keywords": []}, {"id": 3744, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::startTimestamp", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::startTimestamp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params14startTimestampE", "priority": 1, "content": "uint64_t  startTimestamp [out] Start time of the sample.", "keywords": []}, {"id": 3745, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::structSize", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "_CPPv4N49CUpti_PmSampling_CounterData_GetSampleInfo_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3746, "doc_id": 3746, "filename": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "display_name": "CUpti_PmSampling_CounterData_GetSampleInfo_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___counter_data___get_sample_info___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3747, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "_CPPv451CUpti_PmSampling_CounterDataImage_Initialize_Params", "priority": 1, "content": "struct  CUpti_PmSampling_CounterDataImage_Initialize_Params Params for cuptiPmSamplingCounterDataImageInitialize. Public Members", "keywords": []}, {"id": 3748, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::counterDataSize", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::counterDataSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "_CPPv4N51CUpti_PmSampling_CounterDataImage_Initialize_Params15counterDataSizeE", "priority": 1, "content": "size_t  counterDataSize [in] Size of the counter data image.", "keywords": []}, {"id": 3749, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::pCounterData", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::pCounterData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "_CPPv4N51CUpti_PmSampling_CounterDataImage_Initialize_Params12pCounterDataE", "priority": 1, "content": "uint8_t  * pCounterData [in] Counter data image.", "keywords": []}, {"id": 3750, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "_CPPv4N51CUpti_PmSampling_CounterDataImage_Initialize_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3751, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::pPriv", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "_CPPv4N51CUpti_PmSampling_CounterDataImage_Initialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3752, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::structSize", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "_CPPv4N51CUpti_PmSampling_CounterDataImage_Initialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3753, "doc_id": 3753, "filename": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "display_name": "CUpti_PmSampling_CounterDataImage_Initialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___counter_data_image___initialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3754, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params", "display_name": "CUpti_PmSampling_DecodeData_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv434CUpti_PmSampling_DecodeData_Params", "priority": 1, "content": "struct  CUpti_PmSampling_DecodeData_Params Params for cuptiPmSamplingDecodeData. Public Members", "keywords": []}, {"id": 3755, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::counterDataImageSize", "display_name": "CUpti_PmSampling_DecodeData_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size of the counter data image.", "keywords": []}, {"id": 3756, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::decodeStopReason", "display_name": "CUpti_PmSampling_DecodeData_Params::decodeStopReason", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params16decodeStopReasonE", "priority": 1, "content": "CUpti_PmSampling_DecodeStopReason  decodeStopReason [out] decode stop reason", "keywords": []}, {"id": 3757, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::overflow", "display_name": "CUpti_PmSampling_DecodeData_Params::overflow", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params8overflowE", "priority": 1, "content": "uint8_t  overflow [out] overflow status for hardware buffer. To avoid overflow, either increase the maxSamples values in CUpti_PmSampling_SetConfig_Params or reduce the sampling interval.", "keywords": []}, {"id": 3758, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::pCounterDataImage", "display_name": "CUpti_PmSampling_DecodeData_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params17pCounterDataImageE", "priority": 1, "content": "uint8_t  * pCounterDataImage [in] Counter data image.", "keywords": []}, {"id": 3759, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_DecodeData_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3760, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::pPriv", "display_name": "CUpti_PmSampling_DecodeData_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3761, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_DecodeData_Params::structSize", "display_name": "CUpti_PmSampling_DecodeData_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "_CPPv4N34CUpti_PmSampling_DecodeData_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3762, "doc_id": 3762, "filename": "api/struct_c_upti___pm_sampling___decode_data___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___decode_data___params", "display_name": "CUpti_PmSampling_DecodeData_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___decode_data___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3763, "doc_id": 3767, "filename": "api/struct_c_upti___pm_sampling___disable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Disable_Params", "display_name": "CUpti_PmSampling_Disable_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___disable___params", "anchor": "_CPPv431CUpti_PmSampling_Disable_Params", "priority": 1, "content": "struct  CUpti_PmSampling_Disable_Params Params for cuptiPmSamplingDisable. Public Members", "keywords": []}, {"id": 3764, "doc_id": 3767, "filename": "api/struct_c_upti___pm_sampling___disable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Disable_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_Disable_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___disable___params", "anchor": "_CPPv4N31CUpti_PmSampling_Disable_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3765, "doc_id": 3767, "filename": "api/struct_c_upti___pm_sampling___disable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Disable_Params::pPriv", "display_name": "CUpti_PmSampling_Disable_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___disable___params", "anchor": "_CPPv4N31CUpti_PmSampling_Disable_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3766, "doc_id": 3767, "filename": "api/struct_c_upti___pm_sampling___disable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Disable_Params::structSize", "display_name": "CUpti_PmSampling_Disable_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___disable___params", "anchor": "_CPPv4N31CUpti_PmSampling_Disable_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3767, "doc_id": 3767, "filename": "api/struct_c_upti___pm_sampling___disable___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___disable___params", "display_name": "CUpti_PmSampling_Disable_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___disable___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3768, "doc_id": 3773, "filename": "api/struct_c_upti___pm_sampling___enable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Enable_Params", "display_name": "CUpti_PmSampling_Enable_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___enable___params", "anchor": "_CPPv430CUpti_PmSampling_Enable_Params", "priority": 1, "content": "struct  CUpti_PmSampling_Enable_Params Params for cuptiPmSamplingEnable. Public Members", "keywords": []}, {"id": 3769, "doc_id": 3773, "filename": "api/struct_c_upti___pm_sampling___enable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Enable_Params::deviceIndex", "display_name": "CUpti_PmSampling_Enable_Params::deviceIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___enable___params", "anchor": "_CPPv4N30CUpti_PmSampling_Enable_Params11deviceIndexE", "priority": 1, "content": "size_t  deviceIndex [in] Device index.", "keywords": []}, {"id": 3770, "doc_id": 3773, "filename": "api/struct_c_upti___pm_sampling___enable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Enable_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_Enable_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___enable___params", "anchor": "_CPPv4N30CUpti_PmSampling_Enable_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [out] PM sampling object.", "keywords": []}, {"id": 3771, "doc_id": 3773, "filename": "api/struct_c_upti___pm_sampling___enable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Enable_Params::pPriv", "display_name": "CUpti_PmSampling_Enable_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___enable___params", "anchor": "_CPPv4N30CUpti_PmSampling_Enable_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3772, "doc_id": 3773, "filename": "api/struct_c_upti___pm_sampling___enable___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Enable_Params::structSize", "display_name": "CUpti_PmSampling_Enable_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___enable___params", "anchor": "_CPPv4N30CUpti_PmSampling_Enable_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3773, "doc_id": 3773, "filename": "api/struct_c_upti___pm_sampling___enable___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___enable___params", "display_name": "CUpti_PmSampling_Enable_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___enable___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3774, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterAvailability_Params", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "_CPPv446CUpti_PmSampling_GetCounterAvailability_Params", "priority": 1, "content": "struct  CUpti_PmSampling_GetCounterAvailability_Params Params for cuptiPmSamplingGetCounterData. Public Members", "keywords": []}, {"id": 3775, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterAvailability_Params::counterAvailabilityImageSize", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params::counterAvailabilityImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "_CPPv4N46CUpti_PmSampling_GetCounterAvailability_Params28counterAvailabilityImageSizeE", "priority": 1, "content": "size_t  counterAvailabilityImageSize [inout] Size of the counter availability image. When pCounterAvailabilityImage is NULL, this field is used to return the size of the counter availability image.", "keywords": []}, {"id": 3776, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterAvailability_Params::deviceIndex", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params::deviceIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "_CPPv4N46CUpti_PmSampling_GetCounterAvailability_Params11deviceIndexE", "priority": 1, "content": "size_t  deviceIndex [in] Device index.", "keywords": []}, {"id": 3777, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterAvailability_Params::pCounterAvailabilityImage", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params::pCounterAvailabilityImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "_CPPv4N46CUpti_PmSampling_GetCounterAvailability_Params25pCounterAvailabilityImageE", "priority": 1, "content": "uint8_t  * pCounterAvailabilityImage [out] Counter availability image.", "keywords": []}, {"id": 3778, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterAvailability_Params::pPriv", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "_CPPv4N46CUpti_PmSampling_GetCounterAvailability_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3779, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterAvailability_Params::structSize", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "_CPPv4N46CUpti_PmSampling_GetCounterAvailability_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3780, "doc_id": 3780, "filename": "api/struct_c_upti___pm_sampling___get_counter_availability___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "display_name": "CUpti_PmSampling_GetCounterAvailability_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___get_counter_availability___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3781, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv442CUpti_PmSampling_GetCounterDataInfo_Params", "priority": 1, "content": "struct  CUpti_PmSampling_GetCounterDataInfo_Params Params for cuptiPmSamplingGetCounterDataInfo. Public Members", "keywords": []}, {"id": 3782, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::counterDataImageSize", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size of the counter data image.", "keywords": []}, {"id": 3783, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::numCompletedSamples", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::numCompletedSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params19numCompletedSamplesE", "priority": 1, "content": "size_t  numCompletedSamples [out] Number of samples that have been completed.", "keywords": []}, {"id": 3784, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::numPopulatedSamples", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::numPopulatedSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params19numPopulatedSamplesE", "priority": 1, "content": "size_t  numPopulatedSamples [out] Number of populated samples.", "keywords": []}, {"id": 3785, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::numTotalSamples", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::numTotalSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params15numTotalSamplesE", "priority": 1, "content": "size_t  numTotalSamples [out] Number of samples in the counter data image.", "keywords": []}, {"id": 3786, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::pCounterDataImage", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params17pCounterDataImageE", "priority": 1, "content": "const  uint8_t  * pCounterDataImage [in] Counter data image.", "keywords": []}, {"id": 3787, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::pPriv", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3788, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataInfo_Params::structSize", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataInfo_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3789, "doc_id": 3789, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_info___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "display_name": "CUpti_PmSampling_GetCounterDataInfo_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_info___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3790, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv442CUpti_PmSampling_GetCounterDataSize_Params", "priority": 1, "content": "struct  CUpti_PmSampling_GetCounterDataSize_Params Params for cuptiPmSamplingGetCounterDataSize. Public Members", "keywords": []}, {"id": 3791, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::counterDataSize", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::counterDataSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params15counterDataSizeE", "priority": 1, "content": "size_t  counterDataSize [out] Size of the counter data image.", "keywords": []}, {"id": 3792, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::maxSamples", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::maxSamples", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params10maxSamplesE", "priority": 1, "content": "uint32_t  maxSamples [in] Maximum number of samples to be stored in the counter data image.", "keywords": []}, {"id": 3793, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::numMetrics", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::numMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params10numMetricsE", "priority": 1, "content": "size_t  numMetrics [in] Number of metrics to be collected.", "keywords": []}, {"id": 3794, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::pMetricNames", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::pMetricNames", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params12pMetricNamesE", "priority": 1, "content": "const  char  * * pMetricNames [in] Names of the metrics to be collected.", "keywords": []}, {"id": 3795, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3796, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::pPriv", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3797, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_GetCounterDataSize_Params::structSize", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "_CPPv4N42CUpti_PmSampling_GetCounterDataSize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3798, "doc_id": 3798, "filename": "api/struct_c_upti___pm_sampling___get_counter_data_size___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "display_name": "CUpti_PmSampling_GetCounterDataSize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___get_counter_data_size___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3799, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params", "display_name": "CUpti_PmSampling_SetConfig_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv433CUpti_PmSampling_SetConfig_Params", "priority": 1, "content": "struct  CUpti_PmSampling_SetConfig_Params Params for cuptiPmSamplingSetConfig. Public Members", "keywords": []}, {"id": 3800, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::configSize", "display_name": "CUpti_PmSampling_SetConfig_Params::configSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params10configSizeE", "priority": 1, "content": "size_t  configSize [in] Size of the config image.", "keywords": []}, {"id": 3801, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::hardwareBufferSize", "display_name": "CUpti_PmSampling_SetConfig_Params::hardwareBufferSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params18hardwareBufferSizeE", "priority": 1, "content": "size_t  hardwareBufferSize [in] The hardware buffer size in which raw PM sampling data will be stored. These samples will be decoded to counter data image with cuptiPmSamplingDecodeData call.", "keywords": []}, {"id": 3802, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::pConfig", "display_name": "CUpti_PmSampling_SetConfig_Params::pConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params7pConfigE", "priority": 1, "content": "const  uint8_t  * pConfig [in] Config image.", "keywords": []}, {"id": 3803, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_SetConfig_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3804, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::pPriv", "display_name": "CUpti_PmSampling_SetConfig_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3805, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::samplingInterval", "display_name": "CUpti_PmSampling_SetConfig_Params::samplingInterval", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params16samplingIntervalE", "priority": 1, "content": "uint64_t  samplingInterval [in] For the trigger mode CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_SYSCLK_INTERVAL , sampling interval is the number of sys clock cycles. For the trigger mode CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL , sampling interval is in nanoseconds.", "keywords": []}, {"id": 3806, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::structSize", "display_name": "CUpti_PmSampling_SetConfig_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3807, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_SetConfig_Params::triggerMode", "display_name": "CUpti_PmSampling_SetConfig_Params::triggerMode", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "_CPPv4N33CUpti_PmSampling_SetConfig_Params11triggerModeE", "priority": 1, "content": "CUpti_PmSampling_TriggerMode  triggerMode [in] Trigger mode. Note: CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL is not supported in Turing and GA100. Supported from GA10x onwards.", "keywords": []}, {"id": 3808, "doc_id": 3808, "filename": "api/struct_c_upti___pm_sampling___set_config___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___set_config___params", "display_name": "CUpti_PmSampling_SetConfig_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___set_config___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3809, "doc_id": 3813, "filename": "api/struct_c_upti___pm_sampling___start___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Start_Params", "display_name": "CUpti_PmSampling_Start_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___start___params", "anchor": "_CPPv429CUpti_PmSampling_Start_Params", "priority": 1, "content": "struct  CUpti_PmSampling_Start_Params Params for cuptiPmSamplingStart. Public Members", "keywords": []}, {"id": 3810, "doc_id": 3813, "filename": "api/struct_c_upti___pm_sampling___start___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Start_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_Start_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___start___params", "anchor": "_CPPv4N29CUpti_PmSampling_Start_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3811, "doc_id": 3813, "filename": "api/struct_c_upti___pm_sampling___start___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Start_Params::pPriv", "display_name": "CUpti_PmSampling_Start_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___start___params", "anchor": "_CPPv4N29CUpti_PmSampling_Start_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3812, "doc_id": 3813, "filename": "api/struct_c_upti___pm_sampling___start___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Start_Params::structSize", "display_name": "CUpti_PmSampling_Start_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___start___params", "anchor": "_CPPv4N29CUpti_PmSampling_Start_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3813, "doc_id": 3813, "filename": "api/struct_c_upti___pm_sampling___start___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___start___params", "display_name": "CUpti_PmSampling_Start_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___start___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3814, "doc_id": 3818, "filename": "api/struct_c_upti___pm_sampling___stop___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Stop_Params", "display_name": "CUpti_PmSampling_Stop_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___pm_sampling___stop___params", "anchor": "_CPPv428CUpti_PmSampling_Stop_Params", "priority": 1, "content": "struct  CUpti_PmSampling_Stop_Params Params for cuptiPmSamplingStop. Public Members", "keywords": []}, {"id": 3815, "doc_id": 3818, "filename": "api/struct_c_upti___pm_sampling___stop___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Stop_Params::pPmSamplingObject", "display_name": "CUpti_PmSampling_Stop_Params::pPmSamplingObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___stop___params", "anchor": "_CPPv4N28CUpti_PmSampling_Stop_Params17pPmSamplingObjectE", "priority": 1, "content": "CUpti_PmSampling_Object  * pPmSamplingObject [in] PM sampling object.", "keywords": []}, {"id": 3816, "doc_id": 3818, "filename": "api/struct_c_upti___pm_sampling___stop___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Stop_Params::pPriv", "display_name": "CUpti_PmSampling_Stop_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___stop___params", "anchor": "_CPPv4N28CUpti_PmSampling_Stop_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 3817, "doc_id": 3818, "filename": "api/struct_c_upti___pm_sampling___stop___params.html", "domain_name": "cpp", "name": "CUpti_PmSampling_Stop_Params::structSize", "display_name": "CUpti_PmSampling_Stop_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___pm_sampling___stop___params", "anchor": "_CPPv4N28CUpti_PmSampling_Stop_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3818, "doc_id": 3818, "filename": "api/struct_c_upti___pm_sampling___stop___params.html", "domain_name": "std", "name": "api/struct_c_upti___pm_sampling___stop___params", "display_name": "CUpti_PmSampling_Stop_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___pm_sampling___stop___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3819, "doc_id": 3823, "filename": "api/struct_c_upti___profiler___begin_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginPass_Params", "display_name": "CUpti_Profiler_BeginPass_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___begin_pass___params", "anchor": "_CPPv431CUpti_Profiler_BeginPass_Params", "priority": 1, "content": "struct  CUpti_Profiler_BeginPass_Params Params for cuptiProfilerBeginPass. Public Members", "keywords": []}, {"id": 3820, "doc_id": 3823, "filename": "api/struct_c_upti___profiler___begin_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginPass_Params::ctx", "display_name": "CUpti_Profiler_BeginPass_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_pass___params", "anchor": "_CPPv4N31CUpti_Profiler_BeginPass_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3821, "doc_id": 3823, "filename": "api/struct_c_upti___profiler___begin_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginPass_Params::pPriv", "display_name": "CUpti_Profiler_BeginPass_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_pass___params", "anchor": "_CPPv4N31CUpti_Profiler_BeginPass_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3822, "doc_id": 3823, "filename": "api/struct_c_upti___profiler___begin_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginPass_Params::structSize", "display_name": "CUpti_Profiler_BeginPass_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_pass___params", "anchor": "_CPPv4N31CUpti_Profiler_BeginPass_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_BeginPass_Params_STRUCT_SIZE", "keywords": []}, {"id": 3823, "doc_id": 3823, "filename": "api/struct_c_upti___profiler___begin_pass___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___begin_pass___params", "display_name": "CUpti_Profiler_BeginPass_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___begin_pass___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3824, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params", "display_name": "CUpti_Profiler_BeginSession_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv434CUpti_Profiler_BeginSession_Params", "priority": 1, "content": "struct  CUpti_Profiler_BeginSession_Params Params for cuptiProfilerBeginSession. Public Members", "keywords": []}, {"id": 3825, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::bDumpCounterDataInFile", "display_name": "CUpti_Profiler_BeginSession_Params::bDumpCounterDataInFile", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params22bDumpCounterDataInFileE", "priority": 1, "content": "uint8_t  bDumpCounterDataInFile [in] [optional]", "keywords": []}, {"id": 3826, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::counterDataImageSize", "display_name": "CUpti_Profiler_BeginSession_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] size calculated from cuptiProfilerCounterDataImageCalculateSize", "keywords": []}, {"id": 3827, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::counterDataScratchBufferSize", "display_name": "CUpti_Profiler_BeginSession_Params::counterDataScratchBufferSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params28counterDataScratchBufferSizeE", "priority": 1, "content": "size_t  counterDataScratchBufferSize [in] size calculated from cuptiProfilerCounterDataImageInitializeScratchBuffer", "keywords": []}, {"id": 3828, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::ctx", "display_name": "CUpti_Profiler_BeginSession_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3829, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::maxLaunchesPerPass", "display_name": "CUpti_Profiler_BeginSession_Params::maxLaunchesPerPass", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params18maxLaunchesPerPassE", "priority": 1, "content": "size_t  maxLaunchesPerPass [in] Maximum number of kernel launches that can be recorded in a single pass; must be &gt;= maxRangesPerPass.", "keywords": []}, {"id": 3830, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::maxRangesPerPass", "display_name": "CUpti_Profiler_BeginSession_Params::maxRangesPerPass", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params16maxRangesPerPassE", "priority": 1, "content": "size_t  maxRangesPerPass [in] Maximum number of ranges that can be recorded in a single pass.", "keywords": []}, {"id": 3831, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::pCounterDataFilePath", "display_name": "CUpti_Profiler_BeginSession_Params::pCounterDataFilePath", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params20pCounterDataFilePathE", "priority": 1, "content": "const  char  * pCounterDataFilePath [in] [optional]", "keywords": []}, {"id": 3832, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::pCounterDataImage", "display_name": "CUpti_Profiler_BeginSession_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params17pCounterDataImageE", "priority": 1, "content": "uint8_t  * pCounterDataImage [in] address of CounterDataImage", "keywords": []}, {"id": 3833, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::pCounterDataScratchBuffer", "display_name": "CUpti_Profiler_BeginSession_Params::pCounterDataScratchBuffer", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params25pCounterDataScratchBufferE", "priority": 1, "content": "uint8_t  * pCounterDataScratchBuffer [in] address of CounterDataImage scratch buffer", "keywords": []}, {"id": 3834, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::pPriv", "display_name": "CUpti_Profiler_BeginSession_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3835, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::range", "display_name": "CUpti_Profiler_BeginSession_Params::range", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params5rangeE", "priority": 1, "content": "CUpti_ProfilerRange  range [in] CUpti_ProfilerRange", "keywords": []}, {"id": 3836, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::replayMode", "display_name": "CUpti_Profiler_BeginSession_Params::replayMode", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params10replayModeE", "priority": 1, "content": "CUpti_ProfilerReplayMode  replayMode [in] CUpti_ProfilerReplayMode", "keywords": []}, {"id": 3837, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_BeginSession_Params::structSize", "display_name": "CUpti_Profiler_BeginSession_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "_CPPv4N34CUpti_Profiler_BeginSession_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_BeginSession_Params_STRUCT_SIZE", "keywords": []}, {"id": 3838, "doc_id": 3838, "filename": "api/struct_c_upti___profiler___begin_session___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___begin_session___params", "display_name": "CUpti_Profiler_BeginSession_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___begin_session___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3839, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "_CPPv465CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params", "priority": 1, "content": "struct  CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params Params for cuptiProfilerCounterDataImageCalculateScratchBufferSize. Public Members", "keywords": []}, {"id": 3840, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::counterDataImageSize", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "_CPPv4N65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] size calculated from cuptiProfilerCounterDataImageCalculateSize", "keywords": []}, {"id": 3841, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::counterDataScratchBufferSize", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::counterDataScratchBufferSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "_CPPv4N65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params28counterDataScratchBufferSizeE", "priority": 1, "content": "size_t  counterDataScratchBufferSize [out]", "keywords": []}, {"id": 3842, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::pCounterDataImage", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "_CPPv4N65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params17pCounterDataImageE", "priority": 1, "content": "uint8_t  * pCounterDataImage [in]", "keywords": []}, {"id": 3843, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::pPriv", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "_CPPv4N65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3844, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::structSize", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "_CPPv4N65CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 3845, "doc_id": 3845, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "display_name": "CUpti_Profiler_CounterDataImage_CalculateScratchBufferSize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_scratch_buffer_size___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3846, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "_CPPv452CUpti_Profiler_CounterDataImage_CalculateSize_Params", "priority": 1, "content": "struct  CUpti_Profiler_CounterDataImage_CalculateSize_Params Params for cuptiProfilerCounterDataImageCalculateSize. Public Members", "keywords": []}, {"id": 3847, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::counterDataImageSize", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "_CPPv4N52CUpti_Profiler_CounterDataImage_CalculateSize_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [out]", "keywords": []}, {"id": 3848, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::pOptions", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::pOptions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "_CPPv4N52CUpti_Profiler_CounterDataImage_CalculateSize_Params8pOptionsE", "priority": 1, "content": "const  CUpti_Profiler_CounterDataImageOptions  * pOptions [in] Pointer to Counter Data Image Options", "keywords": []}, {"id": 3849, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::pPriv", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "_CPPv4N52CUpti_Profiler_CounterDataImage_CalculateSize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3850, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::sizeofCounterDataImageOptions", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::sizeofCounterDataImageOptions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "_CPPv4N52CUpti_Profiler_CounterDataImage_CalculateSize_Params29sizeofCounterDataImageOptionsE", "priority": 1, "content": "size_t  sizeofCounterDataImageOptions [in] CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE", "keywords": []}, {"id": 3851, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::structSize", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "_CPPv4N52CUpti_Profiler_CounterDataImage_CalculateSize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_CounterDataImage_CalculateSize_Params_STRUCT_SIZE", "keywords": []}, {"id": 3852, "doc_id": 3852, "filename": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "display_name": "CUpti_Profiler_CounterDataImage_CalculateSize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___counter_data_image___calculate_size___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3853, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv449CUpti_Profiler_CounterDataImage_Initialize_Params", "priority": 1, "content": "struct  CUpti_Profiler_CounterDataImage_Initialize_Params Params for cuptiProfilerCounterDataImageInitialize. Public Members", "keywords": []}, {"id": 3854, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params::counterDataImageSize", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N49CUpti_Profiler_CounterDataImage_Initialize_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size calculated from cuptiProfilerCounterDataImageCalculateSize", "keywords": []}, {"id": 3855, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params::pCounterDataImage", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N49CUpti_Profiler_CounterDataImage_Initialize_Params17pCounterDataImageE", "priority": 1, "content": "uint8_t  * pCounterDataImage [in] The buffer to be initialized.", "keywords": []}, {"id": 3856, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params::pOptions", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params::pOptions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N49CUpti_Profiler_CounterDataImage_Initialize_Params8pOptionsE", "priority": 1, "content": "const  CUpti_Profiler_CounterDataImageOptions  * pOptions [in] Pointer to Counter Data Image Options", "keywords": []}, {"id": 3857, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params::pPriv", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N49CUpti_Profiler_CounterDataImage_Initialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3858, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params::sizeofCounterDataImageOptions", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params::sizeofCounterDataImageOptions", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N49CUpti_Profiler_CounterDataImage_Initialize_Params29sizeofCounterDataImageOptionsE", "priority": 1, "content": "size_t  sizeofCounterDataImageOptions [in] CUpti_Profiler_CounterDataImageOptions_STRUCT_SIZE", "keywords": []}, {"id": 3859, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_Initialize_Params::structSize", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N49CUpti_Profiler_CounterDataImage_Initialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_CounterDataImage_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 3860, "doc_id": 3860, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "display_name": "CUpti_Profiler_CounterDataImage_Initialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3861, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv462CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params", "priority": 1, "content": "struct  CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params Params for cuptiProfilerCounterDataImageInitializeScratchBuffer. Public Members", "keywords": []}, {"id": 3862, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::counterDataImageSize", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv4N62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] size calculated from cuptiProfilerCounterDataImageCalculateSize", "keywords": []}, {"id": 3863, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::counterDataScratchBufferSize", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::counterDataScratchBufferSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv4N62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params28counterDataScratchBufferSizeE", "priority": 1, "content": "size_t  counterDataScratchBufferSize [in] size calculated using cuptiProfilerCounterDataImageCalculateScratchBufferSize", "keywords": []}, {"id": 3864, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::pCounterDataImage", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv4N62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params17pCounterDataImageE", "priority": 1, "content": "uint8_t  * pCounterDataImage [in]", "keywords": []}, {"id": 3865, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::pCounterDataScratchBuffer", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::pCounterDataScratchBuffer", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv4N62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params25pCounterDataScratchBufferE", "priority": 1, "content": "uint8_t  * pCounterDataScratchBuffer [in] the scratch buffer to be initialized.", "keywords": []}, {"id": 3866, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::pPriv", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv4N62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3867, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::structSize", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "_CPPv4N62CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params_STRUCT_SIZE", "keywords": []}, {"id": 3868, "doc_id": 3868, "filename": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "display_name": "CUpti_Profiler_CounterDataImage_InitializeScratchBuffer_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___counter_data_image___initialize_scratch_buffer___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3869, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions", "display_name": "CUpti_Profiler_CounterDataImageOptions", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv438CUpti_Profiler_CounterDataImageOptions", "priority": 1, "content": "struct  CUpti_Profiler_CounterDataImageOptions Input parameter to define the counterDataImage. Public Members", "keywords": []}, {"id": 3870, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::counterDataPrefixSize", "display_name": "CUpti_Profiler_CounterDataImageOptions::counterDataPrefixSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions21counterDataPrefixSizeE", "priority": 1, "content": "size_t  counterDataPrefixSize [in] Size of CounterDataPrefix generated from NVPW_CounterDataBuilder_GetCounterDataPrefix().", "keywords": []}, {"id": 3871, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::maxNumRangeTreeNodes", "display_name": "CUpti_Profiler_CounterDataImageOptions::maxNumRangeTreeNodes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions20maxNumRangeTreeNodesE", "priority": 1, "content": "uint32_t  maxNumRangeTreeNodes [in] Maximum number of RangeTree nodes; must be &gt;= maxNumRanges", "keywords": []}, {"id": 3872, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::maxNumRanges", "display_name": "CUpti_Profiler_CounterDataImageOptions::maxNumRanges", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions12maxNumRangesE", "priority": 1, "content": "uint32_t  maxNumRanges [in] Maximum number of ranges that can be profiled", "keywords": []}, {"id": 3873, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::maxRangeNameLength", "display_name": "CUpti_Profiler_CounterDataImageOptions::maxRangeNameLength", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions18maxRangeNameLengthE", "priority": 1, "content": "uint32_t  maxRangeNameLength [in] Maximum string length of each RangeName, including the trailing NULL character", "keywords": []}, {"id": 3874, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::pCounterDataPrefix", "display_name": "CUpti_Profiler_CounterDataImageOptions::pCounterDataPrefix", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions18pCounterDataPrefixE", "priority": 1, "content": "const  uint8_t  * pCounterDataPrefix [in] Address of CounterDataPrefix generated from NVPW_CounterDataBuilder_GetCounterDataPrefix(). Must be align(8).", "keywords": []}, {"id": 3875, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::pPriv", "display_name": "CUpti_Profiler_CounterDataImageOptions::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3876, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "cpp", "name": "CUpti_Profiler_CounterDataImageOptions::structSize", "display_name": "CUpti_Profiler_CounterDataImageOptions::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "_CPPv4N38CUpti_Profiler_CounterDataImageOptions10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_CounterDataImageOptions_Params_STRUCT_SIZE", "keywords": []}, {"id": 3877, "doc_id": 3877, "filename": "api/struct_c_upti___profiler___counter_data_image_options.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___counter_data_image_options", "display_name": "CUpti_Profiler_CounterDataImageOptions", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___counter_data_image_options", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3878, "doc_id": 3881, "filename": "api/struct_c_upti___profiler___de_initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeInitialize_Params", "display_name": "CUpti_Profiler_DeInitialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___de_initialize___params", "anchor": "_CPPv434CUpti_Profiler_DeInitialize_Params", "priority": 1, "content": "struct  CUpti_Profiler_DeInitialize_Params Default parameter for cuptiProfilerDeInitialize. Public Members", "keywords": []}, {"id": 3879, "doc_id": 3881, "filename": "api/struct_c_upti___profiler___de_initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeInitialize_Params::pPriv", "display_name": "CUpti_Profiler_DeInitialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___de_initialize___params", "anchor": "_CPPv4N34CUpti_Profiler_DeInitialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3880, "doc_id": 3881, "filename": "api/struct_c_upti___profiler___de_initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeInitialize_Params::structSize", "display_name": "CUpti_Profiler_DeInitialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___de_initialize___params", "anchor": "_CPPv4N34CUpti_Profiler_DeInitialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_DeInitialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 3881, "doc_id": 3881, "filename": "api/struct_c_upti___profiler___de_initialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___de_initialize___params", "display_name": "CUpti_Profiler_DeInitialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___de_initialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3882, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params", "display_name": "CUpti_Profiler_DeviceSupported_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv437CUpti_Profiler_DeviceSupported_Params", "priority": 1, "content": "struct  CUpti_Profiler_DeviceSupported_Params Params for cuptiProfilerDeviceSupported. Public Members", "keywords": []}, {"id": 3883, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::api", "display_name": "CUpti_Profiler_DeviceSupported_Params::api", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params3apiE", "priority": 1, "content": "CUpti_Profiler_API  api [in] the CUPTI API type for which device support will be checked", "keywords": []}, {"id": 3884, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::architecture", "display_name": "CUpti_Profiler_DeviceSupported_Params::architecture", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params12architectureE", "priority": 1, "content": "CUpti_Profiler_Support_Level  architecture [out] SUPPORTED if the device architecture level supports the Profiling API (Compute Capability &gt;= 7.0), UNSUPPORTED otherwise", "keywords": []}, {"id": 3885, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::cmp", "display_name": "CUpti_Profiler_DeviceSupported_Params::cmp", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params3cmpE", "priority": 1, "content": "CUpti_Profiler_Support_Level  cmp [out] SUPPORTED if not NVIDIA Crypto Mining Processors (CMP), UNSUPPORTED otherwise", "keywords": []}, {"id": 3886, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::confidentialCompute", "display_name": "CUpti_Profiler_DeviceSupported_Params::confidentialCompute", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params19confidentialComputeE", "priority": 1, "content": "CUpti_Profiler_Support_Level  confidentialCompute [out] SUPPORTED if confidential compute is not enabled, UNSUPPORTED otherwise", "keywords": []}, {"id": 3887, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::cuDevice", "display_name": "CUpti_Profiler_DeviceSupported_Params::cuDevice", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params8cuDeviceE", "priority": 1, "content": "CUdevice  cuDevice [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3888, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::isSupported", "display_name": "CUpti_Profiler_DeviceSupported_Params::isSupported", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params11isSupportedE", "priority": 1, "content": "CUpti_Profiler_Support_Level  isSupported [out] overall SUPPORTED / UNSUPPORTED flag representing whether Profiling and PC Sampling APIs work on the given device and configuration. SUPPORTED if all following flags are SUPPORTED, UNSUPPORTED otherwise.", "keywords": []}, {"id": 3889, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::pPriv", "display_name": "CUpti_Profiler_DeviceSupported_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3890, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::sli", "display_name": "CUpti_Profiler_DeviceSupported_Params::sli", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params3sliE", "priority": 1, "content": "CUpti_Profiler_Support_Level  sli [out] SUPPORTED if SLI is not enabled, UNSUPPORTED otherwise", "keywords": []}, {"id": 3891, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::structSize", "display_name": "CUpti_Profiler_DeviceSupported_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Must be CUpti_Profiler_DeviceSupported_Params_STRUCT_SIZE", "keywords": []}, {"id": 3892, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::vGpu", "display_name": "CUpti_Profiler_DeviceSupported_Params::vGpu", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params4vGpuE", "priority": 1, "content": "CUpti_Profiler_Support_Level  vGpu [out] SUPPORTED if vGPU is supported and profiling is enabled, DISABLED if profiling is supported but not enabled, UNSUPPORTED otherwise", "keywords": []}, {"id": 3893, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DeviceSupported_Params::wsl", "display_name": "CUpti_Profiler_DeviceSupported_Params::wsl", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "_CPPv4N37CUpti_Profiler_DeviceSupported_Params3wslE", "priority": 1, "content": "CUpti_Profiler_Support_Level  wsl [out] SUPPORTED if WSL supported, UNSUPPORTED otherwise", "keywords": []}, {"id": 3894, "doc_id": 3894, "filename": "api/struct_c_upti___profiler___device_supported___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___device_supported___params", "display_name": "CUpti_Profiler_DeviceSupported_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___device_supported___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3895, "doc_id": 3899, "filename": "api/struct_c_upti___profiler___disable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DisableProfiling_Params", "display_name": "CUpti_Profiler_DisableProfiling_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___disable_profiling___params", "anchor": "_CPPv438CUpti_Profiler_DisableProfiling_Params", "priority": 1, "content": "struct  CUpti_Profiler_DisableProfiling_Params Params for cuptiProfilerDisableProfiling. Public Members", "keywords": []}, {"id": 3896, "doc_id": 3899, "filename": "api/struct_c_upti___profiler___disable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DisableProfiling_Params::ctx", "display_name": "CUpti_Profiler_DisableProfiling_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___disable_profiling___params", "anchor": "_CPPv4N38CUpti_Profiler_DisableProfiling_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3897, "doc_id": 3899, "filename": "api/struct_c_upti___profiler___disable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DisableProfiling_Params::pPriv", "display_name": "CUpti_Profiler_DisableProfiling_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___disable_profiling___params", "anchor": "_CPPv4N38CUpti_Profiler_DisableProfiling_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3898, "doc_id": 3899, "filename": "api/struct_c_upti___profiler___disable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_DisableProfiling_Params::structSize", "display_name": "CUpti_Profiler_DisableProfiling_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___disable_profiling___params", "anchor": "_CPPv4N38CUpti_Profiler_DisableProfiling_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE", "keywords": []}, {"id": 3899, "doc_id": 3899, "filename": "api/struct_c_upti___profiler___disable_profiling___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___disable_profiling___params", "display_name": "CUpti_Profiler_DisableProfiling_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___disable_profiling___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3900, "doc_id": 3904, "filename": "api/struct_c_upti___profiler___enable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EnableProfiling_Params", "display_name": "CUpti_Profiler_EnableProfiling_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___enable_profiling___params", "anchor": "_CPPv437CUpti_Profiler_EnableProfiling_Params", "priority": 1, "content": "struct  CUpti_Profiler_EnableProfiling_Params Params for cuptiProfilerEnableProfiling. Public Members", "keywords": []}, {"id": 3901, "doc_id": 3904, "filename": "api/struct_c_upti___profiler___enable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EnableProfiling_Params::ctx", "display_name": "CUpti_Profiler_EnableProfiling_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___enable_profiling___params", "anchor": "_CPPv4N37CUpti_Profiler_EnableProfiling_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3902, "doc_id": 3904, "filename": "api/struct_c_upti___profiler___enable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EnableProfiling_Params::pPriv", "display_name": "CUpti_Profiler_EnableProfiling_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___enable_profiling___params", "anchor": "_CPPv4N37CUpti_Profiler_EnableProfiling_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3903, "doc_id": 3904, "filename": "api/struct_c_upti___profiler___enable_profiling___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EnableProfiling_Params::structSize", "display_name": "CUpti_Profiler_EnableProfiling_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___enable_profiling___params", "anchor": "_CPPv4N37CUpti_Profiler_EnableProfiling_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE", "keywords": []}, {"id": 3904, "doc_id": 3904, "filename": "api/struct_c_upti___profiler___enable_profiling___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___enable_profiling___params", "display_name": "CUpti_Profiler_EnableProfiling_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___enable_profiling___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3905, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndPass_Params", "display_name": "CUpti_Profiler_EndPass_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "_CPPv429CUpti_Profiler_EndPass_Params", "priority": 1, "content": "struct  CUpti_Profiler_EndPass_Params Params for cuptiProfilerEndPass. Public Members", "keywords": []}, {"id": 3906, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndPass_Params::allPassesSubmitted", "display_name": "CUpti_Profiler_EndPass_Params::allPassesSubmitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "_CPPv4N29CUpti_Profiler_EndPass_Params18allPassesSubmittedE", "priority": 1, "content": "uint8_t  allPassesSubmitted [out] becomes true when the last pass has been queued to the GPU", "keywords": []}, {"id": 3907, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndPass_Params::ctx", "display_name": "CUpti_Profiler_EndPass_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "_CPPv4N29CUpti_Profiler_EndPass_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3908, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndPass_Params::pPriv", "display_name": "CUpti_Profiler_EndPass_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "_CPPv4N29CUpti_Profiler_EndPass_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3909, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndPass_Params::passIndex", "display_name": "CUpti_Profiler_EndPass_Params::passIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "_CPPv4N29CUpti_Profiler_EndPass_Params9passIndexE", "priority": 1, "content": "size_t  passIndex [out] The targetNestingLevel that will be collected by the next BeginPass. [out] The passIndex that will be collected by the next BeginPass", "keywords": []}, {"id": 3910, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndPass_Params::structSize", "display_name": "CUpti_Profiler_EndPass_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "_CPPv4N29CUpti_Profiler_EndPass_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_EndPass_Params_STRUCT_SIZE", "keywords": []}, {"id": 3911, "doc_id": 3911, "filename": "api/struct_c_upti___profiler___end_pass___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___end_pass___params", "display_name": "CUpti_Profiler_EndPass_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___end_pass___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3912, "doc_id": 3916, "filename": "api/struct_c_upti___profiler___end_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndSession_Params", "display_name": "CUpti_Profiler_EndSession_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___end_session___params", "anchor": "_CPPv432CUpti_Profiler_EndSession_Params", "priority": 1, "content": "struct  CUpti_Profiler_EndSession_Params Params for cuptiProfilerEndSession. Public Members", "keywords": []}, {"id": 3913, "doc_id": 3916, "filename": "api/struct_c_upti___profiler___end_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndSession_Params::ctx", "display_name": "CUpti_Profiler_EndSession_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_session___params", "anchor": "_CPPv4N32CUpti_Profiler_EndSession_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3914, "doc_id": 3916, "filename": "api/struct_c_upti___profiler___end_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndSession_Params::pPriv", "display_name": "CUpti_Profiler_EndSession_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_session___params", "anchor": "_CPPv4N32CUpti_Profiler_EndSession_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3915, "doc_id": 3916, "filename": "api/struct_c_upti___profiler___end_session___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_EndSession_Params::structSize", "display_name": "CUpti_Profiler_EndSession_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___end_session___params", "anchor": "_CPPv4N32CUpti_Profiler_EndSession_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_EndSession_Params_STRUCT_SIZE", "keywords": []}, {"id": 3916, "doc_id": 3916, "filename": "api/struct_c_upti___profiler___end_session___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___end_session___params", "display_name": "CUpti_Profiler_EndSession_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___end_session___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3917, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_FlushCounterData_Params", "display_name": "CUpti_Profiler_FlushCounterData_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "_CPPv438CUpti_Profiler_FlushCounterData_Params", "priority": 1, "content": "struct  CUpti_Profiler_FlushCounterData_Params Params for cuptiProfilerFlushCounterData. Public Members", "keywords": []}, {"id": 3918, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_FlushCounterData_Params::ctx", "display_name": "CUpti_Profiler_FlushCounterData_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "_CPPv4N38CUpti_Profiler_FlushCounterData_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3919, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_FlushCounterData_Params::numRangesDropped", "display_name": "CUpti_Profiler_FlushCounterData_Params::numRangesDropped", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "_CPPv4N38CUpti_Profiler_FlushCounterData_Params16numRangesDroppedE", "priority": 1, "content": "size_t  numRangesDropped [out] number of ranges whose data was dropped in the processed passes", "keywords": []}, {"id": 3920, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_FlushCounterData_Params::numTraceBytesDropped", "display_name": "CUpti_Profiler_FlushCounterData_Params::numTraceBytesDropped", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "_CPPv4N38CUpti_Profiler_FlushCounterData_Params20numTraceBytesDroppedE", "priority": 1, "content": "size_t  numTraceBytesDropped [out] number of bytes not written to TraceBuffer due to buffer full", "keywords": []}, {"id": 3921, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_FlushCounterData_Params::pPriv", "display_name": "CUpti_Profiler_FlushCounterData_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "_CPPv4N38CUpti_Profiler_FlushCounterData_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3922, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_FlushCounterData_Params::structSize", "display_name": "CUpti_Profiler_FlushCounterData_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "_CPPv4N38CUpti_Profiler_FlushCounterData_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE", "keywords": []}, {"id": 3923, "doc_id": 3923, "filename": "api/struct_c_upti___profiler___flush_counter_data___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___flush_counter_data___params", "display_name": "CUpti_Profiler_FlushCounterData_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___flush_counter_data___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3924, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_GetCounterAvailability_Params", "display_name": "CUpti_Profiler_GetCounterAvailability_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "_CPPv444CUpti_Profiler_GetCounterAvailability_Params", "priority": 1, "content": "struct  CUpti_Profiler_GetCounterAvailability_Params Params for cuptiProfilerGetCounterAvailability. Public Members", "keywords": []}, {"id": 3925, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_GetCounterAvailability_Params::counterAvailabilityImageSize", "display_name": "CUpti_Profiler_GetCounterAvailability_Params::counterAvailabilityImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "_CPPv4N44CUpti_Profiler_GetCounterAvailability_Params28counterAvailabilityImageSizeE", "priority": 1, "content": "size_t  counterAvailabilityImageSize [in/out] If pCounterAvailabilityImage is NULL, then the required size is returned in counterAvailabilityImageSize , otherwise counterAvailabilityImageSize should be set to the size of pCounterAvailabilityImage , and on return it would be overwritten with number of actual bytes copied", "keywords": []}, {"id": 3926, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_GetCounterAvailability_Params::ctx", "display_name": "CUpti_Profiler_GetCounterAvailability_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "_CPPv4N44CUpti_Profiler_GetCounterAvailability_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 3927, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_GetCounterAvailability_Params::pCounterAvailabilityImage", "display_name": "CUpti_Profiler_GetCounterAvailability_Params::pCounterAvailabilityImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "_CPPv4N44CUpti_Profiler_GetCounterAvailability_Params25pCounterAvailabilityImageE", "priority": 1, "content": "uint8_t  * pCounterAvailabilityImage [in] buffer receiving counter availability image, may be NULL", "keywords": []}, {"id": 3928, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_GetCounterAvailability_Params::pPriv", "display_name": "CUpti_Profiler_GetCounterAvailability_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "_CPPv4N44CUpti_Profiler_GetCounterAvailability_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 3929, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_GetCounterAvailability_Params::structSize", "display_name": "CUpti_Profiler_GetCounterAvailability_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "_CPPv4N44CUpti_Profiler_GetCounterAvailability_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_GetCounterAvailability_Params_STRUCT_SIZE", "keywords": []}, {"id": 3930, "doc_id": 3930, "filename": "api/struct_c_upti___profiler___get_counter_availability___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___get_counter_availability___params", "display_name": "CUpti_Profiler_GetCounterAvailability_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___get_counter_availability___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3931, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "_CPPv443CUpti_Profiler_Host_ConfigAddMetrics_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_ConfigAddMetrics_Params Params for cuptiProfilerHostConfigAddMetrics. Public Members", "keywords": []}, {"id": 3932, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::numMetrics", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::numMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "_CPPv4N43CUpti_Profiler_Host_ConfigAddMetrics_Params10numMetricsE", "priority": 1, "content": "size_t  numMetrics [in] number of metrics", "keywords": []}, {"id": 3933, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::pHostObject", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "_CPPv4N43CUpti_Profiler_Host_ConfigAddMetrics_Params11pHostObjectE", "priority": 1, "content": "struct  CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3934, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::pPriv", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "_CPPv4N43CUpti_Profiler_Host_ConfigAddMetrics_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3935, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::ppMetricNames", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::ppMetricNames", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "_CPPv4N43CUpti_Profiler_Host_ConfigAddMetrics_Params13ppMetricNamesE", "priority": 1, "content": "const  char  * * ppMetricNames [in] metric names for which config image will be generated", "keywords": []}, {"id": 3936, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::structSize", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "_CPPv4N43CUpti_Profiler_Host_ConfigAddMetrics_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3937, "doc_id": 3937, "filename": "api/struct_c_upti___profiler___host___config_add_metrics___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___config_add_metrics___params", "display_name": "CUpti_Profiler_Host_ConfigAddMetrics_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___config_add_metrics___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3938, "doc_id": 3942, "filename": "api/struct_c_upti___profiler___host___deinitialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Deinitialize_Params", "display_name": "CUpti_Profiler_Host_Deinitialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___deinitialize___params", "anchor": "_CPPv439CUpti_Profiler_Host_Deinitialize_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_Deinitialize_Params Params for cuptiProfilerHostDeinitialize. Public Members", "keywords": []}, {"id": 3939, "doc_id": 3942, "filename": "api/struct_c_upti___profiler___host___deinitialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Deinitialize_Params::pHostObject", "display_name": "CUpti_Profiler_Host_Deinitialize_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___deinitialize___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_Deinitialize_Params11pHostObjectE", "priority": 1, "content": "struct  CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3940, "doc_id": 3942, "filename": "api/struct_c_upti___profiler___host___deinitialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Deinitialize_Params::pPriv", "display_name": "CUpti_Profiler_Host_Deinitialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___deinitialize___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_Deinitialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3941, "doc_id": 3942, "filename": "api/struct_c_upti___profiler___host___deinitialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Deinitialize_Params::structSize", "display_name": "CUpti_Profiler_Host_Deinitialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___deinitialize___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_Deinitialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure. CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 3942, "doc_id": 3942, "filename": "api/struct_c_upti___profiler___host___deinitialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___deinitialize___params", "display_name": "CUpti_Profiler_Host_Deinitialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___deinitialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3943, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv446CUpti_Profiler_Host_EvaluateToGpuValues_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_EvaluateToGpuValues_Params Params for cuptiProfilerHostEvaluateToGpuValues. Public Members", "keywords": []}, {"id": 3944, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::counterDataImageSize", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] size of counter data image", "keywords": []}, {"id": 3945, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::numMetrics", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::numMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params10numMetricsE", "priority": 1, "content": "size_t  numMetrics [in] number of metrics", "keywords": []}, {"id": 3946, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pCounterDataImage", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params17pCounterDataImageE", "priority": 1, "content": "const  uint8_t  * pCounterDataImage [in] the counter data image where profiling data has been decoded", "keywords": []}, {"id": 3947, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pHostObject", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params11pHostObjectE", "priority": 1, "content": "CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3948, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pMetricValues", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pMetricValues", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params13pMetricValuesE", "priority": 1, "content": "double  * pMetricValues [out] output value for given metric and range index", "keywords": []}, {"id": 3949, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pPriv", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3950, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::ppMetricNames", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::ppMetricNames", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params13ppMetricNamesE", "priority": 1, "content": "const  char  * * ppMetricNames [in] the metrics for which GPU values will be evaluated for the range", "keywords": []}, {"id": 3951, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::rangeIndex", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::rangeIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params10rangeIndexE", "priority": 1, "content": "size_t  rangeIndex [in] range index for which the range name will be queried", "keywords": []}, {"id": 3952, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::structSize", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_EvaluateToGpuValues_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3953, "doc_id": 3953, "filename": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "display_name": "CUpti_Profiler_Host_EvaluateToGpuValues_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___evaluate_to_gpu_values___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3954, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv441CUpti_Profiler_Host_GetBaseMetrics_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetBaseMetrics_Params Params for cuptiProfilerHostGetSupportedMetrics. Public Members", "keywords": []}, {"id": 3955, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params::metricType", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params::metricType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetBaseMetrics_Params10metricTypeE", "priority": 1, "content": "CUpti_MetricType  metricType [in] metric type (counter, ratio, throughput)", "keywords": []}, {"id": 3956, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params::numMetrics", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params::numMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetBaseMetrics_Params10numMetricsE", "priority": 1, "content": "size_t  numMetrics [out] number of metrics", "keywords": []}, {"id": 3957, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params::pHostObject", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetBaseMetrics_Params11pHostObjectE", "priority": 1, "content": "struct  CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3958, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetBaseMetrics_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3959, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params::ppMetricNames", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params::ppMetricNames", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetBaseMetrics_Params13ppMetricNamesE", "priority": 1, "content": "const  char  * * ppMetricNames [out] list of base metrics supported of queried metric type for the chip", "keywords": []}, {"id": 3960, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetBaseMetrics_Params::structSize", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetBaseMetrics_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3961, "doc_id": 3961, "filename": "api/struct_c_upti___profiler___host___get_base_metrics___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_base_metrics___params", "display_name": "CUpti_Profiler_Host_GetBaseMetrics_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_base_metrics___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3962, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImage_Params", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "_CPPv441CUpti_Profiler_Host_GetConfigImage_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetConfigImage_Params Params for cuptiProfilerHostGetConfigImage. Public Members", "keywords": []}, {"id": 3963, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImage_Params::configImageSize", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params::configImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetConfigImage_Params15configImageSizeE", "priority": 1, "content": "size_t  configImageSize [in] Number of bytes allocated for pBuffer", "keywords": []}, {"id": 3964, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImage_Params::pConfigImage", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params::pConfigImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetConfigImage_Params12pConfigImageE", "priority": 1, "content": "uint8_t  * pConfigImage [out] Buffer receiving the config image", "keywords": []}, {"id": 3965, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImage_Params::pHostObject", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetConfigImage_Params11pHostObjectE", "priority": 1, "content": "CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3966, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImage_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetConfigImage_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3967, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImage_Params::structSize", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetConfigImage_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3968, "doc_id": 3968, "filename": "api/struct_c_upti___profiler___host___get_config_image___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_config_image___params", "display_name": "CUpti_Profiler_Host_GetConfigImage_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_config_image___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3969, "doc_id": 3974, "filename": "api/struct_c_upti___profiler___host___get_config_image_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImageSize_Params", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_config_image_size___params", "anchor": "_CPPv445CUpti_Profiler_Host_GetConfigImageSize_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetConfigImageSize_Params Params for cuptiProfilerHostGetConfigImageSize. Public Members", "keywords": []}, {"id": 3970, "doc_id": 3974, "filename": "api/struct_c_upti___profiler___host___get_config_image_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImageSize_Params::configImageSize", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params::configImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image_size___params", "anchor": "_CPPv4N45CUpti_Profiler_Host_GetConfigImageSize_Params15configImageSizeE", "priority": 1, "content": "size_t  configImageSize [out] the size of config image, users need to allocate the buffer for storing", "keywords": []}, {"id": 3971, "doc_id": 3974, "filename": "api/struct_c_upti___profiler___host___get_config_image_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImageSize_Params::pHostObject", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image_size___params", "anchor": "_CPPv4N45CUpti_Profiler_Host_GetConfigImageSize_Params11pHostObjectE", "priority": 1, "content": "CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3972, "doc_id": 3974, "filename": "api/struct_c_upti___profiler___host___get_config_image_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImageSize_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image_size___params", "anchor": "_CPPv4N45CUpti_Profiler_Host_GetConfigImageSize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3973, "doc_id": 3974, "filename": "api/struct_c_upti___profiler___host___get_config_image_size___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetConfigImageSize_Params::structSize", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_config_image_size___params", "anchor": "_CPPv4N45CUpti_Profiler_Host_GetConfigImageSize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3974, "doc_id": 3974, "filename": "api/struct_c_upti___profiler___host___get_config_image_size___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_config_image_size___params", "display_name": "CUpti_Profiler_Host_GetConfigImageSize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_config_image_size___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3975, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv458CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params Params for cuptiProfilerHostGetMaxNumHardwareMetricsPerPass. Public Members", "keywords": []}, {"id": 3976, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::maxMetricsPerPass", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::maxMetricsPerPass", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv4N58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params17maxMetricsPerPassE", "priority": 1, "content": "size_t  maxMetricsPerPass [out] maximum number of metrics that can be scheduled in a pass", "keywords": []}, {"id": 3977, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::pChipName", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::pChipName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv4N58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params9pChipNameE", "priority": 1, "content": "const  char  * pChipName [in] accepted for chips supported at the time-of-release.", "keywords": []}, {"id": 3978, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::pCounterAvailabilityImage", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::pCounterAvailabilityImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv4N58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params25pCounterAvailabilityImageE", "priority": 1, "content": "uint8_t  * pCounterAvailabilityImage [in] buffer with counter availability image - required for future chip support", "keywords": []}, {"id": 3979, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv4N58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3980, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::profilerType", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::profilerType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv4N58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params12profilerTypeE", "priority": 1, "content": "CUpti_ProfilerType  profilerType [in] the profiler kind one from CUpti_ProfilerType", "keywords": []}, {"id": 3981, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::structSize", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "_CPPv4N58CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3982, "doc_id": 3982, "filename": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "display_name": "CUpti_Profiler_Host_GetMaxNumHardwareMetricsPerPass_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_max_num_hardware_metrics_per_pass___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3983, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv446CUpti_Profiler_Host_GetMetricProperties_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetMetricProperties_Params Params for cuptiProfilerHostGetMetricProperties. Public Members", "keywords": []}, {"id": 3984, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::metricType", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::metricType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params10metricTypeE", "priority": 1, "content": "CUpti_MetricType  metricType [out] the metric type (counter, ratio or throughput)", "keywords": []}, {"id": 3985, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::pDescription", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::pDescription", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params12pDescriptionE", "priority": 1, "content": "const  char  * pDescription [out] a short description about the metric", "keywords": []}, {"id": 3986, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::pDimUnit", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::pDimUnit", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params8pDimUnitE", "priority": 1, "content": "const  char  * pDimUnit [out] the dimension of the metric values", "keywords": []}, {"id": 3987, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::pHostObject", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params11pHostObjectE", "priority": 1, "content": "CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 3988, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::pHwUnit", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::pHwUnit", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params7pHwUnitE", "priority": 1, "content": "const  char  * pHwUnit [out] associated hw unit for the metric", "keywords": []}, {"id": 3989, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::pMetricName", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::pMetricName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params11pMetricNameE", "priority": 1, "content": "const  char  * pMetricName [in] metric name for which its properties will be listed", "keywords": []}, {"id": 3990, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3991, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetMetricProperties_Params::structSize", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "_CPPv4N46CUpti_Profiler_Host_GetMetricProperties_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3992, "doc_id": 3992, "filename": "api/struct_c_upti___profiler___host___get_metric_properties___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_metric_properties___params", "display_name": "CUpti_Profiler_Host_GetMetricProperties_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_metric_properties___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 3993, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "_CPPv441CUpti_Profiler_Host_GetNumOfPasses_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetNumOfPasses_Params Params for cuptiProfilerHostGetNumOfPasses. Public Members", "keywords": []}, {"id": 3994, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params::configImageSize", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params::configImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetNumOfPasses_Params15configImageSizeE", "priority": 1, "content": "size_t  configImageSize [in] Number of bytes allocated for pConfigImage", "keywords": []}, {"id": 3995, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params::numOfPasses", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params::numOfPasses", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetNumOfPasses_Params11numOfPassesE", "priority": 1, "content": "size_t  numOfPasses [out] number of passes required for profiling scheduled metrics in the config image", "keywords": []}, {"id": 3996, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params::pConfigImage", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params::pConfigImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetNumOfPasses_Params12pConfigImageE", "priority": 1, "content": "uint8_t  * pConfigImage [in] the config image buffer", "keywords": []}, {"id": 3997, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetNumOfPasses_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 3998, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetNumOfPasses_Params::structSize", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "_CPPv4N41CUpti_Profiler_Host_GetNumOfPasses_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 3999, "doc_id": 3999, "filename": "api/struct_c_upti___profiler___host___get_num_of_passes___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "display_name": "CUpti_Profiler_Host_GetNumOfPasses_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_num_of_passes___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4000, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params", "display_name": "CUpti_Profiler_Host_GetRangeName_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv439CUpti_Profiler_Host_GetRangeName_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetRangeName_Params Params for cuptiProfilerHostGetRangeName. Public Members", "keywords": []}, {"id": 4001, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::counterDataImageSize", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] size of counter data image", "keywords": []}, {"id": 4002, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::delimiter", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::delimiter", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params9delimiterE", "priority": 1, "content": "const  char  * delimiter [in] used in case of nested ranges, default=\u201d/\u201d. Range1&lt;delimiter&gt;Range2", "keywords": []}, {"id": 4003, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::pCounterDataImage", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params17pCounterDataImageE", "priority": 1, "content": "const  uint8_t  * pCounterDataImage [in] the counter data image where profiling data has been decoded", "keywords": []}, {"id": 4004, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 4005, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::pRangeName", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::pRangeName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params10pRangeNameE", "priority": 1, "content": "const  char  * pRangeName [out] the range name. Note: that the CUPTI allocate the memory internal and its user responsibility to free up the allocated memory", "keywords": []}, {"id": 4006, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::rangeIndex", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::rangeIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params10rangeIndexE", "priority": 1, "content": "size_t  rangeIndex [in] range index for which the range name will be queried", "keywords": []}, {"id": 4007, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetRangeName_Params::structSize", "display_name": "CUpti_Profiler_Host_GetRangeName_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "_CPPv4N39CUpti_Profiler_Host_GetRangeName_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4008, "doc_id": 4008, "filename": "api/struct_c_upti___profiler___host___get_range_name___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_range_name___params", "display_name": "CUpti_Profiler_Host_GetRangeName_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_range_name___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4009, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv440CUpti_Profiler_Host_GetSubMetrics_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetSubMetrics_Params Params for cuptiProfilerHostGetSubMetrics. Public Members", "keywords": []}, {"id": 4010, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::metricType", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::metricType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params10metricTypeE", "priority": 1, "content": "CUpti_MetricType  metricType [in] the metric type for queried metric", "keywords": []}, {"id": 4011, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::numOfSubmetrics", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::numOfSubmetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params15numOfSubmetricsE", "priority": 1, "content": "size_t  numOfSubmetrics [out] number of submetrics supported", "keywords": []}, {"id": 4012, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::pHostObject", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params11pHostObjectE", "priority": 1, "content": "CUpti_Profiler_Host_Object  * pHostObject [in] reference to the profiler host object allocated by CUPTI in cuptiProfilerHostInitialize", "keywords": []}, {"id": 4013, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::pMetricName", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::pMetricName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params11pMetricNameE", "priority": 1, "content": "const  char  * pMetricName [in] metric name for which sub-metric will be listed", "keywords": []}, {"id": 4014, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 4015, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::ppSubMetrics", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::ppSubMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params12ppSubMetricsE", "priority": 1, "content": "const  char  * * ppSubMetrics [out] list of submetrics supported for the metric.", "keywords": []}, {"id": 4016, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSubMetrics_Params::structSize", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "_CPPv4N40CUpti_Profiler_Host_GetSubMetrics_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4017, "doc_id": 4017, "filename": "api/struct_c_upti___profiler___host___get_sub_metrics___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "display_name": "CUpti_Profiler_Host_GetSubMetrics_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_sub_metrics___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4018, "doc_id": 4023, "filename": "api/struct_c_upti___profiler___host___get_supported_chips___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSupportedChips_Params", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___get_supported_chips___params", "anchor": "_CPPv444CUpti_Profiler_Host_GetSupportedChips_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_GetSupportedChips_Params Params for cuptiProfilerHostGetSupportedChips. Public Members", "keywords": []}, {"id": 4019, "doc_id": 4023, "filename": "api/struct_c_upti___profiler___host___get_supported_chips___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSupportedChips_Params::numChips", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params::numChips", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_supported_chips___params", "anchor": "_CPPv4N44CUpti_Profiler_Host_GetSupportedChips_Params8numChipsE", "priority": 1, "content": "size_t  numChips [out] number of supported chips", "keywords": []}, {"id": 4020, "doc_id": 4023, "filename": "api/struct_c_upti___profiler___host___get_supported_chips___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSupportedChips_Params::pPriv", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_supported_chips___params", "anchor": "_CPPv4N44CUpti_Profiler_Host_GetSupportedChips_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 4021, "doc_id": 4023, "filename": "api/struct_c_upti___profiler___host___get_supported_chips___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSupportedChips_Params::ppChipNames", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params::ppChipNames", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_supported_chips___params", "anchor": "_CPPv4N44CUpti_Profiler_Host_GetSupportedChips_Params11ppChipNamesE", "priority": 1, "content": "const  char  * const  * ppChipNames [out] list of supported chips", "keywords": []}, {"id": 4022, "doc_id": 4023, "filename": "api/struct_c_upti___profiler___host___get_supported_chips___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_GetSupportedChips_Params::structSize", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___get_supported_chips___params", "anchor": "_CPPv4N44CUpti_Profiler_Host_GetSupportedChips_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4023, "doc_id": 4023, "filename": "api/struct_c_upti___profiler___host___get_supported_chips___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___get_supported_chips___params", "display_name": "CUpti_Profiler_Host_GetSupportedChips_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___get_supported_chips___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4024, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params", "display_name": "CUpti_Profiler_Host_Initialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv437CUpti_Profiler_Host_Initialize_Params", "priority": 1, "content": "struct  CUpti_Profiler_Host_Initialize_Params Params for cuptiProfilerHostInitialize. Public Members", "keywords": []}, {"id": 4025, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params::pChipName", "display_name": "CUpti_Profiler_Host_Initialize_Params::pChipName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv4N37CUpti_Profiler_Host_Initialize_Params9pChipNameE", "priority": 1, "content": "const  char  * pChipName [in] accepted for chips supported at the time-of-release.", "keywords": []}, {"id": 4026, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params::pCounterAvailabilityImage", "display_name": "CUpti_Profiler_Host_Initialize_Params::pCounterAvailabilityImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv4N37CUpti_Profiler_Host_Initialize_Params25pCounterAvailabilityImageE", "priority": 1, "content": "const  uint8_t  * pCounterAvailabilityImage [in] buffer with counter availability image - required for future chip support", "keywords": []}, {"id": 4027, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params::pHostObject", "display_name": "CUpti_Profiler_Host_Initialize_Params::pHostObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv4N37CUpti_Profiler_Host_Initialize_Params11pHostObjectE", "priority": 1, "content": "CUpti_Profiler_Host_Object  * pHostObject [out] binary blob allocated by CUPTI and operations associated with this object.", "keywords": []}, {"id": 4028, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params::pPriv", "display_name": "CUpti_Profiler_Host_Initialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv4N37CUpti_Profiler_Host_Initialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 4029, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params::profilerType", "display_name": "CUpti_Profiler_Host_Initialize_Params::profilerType", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv4N37CUpti_Profiler_Host_Initialize_Params12profilerTypeE", "priority": 1, "content": "CUpti_ProfilerType  profilerType [in] the profiler kind one from CUpti_ProfilerType", "keywords": []}, {"id": 4030, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Host_Initialize_Params::structSize", "display_name": "CUpti_Profiler_Host_Initialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "_CPPv4N37CUpti_Profiler_Host_Initialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure. CUPTI client should set the size of the structure. It will be used in CUPTI to check what fields are available in the structure. Used to preserve backward compatibility.", "keywords": []}, {"id": 4031, "doc_id": 4031, "filename": "api/struct_c_upti___profiler___host___initialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___host___initialize___params", "display_name": "CUpti_Profiler_Host_Initialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___host___initialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4032, "doc_id": 4035, "filename": "api/struct_c_upti___profiler___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Initialize_Params", "display_name": "CUpti_Profiler_Initialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___initialize___params", "anchor": "_CPPv432CUpti_Profiler_Initialize_Params", "priority": 1, "content": "struct  CUpti_Profiler_Initialize_Params Default parameter for cuptiProfilerInitialize. Public Members", "keywords": []}, {"id": 4033, "doc_id": 4035, "filename": "api/struct_c_upti___profiler___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Initialize_Params::pPriv", "display_name": "CUpti_Profiler_Initialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___initialize___params", "anchor": "_CPPv4N32CUpti_Profiler_Initialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4034, "doc_id": 4035, "filename": "api/struct_c_upti___profiler___initialize___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_Initialize_Params::structSize", "display_name": "CUpti_Profiler_Initialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___initialize___params", "anchor": "_CPPv4N32CUpti_Profiler_Initialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_Initialize_Params_STRUCT_SIZE", "keywords": []}, {"id": 4035, "doc_id": 4035, "filename": "api/struct_c_upti___profiler___initialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___initialize___params", "display_name": "CUpti_Profiler_Initialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___initialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4036, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params", "display_name": "CUpti_Profiler_IsPassCollected_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv437CUpti_Profiler_IsPassCollected_Params", "priority": 1, "content": "struct  CUpti_Profiler_IsPassCollected_Params Params for cuptiProfilerIsPassCollected. Public Members", "keywords": []}, {"id": 4037, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::allPassesCollected", "display_name": "CUpti_Profiler_IsPassCollected_Params::allPassesCollected", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params18allPassesCollectedE", "priority": 1, "content": "uint8_t  allPassesCollected [out] becomes true when the last pass has been decoded", "keywords": []}, {"id": 4038, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::ctx", "display_name": "CUpti_Profiler_IsPassCollected_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 4039, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::numRangesDropped", "display_name": "CUpti_Profiler_IsPassCollected_Params::numRangesDropped", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params16numRangesDroppedE", "priority": 1, "content": "size_t  numRangesDropped [out] number of ranges whose data was dropped in the processed pass", "keywords": []}, {"id": 4040, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::numTraceBytesDropped", "display_name": "CUpti_Profiler_IsPassCollected_Params::numTraceBytesDropped", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params20numTraceBytesDroppedE", "priority": 1, "content": "size_t  numTraceBytesDropped [out] number of bytes not written to TraceBuffer due to buffer full", "keywords": []}, {"id": 4041, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::onePassCollected", "display_name": "CUpti_Profiler_IsPassCollected_Params::onePassCollected", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params16onePassCollectedE", "priority": 1, "content": "uint8_t  onePassCollected [out] true if a pass was successfully decoded", "keywords": []}, {"id": 4042, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::pPriv", "display_name": "CUpti_Profiler_IsPassCollected_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4043, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_IsPassCollected_Params::structSize", "display_name": "CUpti_Profiler_IsPassCollected_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "_CPPv4N37CUpti_Profiler_IsPassCollected_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_IsPassCollected_Params_STRUCT_SIZE", "keywords": []}, {"id": 4044, "doc_id": 4044, "filename": "api/struct_c_upti___profiler___is_pass_collected___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___is_pass_collected___params", "display_name": "CUpti_Profiler_IsPassCollected_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___is_pass_collected___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4045, "doc_id": 4049, "filename": "api/struct_c_upti___profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PopRange_Params", "display_name": "CUpti_Profiler_PopRange_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___pop_range___params", "anchor": "_CPPv430CUpti_Profiler_PopRange_Params", "priority": 1, "content": "struct  CUpti_Profiler_PopRange_Params Public Members", "keywords": []}, {"id": 4046, "doc_id": 4049, "filename": "api/struct_c_upti___profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PopRange_Params::ctx", "display_name": "CUpti_Profiler_PopRange_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___pop_range___params", "anchor": "_CPPv4N30CUpti_Profiler_PopRange_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 4047, "doc_id": 4049, "filename": "api/struct_c_upti___profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PopRange_Params::pPriv", "display_name": "CUpti_Profiler_PopRange_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___pop_range___params", "anchor": "_CPPv4N30CUpti_Profiler_PopRange_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4048, "doc_id": 4049, "filename": "api/struct_c_upti___profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PopRange_Params::structSize", "display_name": "CUpti_Profiler_PopRange_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___pop_range___params", "anchor": "_CPPv4N30CUpti_Profiler_PopRange_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_PopRange_Params_STRUCT_SIZE", "keywords": []}, {"id": 4049, "doc_id": 4049, "filename": "api/struct_c_upti___profiler___pop_range___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___pop_range___params", "display_name": "CUpti_Profiler_PopRange_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___pop_range___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4050, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PushRange_Params", "display_name": "CUpti_Profiler_PushRange_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "_CPPv431CUpti_Profiler_PushRange_Params", "priority": 1, "content": "struct  CUpti_Profiler_PushRange_Params Public Members", "keywords": []}, {"id": 4051, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PushRange_Params::ctx", "display_name": "CUpti_Profiler_PushRange_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "_CPPv4N31CUpti_Profiler_PushRange_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 4052, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PushRange_Params::pPriv", "display_name": "CUpti_Profiler_PushRange_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "_CPPv4N31CUpti_Profiler_PushRange_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4053, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PushRange_Params::pRangeName", "display_name": "CUpti_Profiler_PushRange_Params::pRangeName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "_CPPv4N31CUpti_Profiler_PushRange_Params10pRangeNameE", "priority": 1, "content": "const  char  * pRangeName [in] specifies the range for subsequent launches; must not be NULL", "keywords": []}, {"id": 4054, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PushRange_Params::rangeNameLength", "display_name": "CUpti_Profiler_PushRange_Params::rangeNameLength", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "_CPPv4N31CUpti_Profiler_PushRange_Params15rangeNameLengthE", "priority": 1, "content": "size_t  rangeNameLength [in] assign to strlen(pRangeName) if known; if set to zero, the library will call strlen()", "keywords": []}, {"id": 4055, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_PushRange_Params::structSize", "display_name": "CUpti_Profiler_PushRange_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "_CPPv4N31CUpti_Profiler_PushRange_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_PushRange_Params_STRUCT_SIZE", "keywords": []}, {"id": 4056, "doc_id": 4056, "filename": "api/struct_c_upti___profiler___push_range___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___push_range___params", "display_name": "CUpti_Profiler_PushRange_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___push_range___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4057, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params", "display_name": "CUpti_Profiler_SetConfig_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv431CUpti_Profiler_SetConfig_Params", "priority": 1, "content": "struct  CUpti_Profiler_SetConfig_Params Params for cuptiProfilerSetConfig. Public Members", "keywords": []}, {"id": 4058, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::configSize", "display_name": "CUpti_Profiler_SetConfig_Params::configSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params10configSizeE", "priority": 1, "content": "size_t  configSize [in] size of config", "keywords": []}, {"id": 4059, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::ctx", "display_name": "CUpti_Profiler_SetConfig_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 4060, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::minNestingLevel", "display_name": "CUpti_Profiler_SetConfig_Params::minNestingLevel", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params15minNestingLevelE", "priority": 1, "content": "uint16_t  minNestingLevel [in] the lowest nesting level to be profiled; must be &gt;= 1", "keywords": []}, {"id": 4061, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::numNestingLevels", "display_name": "CUpti_Profiler_SetConfig_Params::numNestingLevels", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params16numNestingLevelsE", "priority": 1, "content": "uint16_t  numNestingLevels [in] the number of nesting levels to profile; must be &gt;= 1", "keywords": []}, {"id": 4062, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::pConfig", "display_name": "CUpti_Profiler_SetConfig_Params::pConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params7pConfigE", "priority": 1, "content": "const  uint8_t  * pConfig [in] Config created by NVPW_RawMetricsConfig_GetConfigImage(). Must be align(8).", "keywords": []}, {"id": 4063, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::pPriv", "display_name": "CUpti_Profiler_SetConfig_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4064, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::passIndex", "display_name": "CUpti_Profiler_SetConfig_Params::passIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params9passIndexE", "priority": 1, "content": "size_t  passIndex [in] Set this to zero for in-app replay; set this to the output of EndPass() for application replay", "keywords": []}, {"id": 4065, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::structSize", "display_name": "CUpti_Profiler_SetConfig_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_SetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 4066, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_SetConfig_Params::targetNestingLevel", "display_name": "CUpti_Profiler_SetConfig_Params::targetNestingLevel", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "_CPPv4N31CUpti_Profiler_SetConfig_Params18targetNestingLevelE", "priority": 1, "content": "uint16_t  targetNestingLevel [in] Set this to minNestingLevel for in-app replay; set this to the output of EndPass() for application", "keywords": []}, {"id": 4067, "doc_id": 4067, "filename": "api/struct_c_upti___profiler___set_config___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___set_config___params", "display_name": "CUpti_Profiler_SetConfig_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___set_config___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4068, "doc_id": 4072, "filename": "api/struct_c_upti___profiler___unset_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_UnsetConfig_Params", "display_name": "CUpti_Profiler_UnsetConfig_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___profiler___unset_config___params", "anchor": "_CPPv433CUpti_Profiler_UnsetConfig_Params", "priority": 1, "content": "struct  CUpti_Profiler_UnsetConfig_Params Params for cuptiProfilerUnsetConfig. Public Members", "keywords": []}, {"id": 4069, "doc_id": 4072, "filename": "api/struct_c_upti___profiler___unset_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_UnsetConfig_Params::ctx", "display_name": "CUpti_Profiler_UnsetConfig_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___unset_config___params", "anchor": "_CPPv4N33CUpti_Profiler_UnsetConfig_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] if NULL, the current CUcontext is used", "keywords": []}, {"id": 4070, "doc_id": 4072, "filename": "api/struct_c_upti___profiler___unset_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_UnsetConfig_Params::pPriv", "display_name": "CUpti_Profiler_UnsetConfig_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___unset_config___params", "anchor": "_CPPv4N33CUpti_Profiler_UnsetConfig_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4071, "doc_id": 4072, "filename": "api/struct_c_upti___profiler___unset_config___params.html", "domain_name": "cpp", "name": "CUpti_Profiler_UnsetConfig_Params::structSize", "display_name": "CUpti_Profiler_UnsetConfig_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___profiler___unset_config___params", "anchor": "_CPPv4N33CUpti_Profiler_UnsetConfig_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 4072, "doc_id": 4072, "filename": "api/struct_c_upti___profiler___unset_config___params.html", "domain_name": "std", "name": "api/struct_c_upti___profiler___unset_config___params", "display_name": "CUpti_Profiler_UnsetConfig_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___profiler___unset_config___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4073, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv451CUpti_RangeProfiler_CounterData_GetRangeInfo_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_CounterData_GetRangeInfo_Params Params for cuptiRangeProfilerCounterDataGetRangeInfo. Public Members", "keywords": []}, {"id": 4074, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::counterDataImageSize", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size of the counter data image.", "keywords": []}, {"id": 4075, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::pCounterDataImage", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params17pCounterDataImageE", "priority": 1, "content": "const  uint8_t  * pCounterDataImage [in] Counter data image.", "keywords": []}, {"id": 4076, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::pPriv", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4077, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeDelimiter", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeDelimiter", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params14rangeDelimiterE", "priority": 1, "content": "const  char  * rangeDelimiter [in] range delimiter.", "keywords": []}, {"id": 4078, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeIndex", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params10rangeIndexE", "priority": 1, "content": "size_t  rangeIndex [in] Index of the sample.", "keywords": []}, {"id": 4079, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeName", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::rangeName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params9rangeNameE", "priority": 1, "content": "const  char  * rangeName [out] RangeName;", "keywords": []}, {"id": 4080, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::structSize", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "_CPPv4N51CUpti_RangeProfiler_CounterData_GetRangeInfo_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4081, "doc_id": 4081, "filename": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "display_name": "CUpti_RangeProfiler_CounterData_GetRangeInfo_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___counter_data___get_range_info___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4082, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "_CPPv454CUpti_RangeProfiler_CounterDataImage_Initialize_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_CounterDataImage_Initialize_Params Params for cuptiRangeProfilerCounterDataImageInitialize. Public Members", "keywords": []}, {"id": 4083, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::counterDataSize", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::counterDataSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N54CUpti_RangeProfiler_CounterDataImage_Initialize_Params15counterDataSizeE", "priority": 1, "content": "size_t  counterDataSize [in] Size of the counter data image.", "keywords": []}, {"id": 4084, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pCounterData", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pCounterData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N54CUpti_RangeProfiler_CounterDataImage_Initialize_Params12pCounterDataE", "priority": 1, "content": "uint8_t  * pCounterData [in] Counter data image.", "keywords": []}, {"id": 4085, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pPriv", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N54CUpti_RangeProfiler_CounterDataImage_Initialize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4086, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N54CUpti_RangeProfiler_CounterDataImage_Initialize_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Periodic sampler object.", "keywords": []}, {"id": 4087, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::structSize", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "_CPPv4N54CUpti_RangeProfiler_CounterDataImage_Initialize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4088, "doc_id": 4088, "filename": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "display_name": "CUpti_RangeProfiler_CounterDataImage_Initialize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___counter_data_image___initialize___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4089, "doc_id": 4094, "filename": "api/struct_c_upti___range_profiler___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_DecodeData_Params", "display_name": "CUpti_RangeProfiler_DecodeData_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___decode_data___params", "anchor": "_CPPv437CUpti_RangeProfiler_DecodeData_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_DecodeData_Params Params for cuptiRangeProfilerDecodeData. Public Members", "keywords": []}, {"id": 4090, "doc_id": 4094, "filename": "api/struct_c_upti___range_profiler___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_DecodeData_Params::numOfRangeDropped", "display_name": "CUpti_RangeProfiler_DecodeData_Params::numOfRangeDropped", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___decode_data___params", "anchor": "_CPPv4N37CUpti_RangeProfiler_DecodeData_Params17numOfRangeDroppedE", "priority": 1, "content": "size_t  numOfRangeDropped [out] Number of ranges dropped in the processed passes.", "keywords": []}, {"id": 4091, "doc_id": 4094, "filename": "api/struct_c_upti___range_profiler___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_DecodeData_Params::pPriv", "display_name": "CUpti_RangeProfiler_DecodeData_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___decode_data___params", "anchor": "_CPPv4N37CUpti_RangeProfiler_DecodeData_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4092, "doc_id": 4094, "filename": "api/struct_c_upti___range_profiler___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_DecodeData_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_DecodeData_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___decode_data___params", "anchor": "_CPPv4N37CUpti_RangeProfiler_DecodeData_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4093, "doc_id": 4094, "filename": "api/struct_c_upti___range_profiler___decode_data___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_DecodeData_Params::structSize", "display_name": "CUpti_RangeProfiler_DecodeData_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___decode_data___params", "anchor": "_CPPv4N37CUpti_RangeProfiler_DecodeData_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4094, "doc_id": 4094, "filename": "api/struct_c_upti___range_profiler___decode_data___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___decode_data___params", "display_name": "CUpti_RangeProfiler_DecodeData_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___decode_data___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4095, "doc_id": 4099, "filename": "api/struct_c_upti___range_profiler___disable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Disable_Params", "display_name": "CUpti_RangeProfiler_Disable_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___disable___params", "anchor": "_CPPv434CUpti_RangeProfiler_Disable_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_Disable_Params Params for cuptiRangeProfilerDisable. Public Members", "keywords": []}, {"id": 4096, "doc_id": 4099, "filename": "api/struct_c_upti___range_profiler___disable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Disable_Params::pPriv", "display_name": "CUpti_RangeProfiler_Disable_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___disable___params", "anchor": "_CPPv4N34CUpti_RangeProfiler_Disable_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4097, "doc_id": 4099, "filename": "api/struct_c_upti___range_profiler___disable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Disable_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_Disable_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___disable___params", "anchor": "_CPPv4N34CUpti_RangeProfiler_Disable_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4098, "doc_id": 4099, "filename": "api/struct_c_upti___range_profiler___disable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Disable_Params::structSize", "display_name": "CUpti_RangeProfiler_Disable_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___disable___params", "anchor": "_CPPv4N34CUpti_RangeProfiler_Disable_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4099, "doc_id": 4099, "filename": "api/struct_c_upti___range_profiler___disable___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___disable___params", "display_name": "CUpti_RangeProfiler_Disable_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___disable___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4100, "doc_id": 4105, "filename": "api/struct_c_upti___range_profiler___enable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Enable_Params", "display_name": "CUpti_RangeProfiler_Enable_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___enable___params", "anchor": "_CPPv433CUpti_RangeProfiler_Enable_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_Enable_Params Params for cuptiRangeProfilerEnable. Public Members", "keywords": []}, {"id": 4101, "doc_id": 4105, "filename": "api/struct_c_upti___range_profiler___enable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Enable_Params::ctx", "display_name": "CUpti_RangeProfiler_Enable_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___enable___params", "anchor": "_CPPv4N33CUpti_RangeProfiler_Enable_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] Context to be used for profiling.", "keywords": []}, {"id": 4102, "doc_id": 4105, "filename": "api/struct_c_upti___range_profiler___enable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Enable_Params::pPriv", "display_name": "CUpti_RangeProfiler_Enable_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___enable___params", "anchor": "_CPPv4N33CUpti_RangeProfiler_Enable_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4103, "doc_id": 4105, "filename": "api/struct_c_upti___range_profiler___enable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Enable_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_Enable_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___enable___params", "anchor": "_CPPv4N33CUpti_RangeProfiler_Enable_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [out] Range Profiler Object.", "keywords": []}, {"id": 4104, "doc_id": 4105, "filename": "api/struct_c_upti___range_profiler___enable___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Enable_Params::structSize", "display_name": "CUpti_RangeProfiler_Enable_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___enable___params", "anchor": "_CPPv4N33CUpti_RangeProfiler_Enable_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4105, "doc_id": 4105, "filename": "api/struct_c_upti___range_profiler___enable___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___enable___params", "display_name": "CUpti_RangeProfiler_Enable_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___enable___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4106, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "_CPPv445CUpti_RangeProfiler_GetCounterDataInfo_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_GetCounterDataInfo_Params Params for cuptiRangeProfilerGetCounterDataInfo. Public Members", "keywords": []}, {"id": 4107, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::counterDataImageSize", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataInfo_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size of the counter data image.", "keywords": []}, {"id": 4108, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::numTotalRanges", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::numTotalRanges", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataInfo_Params14numTotalRangesE", "priority": 1, "content": "size_t  numTotalRanges [out] Number of ranges in the counter data image.", "keywords": []}, {"id": 4109, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::pCounterDataImage", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataInfo_Params17pCounterDataImageE", "priority": 1, "content": "const  uint8_t  * pCounterDataImage [in] Counter data image.", "keywords": []}, {"id": 4110, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::pPriv", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataInfo_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4111, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::structSize", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataInfo_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4112, "doc_id": 4112, "filename": "api/struct_c_upti___range_profiler___get_counter_data_info___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "display_name": "CUpti_RangeProfiler_GetCounterDataInfo_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___get_counter_data_info___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4113, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv445CUpti_RangeProfiler_GetCounterDataSize_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_GetCounterDataSize_Params Params for cuptiRangeProfilerGetCounterDataSize. Public Members", "keywords": []}, {"id": 4114, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::counterDataSize", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::counterDataSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params15counterDataSizeE", "priority": 1, "content": "size_t  counterDataSize [out] Size of the counter data image.", "keywords": []}, {"id": 4115, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::maxNumOfRanges", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::maxNumOfRanges", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params14maxNumOfRangesE", "priority": 1, "content": "size_t  maxNumOfRanges [in] Maximum number of ranges to be stored in the counter data image.", "keywords": []}, {"id": 4116, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::maxNumRangeTreeNodes", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::maxNumRangeTreeNodes", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params20maxNumRangeTreeNodesE", "priority": 1, "content": "uint32_t  maxNumRangeTreeNodes [in] Maximum number of RangeTree nodes; must be &gt;= maxNumOfRanges", "keywords": []}, {"id": 4117, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::numMetrics", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::numMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params10numMetricsE", "priority": 1, "content": "size_t  numMetrics [in] Number of metrics to be collected.", "keywords": []}, {"id": 4118, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::pMetricNames", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::pMetricNames", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params12pMetricNamesE", "priority": 1, "content": "const  char  * * pMetricNames [in] Names of the metrics to be collected.", "keywords": []}, {"id": 4119, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::pPriv", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4120, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Periodic sampler object.", "keywords": []}, {"id": 4121, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_GetCounterDataSize_Params::structSize", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "_CPPv4N45CUpti_RangeProfiler_GetCounterDataSize_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4122, "doc_id": 4122, "filename": "api/struct_c_upti___range_profiler___get_counter_data_size___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "display_name": "CUpti_RangeProfiler_GetCounterDataSize_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___get_counter_data_size___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4123, "doc_id": 4127, "filename": "api/struct_c_upti___range_profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PopRange_Params", "display_name": "CUpti_RangeProfiler_PopRange_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___pop_range___params", "anchor": "_CPPv435CUpti_RangeProfiler_PopRange_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_PopRange_Params Params for cuptiRangeProfilerPopRange. Public Members", "keywords": []}, {"id": 4124, "doc_id": 4127, "filename": "api/struct_c_upti___range_profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PopRange_Params::pPriv", "display_name": "CUpti_RangeProfiler_PopRange_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___pop_range___params", "anchor": "_CPPv4N35CUpti_RangeProfiler_PopRange_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4125, "doc_id": 4127, "filename": "api/struct_c_upti___range_profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PopRange_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_PopRange_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___pop_range___params", "anchor": "_CPPv4N35CUpti_RangeProfiler_PopRange_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4126, "doc_id": 4127, "filename": "api/struct_c_upti___range_profiler___pop_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PopRange_Params::structSize", "display_name": "CUpti_RangeProfiler_PopRange_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___pop_range___params", "anchor": "_CPPv4N35CUpti_RangeProfiler_PopRange_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4127, "doc_id": 4127, "filename": "api/struct_c_upti___range_profiler___pop_range___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___pop_range___params", "display_name": "CUpti_RangeProfiler_PopRange_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___pop_range___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4128, "doc_id": 4133, "filename": "api/struct_c_upti___range_profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PushRange_Params", "display_name": "CUpti_RangeProfiler_PushRange_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___push_range___params", "anchor": "_CPPv436CUpti_RangeProfiler_PushRange_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_PushRange_Params Params for cuptiRangeProfilerPushRange. Public Members", "keywords": []}, {"id": 4129, "doc_id": 4133, "filename": "api/struct_c_upti___range_profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PushRange_Params::pPriv", "display_name": "CUpti_RangeProfiler_PushRange_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___push_range___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_PushRange_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4130, "doc_id": 4133, "filename": "api/struct_c_upti___range_profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PushRange_Params::pRangeName", "display_name": "CUpti_RangeProfiler_PushRange_Params::pRangeName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___push_range___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_PushRange_Params10pRangeNameE", "priority": 1, "content": "const  char  * pRangeName [in] Name of the range to be profiled (only valid for User range mode).", "keywords": []}, {"id": 4131, "doc_id": 4133, "filename": "api/struct_c_upti___range_profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PushRange_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_PushRange_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___push_range___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_PushRange_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4132, "doc_id": 4133, "filename": "api/struct_c_upti___range_profiler___push_range___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_PushRange_Params::structSize", "display_name": "CUpti_RangeProfiler_PushRange_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___push_range___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_PushRange_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4133, "doc_id": 4133, "filename": "api/struct_c_upti___range_profiler___push_range___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___push_range___params", "display_name": "CUpti_RangeProfiler_PushRange_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___push_range___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4134, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params", "display_name": "CUpti_RangeProfiler_SetConfig_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv436CUpti_RangeProfiler_SetConfig_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_SetConfig_Params Params for cuptiRangeProfilerSetConfig. Public Members", "keywords": []}, {"id": 4135, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::configSize", "display_name": "CUpti_RangeProfiler_SetConfig_Params::configSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params10configSizeE", "priority": 1, "content": "size_t  configSize [in] Size of the config image.", "keywords": []}, {"id": 4136, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::counterDataImageSize", "display_name": "CUpti_RangeProfiler_SetConfig_Params::counterDataImageSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params20counterDataImageSizeE", "priority": 1, "content": "size_t  counterDataImageSize [in] Size of the counter data image.", "keywords": []}, {"id": 4137, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::maxRangesPerPass", "display_name": "CUpti_RangeProfiler_SetConfig_Params::maxRangesPerPass", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params16maxRangesPerPassE", "priority": 1, "content": "size_t  maxRangesPerPass [in] Maximum number of ranges that can be profiled in a pass.", "keywords": []}, {"id": 4138, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::minNestingLevel", "display_name": "CUpti_RangeProfiler_SetConfig_Params::minNestingLevel", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params15minNestingLevelE", "priority": 1, "content": "uint16_t  minNestingLevel [in] minimum nesting level to be profiled.", "keywords": []}, {"id": 4139, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::numNestingLevels", "display_name": "CUpti_RangeProfiler_SetConfig_Params::numNestingLevels", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params16numNestingLevelsE", "priority": 1, "content": "uint16_t  numNestingLevels [in] number of nesting level to be profiled. For Auto range mode, this should be set to 1.", "keywords": []}, {"id": 4140, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::pConfig", "display_name": "CUpti_RangeProfiler_SetConfig_Params::pConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params7pConfigE", "priority": 1, "content": "const  uint8_t  * pConfig [in] Config image.", "keywords": []}, {"id": 4141, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::pCounterDataImage", "display_name": "CUpti_RangeProfiler_SetConfig_Params::pCounterDataImage", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params17pCounterDataImageE", "priority": 1, "content": "uint8_t  * pCounterDataImage [in] Counter data image.", "keywords": []}, {"id": 4142, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::pPriv", "display_name": "CUpti_RangeProfiler_SetConfig_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4143, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_SetConfig_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4144, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::passIndex", "display_name": "CUpti_RangeProfiler_SetConfig_Params::passIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params9passIndexE", "priority": 1, "content": "size_t  passIndex [in] Pass index for the replay session.", "keywords": []}, {"id": 4145, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::range", "display_name": "CUpti_RangeProfiler_SetConfig_Params::range", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params5rangeE", "priority": 1, "content": "CUpti_ProfilerRange  range [in] Profiling Range mode.", "keywords": []}, {"id": 4146, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::replayMode", "display_name": "CUpti_RangeProfiler_SetConfig_Params::replayMode", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params10replayModeE", "priority": 1, "content": "CUpti_ProfilerReplayMode  replayMode [in] Replay mode.", "keywords": []}, {"id": 4147, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::structSize", "display_name": "CUpti_RangeProfiler_SetConfig_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4148, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_SetConfig_Params::targetNestingLevel", "display_name": "CUpti_RangeProfiler_SetConfig_Params::targetNestingLevel", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "_CPPv4N36CUpti_RangeProfiler_SetConfig_Params18targetNestingLevelE", "priority": 1, "content": "uint16_t  targetNestingLevel [in] Target nesting level for the replay session.", "keywords": []}, {"id": 4149, "doc_id": 4149, "filename": "api/struct_c_upti___range_profiler___set_config___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___set_config___params", "display_name": "CUpti_RangeProfiler_SetConfig_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___set_config___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4150, "doc_id": 4154, "filename": "api/struct_c_upti___range_profiler___start___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Start_Params", "display_name": "CUpti_RangeProfiler_Start_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___start___params", "anchor": "_CPPv432CUpti_RangeProfiler_Start_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_Start_Params Params for cuptiRangeProfilerStart. Public Members", "keywords": []}, {"id": 4151, "doc_id": 4154, "filename": "api/struct_c_upti___range_profiler___start___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Start_Params::pPriv", "display_name": "CUpti_RangeProfiler_Start_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___start___params", "anchor": "_CPPv4N32CUpti_RangeProfiler_Start_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4152, "doc_id": 4154, "filename": "api/struct_c_upti___range_profiler___start___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Start_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_Start_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___start___params", "anchor": "_CPPv4N32CUpti_RangeProfiler_Start_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4153, "doc_id": 4154, "filename": "api/struct_c_upti___range_profiler___start___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Start_Params::structSize", "display_name": "CUpti_RangeProfiler_Start_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___start___params", "anchor": "_CPPv4N32CUpti_RangeProfiler_Start_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4154, "doc_id": 4154, "filename": "api/struct_c_upti___range_profiler___start___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___start___params", "display_name": "CUpti_RangeProfiler_Start_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___start___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4155, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params", "display_name": "CUpti_RangeProfiler_Stop_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv431CUpti_RangeProfiler_Stop_Params", "priority": 1, "content": "struct  CUpti_RangeProfiler_Stop_Params Params for cuptiRangeProfilerStop. Public Members", "keywords": []}, {"id": 4156, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params::isAllPassSubmitted", "display_name": "CUpti_RangeProfiler_Stop_Params::isAllPassSubmitted", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv4N31CUpti_RangeProfiler_Stop_Params18isAllPassSubmittedE", "priority": 1, "content": "uint8_t  isAllPassSubmitted [out] 1 if all passes are submitted to GPU for collection, 0 otherwise.", "keywords": []}, {"id": 4157, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params::pPriv", "display_name": "CUpti_RangeProfiler_Stop_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv4N31CUpti_RangeProfiler_Stop_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] Set to NULL.", "keywords": []}, {"id": 4158, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params::pRangeProfilerObject", "display_name": "CUpti_RangeProfiler_Stop_Params::pRangeProfilerObject", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv4N31CUpti_RangeProfiler_Stop_Params20pRangeProfilerObjectE", "priority": 1, "content": "CUpti_RangeProfiler_Object  * pRangeProfilerObject [in] Range Profiler Object.", "keywords": []}, {"id": 4159, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params::passIndex", "display_name": "CUpti_RangeProfiler_Stop_Params::passIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv4N31CUpti_RangeProfiler_Stop_Params9passIndexE", "priority": 1, "content": "size_t  passIndex [out] pass index for the replay session.", "keywords": []}, {"id": 4160, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params::structSize", "display_name": "CUpti_RangeProfiler_Stop_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv4N31CUpti_RangeProfiler_Stop_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] Size of the data structure.", "keywords": []}, {"id": 4161, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "cpp", "name": "CUpti_RangeProfiler_Stop_Params::targetNestingLevel", "display_name": "CUpti_RangeProfiler_Stop_Params::targetNestingLevel", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "_CPPv4N31CUpti_RangeProfiler_Stop_Params18targetNestingLevelE", "priority": 1, "content": "size_t  targetNestingLevel [out] target nesting level for the replay session.", "keywords": []}, {"id": 4162, "doc_id": 4162, "filename": "api/struct_c_upti___range_profiler___stop___params.html", "domain_name": "std", "name": "api/struct_c_upti___range_profiler___stop___params", "display_name": "CUpti_RangeProfiler_Stop_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___range_profiler___stop___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4163, "doc_id": 4167, "filename": "api/struct_c_upti___resource_data.html", "domain_name": "cpp", "name": "CUpti_ResourceData", "display_name": "CUpti_ResourceData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___resource_data", "anchor": "_CPPv418CUpti_ResourceData", "priority": 1, "content": "struct  CUpti_ResourceData Data passed into a resource callback function. Data passed into a resource callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_RESOURCE. The callback data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 4164, "doc_id": 4167, "filename": "api/struct_c_upti___resource_data.html", "domain_name": "cpp", "name": "CUpti_ResourceData::context", "display_name": "CUpti_ResourceData::context", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___resource_data", "anchor": "_CPPv4N18CUpti_ResourceData7contextE", "priority": 1, "content": "CUcontext  context For CUPTI_CBID_RESOURCE_CONTEXT_CREATED and CUPTI_CBID_RESOURCE_CONTEXT_DESTROY_STARTING, the context being created or destroyed. For CUPTI_CBID_RESOURCE_STREAM_CREATED and CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING, the context containing the stream being created or destroyed.", "keywords": []}, {"id": 4165, "doc_id": 4167, "filename": "api/struct_c_upti___resource_data.html", "domain_name": "cpp", "name": "CUpti_ResourceData::resourceDescriptor", "display_name": "CUpti_ResourceData::resourceDescriptor", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___resource_data", "anchor": "_CPPv4N18CUpti_ResourceData18resourceDescriptorE", "priority": 1, "content": "void  * resourceDescriptor Reserved for future use.", "keywords": []}, {"id": 4166, "doc_id": 4167, "filename": "api/struct_c_upti___resource_data.html", "domain_name": "cpp", "name": "CUpti_ResourceData::stream", "display_name": "CUpti_ResourceData::stream", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___resource_data", "anchor": "_CPPv4N18CUpti_ResourceData6streamE", "priority": 1, "content": "CUstream  stream For CUPTI_CBID_RESOURCE_STREAM_CREATED and CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING, the stream being created or destroyed.", "keywords": []}, {"id": 4167, "doc_id": 4167, "filename": "api/struct_c_upti___resource_data.html", "domain_name": "std", "name": "api/struct_c_upti___resource_data", "display_name": "CUpti_ResourceData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___resource_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4168, "doc_id": 4171, "filename": "api/struct_c_upti___sass_metrics___config.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Config", "display_name": "CUpti_SassMetrics_Config", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___config", "anchor": "_CPPv424CUpti_SassMetrics_Config", "priority": 1, "content": "struct  CUpti_SassMetrics_Config Public Members", "keywords": []}, {"id": 4169, "doc_id": 4171, "filename": "api/struct_c_upti___sass_metrics___config.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Config::metricId", "display_name": "CUpti_SassMetrics_Config::metricId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___config", "anchor": "_CPPv4N24CUpti_SassMetrics_Config8metricIdE", "priority": 1, "content": "uint64_t  metricId [in] unique id for the SASS metric, can be queried using cuptiSassMetricsGetProperties()", "keywords": []}, {"id": 4170, "doc_id": 4171, "filename": "api/struct_c_upti___sass_metrics___config.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Config::outputGranularity", "display_name": "CUpti_SassMetrics_Config::outputGranularity", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___config", "anchor": "_CPPv4N24CUpti_SassMetrics_Config17outputGranularityE", "priority": 1, "content": "uint8_t  outputGranularity [in] CUpti_SassMetrics_OutputGranularity", "keywords": []}, {"id": 4171, "doc_id": 4171, "filename": "api/struct_c_upti___sass_metrics___config.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___config", "display_name": "CUpti_SassMetrics_Config", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___config", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4172, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data", "display_name": "CUpti_SassMetrics_Data", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv422CUpti_SassMetrics_Data", "priority": 1, "content": "struct  CUpti_SassMetrics_Data Public Members", "keywords": []}, {"id": 4173, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::cubinCrc", "display_name": "CUpti_SassMetrics_Data::cubinCrc", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data8cubinCrcE", "priority": 1, "content": "uint32_t  cubinCrc [out] Unique cubin id", "keywords": []}, {"id": 4174, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::functionIndex", "display_name": "CUpti_SassMetrics_Data::functionIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data13functionIndexE", "priority": 1, "content": "uint32_t  functionIndex [out] function\u2019s unique symbol index in the module.", "keywords": []}, {"id": 4175, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::functionName", "display_name": "CUpti_SassMetrics_Data::functionName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data12functionNameE", "priority": 1, "content": "const  char  * functionName [out] The function name", "keywords": []}, {"id": 4176, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::pInstanceValues", "display_name": "CUpti_SassMetrics_Data::pInstanceValues", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data15pInstanceValuesE", "priority": 1, "content": "CUpti_SassMetrics_InstanceValue  * pInstanceValues [out] array of size equal to number of instances per metric, which contains the metric ID and metric value.", "keywords": []}, {"id": 4177, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::pPriv", "display_name": "CUpti_SassMetrics_Data::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4178, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::pcOffset", "display_name": "CUpti_SassMetrics_Data::pcOffset", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data8pcOffsetE", "priority": 1, "content": "uint32_t  pcOffset [out] pc offset for the function in a module", "keywords": []}, {"id": 4179, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_Data::structSize", "display_name": "CUpti_SassMetrics_Data::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "_CPPv4N22CUpti_SassMetrics_Data10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsFlushData_Params_STRUCT_SIZE", "keywords": []}, {"id": 4180, "doc_id": 4180, "filename": "api/struct_c_upti___sass_metrics___data.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___data", "display_name": "CUpti_SassMetrics_Data", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4181, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetMetrics_Params", "display_name": "CUpti_SassMetrics_GetMetrics_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "_CPPv435CUpti_SassMetrics_GetMetrics_Params", "priority": 1, "content": "struct  CUpti_SassMetrics_GetMetrics_Params Params for cuptiSassMetricsGetMetrics. Public Members", "keywords": []}, {"id": 4182, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetMetrics_Params::numOfMetrics", "display_name": "CUpti_SassMetrics_GetMetrics_Params::numOfMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "_CPPv4N35CUpti_SassMetrics_GetMetrics_Params12numOfMetricsE", "priority": 1, "content": "size_t  numOfMetrics [in] number of metrics supported for the queried chip (can be queried using cuptiSassMetricsGetNumOfMetrics() )", "keywords": []}, {"id": 4183, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetMetrics_Params::pChipName", "display_name": "CUpti_SassMetrics_GetMetrics_Params::pChipName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "_CPPv4N35CUpti_SassMetrics_GetMetrics_Params9pChipNameE", "priority": 1, "content": "const  char  * pChipName [in] chip name for which metrics will be queried", "keywords": []}, {"id": 4184, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetMetrics_Params::pMetricsList", "display_name": "CUpti_SassMetrics_GetMetrics_Params::pMetricsList", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "_CPPv4N35CUpti_SassMetrics_GetMetrics_Params12pMetricsListE", "priority": 1, "content": "CUpti_SassMetrics_MetricDetails  * pMetricsList [out] list of metrics supported for queried chip", "keywords": []}, {"id": 4185, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetMetrics_Params::pPriv", "display_name": "CUpti_SassMetrics_GetMetrics_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "_CPPv4N35CUpti_SassMetrics_GetMetrics_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4186, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetMetrics_Params::structSize", "display_name": "CUpti_SassMetrics_GetMetrics_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "_CPPv4N35CUpti_SassMetrics_GetMetrics_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] should be equal to CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 4187, "doc_id": 4187, "filename": "api/struct_c_upti___sass_metrics___get_metrics___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___get_metrics___params", "display_name": "CUpti_SassMetrics_GetMetrics_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___get_metrics___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4188, "doc_id": 4193, "filename": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetNumOfMetrics_Params", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "anchor": "_CPPv440CUpti_SassMetrics_GetNumOfMetrics_Params", "priority": 1, "content": "struct  CUpti_SassMetrics_GetNumOfMetrics_Params Params for cuptiSassMetricsGetNumOfMetrics. Public Members", "keywords": []}, {"id": 4189, "doc_id": 4193, "filename": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetNumOfMetrics_Params::numOfMetrics", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params::numOfMetrics", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "anchor": "_CPPv4N40CUpti_SassMetrics_GetNumOfMetrics_Params12numOfMetricsE", "priority": 1, "content": "size_t  numOfMetrics [out] number of metrics supported for the queried chip", "keywords": []}, {"id": 4190, "doc_id": 4193, "filename": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetNumOfMetrics_Params::pChipName", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params::pChipName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "anchor": "_CPPv4N40CUpti_SassMetrics_GetNumOfMetrics_Params9pChipNameE", "priority": 1, "content": "const  char  * pChipName [in] chip name for which metrics will be queried", "keywords": []}, {"id": 4191, "doc_id": 4193, "filename": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetNumOfMetrics_Params::pPriv", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "anchor": "_CPPv4N40CUpti_SassMetrics_GetNumOfMetrics_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4192, "doc_id": 4193, "filename": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetNumOfMetrics_Params::structSize", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "anchor": "_CPPv4N40CUpti_SassMetrics_GetNumOfMetrics_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] should be equal to CUpti_SassMetrics_GetNumOfMetrics_Params_STRUCT_SIZE", "keywords": []}, {"id": 4193, "doc_id": 4193, "filename": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "display_name": "CUpti_SassMetrics_GetNumOfMetrics_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___get_num_of_metrics___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4194, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetProperties_Params", "display_name": "CUpti_SassMetrics_GetProperties_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "_CPPv438CUpti_SassMetrics_GetProperties_Params", "priority": 1, "content": "struct  CUpti_SassMetrics_GetProperties_Params Params for cuptiSassMetricsGetProperties. Public Members", "keywords": []}, {"id": 4195, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetProperties_Params::metric", "display_name": "CUpti_SassMetrics_GetProperties_Params::metric", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "_CPPv4N38CUpti_SassMetrics_GetProperties_Params6metricE", "priority": 1, "content": "CUpti_SassMetrics_MetricDetails  metric [out] returns the metric ID and the metric description", "keywords": []}, {"id": 4196, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetProperties_Params::pChipName", "display_name": "CUpti_SassMetrics_GetProperties_Params::pChipName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "_CPPv4N38CUpti_SassMetrics_GetProperties_Params9pChipNameE", "priority": 1, "content": "const  char  * pChipName [in] chip name for which metric will be queried", "keywords": []}, {"id": 4197, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetProperties_Params::pMetricName", "display_name": "CUpti_SassMetrics_GetProperties_Params::pMetricName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "_CPPv4N38CUpti_SassMetrics_GetProperties_Params11pMetricNameE", "priority": 1, "content": "const  char  * pMetricName [in] metric name", "keywords": []}, {"id": 4198, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetProperties_Params::pPriv", "display_name": "CUpti_SassMetrics_GetProperties_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "_CPPv4N38CUpti_SassMetrics_GetProperties_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4199, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_GetProperties_Params::structSize", "display_name": "CUpti_SassMetrics_GetProperties_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "_CPPv4N38CUpti_SassMetrics_GetProperties_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] should be equal to CUpti_SassMetrics_GetProperties_Params_STRUCT_SIZE", "keywords": []}, {"id": 4200, "doc_id": 4200, "filename": "api/struct_c_upti___sass_metrics___get_properties___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___get_properties___params", "display_name": "CUpti_SassMetrics_GetProperties_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___get_properties___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4201, "doc_id": 4202, "filename": "api/struct_c_upti___sass_metrics___instance_value.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_InstanceValue", "display_name": "CUpti_SassMetrics_InstanceValue", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___instance_value", "anchor": "_CPPv431CUpti_SassMetrics_InstanceValue", "priority": 1, "content": "struct  CUpti_SassMetrics_InstanceValue", "keywords": []}, {"id": 4202, "doc_id": 4202, "filename": "api/struct_c_upti___sass_metrics___instance_value.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___instance_value", "display_name": "CUpti_SassMetrics_InstanceValue", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___instance_value", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4203, "doc_id": 4207, "filename": "api/struct_c_upti___sass_metrics___metric_details.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_MetricDetails", "display_name": "CUpti_SassMetrics_MetricDetails", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics___metric_details", "anchor": "_CPPv431CUpti_SassMetrics_MetricDetails", "priority": 1, "content": "struct  CUpti_SassMetrics_MetricDetails Public Members", "keywords": []}, {"id": 4204, "doc_id": 4207, "filename": "api/struct_c_upti___sass_metrics___metric_details.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_MetricDetails::metricId", "display_name": "CUpti_SassMetrics_MetricDetails::metricId", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___metric_details", "anchor": "_CPPv4N31CUpti_SassMetrics_MetricDetails8metricIdE", "priority": 1, "content": "uint64_t  metricId unique ID for the SASS metric", "keywords": []}, {"id": 4205, "doc_id": 4207, "filename": "api/struct_c_upti___sass_metrics___metric_details.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_MetricDetails::pMetricDescription", "display_name": "CUpti_SassMetrics_MetricDetails::pMetricDescription", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___metric_details", "anchor": "_CPPv4N31CUpti_SassMetrics_MetricDetails18pMetricDescriptionE", "priority": 1, "content": "const  char  * pMetricDescription metric description", "keywords": []}, {"id": 4206, "doc_id": 4207, "filename": "api/struct_c_upti___sass_metrics___metric_details.html", "domain_name": "cpp", "name": "CUpti_SassMetrics_MetricDetails::pMetricName", "display_name": "CUpti_SassMetrics_MetricDetails::pMetricName", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics___metric_details", "anchor": "_CPPv4N31CUpti_SassMetrics_MetricDetails11pMetricNameE", "priority": 1, "content": "const  char  * pMetricName metric name", "keywords": []}, {"id": 4207, "doc_id": 4207, "filename": "api/struct_c_upti___sass_metrics___metric_details.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics___metric_details", "display_name": "CUpti_SassMetrics_MetricDetails", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics___metric_details", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4208, "doc_id": 4213, "filename": "api/struct_c_upti___sass_metrics_disable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsDisable_Params", "display_name": "CUpti_SassMetricsDisable_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics_disable___params", "anchor": "_CPPv431CUpti_SassMetricsDisable_Params", "priority": 1, "content": "struct  CUpti_SassMetricsDisable_Params Params for cuptiSassMetricsDisable. Public Members", "keywords": []}, {"id": 4209, "doc_id": 4213, "filename": "api/struct_c_upti___sass_metrics_disable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsDisable_Params::ctx", "display_name": "CUpti_SassMetricsDisable_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_disable___params", "anchor": "_CPPv4N31CUpti_SassMetricsDisable_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] CUDA context on which SASS metric data collection will be disabled. If set NULL, default context will be consider for SASS metric data collection.", "keywords": []}, {"id": 4210, "doc_id": 4213, "filename": "api/struct_c_upti___sass_metrics_disable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsDisable_Params::numOfDroppedRecords", "display_name": "CUpti_SassMetricsDisable_Params::numOfDroppedRecords", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_disable___params", "anchor": "_CPPv4N31CUpti_SassMetricsDisable_Params19numOfDroppedRecordsE", "priority": 1, "content": "size_t  numOfDroppedRecords [out] Num of dropped SASS records will be equal to numOfPatchedInstructions * numOfInstances. Number of dropped records will be zero when data is flushed prior to calling the disable API.", "keywords": []}, {"id": 4211, "doc_id": 4213, "filename": "api/struct_c_upti___sass_metrics_disable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsDisable_Params::pPriv", "display_name": "CUpti_SassMetricsDisable_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_disable___params", "anchor": "_CPPv4N31CUpti_SassMetricsDisable_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4212, "doc_id": 4213, "filename": "api/struct_c_upti___sass_metrics_disable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsDisable_Params::structSize", "display_name": "CUpti_SassMetricsDisable_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_disable___params", "anchor": "_CPPv4N31CUpti_SassMetricsDisable_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsDisable_Params_STRUCT_SIZE", "keywords": []}, {"id": 4213, "doc_id": 4213, "filename": "api/struct_c_upti___sass_metrics_disable___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics_disable___params", "display_name": "CUpti_SassMetricsDisable_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics_disable___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4214, "doc_id": 4219, "filename": "api/struct_c_upti___sass_metrics_enable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsEnable_Params", "display_name": "CUpti_SassMetricsEnable_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics_enable___params", "anchor": "_CPPv430CUpti_SassMetricsEnable_Params", "priority": 1, "content": "struct  CUpti_SassMetricsEnable_Params Params for cuptiSassMetricsEnable. Public Members", "keywords": []}, {"id": 4215, "doc_id": 4219, "filename": "api/struct_c_upti___sass_metrics_enable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsEnable_Params::ctx", "display_name": "CUpti_SassMetricsEnable_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_enable___params", "anchor": "_CPPv4N30CUpti_SassMetricsEnable_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] CUDA context on which SASS metric data collection will be enabled. If set NULL, default context will be consider for SASS metric data collection.", "keywords": []}, {"id": 4216, "doc_id": 4219, "filename": "api/struct_c_upti___sass_metrics_enable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsEnable_Params::enableLazyPatching", "display_name": "CUpti_SassMetricsEnable_Params::enableLazyPatching", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_enable___params", "anchor": "_CPPv4N30CUpti_SassMetricsEnable_Params18enableLazyPatchingE", "priority": 1, "content": "uint8_t  enableLazyPatching [in] if false, all the functions will patched regardless of their execution with cuptiSassMetricsEnable() API call. when this parameter is set to true, metric data collection for the function will be done at the very first execution in the enable/disble range.", "keywords": []}, {"id": 4217, "doc_id": 4219, "filename": "api/struct_c_upti___sass_metrics_enable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsEnable_Params::pPriv", "display_name": "CUpti_SassMetricsEnable_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_enable___params", "anchor": "_CPPv4N30CUpti_SassMetricsEnable_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4218, "doc_id": 4219, "filename": "api/struct_c_upti___sass_metrics_enable___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsEnable_Params::structSize", "display_name": "CUpti_SassMetricsEnable_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_enable___params", "anchor": "_CPPv4N30CUpti_SassMetricsEnable_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsEnable_Params_STRUCT_SIZE", "keywords": []}, {"id": 4219, "doc_id": 4219, "filename": "api/struct_c_upti___sass_metrics_enable___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics_enable___params", "display_name": "CUpti_SassMetricsEnable_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics_enable___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4220, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params", "display_name": "CUpti_SassMetricsFlushData_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv433CUpti_SassMetricsFlushData_Params", "priority": 1, "content": "struct  CUpti_SassMetricsFlushData_Params Params for cuptiSassMetricsFlushData. Public Members", "keywords": []}, {"id": 4221, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params::ctx", "display_name": "CUpti_SassMetricsFlushData_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv4N33CUpti_SassMetricsFlushData_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] CUDA context on which SASS metric data collection was enabled. If set NULL, default context will be consider for SASS metric data collection.", "keywords": []}, {"id": 4222, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params::numOfInstances", "display_name": "CUpti_SassMetricsFlushData_Params::numOfInstances", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv4N33CUpti_SassMetricsFlushData_Params14numOfInstancesE", "priority": 1, "content": "size_t  numOfInstances [in] number of patched instruction record instances for a metric, user can call cuptiSassMetricsGetDataProperties() for getting total number of instances for each record per metric available.", "keywords": []}, {"id": 4223, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params::numOfPatchedInstructionRecords", "display_name": "CUpti_SassMetricsFlushData_Params::numOfPatchedInstructionRecords", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv4N33CUpti_SassMetricsFlushData_Params30numOfPatchedInstructionRecordsE", "priority": 1, "content": "size_t  numOfPatchedInstructionRecords [in] number of patched instruction record will be retrived, user can call cuptiSassMetricsGetDataProperties() for getting total number of records available.", "keywords": []}, {"id": 4224, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params::pMetricsData", "display_name": "CUpti_SassMetricsFlushData_Params::pMetricsData", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv4N33CUpti_SassMetricsFlushData_Params12pMetricsDataE", "priority": 1, "content": "CUpti_SassMetrics_Data  * pMetricsData [out]", "keywords": []}, {"id": 4225, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params::pPriv", "display_name": "CUpti_SassMetricsFlushData_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv4N33CUpti_SassMetricsFlushData_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4226, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsFlushData_Params::structSize", "display_name": "CUpti_SassMetricsFlushData_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "_CPPv4N33CUpti_SassMetricsFlushData_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsFlushData_Params_STRUCT_SIZE", "keywords": []}, {"id": 4227, "doc_id": 4227, "filename": "api/struct_c_upti___sass_metrics_flush_data___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics_flush_data___params", "display_name": "CUpti_SassMetricsFlushData_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics_flush_data___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4228, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsGetDataProperties_Params", "display_name": "CUpti_SassMetricsGetDataProperties_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "_CPPv441CUpti_SassMetricsGetDataProperties_Params", "priority": 1, "content": "struct  CUpti_SassMetricsGetDataProperties_Params Params for cuptiSassMetricsGetDataProperties. Public Members", "keywords": []}, {"id": 4229, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsGetDataProperties_Params::ctx", "display_name": "CUpti_SassMetricsGetDataProperties_Params::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "_CPPv4N41CUpti_SassMetricsGetDataProperties_Params3ctxE", "priority": 1, "content": "CUcontext  ctx [in] CUDA context on which SASS metric data collection was enabled. If set NULL, default context will be consider for SASS metric data collection.", "keywords": []}, {"id": 4230, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsGetDataProperties_Params::numOfInstances", "display_name": "CUpti_SassMetricsGetDataProperties_Params::numOfInstances", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "_CPPv4N41CUpti_SassMetricsGetDataProperties_Params14numOfInstancesE", "priority": 1, "content": "size_t  numOfInstances [out] number of instances for each metric value per instruction. This will depend on CUpti_SassPatching_OutputGranularity level set for the metric config.", "keywords": []}, {"id": 4231, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsGetDataProperties_Params::numOfPatchedInstructionRecords", "display_name": "CUpti_SassMetricsGetDataProperties_Params::numOfPatchedInstructionRecords", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "_CPPv4N41CUpti_SassMetricsGetDataProperties_Params30numOfPatchedInstructionRecordsE", "priority": 1, "content": "size_t  numOfPatchedInstructionRecords [out] total number of SASS records has been collected", "keywords": []}, {"id": 4232, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsGetDataProperties_Params::pPriv", "display_name": "CUpti_SassMetricsGetDataProperties_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "_CPPv4N41CUpti_SassMetricsGetDataProperties_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4233, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsGetDataProperties_Params::structSize", "display_name": "CUpti_SassMetricsGetDataProperties_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "_CPPv4N41CUpti_SassMetricsGetDataProperties_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsGetDataProperties_Params_STRUCT_SIZE", "keywords": []}, {"id": 4234, "doc_id": 4234, "filename": "api/struct_c_upti___sass_metrics_get_data_properties___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics_get_data_properties___params", "display_name": "CUpti_SassMetricsGetDataProperties_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics_get_data_properties___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4235, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsSetConfig_Params", "display_name": "CUpti_SassMetricsSetConfig_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "_CPPv433CUpti_SassMetricsSetConfig_Params", "priority": 1, "content": "struct  CUpti_SassMetricsSetConfig_Params Params for cuptiSassMetricsSetConfig. Public Members", "keywords": []}, {"id": 4236, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsSetConfig_Params::deviceIndex", "display_name": "CUpti_SassMetricsSetConfig_Params::deviceIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "_CPPv4N33CUpti_SassMetricsSetConfig_Params11deviceIndexE", "priority": 1, "content": "uint32_t  deviceIndex [in] device index for which config will be set, user can call this once for the device on which the the SASS metric data will be collected", "keywords": []}, {"id": 4237, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsSetConfig_Params::numOfMetricConfig", "display_name": "CUpti_SassMetricsSetConfig_Params::numOfMetricConfig", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "_CPPv4N33CUpti_SassMetricsSetConfig_Params17numOfMetricConfigE", "priority": 1, "content": "size_t  numOfMetricConfig [in] num of metric configs, will be equal to number of metrics queried", "keywords": []}, {"id": 4238, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsSetConfig_Params::pConfigs", "display_name": "CUpti_SassMetricsSetConfig_Params::pConfigs", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "_CPPv4N33CUpti_SassMetricsSetConfig_Params8pConfigsE", "priority": 1, "content": "CUpti_SassMetrics_Config  * pConfigs [in] list of metric config generated for given sass metrics", "keywords": []}, {"id": 4239, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsSetConfig_Params::pPriv", "display_name": "CUpti_SassMetricsSetConfig_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "_CPPv4N33CUpti_SassMetricsSetConfig_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4240, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsSetConfig_Params::structSize", "display_name": "CUpti_SassMetricsSetConfig_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "_CPPv4N33CUpti_SassMetricsSetConfig_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsSetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 4241, "doc_id": 4241, "filename": "api/struct_c_upti___sass_metrics_set_config___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics_set_config___params", "display_name": "CUpti_SassMetricsSetConfig_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics_set_config___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4242, "doc_id": 4246, "filename": "api/struct_c_upti___sass_metrics_unset_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsUnsetConfig_Params", "display_name": "CUpti_SassMetricsUnsetConfig_Params", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___sass_metrics_unset_config___params", "anchor": "_CPPv435CUpti_SassMetricsUnsetConfig_Params", "priority": 1, "content": "struct  CUpti_SassMetricsUnsetConfig_Params Params for cuptiSassMetricsUnsetConfig. Public Members", "keywords": []}, {"id": 4243, "doc_id": 4246, "filename": "api/struct_c_upti___sass_metrics_unset_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsUnsetConfig_Params::deviceIndex", "display_name": "CUpti_SassMetricsUnsetConfig_Params::deviceIndex", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_unset_config___params", "anchor": "_CPPv4N35CUpti_SassMetricsUnsetConfig_Params11deviceIndexE", "priority": 1, "content": "uint32_t  deviceIndex [in] device index for which SASS metric data collection config will get reset, user need to call this API for all the devices on which the the SASS metric data collection have been configured.", "keywords": []}, {"id": 4244, "doc_id": 4246, "filename": "api/struct_c_upti___sass_metrics_unset_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsUnsetConfig_Params::pPriv", "display_name": "CUpti_SassMetricsUnsetConfig_Params::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_unset_config___params", "anchor": "_CPPv4N35CUpti_SassMetricsUnsetConfig_Params5pPrivE", "priority": 1, "content": "void  * pPriv [in] assign to NULL", "keywords": []}, {"id": 4245, "doc_id": 4246, "filename": "api/struct_c_upti___sass_metrics_unset_config___params.html", "domain_name": "cpp", "name": "CUpti_SassMetricsUnsetConfig_Params::structSize", "display_name": "CUpti_SassMetricsUnsetConfig_Params::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___sass_metrics_unset_config___params", "anchor": "_CPPv4N35CUpti_SassMetricsUnsetConfig_Params10structSizeE", "priority": 1, "content": "size_t  structSize [in] equal to CUpti_SassMetricsUnsetConfig_Params_STRUCT_SIZE", "keywords": []}, {"id": 4246, "doc_id": 4246, "filename": "api/struct_c_upti___sass_metrics_unset_config___params.html", "domain_name": "std", "name": "api/struct_c_upti___sass_metrics_unset_config___params", "display_name": "CUpti_SassMetricsUnsetConfig_Params", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___sass_metrics_unset_config___params", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4247, "doc_id": 4251, "filename": "api/struct_c_upti___state_data.html", "domain_name": "cpp", "name": "CUpti_StateData", "display_name": "CUpti_StateData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___state_data", "anchor": "_CPPv415CUpti_StateData", "priority": 1, "content": "struct  CUpti_StateData Data passed into a State callback function. Data passed into a State callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_STATE and callback Ids belonging to CUpti_CallbackIdState. Unless otherwise noted, the callback data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 4248, "doc_id": 4251, "filename": "api/struct_c_upti___state_data.html", "domain_name": "cpp", "name": "CUpti_StateData::message", "display_name": "CUpti_StateData::message", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___state_data", "anchor": "_CPPv4N15CUpti_StateData7messageE", "priority": 1, "content": "const  char  * message String containing more details. It can be NULL.", "keywords": []}, {"id": 4249, "doc_id": 4251, "filename": "api/struct_c_upti___state_data.html", "domain_name": "cpp", "name": "CUpti_StateData::notification", "display_name": "CUpti_StateData::notification", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___state_data", "anchor": "_CPPv4N15CUpti_StateData12notificationE", "priority": 1, "content": "struct  CUpti_StateData :: [anonymous] :: [anonymous]  notification Data passed along with the callback Ids Enum CUpti_CallbackIdState used to denote callback ids.", "keywords": []}, {"id": 4250, "doc_id": 4251, "filename": "api/struct_c_upti___state_data.html", "domain_name": "cpp", "name": "CUpti_StateData::result", "display_name": "CUpti_StateData::result", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___state_data", "anchor": "_CPPv4N15CUpti_StateData6resultE", "priority": 1, "content": "CUptiResult  result Error code.", "keywords": []}, {"id": 4251, "doc_id": 4251, "filename": "api/struct_c_upti___state_data.html", "domain_name": "std", "name": "api/struct_c_upti___state_data", "display_name": "CUpti_StateData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___state_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4252, "doc_id": 4256, "filename": "api/struct_c_upti___stream_attr_data.html", "domain_name": "cpp", "name": "CUpti_StreamAttrData", "display_name": "CUpti_StreamAttrData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___stream_attr_data", "anchor": "_CPPv420CUpti_StreamAttrData", "priority": 1, "content": "struct  CUpti_StreamAttrData Stream attribute data passed into a resource callback function for CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED callback. Data passed into a resource callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_RESOURCE. The stream attribute data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 4253, "doc_id": 4256, "filename": "api/struct_c_upti___stream_attr_data.html", "domain_name": "cpp", "name": "CUpti_StreamAttrData::attr", "display_name": "CUpti_StreamAttrData::attr", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___stream_attr_data", "anchor": "_CPPv4N20CUpti_StreamAttrData4attrE", "priority": 1, "content": "CUstreamAttrID  attr The type of the CUDA stream attribute.", "keywords": []}, {"id": 4254, "doc_id": 4256, "filename": "api/struct_c_upti___stream_attr_data.html", "domain_name": "cpp", "name": "CUpti_StreamAttrData::stream", "display_name": "CUpti_StreamAttrData::stream", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___stream_attr_data", "anchor": "_CPPv4N20CUpti_StreamAttrData6streamE", "priority": 1, "content": "CUstream  stream The CUDA stream handle for the attribute.", "keywords": []}, {"id": 4255, "doc_id": 4256, "filename": "api/struct_c_upti___stream_attr_data.html", "domain_name": "cpp", "name": "CUpti_StreamAttrData::value", "display_name": "CUpti_StreamAttrData::value", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___stream_attr_data", "anchor": "_CPPv4N20CUpti_StreamAttrData5valueE", "priority": 1, "content": "const  CUstreamAttrValue  * value The value of the CUDA stream attribute.", "keywords": []}, {"id": 4256, "doc_id": 4256, "filename": "api/struct_c_upti___stream_attr_data.html", "domain_name": "std", "name": "api/struct_c_upti___stream_attr_data", "display_name": "CUpti_StreamAttrData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___stream_attr_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4257, "doc_id": 4260, "filename": "api/struct_c_upti___synchronize_data.html", "domain_name": "cpp", "name": "CUpti_SynchronizeData", "display_name": "CUpti_SynchronizeData", "type": "class", "display_type": "C++ class", "docname": "api/struct_c_upti___synchronize_data", "anchor": "_CPPv421CUpti_SynchronizeData", "priority": 1, "content": "struct  CUpti_SynchronizeData Data passed into a synchronize callback function. Data passed into a synchronize callback function as the cbdata argument to CUpti_CallbackFunc . The cbdata will be this type for domain equal to CUPTI_CB_DOMAIN_SYNCHRONIZE. The callback data is valid only within the invocation of the callback function that is passed the data. If you need to retain some data for use outside of the callback, you must make a copy of that data. Public Members", "keywords": []}, {"id": 4258, "doc_id": 4260, "filename": "api/struct_c_upti___synchronize_data.html", "domain_name": "cpp", "name": "CUpti_SynchronizeData::context", "display_name": "CUpti_SynchronizeData::context", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___synchronize_data", "anchor": "_CPPv4N21CUpti_SynchronizeData7contextE", "priority": 1, "content": "CUcontext  context The context of the stream being synchronized.", "keywords": []}, {"id": 4259, "doc_id": 4260, "filename": "api/struct_c_upti___synchronize_data.html", "domain_name": "cpp", "name": "CUpti_SynchronizeData::stream", "display_name": "CUpti_SynchronizeData::stream", "type": "member", "display_type": "C++ member", "docname": "api/struct_c_upti___synchronize_data", "anchor": "_CPPv4N21CUpti_SynchronizeData6streamE", "priority": 1, "content": "CUstream  stream The stream being synchronized.", "keywords": []}, {"id": 4260, "doc_id": 4260, "filename": "api/struct_c_upti___synchronize_data.html", "domain_name": "std", "name": "api/struct_c_upti___synchronize_data", "display_name": "CUpti_SynchronizeData", "type": "doc", "display_type": "Page", "docname": "api/struct_c_upti___synchronize_data", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4261, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint", "type": "class", "display_type": "C++ class", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_CheckpointE", "priority": 1, "content": "struct  CUpti_Checkpoint Configuration and handle for a CUPTI Checkpoint. A CUptiCheckpoint object should be initialized with desired options prior to passing into any CUPTI Checkpoint API function. The first call into a Checkpoint API function will initialize internal state based on these options. Subsequent changes to these options will not have any effect. Checkpoint data is saved in device, host, and filesystem space. There are options to reserve memory at each level (device, host, filesystem) which are intended to allow a guarantee that a certain amount of memory will remain free for use after the checkpoint is saved. Note, however, that falling back to slower levels of memory (host, and then filesystem) to save the checkpoint will result in performance degradation. Currently, the filesystem limitation is not implemented. Note that falling back to filesystem storage may significantly impact the performance for saving and restoring a checkpoint. Public Members", "keywords": []}, {"id": 4262, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::allowOverwrite", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::allowOverwrite", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint14allowOverwriteE", "priority": 1, "content": "uint8_t  allowOverwrite [in] Boolean, Allow checkpoint to save over existing checkpoint", "keywords": []}, {"id": 4263, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::ctx", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::ctx", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint3ctxE", "priority": 1, "content": "CUcontext  ctx [in] Set to context to save from, or will use current context if NULL", "keywords": []}, {"id": 4264, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::optimizations", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::optimizations", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint13optimizationsE", "priority": 1, "content": "uint8_t  optimizations [in] Mask of CUpti_CheckpointOptimizations flags for this checkpoint", "keywords": []}, {"id": 4265, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::pPriv", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::pPriv", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint5pPrivE", "priority": 1, "content": "void  * pPriv [in] Assign to NULL", "keywords": []}, {"id": 4266, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::reserveDeviceMB", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::reserveDeviceMB", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint15reserveDeviceMBE", "priority": 1, "content": "size_t  reserveDeviceMB [in] Restrict checkpoint from using last N MB of device memory (-1 = use no device memory)", "keywords": []}, {"id": 4267, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::reserveHostMB", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::reserveHostMB", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint13reserveHostMBE", "priority": 1, "content": "size_t  reserveHostMB [in] Restrict checkpoint from using last N MB of host memory (-1 = use no host memory)", "keywords": []}, {"id": 4268, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "cpp", "name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::structSize", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint::structSize", "type": "member", "display_type": "C++ member", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "_CPPv4N2NV5Cupti10Checkpoint16CUpti_Checkpoint10structSizeE", "priority": 1, "content": "size_t  structSize [in] Must be set to CUpti_Checkpoint_STRUCT_SIZE", "keywords": []}, {"id": 4269, "doc_id": 4269, "filename": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint.html", "domain_name": "std", "name": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "display_name": "NV::Cupti::Checkpoint::CUpti_Checkpoint", "type": "doc", "display_type": "Page", "docname": "api/struct_n_v_1_1_cupti_1_1_checkpoint_1_1_c_upti___checkpoint", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4270, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId", "display_name": "CUpti_ActivityObjectKindId", "type": "union", "display_type": "C++ union", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv426CUpti_ActivityObjectKindId", "priority": 1, "content": "union  CUpti_ActivityObjectKindId #include &lt; E:/temp/Built/Int/rel-pub/windows-desktop-win7-x64/Shared/Cuda/Modules/Cupti/Inc/cupti_activity.h &gt; Identifiers for object kinds as specified by CUpti_ActivityObjectKind. CUpti_ActivityObjectKind  Public Members", "keywords": []}, {"id": 4271, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::contextId", "display_name": "CUpti_ActivityObjectKindId::contextId", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId9contextIdE", "priority": 1, "content": "uint32_t  contextId", "keywords": []}, {"id": 4272, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::dcs", "display_name": "CUpti_ActivityObjectKindId::dcs", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId3dcsE", "priority": 1, "content": "struct  CUpti_ActivityObjectKindId :: [anonymous]  dcs A device object requires that we identify the device ID. A context object requires that we identify both the device and context ID. A stream object requires that we identify device, context, and stream ID.", "keywords": []}, {"id": 4273, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::deviceId", "display_name": "CUpti_ActivityObjectKindId::deviceId", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId8deviceIdE", "priority": 1, "content": "uint32_t  deviceId", "keywords": []}, {"id": 4274, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::processId", "display_name": "CUpti_ActivityObjectKindId::processId", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId9processIdE", "priority": 1, "content": "uint32_t  processId", "keywords": []}, {"id": 4275, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::pt", "display_name": "CUpti_ActivityObjectKindId::pt", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId2ptE", "priority": 1, "content": "struct  CUpti_ActivityObjectKindId :: [anonymous]  pt A process object requires that we identify the process ID. A thread object requires that we identify both the process and thread ID.", "keywords": []}, {"id": 4276, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::streamId", "display_name": "CUpti_ActivityObjectKindId::streamId", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId8streamIdE", "priority": 1, "content": "uint32_t  streamId", "keywords": []}, {"id": 4277, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "cpp", "name": "CUpti_ActivityObjectKindId::threadId", "display_name": "CUpti_ActivityObjectKindId::threadId", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "_CPPv4N26CUpti_ActivityObjectKindId8threadIdE", "priority": 1, "content": "uint32_t  threadId", "keywords": []}, {"id": 4278, "doc_id": 4278, "filename": "api/union_c_upti___activity_object_kind_id.html", "domain_name": "std", "name": "api/union_c_upti___activity_object_kind_id", "display_name": "CUpti_ActivityObjectKindId", "type": "doc", "display_type": "Page", "docname": "api/union_c_upti___activity_object_kind_id", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4279, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue", "display_name": "CUpti_MetricValue", "type": "union", "display_type": "C++ union", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv417CUpti_MetricValue", "priority": 1, "content": "union  CUpti_MetricValue #include &lt; C:/dvs/p4/build/sw/devtools/Agora/Rel/CUDA12.6/Shared/Cuda/Modules/Cupti/Inc/cupti_metrics.h &gt; A metric value. Metric values can be one of several different kinds. Corresponding to each kind is a member of the CUpti_MetricValue union. The metric value returned by cuptiMetricGetValue should be accessed using the appropriate member of that union based on its value kind. Public Members", "keywords": []}, {"id": 4280, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue::metricValueDouble", "display_name": "CUpti_MetricValue::metricValueDouble", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv4N17CUpti_MetricValue17metricValueDoubleE", "priority": 1, "content": "double  metricValueDouble", "keywords": []}, {"id": 4281, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue::metricValueInt64", "display_name": "CUpti_MetricValue::metricValueInt64", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv4N17CUpti_MetricValue16metricValueInt64E", "priority": 1, "content": "int64_t  metricValueInt64", "keywords": []}, {"id": 4282, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue::metricValuePercent", "display_name": "CUpti_MetricValue::metricValuePercent", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv4N17CUpti_MetricValue18metricValuePercentE", "priority": 1, "content": "double  metricValuePercent", "keywords": []}, {"id": 4283, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue::metricValueThroughput", "display_name": "CUpti_MetricValue::metricValueThroughput", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv4N17CUpti_MetricValue21metricValueThroughputE", "priority": 1, "content": "uint64_t  metricValueThroughput", "keywords": []}, {"id": 4284, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue::metricValueUint64", "display_name": "CUpti_MetricValue::metricValueUint64", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv4N17CUpti_MetricValue17metricValueUint64E", "priority": 1, "content": "uint64_t  metricValueUint64", "keywords": []}, {"id": 4285, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "cpp", "name": "CUpti_MetricValue::metricValueUtilizationLevel", "display_name": "CUpti_MetricValue::metricValueUtilizationLevel", "type": "member", "display_type": "C++ member", "docname": "api/union_c_upti___metric_value", "anchor": "_CPPv4N17CUpti_MetricValue27metricValueUtilizationLevelE", "priority": 1, "content": "CUpti_MetricValueUtilizationLevel  metricValueUtilizationLevel", "keywords": []}, {"id": 4286, "doc_id": 4286, "filename": "api/union_c_upti___metric_value.html", "domain_name": "std", "name": "api/union_c_upti___metric_value", "display_name": "CUpti_MetricValue", "type": "doc", "display_type": "Page", "docname": "api/union_c_upti___metric_value", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4287, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#boost", "display_name": "Boost", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "boost", "priority": -1, "content": "Boost Software License - Version 1.0 - August 17th, 2003 Permission is hereby granted, free of charge, to any person or organization obtaining a copy of the software and accompanying documentation covered by this license (the \u201cSoftware\u201d) to use, reproduce, display, distribute, execute, and transmit the Software, and to prepare derivative works of the Software, and to permit third-parties to whom the Software is furnished to do so, all subject to the following: The copyright notices in the Software and this entire statement, including the above license grant, this restriction and the following disclaimer, must be included in all copies of the Software, in whole or in part, and all derivative works of the Software, unless such copies or derivative works are solely in the form of machine-executable object code generated by a source language processor. THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", "keywords": []}, {"id": 4288, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#flatbuffers", "display_name": "Flatbuffers", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "flatbuffers", "priority": -1, "content": "http://google.github.io/flatbuffers Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: You must give any other recipients of the Work or Derivative Works a copy of this License; and You must cause any modified files to carry prominent notices stating that You changed the files; and You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u201c[]\u201d replaced with your own identifying information. (Don\u2019t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright \u00a9 2014 Google Inc. Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0", "keywords": []}, {"id": 4289, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#font-cascadia-mono", "display_name": "Font - Cascadia Mono", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "font-cascadia-mono", "priority": -1, "content": "( https://github.com/microsoft/cascadia-code ) Copyright (c) 2019 - Present, Microsoft Corporation, with Reserved Font Name Cascadia Code. This Font Software is licensed under the SIL Open Font License, Version 1.1. This license is copied below, and is also available with a FAQ at: http://scripts.sil.org/OFL SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007 PREAMBLE The goals of the Open Font License (OFL) are to stimulate worldwide development of collaborative font projects, to support the font creation efforts of academic and linguistic communities, and to provide a free and open framework in which fonts may be shared and improved in partnership with others. The OFL allows the licensed fonts to be used, studied, modified and redistributed freely as long as they are not sold by themselves. The fonts, including any derivative works, can be bundled, embedded, redistributed and/or sold with any software provided that any reserved names are not used by derivative works. The fonts and derivatives, however, cannot be released under any other type of license. The requirement for fonts to remain under this license does not apply to any document created using the fonts or their derivatives. DEFINITIONS \u201cFont Software\u201d refers to the set of files released by the Copyright Holder(s) under this license and clearly marked as such. This may include source files, build scripts and documentation. \u201cReserved Font Name\u201d refers to any names specified as such after the copyright statement(s). \u201cOriginal Version\u201d refers to the collection of Font Software components as distributed by the Copyright Holder(s). \u201cModified Version\u201d refers to any derivative made by adding to, deleting, or substituting \u2013 in part or in whole \u2013 any of the components of the Original Version, by changing formats or by porting the Font Software to a new environment. \u201cAuthor\u201d refers to any designer, engineer, programmer, technical writer or other person who contributed to the Font Software. PERMISSION &amp; CONDITIONS Permission is hereby granted, free of charge, to any person obtaining a copy of the Font Software, to use, study, copy, merge, embed, modify, redistribute, and sell modified and unmodified copies of the Font Software, subject to the following conditions: Neither the Font Software nor any of its individual components, in Original or Modified Versions, may be sold by itself. Original or Modified Versions of the Font Software may be bundled, redistributed and/or sold with any software, provided that each copy contains the above copyright notice and this license. These can be included either as stand-alone text files, human-readable headers or in the appropriate machine-readable metadata fields within text or binary files as long as those fields can be easily viewed by the user. No Modified Version of the Font Software may use the Reserved Font Name(s) unless explicit written permission is granted by the corresponding Copyright Holder. This restriction only applies to the primary font name as presented to the users. The name(s) of the Copyright Holder(s) or the Author(s) of the Font Software shall not be used to promote, endorse or advertise any Modified Version, except to acknowledge the contribution(s) of the Copyright Holder(s) and the Author(s) or with their explicit written permission. The Font Software, modified or unmodified, in part or in whole, must be distributed entirely under this license, and must not be distributed under any other license. The requirement for fonts to remain under this license does not apply to any document created using the Font Software. TERMINATION This license becomes null and void if any of the above conditions are not met. DISCLAIMER THE FONT SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.", "keywords": []}, {"id": 4290, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#font-open-sans", "display_name": "Font - Open Sans", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "font-open-sans", "priority": -1, "content": "( https://fonts.google.com/specimen/Open+Sans ) Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: You must give any other recipients of the Work or Derivative Works a copy of this License; and You must cause any modified files to carry prominent notices stating that You changed the files; and You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u201c[]\u201d replaced with your own identifying information. (Don\u2019t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright \u00a9 2014 Google Inc. Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0", "keywords": []}, {"id": 4291, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#font-roboto", "display_name": "Font - Roboto", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "font-roboto", "priority": -1, "content": "( https://fonts.google.com/specimen/Roboto ) Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \u201cLicense\u201d shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \u201cLicensor\u201d shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \u201cLegal Entity\u201d shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \u201ccontrol\u201d means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \u201cYou\u201d (or \u201cYour\u201d) shall mean an individual or Legal Entity exercising permissions granted by this License. \u201cSource\u201d form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \u201cObject\u201d form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \u201cWork\u201d shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \u201cDerivative Works\u201d shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \u201cContribution\u201d shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \u201csubmitted\u201d means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \u201cNot a Contribution.\u201d \u201cContributor\u201d shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: You must give any other recipients of the Work or Derivative Works a copy of this License; and You must cause any modified files to carry prominent notices stating that You changed the files; and You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and If the Work includes a \u201cNOTICE\u201d text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \u201cAS IS\u201d BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \u201c[]\u201d replaced with your own identifying information. (Don\u2019t include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \u201cprinted page\u201d as the copyright notice for easier identification within third-party archives. Copyright \u00a9 2014 Google Inc. Licensed under the Apache License, Version 2.0 (the \u201cLicense\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0", "keywords": []}, {"id": 4292, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#microsoft-detours", "display_name": "Microsoft Detours", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "microsoft-detours", "priority": -1, "content": "Microsoft Detours is used under the Professional license ( http://research.microsoft.com/en-us/projects/detours/ ). NVIDIA agrees to include in all copies of the NVIDIA Applications a proprietary rights notice that includes a reference to Microsoft software being included in such applications. NVIDIA shall not remove or obscure, but shall retain in the Software, any copyright, trademark, or patent notices that appear in the Software.", "keywords": []}, {"id": 4293, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "page", "name": "copyright-and-licenses/index#nvidia-software-license-agreement", "display_name": "NVIDIA Software License Agreement", "type": "section", "display_type": "Page section", "docname": "copyright-and-licenses/index", "anchor": "nvidia-software-license-agreement", "priority": -1, "content": "NVIDIA CORPORATION NVIDIA SOFTWARE LICENSE AGREEMENT IMPORTANT \u2014 READ BEFORE DOWNLOADING, INSTALLING, COPYING OR USING THE LICENSED SOFTWARE This Software License Agreement (\u201cSLA\u201d), made and entered into as of the time and date of click through action (\u201cEffective Date\u201d), is a legal agreement between you and NVIDIA Corporation (\u201cNVIDIA\u201d) and governs the use of the NVIDIA computer software and the documentation made available for use with such NVIDIA software. By downloading, installing, copying, or otherwise using the NVIDIA software and/or documentation, you agree to be bound by the terms of this SLA. If you do not agree to the terms of this SLA, do not download, install, copy or use the NVIDIA software or documentation. IF YOU ARE ENTERING INTO THIS SLA ON BEHALF OF A COMPANY OR OTHER LEGAL ENTITY, YOU REPRESENT THAT YOU HAVE THE LEGAL AUTHORITY TO BIND THE ENTITY TO THIS SLA, IN WHICH CASE \u201cYOU\u201d WILL MEAN THE ENTITY YOU REPRESENT. IF YOU DON\u2019T HAVE SUCH AUTHORITY, OR IF YOU DON\u2019T ACCEPT ALL THE TERMS AND CONDITIONS OF THIS SLA, THEN NVIDIA DOES NOT AGREE TO LICENSE THE LICENSED SOFTWARE TO YOU, AND YOU MAY NOT DOWNLOAD, INSTALL, COPY OR USE IT. LICENSE. 1.1 License Grant. Subject to the terms of the AGREEMENT, NVIDIA hereby grants you a non-exclusive, non-transferable license, without the right to sublicense (except as expressly set forth in a Supplement), during the applicable license term unless earlier terminated as provided below, to have Authorized Users install and use the Software, including modifications (if expressly permitted in a Supplement), in accordance with the Documentation. You are only licensed to activate and use Licensed Software for which you a have a valid license, even if during the download or installation you are presented with other product options. No Orders are binding on NVIDIA until accepted by NVIDIA. Your Orders are subject to the AGREEMENT. SLA Supplements : Certain Licensed Software licensed under this SLA may be subject to additional terms and conditions that will be presented to you in a Supplement for acceptance prior to the delivery of such Licensed Software under this SLA and the applicable Supplement. Licensed Software will only be delivered to you upon your acceptance of all applicable terms. 1.2 Limited Purpose Licenses . If your license is provided for one of the purposes indicated below, then notwithstanding contrary terms in Section 1.1 or in a Supplement, such licenses are for internal use and do not include any right or license to sub- license and distribute the Licensed Software or its output in any way in any public release, however limited, and/or in any manner that provides third parties with use of or access to the Licensed Software or its functionality or output, including (but not limited to) external alpha or beta testing or development phases. Further: Evaluation License . You may use evaluation licenses solely for your internal evaluation of the Licensed Software for broader adoption within your Enterprise or in connection with a NVIDIA product purchase decision, and such licenses have an expiration date as indicated by NVIDIA in its sole discretion (or ninety days from the date of download if no other duration is indicated). Educational/Academic License . You may use educational/academic licenses solely for educational purposes and all users must be enrolled or employed by an academic institution. If you do not meet NVIDIA\u2019s academic program requirements for educational institutions, you have no rights under this license. Test/Development License . You may use test/development licenses solely for your internal development, testing and/or debugging of your software applications or for interoperability testing with the Licensed Software, and such licenses have an expiration date as indicated by NVIDIA in its sole discretion (or one year from the date of download if no other duration is indicated). NVIDIA Confidential Information under the AGREEMENT includes output from Licensed Software developer tools identified as \u201cPro\u201d versions, where the output reveals functionality or performance data pertinent to NVIDIA hardware or software products. 1.3 Pre-Release Licenses . With respect to alpha, beta, preview, and other pre-release Software and Documentation ( \u201cPre- Release Licensed Software\u201d ) delivered to you under the AGREEMENT you acknowledge and agree that such Pre-Release Licensed Software (i) may not be fully functional, may contain errors or design flaws, and may have reduced or different security, privacy, accessibility, availability, and reliability standards relative to commercially provided NVIDIA software and documentation, and (ii) use of such Pre-Release Licensed Software may result in unexpected results, loss of data, project delays or other unpredictable damage or loss. THEREFORE, PRE-RELEASE LICENSED SOFTWARE IS NOT INTENDED FOR USE, AND SHOULD NOT BE USED, IN PRODUCTION OR BUSINESS-CRITICAL SYSTEMS. NVIDIA has no obligation to make available a commercial version of any Pre-Release Licensed Software and NVIDIA has the right to abandon development of Pre-Release Licensed Software at any time without liability. 1.4 Enterprise and Contractor Usage . You may allow your Enterprise employees and Contractors to access and use the Licensed Software pursuant to the terms of the AGREEMENT solely to perform work on your behalf, provided further that with respect to Contractors: (i) you obtain a written agreement from each Contractor which contains terms and obligations with respect to access to and use of Licensed Software no less protective of NVIDIA than those set forth in the AGREEMENT, and (ii) such Contractor\u2019s access and use expressly excludes any sublicensing or distribution rights for the Licensed Software. You are responsible for the compliance with the terms and conditions of the AGREEMENT by your Enterprise and Contractors. Any act or omission that, if committed by you, would constitute a breach of the AGREEMENT shall be deemed to constitute a breach of the AGREEMENT if committed by your Enterprise or Contractors. 1.5 Services . Except as expressly indicated in an Order, NVIDIA is under no obligation to provide support for the Licensed Software or to provide any patches, maintenance, updates or upgrades under the AGREEMENT. Unless patches, maintenance, updates or upgrades are provided with their separate governing terms and conditions, they constitute Licensed Software licensed to you under the AGREEMENT. LIMITATIONS. 2.1 License Restrictions . Except as expressly authorized in the AGREEMENT, you agree that you will not (nor authorize third parties to): (i) copy and use Software that was licensed to you for use in one or more NVIDIA hardware products in other unlicensed products (provided that copies solely for backup purposes are allowed); (ii) reverse engineer, decompile, disassemble (except to the extent applicable laws specifically require that such activities be permitted) or attempt to derive the source code, underlying ideas, algorithm or structure of Software provided to you in object code form; (iii) sell, transfer, assign, distribute, rent, loan, lease, sublicense or otherwise make available the Licensed Software or its functionality to third parties (a) as an application services provider or service bureau, (b) by operating hosted/virtual system environments, (c) by hosting, time sharing or providing any other type of services, or (d) otherwise by means of the internet; (iv) modify, translate or otherwise create any derivative works of any Licensed Software; (v) remove, alter, cover or obscure any proprietary notice that appears on or with the Licensed Software or any copies thereof; (vi) use the Licensed Software, or allow its use, transfer, transmission or export in violation of any applicable export control laws, rules or regulations; (vii) distribute, permit access to, or sublicense the Licensed Software as a stand-alone product; (viii) bypass, disable, circumvent or remove any form of copy protection, encryption, security or digital rights management or authentication mechanism used by NVIDIA in connection with the Licensed Software, or use the Licensed Software together with any authorization code, serial number, or other copy protection device not supplied by NVIDIA directly or through an authorized reseller; (ix) use the Licensed Software for the purpose of developing competing products or technologies or assisting a third party in such activities; (x) use the Licensed Software with any system or application where the use or failure of such system or application can reasonably be expected to threaten or result in personal injury, death, or catastrophic loss including, without limitation, use in connection with any nuclear, avionics, navigation, military, medical, life support or other life critical application (\u201cCritical Applications\u201d), unless the parties have entered into a Critical Applications agreement; (xi) distribute any modification or derivative work you make to the Licensed Software under or by reference to the same name as used by NVIDIA; or (xii) use the Licensed Software in any manner that would cause the Licensed Software to become subject to an Open Source License. Nothing in the AGREEMENT shall be construed to give you a right to use, or otherwise obtain access to, any source code from which the Software or any portion thereof is compiled or interpreted. You acknowledge that NVIDIA does not design, test, manufacture or certify the Licensed Software for use in the context of a Critical Application and NVIDIA shall not be liable to you or any third party, in whole or in part, for any claims or damages arising from such use. You agree to defend, indemnify and hold harmless NVIDIA and its Affiliates, and their respective employees, contractors, agents, officers and directors, from and against any and all claims, damages, obligations, losses, liabilities, costs or debt, fines, restitutions and expenses (including but not limited to attorney\u2019s fees and costs incident to establishing the right of indemnification) arising out of or related to you and your Enterprise, and their respective employees, contractors, agents, distributors, resellers, end users, officers and directors use of Licensed Software outside of the scope of the AGREEMENT or any other breach of the terms of the AGREEMENT. 2.2 Third Party License Obligations . You acknowledge and agree that the Licensed Software may include or incorporate third party technology (collectively \u201cThird Party Components\u201d), which is provided for use in or with the Software and not otherwise used separately. If the Licensed Software includes or incorporates Third Party Components, then the third-party pass-through terms and conditions (\u201cThird Party Terms\u201d) for the particular Third Party Component will be bundled with the Software or otherwise made available online as indicated by NVIDIA and will be incorporated by reference into the AGREEMENT. In the event of any conflict between the terms in the AGREEMENT and the Third Party Terms, the Third Party Terms shall govern. Copyright to Third Party Components are held by the copyright holders indicated in the copyright notices indicated in the Third Party Terms. Audio/Video Encoders and Decoders . You acknowledge and agree that it is your sole responsibility to obtain any additional third party licenses required to make, have made, use, have used, sell, import, and offer for sale your products or services that include or incorporate any Third Party Components and content relating to audio and/or video encoders and decoders from, including but not limited to, Microsoft, Thomson, Fraunhofer IIS, Sisvel S.p.A., MPEG-LA, and Coding Technologies as NVIDIA does not grant to you under the AGREEMENT any necessary patent or other rights with respect to audio and/or video encoders and decoders. 2.3 Limited Rights . Your rights in the Licensed Software are limited to those expressly granted under the AGREEMENT and no other licenses are granted whether by implication, estoppel or otherwise. NVIDIA reserves all rights, title and interest in and to the Licensed Software not expressly granted under the AGREEMENT. 3. CONFIDENTIALITY. Neither party will use the other party\u2019s Confidential Information, except as necessary for the performance of the AGREEMENT, nor will either party disclose such Confidential Information to any third party, except to personnel of NVIDIA and its Affiliates, you, your Enterprise, your Enterprise Contractors, and each party\u2019s legal and financial advisors that have a need to know such Confidential Information for the performance of the AGREEMENT, provided that each such personnel, employee and Contractor is subject to a written agreement that includes confidentiality obligations consistent with those set forth herein. Each party will use all reasonable efforts to maintain the confidentiality of all of the other party\u2019s Confidential Information in its possession or control, but in no event less than the efforts that it ordinarily uses with respect to its own Confidential Information of similar nature and importance. The foregoing obligations will not restrict either party from disclosing the other party\u2019s Confidential Information or the terms and conditions of the AGREEMENT as required under applicable securities regulations or pursuant to the order or requirement of a court, administrative agency, or other governmental body, provided that the party required to make such disclosure (i) gives reasonable notice to the other party to enable it to contest such order or requirement prior to its disclosure (whether through protective orders or otherwise), (ii) uses reasonable effort to obtain confidential treatment or similar protection to the fullest extent possible to avoid such public disclosure, and (iii) discloses only the minimum amount of information necessary to comply with such requirements. 4. OWNERSHIP. You are not obligated to disclose to NVIDIA any modifications that you, your Enterprise or your Contractors make to the Licensed Software as permitted under the AGREEMENT. As between the parties, all modifications are owned by NVIDIA and licensed to you under the AGREEMENT unless otherwise expressly provided in a Supplement. The Licensed Software and all modifications owned by NVIDIA, and the respective Intellectual Property Rights therein, are and will remain the sole and exclusive property of NVIDIA or its licensors, whether the Licensed Software is separate from or combined with any other products or materials. You shall not engage in any act or omission that would impair NVIDIA\u2019s and/or its licensors\u2019 Intellectual Property Rights in the Licensed Software or any other materials, information, processes or subject matter proprietary to NVIDIA. NVIDIA\u2019s licensors are intended third party beneficiaries with the right to enforce provisions of the AGREEMENT with respect to their Confidential Information and/or Intellectual Property Rights. 5. FEEDBACK. You have no obligation to provide Feedback to NVIDIA. However, NVIDIA and/or its Affiliates may use and include any Feedback that you provide to improve the Licensed Software or other NVIDIA products, technologies or materials. Accordingly, if you provide Feedback, you agree that NVIDIA and/or its Affiliates, at their option, may, and may permit their licensees, to make, have made, use, have used, reproduce, license, distribute and otherwise commercialize the Feedback in the Licensed Software or in other NVIDIA products, technologies or materials without the payment of any royalties or fees to you. All Feedback becomes the sole property of NVIDIA and may be used in any manner NVIDIA sees fit, and you hereby assign to NVIDIA all of your right, title and interest in and to any Feedback. NVIDIA has no obligation to respond to Feedback or to incorporate Feedback into the Licensed Software. 6. NO WARRANTIES. THE LICENSED SOFTWARE AND ANY OTHER CONFIDENTIAL INFORMATION AND/OR SERVICES ARE PROVIDED BY NVIDIA \u201cAS IS\u201d AND \u201cWITH ALL FAULTS,\u201d AND NVIDIA EXPRESSLY DISCLAIMS ALL OTHER WARRANTIES OF ANY KIND OR NATURE, WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTIES OF OPERABILITY, CONDITION, VALUE, ACCURACY OF DATA, OR QUALITY, AS WELL AS ANY WARRANTIES OF MERCHANTABILITY, SYSTEM INTEGRATION, WORKMANSHIP, SUITABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON- INFRINGEMENT, OR THE ABSENCE OF ANY DEFECTS THEREIN, WHETHER LATENT OR PATENT. NO WARRANTY IS MADE BY NVIDIA ON THE BASIS OF TRADE USAGE, COURSE OF DEALING OR COURSE OF TRADE. NVIDIA DOES NOT WARRANT THAT THE LICENSED SOFTWARE OR ANY OTHER CONFIDENTIAL INFORMATION AND/OR SERVICES PROVIDED BY NVIDIA UNDER THE AGREEMENT WILL MEET YOUR REQUIREMENTS OR THAT THE OPERATION THEREOF WILL BE UNINTERRUPTED OR ERROR-FREE, OR THAT ALL ERRORS WILL BE CORRECTED. YOU ACKNOWLEDGE THAT NVIDIA\u2019S OBLIGATIONS UNDER THE AGREEMENT ARE FOR THE BENEFIT OF YOU ONLY. Nothing in this warranty section affects any statutory rights of consumers or other recipients to the extent that they cannot be waived or limited by contract under applicable law. 7. LIMITATION OF LIABILITY. TO THE MAXIMUM EXTENT PERMITTED BY LAW, NVIDIA OR ITS LICENSORS SHALL NOT BE LIABLE FOR ANY SPECIAL, INCIDENTAL, PUNITIVE OR CONSEQUENTIAL DAMAGES, OR ANY LOST PROFITS, LOSS OF USE, LOSS OF DATA OR LOSS OF GOODWILL, OR THE COSTS OF PROCURING SUBSTITUTE PRODUCTS, ARISING OUT OF OR IN CONNECTION WITH THE AGREEMENT OR THE USE OR PERFORMANCE OF THE LICENSED SOFTWARE AND ANY OTHER CONFIDENTIAL INFORMATION AND/OR SERVICES PROVIDED BY NVIDIA UNDER THE AGREEMENT, WHETHER SUCH LIABILITY ARISES FROM ANY CLAIM BASED UPON BREACH OF CONTRACT, BREACH OF WARRANTY, TORT (INCLUDING NEGLIGENCE), PRODUCT LIABILITY OR ANY OTHER CAUSE OF ACTION OR THEORY OF LIABILITY. IN NO EVENT WILL NVIDIA\u2019S TOTAL CUMULATIVE LIABILITY UNDER OR ARISING OUT OF THE AGREEMENT EXCEED THE NET AMOUNTS RECEIVED BY NVIDIA FOR YOUR USE OF THE PARTICULAR LICENSED SOFTWARE DURING THE TWELVE (12) MONTHS BEFORE THE LIABILITY AROSE (or up to US$10.00 if you acquired the Licensed Software for no charge). THE NATURE OF THE LIABILITY, THE NUMBER OF CLAIMS OR SUITS OR THE NUMBER OF PARTIES WITHIN YOUR ENTERPRISE THAT ACCEPTED THE TERMS OF THE AGREEMENT SHALL NOT ENLARGE OR EXTEND THIS LIMIT. THE FOREGOING LIMITATIONS SHALL APPLY REGARDLESS OF WHETHER NVIDIA OR ITS LICENSORS HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES AND REGARDLESS OF WHETHER ANY REMEDY FAILS ITS ESSENTIAL PURPOSE. The disclaimers, exclusions and limitations of liability set forth in the AGREEMENT form an essential basis of the bargain between the parties, and, absent any such disclaimers, exclusions or limitations of liability, the provisions of the AGREEMENT, including, without limitation, the economic terms, would be substantially different. TERM AND TERMINATION. 8.1 AGREEMENT, Licenses and Services . This SLA shall become effective upon the Effective Date, each Supplement upon their acceptance, and both this SLA and Supplements shall continue in effect until your last access or use of the Licensed Software and/or services hereunder, unless earlier terminated as provided in this \u201cTerm and Termination\u201d section. Each Licensed Software license ends at the earlier of (a) the expiration of the applicable license term, or (b) termination of such license or the AGREEMENT. Each service ends at the earlier of (x) the expiration of the applicable service term, (y) termination of such service or the AGREEMENT, or (z) expiration or termination of the associated license and no credit or refund will be provided upon the expiration or termination of the associated license for any service fees paid. 8.2 Termination and Effect of Expiration or Termination . NVIDIA may terminate the AGREEMENT in whole or in part: (i) if you breach any term of the AGREEMENT and fail to cure such breach within thirty (30) days following notice thereof from NVIDIA (or immediately if you violate NVIDIA\u2019s Intellectual Property Rights); (ii) if you become the subject of a voluntary or involuntary petition in bankruptcy or any proceeding relating to insolvency, receivership, liquidation or composition for the benefit of creditors, if that petition or proceeding is not dismissed with prejudice within sixty (60) days after filing, or if you cease to do business; or (iii) if you commence or participate in any legal proceeding against NVIDIA, with respect to the Licensed Software that is the subject of the proceeding during the pendency of such legal proceeding. If you or your authorized NVIDIA reseller fail to pay license fees or service fees when due then NVIDIA may, in its sole discretion, suspend or terminate your license grants, services and any other rights provided under the AGREEMENT for the affected Licensed Software, in addition to any other remedies NVIDIA may have at law or equity. Upon any expiration or termination of the AGREEMENT, a license or a service provided hereunder, (a) any amounts owed to NVIDIA become immediately due and payable, (b) you must promptly discontinue use of the affected Licensed Software and/or service, and (c) you must promptly destroy or return to NVIDIA all copies of the affected Licensed Software and all portions thereof in your possession or control, and each party will promptly destroy or return to the other all of the other party\u2019s Confidential Information within its possession or control. Upon written request, you will certify in writing that you have complied with your obligations under this section. Upon expiration or termination of the AGREEMENT all provisions survive except for the license grant provisions. CONSENT TO COLLECTION AND USE OF INFORMATION. You hereby agree and acknowledge that the Software may access, collect non-personally identifiable information about your Enterprise computer systems in order to properly optimize such systems for use with the Software. To the extent that you use the Software, you hereby consent to all of the foregoing, and represent and warrant that you have the right to grant such consent. In addition, you agree that you are solely responsible for maintaining appropriate data backups and system restore points for your Enterprise systems, and that NVIDIA will have no responsibility for any damage or loss to such systems (including loss of data or access) arising from or relating to (a) any changes to the configuration, application settings, environment variables, registry, drivers, BIOS, or other attributes of the systems (or any part of such systems) initiated through the Software; or (b) installation of any Software or third party software patches initiated through the Software. In certain systems you may change your system update preferences by unchecking \u201cAutomatically check for updates\u201d in the \u201cPreferences\u201d tab of the control panel for the Software. In connection with the receipt of the Licensed Software or services you may receive access to links to third party websites and services and the availability of those links does not imply any endorsement by NVIDIA. NVIDIA encourages you to review the privacy statements on those sites and services that you choose to visit so that you can understand how they may collect, use and share personal information of individuals. NVIDIA is not responsible or liable for: (i) the availability or accuracy of such links; or (ii) the products, services or information available on or through such links; or (iii) the privacy statements or practices of sites and services controlled by other companies or organizations. To the extent that you or members of your Enterprise provide to NVIDIA during registration or otherwise personal information, you acknowledge that such information will be collected, used and disclosed by NVIDIA in accordance with NVIDIA\u2019s privacy policy, available at URL http://www.nvidia.com/object/privacy_policy.html . GENERAL. This SLA, any Supplements incorporated hereto, and Orders constitute the entire agreement of the parties with respect to the subject matter hereto and supersede all prior negotiations, conversations, or discussions between the parties relating to the subject matter hereto, oral or written, and all past dealings or industry custom. Any additional and/or conflicting terms and conditions on purchase order(s) or any other documents issued by you are null, void, and invalid. Any amendment or waiver under the AGREEMENT must be in writing and signed by representatives of both parties. The AGREEMENT and the rights and obligations thereunder may not be assigned by you, in whole or in part, including by merger, consolidation, dissolution, operation of law, or any other manner, without written consent of NVIDIA, and any purported assignment in violation of this provision shall be void and of no effect. NVIDIA may assign, delegate or transfer the AGREEMENT and its rights and obligations hereunder, and if to a non-Affiliate you will be notified. Each party acknowledges and agrees that the other is an independent contractor in the performance of the AGREEMENT, and each party is solely responsible for all of its employees, agents, contractors, and labor costs and expenses arising in connection therewith. The parties are not partners, joint ventures or otherwise affiliated, and neither has any authority to make any statements, representations or commitments of any kind to bind the other party without prior written consent. Neither party will be responsible for any failure or delay in its performance under the AGREEMENT (except for any payment obligations) to the extent due to causes beyond its reasonable control for so long as such force majeure event continues in effect. The AGREEMENT will be governed by and construed under the laws of the State of Delaware and the United States without regard to the conflicts of law provisions thereof and without regard to the United Nations Convention on Contracts for the International Sale of Goods. The parties consent to the personal jurisdiction of the federal and state courts located in Santa Clara County, California. You acknowledge and agree that a breach of any of your promises or agreements contained in the AGREEMENT may result in irreparable and continuing injury to NVIDIA for which monetary damages may not be an adequate remedy and therefore NVIDIA is entitled to seek injunctive relief as well as such other and further relief as may be appropriate. If any court of competent jurisdiction determines that any provision of the AGREEMENT is illegal, invalid or unenforceable, the remaining provisions will remain in full force and effect. Unless otherwise specified, remedies are cumulative. The Licensed Software has been developed entirely at private expense and is \u201ccommercial items\u201d consisting of \u201ccommercial computer software\u201d and \u201ccommercial computer software documentation\u201d provided with RESTRICTED RIGHTS. Use, duplication or disclosure by the U.S. Government or a U.S. Government subcontractor is subject to the restrictions set forth in the AGREEMENT pursuant to DFARS 227.7202-3(a) or as set forth in subparagraphs (c)(1) and (2) of the Commercial Computer Software - Restricted Rights clause at FAR 52.227-19, as applicable. Contractor/manufacturer is NVIDIA, 2701 San Tomas Expressway, Santa Clara, CA 95050. You acknowledge that the Licensed Software described under the AGREEMENT is subject to export control under the U.S. Export Administration Regulations (EAR) and economic sanctions regulations administered by the U.S. Department of Treasury\u2019s Office of Foreign Assets Control (OFAC). Therefore, you may not export, reexport or transfer in-country the Licensed Software without first obtaining any license or other approval that may be required by BIS and/or OFAC. You are responsible for any violation of the U.S. or other applicable export control or economic sanctions laws, regulations and requirements related to the Licensed Software. By accepting this SLA, you confirm that you are not a resident or citizen of any country currently embargoed by the U.S. and that you are not otherwise prohibited from receiving the Licensed Software. Any notice delivered by NVIDIA to you under the AGREEMENT will be delivered via mail, email or fax. Please direct your legal notices or other correspondence to NVIDIA Corporation, 2701 San Tomas Expressway, Santa Clara, California 95050, United States of America, Attention: Legal Department. GLOSSARY OF TERMS Certain capitalized terms, if not otherwise defined elsewhere in this SLA, shall have the meanings set forth below: \u201c Affiliate \u201d means any legal entity that Owns, is Owned by, or is commonly Owned with a party. \u201cOwn\u201d means having more than 50% ownership or the right to direct the management of the entity. \u201c AGREEMENT \u201d means this SLA and all associated Supplements entered by the parties referencing this SLA. \u201c Authorized Users \u201d means your Enterprise individual employees and any of your Enterprise\u2019s Contractors, subject to the terms of the \u201cEnterprise and Contractors Usage\u201d section. \u201c Confidential Information \u201d means the Licensed Software (unless made publicly available by NVIDIA without confidentiality obligations), and any NVIDIA business, marketing, pricing, research and development, know-how, technical, scientific, financial status, proposed new products or other information disclosed by NVIDIA to you which, at the time of disclosure, is designated in writing as confidential or proprietary (or like written designation), or orally identified as confidential or proprietary or is otherwise reasonably identifiable by parties exercising reasonable business judgment, as confidential. Confidential Information does not and will not include information that: (i) is or becomes generally known to the public through no fault of or breach of the AGREEMENT by the receiving party; (ii) is rightfully known by the receiving party at the time of disclosure without an obligation of confidentiality; (iii) is independently developed by the receiving party without use of the disclosing party\u2019s Confidential Information; or (iv) is rightfully obtained by the receiving party from a third party without restriction on use or disclosure. \u201c Contractor \u201d means an individual who works primarily for your Enterprise on a contractor basis from your secure network. \u201c Documentation \u201d means the NVIDIA documentation made available for use with the Software, including (without limitation) user manuals, datasheets, operations instructions, installation guides, release notes and other materials provided to you under the AGREEMENT. \u201c Enterprise \u201d means you or any company or legal entity for which you accepted the terms of this SLA, and their subsidiaries of which your company or legal entity owns more than fifty percent (50%) of the issued and outstanding equity. \u201c Feedback \u201d means any and all suggestions, feature requests, comments or other feedback regarding the Licensed Software, including possible enhancements or modifications thereto. \u201c Intellectual Property Rights \u201d means all patent, copyright, trademark, trade secret, trade dress, trade names, utility models, mask work, moral rights, rights of attribution or integrity service marks, master recording and music publishing rights, performance rights, author\u2019s rights, database rights, registered design rights and any applications for the protection or registration of these rights, or other intellectual or industrial property rights or proprietary rights, howsoever arising and in whatever media, whether now known or hereafter devised, whether or not registered, (including all claims and causes of action for infringement, misappropriation or violation and all rights in any registrations and renewals), worldwide and whether existing now or in the future. \u201c Licensed Software \u201d means Software, Documentation and all modifications owned by NVIDIA. \u201c Open Source License \u201d includes, without limitation, a software license that requires as a condition of use, modification, and/or distribution of such software that the Software be (i) disclosed or distributed in source code form; (ii) be licensed for the purpose of making derivative works; or (iii) be redistributable at no charge. \u201c Order \u201d means a purchase order issued by you, a signed purchase agreement with you, or other ordering document issued by you to NVIDIA or a NVIDIA authorized reseller (including any on-line acceptance process) that references and incorporates the AGREEMENT and is accepted by NVIDIA. \u201c Software \u201d means the NVIDIA software programs licensed to you under the AGREEMENT including, without limitation, libraries, sample code, utility programs and programming code. \u201c Supplement \u201d means the additional terms and conditions beyond those stated in this SLA that apply to certain Licensed Software licensed hereunder.", "keywords": []}, {"id": 4294, "doc_id": 4294, "filename": "copyright-and-licenses/index.html", "domain_name": "std", "name": "copyright-and-licenses/index", "display_name": "Copyright and Licenses", "type": "doc", "display_type": "Page", "docname": "copyright-and-licenses/index", "anchor": "", "priority": -1, "content": "CUPTI Copyright and Licenses. Information on the NVIDIA Software License Agreement as well as third party software and tools used by CUPTI.", "keywords": []}, {"id": 4295, "doc_id": 4296, "filename": "index.html", "domain_name": "page", "name": "index#table-of-contents", "display_name": "Table of Contents", "type": "section", "display_type": "Page section", "docname": "index", "anchor": "table-of-contents", "priority": -1, "content": "Overview Release Notes Release Notes Updates in CUDA 12.6 Update 2 Updates in CUDA 12.6 Update 1 Updates in CUDA 12.6 Updates in CUDA 12.5 Update 1 Updates in CUDA 12.5 Updates in CUDA 12.4 Update 1 Updates in CUDA 12.4 Updates in CUDA 12.3 Update 1 Updates in CUDA 12.3 Updates in CUDA 12.2 Update 2 Updates in CUDA 12.2 Update 1 Updates in CUDA 12.2 Updates in CUDA 12.1 Update 1 Updates in CUDA 12.1 Updates in CUDA 12.0 Update 1 Updates in CUDA 12.0 Older Versions Updates in CUDA 11.8 Updates in CUDA 11.7 Update 1 Updates in CUDA 11.7 Updates in CUDA 11.6 Update 1 Updates in CUDA 11.6 Updates in CUDA 11.5 Update 1 Updates in CUDA 11.5 Updates in CUDA 11.4 Update 1 Updates in CUDA 11.4 Updates in CUDA 11.3 Updates in CUDA 11.2 Updates in CUDA 11.1 Updates in CUDA 11.0 Updates in CUDA 10.2 Updates in CUDA 10.1 Update 2 Updates in CUDA 10.1 Update 1 Updates in CUDA 10.1 Updates in CUDA 10.0 Updates in CUDA 9.2 Updates in CUDA 9.1 Updates in CUDA 9.0 Updates in CUDA 8.0 Updates in CUDA 7.5 Updates in CUDA 7.0 Updates in CUDA 6.5 Updates in CUDA 6.0 Updates in CUDA 5.5 Known Issues Profiling Event and Metric API Profiling and Perfworks Metric API Support Platform Support GPU Support Usage CUPTI Compatibility and Requirements CUPTI Initialization CUPTI Activity API SASS Source Correlation PC Sampling NVLink OpenACC CUDA Graphs External Correlation Dynamic Attach and Detach Device Memory Allocation Source Tracking CUPTI Callback API Driver and Runtime API Callbacks Resource Callbacks Synchronization Callbacks NVIDIA Tools Extension Callbacks State Callbacks CUPTI Event API Collecting Kernel Execution Events Sampling Events CUPTI Metric API Metrics Reference Metrics for Capability 5.x Metrics for Capability 6.x Metrics for Capability 7.0 CUPTI Profiling API Multi Pass Collection Range Profiling Auto Range User Range CUPTI Profiler Definitions Differences from event and metric APIs Perfworks Metric API Derived metrics Raw Metrics Metrics Mapping Table Events Mapping Table Migration to the Profiling API CUPTI PC Sampling API Configuration Attributes Stall Reasons Mapping Table Data Structure Mapping Table Data flushing SASS Source Correlation API Usage Limitations CUPTI SASS Metric API API usage Sample code CUPTI PM Sampling API API usage Sample code Metrics Table CUPTI Checkpoint API Usage Restrictions Examples CUPTI overhead Tracing Overhead Execution overhead Memory overhead Profiling Overhead Reproducibility Fixed Clock Rate Serialization Other Issues Samples Library support OptiX Special Configurations Multi-Instance GPU (MIG) NVIDIA Virtual GPU (vGPU) Windows Subsystem for Linux (WSL) Modules Data Structures Namespaces Copyright and Licenses NVIDIA Software License Agreement Third Party Licenses Boost Flatbuffers Font - Cascadia Mono Font - Open Sans Font - Roboto Microsoft Detours Notices Notice Trademarks", "keywords": []}, {"id": 4296, "doc_id": 4296, "filename": "index.html", "domain_name": "std", "name": "index", "display_name": "CUPTI", "type": "doc", "display_type": "Page", "docname": "index", "anchor": "", "priority": -1, "content": "The API reference for CUPTI, the CUDA Profiling Tools Interface. The CUPTI API", "keywords": []}, {"id": 4297, "doc_id": 4298, "filename": "library-support/library-support.html", "domain_name": "page", "name": "library-support/library-support#optix", "display_name": "OptiX", "type": "section", "display_type": "Page section", "docname": "library-support/library-support", "anchor": "optix", "priority": -1, "content": "CUPTI supports profiling of OptiX applications, but with certain restrictions. Tracing Internal Kernels Kernels launched by OptiX that contain no user-defined code are given the generic name NVIDIA internal . CUPTI provides the tracing information for these kernels. User Kernels Kernels launched by OptiX can contain user-defined code. OptiX identifies these kernels with a custom name. This name starts with raygen__ (for \u201cray generation\u201d). These kernels can be traced. Profiling CUPTI can profile both internal and user kernels using the Profiling APIs. In the auto range mode, range names will be numeric values starting from 0 to total number of kernels including internal and user defined kernels or maximum number of range set while calling set config API, whichever is minimum. It is suggested to create the profiling session and enable the profiling at resource allocation time (e.g. context creation) and disable the profiling at the context destruction time. Limitations CUPTI doesn\u2019t issue any driver or runtime API callback for user kernels. Event, Metric and PC sampling APIs are not supported for OptiX applications.", "keywords": []}, {"id": 4298, "doc_id": 4298, "filename": "library-support/library-support.html", "domain_name": "std", "name": "library-support/library-support", "display_name": "Library support", "type": "doc", "display_type": "Page", "docname": "library-support/library-support", "anchor": "", "priority": -1, "content": "CUPTI can be used to profile CUDA applications, as well as applications that use CUDA via NVIDIA or third-party libraries. For most such libraries, the behavior is expected to be identical to applications using CUDA directly. However, for certain libraries, CUPTI has certain restrictions, or alternate behavior.", "keywords": []}, {"id": 4299, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#activity-pc-sampling", "display_name": "PC Sampling", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "activity-pc-sampling", "priority": -1, "content": "CUPTI supports device-wide sampling of the program counter (PC). The PC Sampling gives the number of samples for each source and assembly line with various stall reasons. Using this information, you can pinpoint portions of your kernel that are introducing latencies and the reason for the latency. Samples are taken in round robin order for all active warps at a fixed number of cycles, regardless of whether the warp is issuing an instruction or not. Devices with compute capability 6.0 and higher have a new feature that gives latency reasons. The latency samples indicate the reasons for holes in the issue pipeline. While collecting these samples, there is no instruction issued in the respective warp scheduler, hence these give the latency reasons. The latency reasons will be one of the stall reasons listed in the enum CUpti_ActivityPCSamplingStallReason , except stall reason CUPTI_ACTIVITY_PC_SAMPLING_STALL_NOT_SELECTED . The activity record CUpti_ActivityPCSampling3 , enabled using activity kind CUPTI_ACTIVITY_KIND_PC_SAMPLING , outputs the stall reason along with PC and other related information. The enum CUpti_ActivityPCSamplingStallReason lists all the stall reasons. Sampling period is configurable and can be tuned using API cuptiActivityConfigurePCSampling . A wide range of sampling periods, ranging from 2^5 cycles to 2^31 cycles per sample, is supported. This can be controlled through the field samplingPeriod2 in the PC sampling configuration struct CUpti_ActivityPCSamplingConfig . The activity record CUpti_ActivityPCSamplingRecordInfo provides the total and dropped samples for each kernel profiled for PC sampling. This feature is available on devices with compute capability 5.2 and higher, excluding mobile devices. For Pascal and older chips cuptiActivityConfigurePCSampling api must be called before enabling activity kind CUPTI_ACTIVITY_KIND_PC_SAMPLING , for Volta and newer chips order does not matter. For Volta and newer GPU architectures if cuptiActivityConfigurePCSampling API is called in the middle of execution, PC sampling configuration will be updated for subsequent kernel launches. PC sampling can significantly change the overall performance characteristics of the application because all kernel executions are serialized on the GPU. The pc_sampling sample shows how to use these APIs to collect PC Sampling profiling information for a kernel. A new set of PC Sampling APIs was introduced in the CUDA 11.3 release, which supports continuous mode data collection without serializing kernel execution and have a lower runtime overhead. Refer to the section CUPTI PC Sampling API for more details. PC Sampling APIs from the header cupti_activity.h would be referred as PC Sampling Activity APIs and APIs from the header cupti_pcsampling.h would be referred as PC Sampling APIs .", "keywords": []}, {"id": 4300, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#api-usage", "display_name": "API Usage", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "api-usage", "priority": -1, "content": "Here is a pseudo code which shows how to collect the PC sampling data for specific CPU code ranges: void Collection() { // Select collection mode CUpti_PCSamplingConfigurationInfoParams pcSamplingConfigurationInfoParams = {}; CUpti_PCSamplingConfigurationInfo collectionMode = {}; collectionMode.attributeData.collectionModeData.collectionMode = CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS; pcSamplingConfigurationInfoParams.numAttributes = 1; pcSamplingConfigurationInfoParams.pPCSamplingConfigurationInfo = &amp;collectionMode; cuptiPCSamplingSetConfigurationAttribute(&amp;pcSamplingConfigurationInfoParams); // Select stall reasons to collect { // Get number of supported stall reasons cuptiPCSamplingGetNumStallReasons(); // Get number of supported stall reason names and corresponding indexes cuptiPCSamplingGetStallReasons(); // Set selected stall reasons cuptiPCSamplingSetConfigurationAttribute(); } // Select code range using start/stop APIs // Opt-in for start and stop PC Sampling using APIs cuptiPCSamplingStart and cuptiPCSamplingStop CUpti_PCSamplingConfigurationInfo enableStartStop = {}; enableStartStop.attributeType = CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL; enableStartStop.attributeData.enableStartStopControlData.enableStartStopControl = true; pcSamplingConfigurationInfoParams.numAttributes = 1; pcSamplingConfigurationInfoParams.pPCSamplingConfigurationInfo = &amp;enableStartStop; cuptiPCSamplingSetConfigurationAttribute(&amp;pcSamplingConfigurationInfoParams); // Enable PC Sampling cuptiPCSamplingEnable(); kernelA &lt;&lt;&lt;blocks, threads, 0, s0&gt;&gt;&gt;(...); // KernelA is not sampled // Start PC sampling collection cuptiPCSamplingStart(); { // KernelB and KernelC might run concurrently since &#x27;continuous&#x27; sampling collection mode is selected kernelB &lt;&lt;&lt;blocks, threads, 0, s0&gt;&gt;&gt;(...); // KernelB is sampled kernelC &lt;&lt;&lt;blocks, threads, 0, s1&gt;&gt;&gt;(...); // KernelC is sampled } // Stop PC sampling collection cuptiPCSamplingStop(); // Flush PC sampling data cuptiPCSamplingGetData(); kernelD &lt;&lt;&lt;blocks, threads, 0, s0&gt;&gt;&gt;(...); // KernelD is not sampled // Start PC sampling collection cuptiPCSamplingStart(); { kernelE &lt;&lt;&lt;blocks, threads, 0, s0&gt;&gt;&gt;(...); // KernelE is sampled } // Stop PC sampling collection cuptiPCSamplingStop(); // Flush PC sampling data cuptiPCSamplingGetData(); // Disable PC Sampling cuptiPCSamplingDisable(); }", "keywords": []}, {"id": 4301, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#auto-range", "display_name": "Auto Range", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "auto-range", "priority": -1, "content": "In a session with auto range mode, ranges are defined around each kernel automatically with a unique name assigned to each range, while profiling is enabled. This mode is useful for tight metric collection around each kernel. A user can choose one of the supported replay modes, pseudo code for each is described below: Kernel Replay The replay logic (multiple pass, if needed) is done by CUPTI implicitly (opaque to the user), and usage of CUPTI replay API\u2019s cuptiProfilerBeginPass and cuptiProfilerEndPass will be a no-op in this mode. This mode is useful for collecting metrics around a kernel in tight control. Each kernel launch is synchronized to segregate its metrics into a separate range, and a CPU-GPU sync is made to ensure the profiled data is collected from GPU. Counter Collection can be enabled and disabled with cuptiProfilerEnableProfiling and cuptiProfilerDisableProfiling . Refer to the sample autorange_profiling /* Assume Inputs(counterDataImagePrefix and configImage) from configuration phase at host */ void Collection(std::vector&lt;uint8_t&gt;&amp; counterDataImagePrefix, std::vector&lt;uint8_t&gt;&amp; configImage) { CUpti_Profiler_Initialize_Params profilerInitializeParams = { CUpti_Profiler_Initialize_Params_STRUCT_SIZE }; cuptiProfilerInitialize(&amp;profilerInitializeParams); std::vector&lt;uint8_t&gt; counterDataImages; std::vector&lt;uint8_t&gt; counterDataScratchBuffer; CreateCounterDataImage(counterDataImages, counterDataScratchBuffer, counterDataImagePrefix); CUpti_Profiler_BeginSession_Params beginSessionParams = { CUpti_Profiler_BeginSession_Params_STRUCT_SIZE }; CUpti_ProfilerRange profilerRange = CUPTI_AutoRange; CUpti_ProfilerReplayMode profilerReplayMode = CUPTI_KernelReplay; beginSessionParams.ctx = NULL; beginSessionParams.counterDataImageSize = counterDataImage.size(); beginSessionParams.pCounterDataImage = &amp;counterDataImage[0]; beginSessionParams.counterDataScratchBufferSize = counterDataScratchBuffer.size(); beginSessionParams.pCounterDataScratchBuffer = &amp;counterDataScratchBuffer[0]; beginSessionParams.range = profilerRange; beginSessionParams.replayMode = profilerReplayMode; beginSessionParams.maxRangesPerPass = num_ranges; beginSessionParams.maxLaunchesPerPass = num_ranges; cuptiProfilerBeginSession(&amp;beginSessionParams)); CUpti_Profiler_SetConfig_Params setConfigParams = { CUpti_Profiler_SetConfig_Params_STRUCT_SIZE }; setConfigParams.pConfig = &amp;configImage[0]; setConfigParams.configSize = configImage.size(); cuptiProfilerSetConfig(&amp;setConfigParams)); kernelA &lt;&lt;&lt;grid, tids &gt;&gt;&gt;(...); // KernelA not profiled CUpti_Profiler_EnableProfiling_Params enableProfilingParams = { CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE }; cuptiProfilerEnableProfiling(&amp;enableProfilingParams); { kernelB &lt;&lt;&lt;grid, tids &gt;&gt;&gt;(...); // KernelB profiled and captured in an unique range. kernelC &lt;&lt;&lt;grid, tids &gt;&gt;&gt;(...); // KernelC profiled and captured in an unique range. kernelD &lt;&lt;&lt;grid, tids &gt;&gt;&gt;(...); // KernelD profiled and captured in an unique range. } CUpti_Profiler_DisableProfiling_Params disableProfilingParams = { CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE }; cuptiProfilerDisableProfiling(&amp;disableProfilingParams); kernelE &lt;&lt;&lt;grid, tids &gt;&gt;&gt;(...); // KernelE not profiled CUpti_Profiler_UnsetConfig_Params unsetConfigParams = { CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE }; cuptiProfilerUnsetConfig(&amp;unsetConfigParams); CUpti_Profiler_EndSession_Params endSessionParams = { CUpti_Profiler_EndSession_Params_STRUCT_SIZE }; cuptiProfilerEndSession(&amp;endSessionParams); } User Replay The replay (multiple passes, if needed) is done by the user using the replay API\u2019s cuptiProfilerBeginPass and cuptiProfilerEndPass . It is user responsibility to flush the counter data cuptiProfilerFlushCounterData before ending the session to ensure collection of metric data in CPU. Counter collection can be enabled and disabled with cuptiProfilerEnableProfiling / cuptiProfilerDisableProfiling . Refer to the sample autorange_profiling /* Assume Inputs(counterDataImagePrefix and configImage) from configuration phase at host */ void Collection(std::vector&lt;uint8_t&gt;&amp; counterDataImagePrefix, std::vector&lt;uint8_t&gt;&amp; configImage) { CUpti_Profiler_Initialize_Params profilerInitializeParams = {CUpti_Profiler_Initialize_Params_STRUCT_SIZE}; cuptiProfilerInitialize(&amp;profilerInitializeParams); std::vector&lt;uint8_t&gt; counterDataImages; std::vector&lt;uint8_t&gt; counterDataScratchBuffer; CreateCounterDataImage(counterDataImages, counterDataScratchBuffer, counterDataImagePrefix); CUpti_Profiler_BeginSession_Params beginSessionParams = {CUpti_Profiler_BeginSession_Params_STRUCT_SIZE}; CUpti_ProfilerRange profilerRange = CUPTI_AutoRange; CUpti_ProfilerReplayMode profilerReplayMode = CUPTI_UserReplay; beginSessionParams.ctx = NULL; beginSessionParams.counterDataImageSize = counterDataImage.size(); beginSessionParams.pCounterDataImage = &amp;counterDataImage[0]; beginSessionParams.counterDataScratchBufferSize = counterDataScratchBuffer.size(); beginSessionParams.pCounterDataScratchBuffer = &amp;counterDataScratchBuffer[0]; beginSessionParams.range = profilerRange; beginSessionParams.replayMode = profilerReplayMode; beginSessionParams.maxRangesPerPass = num_ranges; beginSessionParams.maxLaunchesPerPass = num_ranges; cuptiProfilerBeginSession(&amp;beginSessionParams)); CUpti_Profiler_SetConfig_Params setConfigParams = {CUpti_Profiler_SetConfig_Params_STRUCT_SIZE}; setConfigParams.pConfig = &amp;configImage[0]; setConfigParams.configSize = configImage.size(); cuptiProfilerSetConfig(&amp;setConfigParams)); CUpti_Profiler_FlushCounterData_Params cuptiFlushCounterDataParams = {CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE}; CUpti_Profiler_EnableProfiling_Params enableProfilingParams = {CUpti_Profiler_EnableProfiling_Params_STRUCT_SIZE}; CUpti_Profiler_DisableProfiling_Params disableProfilingParams = {CUpti_Profiler_DisableProfiling_Params_STRUCT_SIZE}; kernelA&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelA neither profiled, nor replayed CUpti_Profiler_BeginPass_Params beginPassParams = {CUpti_Profiler_BeginPass_Params_STRUCT_SIZE}; CUpti_Profiler_EndPass_Params endPassParams = {CUpti_Profiler_EndPass_Params_STRUCT_SIZE}; cuptiProfilerBeginPass(&amp;beginPassParams); { kernelB&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelB replayed but not profiled cuptiProfilerEnableProfiling(&amp;enableProfilingParams); kernelC&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelC profiled and captured in an unique range. kernelD&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelD profiled and captured in an unique range. cuptiProfilerDisableProfiling(&amp;disableProfilingParams); } cuptiProfilerEndPass(&amp;endPassParams); cuptiProfilerFlushCounterData(&amp;cuptiFlushCounterDataParams); kernelE&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelE not profiled CUpti_Profiler_UnsetConfig_Params unsetConfigParams = {CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE}; cuptiProfilerUnsetConfig(&amp;unsetConfigParams); CUpti_Profiler_EndSession_Params endSessionParams = {CUpti_Profiler_EndSession_Params_STRUCT_SIZE}; cuptiProfilerEndSession(&amp;endSessionParams); } Application Replay This replay mode is same as user replay, instead of in process replay, you can replay the whole process again. You will need to update the pass index while setting the config cuptiProfilerSetConfig and reload the intermediate counterDataImage on each pass.", "keywords": []}, {"id": 4302, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#collecting-kernel-execution-events", "display_name": "Collecting Kernel Execution Events", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "collecting-kernel-execution-events", "priority": -1, "content": "A common use of the event API is to count a set of events during the execution of a kernel (as demonstrated by the callback_event sample). The following code shows a typical callback used for this purpose. Assume that the callback was enabled only for a kernel launch using the CUDA runtime (i.e., by cuptiEnableCallback(1, subscriber, CUPTI_CB_DOMAIN_RUNTIME_API, CUPTI_RUNTIME_TRACE_CBID_cudaLaunch_v3020) . To simplify the presentation, error checking code has been removed. static void CUPTIAPI getEventValueCallback(void *userdata, CUpti_CallbackDomain domain, CUpti_CallbackId cbid, const void *cbdata) { const CUpti_CallbackData *cbData = (CUpti_CallbackData *)cbdata; if (cbData-&gt;callbackSite == CUPTI_API_ENTER) { cudaDeviceSynchronize(); cuptiSetEventCollectionMode(cbInfo-&gt;context, CUPTI_EVENT_COLLECTION_MODE_KERNEL); cuptiEventGroupEnable(eventGroup); } if (cbData-&gt;callbackSite == CUPTI_API_EXIT) { cudaDeviceSynchronize(); cuptiEventGroupReadEvent(eventGroup, CUPTI_EVENT_READ_FLAG_NONE, eventId, &amp;bytesRead, &amp;eventVal); cuptiEventGroupDisable(eventGroup); } } Two synchronization points are used to ensure that events are counted only for the execution of the kernel. If the application contains other threads that launch kernels, then additional thread-level synchronization must also be introduced to ensure that those threads do not launch kernels while the callback is collecting events. When the cudaLaunch API is entered (that is, before the kernel is actually launched on the device), cudaDeviceSynchronize is used to wait until the GPU is idle. The event collection mode is set to CUPTI_EVENT_COLLECTION_MODE_KERNEL so that the event counters are automatically started and stopped just before and after the kernel executes. Then event collection is enabled with cuptiEventGroupEnable . When the cudaLaunch API is exited (that is, after the kernel is queued for execution on the GPU) another cudaDeviceSynchronize is used to cause the CPU thread to wait for the kernel to finish execution. Finally, the event counts are read with cuptiEventGroupReadEvent .", "keywords": []}, {"id": 4303, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#configuration-attributes", "display_name": "Configuration Attributes", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "configuration-attributes", "priority": -1, "content": "The following table lists the PC sampling configuration attributes which can be set using the cuptiPCSamplingSetConfigurationAttribute() API. Configuration Attribute Description Default Value Comparison of PC Sampling APIs with CUPTI PC Sampling Activity APIs Guideline to Tune Configuration Option Collection mode PC Sampling collection mode - Continuous or Kernel Serialized Continuous Continuous mode is new. Kernel Serialized mode is equivalent to the kernel level functionality provided by the CUPTI PC sampling Activity APIs. Sampling period Sampling period for PC Sampling. Valid values for the sampling periods are between 5 to 31 both inclusive. This will set the sampling period to (2^samplingPeriod) cycles. e.g. for sampling period = 5 to 31, cycles = 32, 64, 128,\u2026, 2^31 CUPTI defined value is based on number of SMs Dropped current support for 5 levels(MIN, LOW, MID, HIGH, MAX) for sampling period. The new \u201csampling period\u201d is equivalent to the \u201csamplingPeriod2\u201d field in CUpti_ActivityPCSamplingConfig. Low sampling period means a high sampling frequency which can result in dropping of samples. Very high sampling period can cause low sampling frequency and no sample generation. Stall reason Stall reasons to collect Input is a pointer to an array of the stall reason indexes to collect. All stall reasons will be collected With the CUPTI PC sampling Activity APIs there is no option to select which stall reasons to collect. Also the list of supported stall reasons has changed. Scratch buffer size Size of SW buffer for raw PC counter data downloaded from HW buffer. Approximately it takes 16 Bytes (and some fixed size memory) to accommodate one PC with one stall reason e.g. 1 PC with 1 stall reason = 32 Bytes 1 PC with 2 stall reason = 48 Bytes 1 PC with 4 stall reason = 96 Bytes 1 MB (which can accommodate approximately 5500 PCs with all stall reasons) New Clients can choose scratch buffer size as per memory budget. Very small scratch buffer size can cause runtime overhead as more iterations would be required to accommodate and process more PC samples Hardware buffer size Size of HW buffer in bytes. If sampling period is too less, HW buffer can overflow and drop PC data 512 MB New Device accessible buffer for samples. Less hardware buffer size with low sampling periods, can cause overflow and dropping of PC data. High hardware buffer size can impact application execution due to lower amount of device memory being available Enable start/stop control Control over PC Sampling data collection range. 1 - Allows user to start and stop PC Sampling using APIs 0 (disabled) New", "keywords": []}, {"id": 4304, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cuda-graphs", "display_name": "CUDA Graphs", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cuda-graphs", "priority": -1, "content": "CUPTI can collect trace of CUDA Graphs applications without breaking driver performance optimizations. CUPTI has added fields graphId and graphNodeId in the kernel, memcpy and memset activity records to denote the unique ID of the graph and the graph node respectively of the GPU activity. CUPTI issues callbacks for graph operations like graph and graph node creation/destruction/cloning and also for executable graph creation/destruction. The cuda_graphs_trace sample shows how to collect GPU trace and API trace for CUDA Graphs and how to correlate a graph node launch to the node creation API by using CUPTI callbacks for graph operations.", "keywords": []}, {"id": 4305, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-activity-api", "display_name": "CUPTI Activity API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-activity-api", "priority": -1, "content": "The CUPTI Activity API allows you to asynchronously collect a trace of an application\u2019s CPU and GPU CUDA activity. The following terminology is used by the activity API. Activity Record CPU and GPU activity is reported in C data structures called activity records. There is a different C structure type for each activity kind (e.g. CUpti_ActivityAPI ). Records are generically referred to using the CUpti_Activity type. This type contains only a field that indicates the kind of the activity record. Using this kind, the object can be cast from the generic CUpti_Activity type to the specific type representing the activity. See the printActivity function in the activity_trace_async sample for an example. Activity Buffer An activity buffer is used to transfer one or more activity records from CUPTI to the client. CUPTI fills activity buffers with activity records as the corresponding activities occur on the CPU and GPU. But CUPTI doesn\u2019t guarantee any ordering of the activities in the activity buffer as activity records for few activity kinds are added lazily. The CUPTI client is responsible for providing empty activity buffers as necessary to ensure that no records are dropped. An asynchronous buffering API is implemented by cuptiActivityRegisterCallbacks and cuptiActivityFlushAll . It is not required that the activity API be initialized before CUDA initialization. All related activities occurring after initializing the activity API are collected. You can force initialization of the activity API by enabling one or more activity kinds using cuptiActivityEnable or cuptiActivityEnableContext , as shown in the initTrace function of the activity_trace_async sample. Some activity kinds cannot be directly enabled, see the API documentation for CUpti_ActivityKind for details. The functions cuptiActivityEnable and cuptiActivityEnableContext will return CUPTI_ERROR_NOT_COMPATIBLE if the requested activity kind cannot be enabled. The activity buffer API uses callbacks to request and return buffers of activity records. To use the asynchronous buffering API, you must first register two callbacks using cuptiActivityRegisterCallbacks . One of these callbacks will be invoked whenever CUPTI needs an empty activity buffer. The other callback is used to deliver a buffer containing one or more activity records to the client. To minimize profiling overhead the client should return as quickly as possible from these callbacks. Client can pre-allocate a pool of activity buffers and return an empty buffer from the pool when requested by CUPTI. Activity buffer size should be chosen carefully, smaller buffers can result in frequent requests by CUPTI and bigger buffers can delay the automatic delivery of completed activity buffers. For typical workloads, it\u2019s suggested to choose a size between 1 and 10 MB. The functions cuptiActivityGetAttribute and cuptiActivitySetAttribute can be used to read and write attributes that control how the buffering API behaves. See the API documentation for more information. Flushing of the activity buffers CUPTI is expected to deliver the activity buffer automatically as soon as it gets full and all the activity records in it are completed. For performance reasons, CUPTI calls the underlying methods based on certain heuristics, thus it can cause delay in the delivery of the buffer. However client can make a request to deliver the activity buffer/s at any time, and this can be achieved using the APIs cuptiActivityFlushAll and cuptiActivityFlushPeriod . Behavior of these APIs is as follows: For on-demand flush using the API cuptiActivityFlushAll with the flag set as 0, CUPTI returns all the activity buffers which have all the activity records completed, buffers need not to be full though. It doesn\u2019t return buffers which have one or more incomplete records. This flush can be done at a regular interval in a separate thread. For on-demand forced flush using the API cuptiActivityFlushAll with the flag set as CUPTI_ACTIVITY_FLAG_FLUSH_FORCED, CUPTI returns all the activity buffers including the ones which have one or more incomplete activity records. It\u2019s suggested to do the forced flush before the termination of the profiling session to allow remaining buffers to be delivered. For periodic flush using the API cuptiActivityFlushPeriod , CUPTI returns only those activity buffers which are full and have all the activity records completed. It\u2019s allowed to use the API cuptiActivityFlushAll to flush the buffers on-demand, even when client sets the periodic flush. Note that activity record is considered as completed if it has all the information filled up including the timestamps (if any). The activity_trace_async sample shows how to use the activity buffer API to collect a trace of CPU and GPU activity for a simple application. CUPTI Threads CUPTI creates a worker thread to minimize the perturbance for the application created threads. CUPTI offloads certain operations from the application threads to the worker thread, this incldues synchronization of profiling resources between host and device, delivery of the activity buffers to the client using the buffer completed callback registered in the API cuptiActivityRegisterCallbacks etc. To minimize the overhead, CUPTI wakes up the worker thread based on certain heuristics. API cuptiActivityFlushPeriod introduced in CUDA 11.1 can be used to control the flush period of the worker thread. This setting overrides the CUPTI heuristics. It\u2019s allowed to use the API cuptiActivityFlushAll to flush the data on-demand, even when client sets the periodic flush. Further, CUPTI creates separate threads when certain activity kinds are enabled. For example, CUPTI creates one thread each for activity kinds CUPTI_ACTIVITY_KIND_UNIFIED_MEMORY_COUNTER and CUPTI_ACTIVITY_KIND_ENVIRONMENT to collect the information from the backend.", "keywords": []}, {"id": 4306, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-callback-api", "display_name": "CUPTI Callback API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-callback-api", "priority": -1, "content": "The CUPTI Callback API allows you to register a callback into your own code. Your callback will be invoked when the application being profiled calls a CUDA runtime or driver function, or when certain events occur in the CUDA driver. The following terminology is used by the callback API. Callback Domain Callbacks are grouped into domains to make it easier to associate your callback functions with groups of related CUDA functions or events. There are currently four callback domains, as defined by CUpti_CallbackDomain : a domain for CUDA runtime functions, a domain for CUDA driver functions, a domain for CUDA resource tracking, and a domain for CUDA synchronization notification. Callback ID Each callback is given a unique ID within the corresponding callback domain so that you can identify it within your callback function. The CUDA driver API IDs are defined in cupti_driver_cbid.h and the CUDA runtime API IDs are defined in cupti_runtime_cbid.h . Both of these headers are included for you when you include cupti.h . The CUDA resource callback IDs are defined by CUpti_CallbackIdResource , and the CUDA synchronization callback IDs are defined by CUpti_CallbackIdSync . Callback Function Your callback function must be of type CUpti_CallbackFunc . This function type has two arguments that specify the callback domain and ID so that you know why the callback is occurring. The type also has a cbdata argument that is used to pass data specific to the callback. Subscriber A subscriber is used to associate each of your callback functions with one or more CUDA API functions. There can be at most one subscriber initialized with cuptiSubscribe() at any time. Before initializing a new subscriber, the existing subscriber must be finalized with cuptiUnsubscribe() . Each callback domain is described in detail below. Unless explicitly stated, it is not supported to call any CUDA runtime or driver API from within a callback function. Doing so may cause the application to hang.", "keywords": []}, {"id": 4307, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-checkpoint-api", "display_name": "CUPTI Checkpoint API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-checkpoint-api", "priority": -1, "content": "Starting with CUDA 11.5, CUPTI ships with a new library to assist tool developers who wish to replay kernels under direct control, such as tools using the Profiling API User Replay mode. This new Checkpoint library provides support for automatically saving and restoring device state for many common uses. A device checkpoint is a managed copy of device functional state - including values in memory, along with some (but not all) other user visible state of the device. When a checkpoint is saved, this state is saved to internal buffers, preferentially using free device, then host, and finally filesystem space to save the data. The user tool maintains a handle to a checkpoint, and is able to restore the checkpoint with a single call, restoring the state so a kernel may be re-executed and expect to have the same device state as when the checkpoint was saved. Once saved, a checkpoint may be restored any time including after multiple kernels have been launched, though currently there are limitations on which user calls (CUDA or driver API calls) have been validated to work between a Save and Restore . It currently is known safe to launch multiple kernels on a context and to do memcpy calls before restoring a checkpoint. Future versions of CUPTI will extend this to support additional API calls between a Save and Restore . Checkpoints may be saved during injected kernel launch callbacks or directly coded into a target application. Certain APIs are known to not work with the version of the Checkpoint API shipped with CUPTI 11.5, including Stream Capture mode.", "keywords": []}, {"id": 4308, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-compatibility-and-requirements", "display_name": "CUPTI Compatibility and Requirements", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-compatibility-and-requirements", "priority": -1, "content": "CUPTI, the CUDA Profiling Tools Interface, ensures seamless profiling compatibility for CUDA applications across various GPU architectures and CUDA driver versions. As part of the CUDA Toolkit, CUPTI adheres to CUDA Toolkit compatibility requirements with CUDA drivers, which includes support for Backward, Forward and Enhanced compatibilities. For instance, a profiling tool based on an older version of CUPTI can still operate with a more recent CUDA driver. It\u2019s essential to refer to the CUDA Toolkit and Compatible Driver Versions table to determine the minimum CUDA driver version required for each release of CUPTI corresponding to a CUDA Toolkit release. Attempting to use CUPTI calls with an incompatible CUDA driver version will result in a CUPTI_ERROR_NOT_INITIALIZED error code.", "keywords": []}, {"id": 4309, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-event-api", "display_name": "CUPTI Event API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-event-api", "priority": -1, "content": "The CUPTI Event API allows you to query, configure, start, stop, and read the event counters on a CUDA-enabled device. The following terminology is used by the event API. Event An event is a countable activity, action, or occurrence on a device. Event ID Each event is assigned a unique identifier. A named event will represent the same activity, action, or occurrence on all device types. But the named event may have different IDs on different device families. Use cuptiEventGetIdFromName to get the ID for a named event on a particular device. Event Category Each event is placed in one of the categories defined by CUpti_EventCategory . The category indicates the general type of activity, action, or occurrence measured by the event. Event Domain A device exposes one or more event domains. Each event domain represents a group of related events available on that device. A device may have multiple instances of a domain, indicating that the device can simultaneously record multiple instances of each event within that domain. Event Group An event group is a collection of events that are managed together. The number and type of events that can be added to an event group are subject to device-specific limits. At any given time, a device may be configured to count events from a limited number of event groups. All events in an event group must belong to the same event domain. Event Group Set An event group set is a collection of event groups that can be enabled at the same time. Event group sets are created by cuptiEventGroupSetsCreate and cuptiMetricCreateEventGroupSets . You can determine the events available on a device using the cuptiDeviceEnumEventDomains and cuptiEventDomainEnumEvents functions. The cupti_query sample described on the samples page shows how to use these functions. You can also enumerate all the CUPTI events available on any device using the cuptiEnumEventDomains function. Configuring and reading event counts requires the following steps. First, select your event collection mode. If you want to count events that occur during the execution of a kernel, use cuptiSetEventCollectionMode to set mode CUPTI_EVENT_COLLECTION_MODE_KERNEL . If you want to continuously sample the event counts, use mode CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS . Next, determine the names of the events that you want to count, and then use the cuptiEventGroupCreate , cuptiEventGetIdFromName , and cuptiEventGroupAddEvent functions to create and initialize an event group with those events. If you are unable to add all the events to a single event group, then you will need to create multiple event groups. Alternatively, you can use the cuptiEventGroupSetsCreate function to automatically create the event group(s) required for a set of events. It\u2019s possible that all the requested events can\u2019t be collected in the single pass due to hardware or software limitations, one needs to replay the exact same set of GPU workloads multiple times. Number of passes can be queried using the API cuptiEventGroupSetsCreate . Profiling one event always takes single pass. Multiple passes might be required when we want to profile multiple events together. Code snippet showing how to query number of passes: CUpti_EventGroupSets *eventGroupSets = NULL; size_t eventIdArraySize = sizeof(CUpti_EventID) * numEvents; CUpti_EventID *eventIdArray = (CUpti_EventID *)malloc(sizeof(CUpti_EventID) * numEvents); // fill in event Ids cuptiEventGroupSetsCreate(context, eventIdArraySize, eventIdArray, &amp;eventGroupSets); // number of passes required to collect all the events passes = eventGroupSets-&gt;numSets; To begin counting a set of events, enable the event group or groups that contain those events by using the cuptiEventGroupEnable function. If your events are contained in multiple event groups, you may be unable to enable all of the event groups at the same time i.e. in the same pass. In this case, you can gather the events across multiple executions of the application or you can enable kernel replay. If you enable kernel replay using cuptiEnableKernelReplayMode , you will be able to enable any number of event groups and all the contained events will be collected. Use the cuptiEventGroupReadEvent and/or cuptiEventGroupReadAllEvents functions to read the event values. When you are done collecting events, use the cuptiEventGroupDisable function to stop counting the events contained in an event group. The callback_event sample described on the samples page shows how to use these functions to create, enable, and disable event groups, and how to read event counts. For event collection mode CUPTI_EVENT_COLLECTION_MODE_KERNEL , event or metric collection may significantly change the overall performance characteristics of the application because all kernel executions that occur between the cuptiEventGroupEnable and cuptiEventGroupDisable calls are serialized on the GPU. This can be avoided by using mode CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS , and restricting profiling to events and metrics that can be collected in a single pass. All the events and metrics except NVLink metrics are collected at the context level, irrespective of the event collection mode. That is, events or metrics can be attributed to the context being profiled and values can be accurately collected, when multiple contexts are executing on the GPU. NVLink metrics are collected at device level for all event collection modes. In a system with multiple GPUs, events can be collected simultaneously on all the GPUs; in other words, event profiling doesn\u2019t enforce any serialization of work across GPUs. The event_multi_gpu sample shows how to use the CUPTI event and CUDA APIs on such setups. Event APIs from the header cupti_events.h are not supported for devices with compute capability 7.5 and higher. It is advised to use the CUPTI Profiling API instead. Refer to the section Migration to the Profiling API .", "keywords": []}, {"id": 4310, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-initialization", "display_name": "CUPTI Initialization", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-initialization", "priority": -1, "content": "CUPTI initialization occurs lazily the first time you invoke any CUPTI function. For the Activity, Event, Metric, and Callback APIs there are no requirements on when this initialization must occur (i.e. you can invoke the first CUPTI function at any point). See the CUPTI Activity API section for more information on CUPTI initialization requirements for the activity API. It is recommended for CUPTI clients to call the API cuptiSubscribe() before starting the profiling session i.e. API cuptiSubscribe() should be called before calling any other CUPTI API. This API will return the error code CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED when another CUPTI client is already subscribed. CUPTI client should error out and not make further CUPTI calls if cuptiSubscribe() returns an error. This would prevent multiple CUPTI clients to be active at the same time otherwise those might interfere with the profiling state of each other.", "keywords": []}, {"id": 4311, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-metric-api", "display_name": "CUPTI Metric API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-metric-api", "priority": -1, "content": "The CUPTI Metric API allows you to collect application metrics calculated from one or more event values. The following terminology is used by the metric API. Metric A characteristic of an application that is calculated from one or more event values. Metric ID Each metric is assigned a unique identifier. A named metric will represent the same characteristic on all device types. But the named metric may have different IDs on different device families. Use cuptiMetricGetIdFromName to get the ID for a named metric on a particular device. Metric Category Each metric is placed in one of the categories defined by CUpti_MetricCategory . The category indicates the general type of the characteristic measured by the metric. Metric Property Each metric is calculated from input values. These input values can be events or properties of the device or system. The available properties are defined by CUpti_MetricPropertyID . Metric Value Each metric has a value that represents one of the kinds defined by CUpti_MetricValueKind . For each value kind, there is a corresponding member of the CUpti_MetricValue union that is used to hold the metric\u2019s value. The tables included in this section list the metrics available for each device, as determined by the device\u2019s compute capability. You can also determine the metrics available on a device using the cuptiDeviceEnumMetrics function. The cupti_query sample described on the samples page shows how to use this function. You can also enumerate all the CUPTI metrics available on any device using the cuptiEnumMetrics function. CUPTI provides two functions for calculating a metric value. cuptiMetricGetValue2 can be used to calculate a metric value when the device is not available. All required event values and metric properties must be provided by the caller. cuptiMetricGetValue can be used to calculate a metric value when the device is available (as a CUdevice object). All required event values must be provided by the caller, but CUPTI will determine the appropriate property values from the CUdevice object. Configuring and calculating metric values requires the following steps. First, determine the name of the metric that you want to collect, and then use the cuptiMetricGetIdFromName to get the metric ID. Use cuptiMetricEnumEvents to get the events required to calculate the metric, and follow instructions in the CUPTI Event API section to create the event groups for those events. When creating event groups in this manner, it is important to use the result of cuptiMetricGetRequiredEventGroupSets to properly group together events that must be collected in the same pass to ensure proper metric calculation. Alternatively, you can use the cuptiMetricCreateEventGroupSets function to automatically create the event group(s) required for metrics\u2019 events. When using this function, events will be grouped as required to most accurately calculate the metric; as a result, it is not necessary to use cuptiMetricGetRequiredEventGroupSets . If you are using cuptiMetricGetValue2 , then you must also collect the required metric property values using cuptiMetricEnumProperties . Collect event counts as described in the CUPTI Event API section, and then use either cuptiMetricGetValue or cuptiMetricGetValue2 to calculate the metric value from the collected event and property values. The callback_metric sample described on the samples page shows how to use the functions to calculate event values and calculate a metric using cuptiMetricGetValue . Note that as shown in the example, you should collect event counts from all domain instances, and normalize the counts to get the most accurate metric values. It is necessary to normalize the event counts because the number of event counter instances varies by device and by the event being counted. For example, a device might have 8 multiprocessors but only have event counters for 4 of the multiprocessors, and might have 3 memory units and only have events counters for one memory unit. When calculating a metric that requires a multiprocessor event and a memory unit event, the 4 multiprocessor counters should be summed and multiplied by 2 to normalize the event count across the entire device. Similarly, the one memory unit counter should be multiplied by 3 to normalize the event count across the entire device. The normalized values can then be passed to cuptiMetricGetValue or cuptiMetricGetValue2 to calculate the metric value. As described, the normalization assumes the kernel executes a sufficient number of blocks to completely load the device. If the kernel has only a small number of blocks, normalizing across the entire device may skew the result. It\u2019s possible that all the requested metrics can\u2019t be collected in the single pass due to hardware or software limitations, one needs to replay the exact same set of GPU workloads multiple times. Number of passes can be queried using the API cuptiMetricCreateEventGroupSets . Profiling a single metric can also take multiple passes depending on the number and type of events it is calculated from. Code snippet showing how to query number of passes: CUpti_EventGroupSets *eventGroupSets = NULL; size_t metricIdArraySize = sizeof(CUpti_MetricID) * numMetrics; CUpti_MetricID metricIdArray = (CUpti_MetricID *)malloc(sizeof(CUpti_MetricID) * numMetrics); // fill in metric Ids cuptiMetricCreateEventGroupSets(context, metricIdArraySize, metricIdArray, &amp;eventGroupSets); // number of passes required to collect all the metrics passes = eventGroupSets-&gt;numSets; Metric APIs from the header cupti_metrics.h are not supported for devices with compute capability 7.5 and higher. It is advised to use the CUPTI Profiling API instead. Refer to the section Migration to the Profiling API .", "keywords": []}, {"id": 4312, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-overhead", "display_name": "CUPTI overhead", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-overhead", "priority": -1, "content": "CUPTI incurs overhead when used for tracing or profiling of the CUDA application. Overhead can vary significantly from one application to another. It largely depends on the density of the CUDA activities in the application; lesser the CUDA activities, less the CUPTI overhead. In general overhead of tracing i.e. activity APIs is much lesser than the profiling i.e. event and metric APIs.", "keywords": []}, {"id": 4313, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-pc-sampling-api", "display_name": "CUPTI PC Sampling API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-pc-sampling-api", "priority": -1, "content": "A new set of CUPTI APIs for PC sampling data collection are provided in the header file cupti_pcsampling.h which support continuous mode data collection without serializing kernel execution and have a lower runtime overhead. Along with these a utility library is provided in the header file cupti_pcsampling_util.h which has APIs for GPU assembly to CUDA-C source correlation and for reading and writing the PC sampling data from/to files. The PC Sampling APIs are supported on all CUDA supported platforms. These are supported on Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher. Overview of Features: Two sampling modes \u2013 Continuous (concurrent kernels) or Serialized (one kernel at a time)\u200b. Option to select stall reasons to collect.\u200b Ability to collect GPU PC sampling data for entire application duration or for specific CPU code ranges (defined by start and stop APIs).\u200b API to flush GPU PC sampling data.\u200b APIs to support Offline and Runtime correlation of GPU PC samples to CUDA C source lines and GPU assembly instructions\u200b. Samples are provided to demonstrate how to write the injection library to collect the PC sampling information, and how to parse the generated files using the utility APIs to print the stall reasons counter values and associate those with the GPU assembly instructions and CUDA-C source code. Refer to the samples pc_sampling_continuous , pc_sampling_utility and pc_sampling_start_stop . PC Sampling APIs from the header cupti_activity.h would be referred as PC Sampling Activity APIs and APIs from the header cupti_pcsampling.h would be referred as PC Sampling APIs .", "keywords": []}, {"id": 4314, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-pm-sampling-api", "display_name": "CUPTI PM Sampling API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-pm-sampling-api", "priority": -1, "content": "In the CUDA 12.6 release, CUPTI introduced new PM sampling APIs which are included in the header file cupti_pmsampling.h for collecting a set of metrics by sampling the GPU\u2019s performance monitors (PM) periodically at fixed intervals. Each sample is composed of metric values and the GPU timestamp when it was collected in nanoseconds. These APIs are supported on Turing and later GPU architectures, i.e. devices with compute capability 7.5 and higher. PM sampling follows a similar approach to range profiling, where the process is divided into 2 types of operations i.e. host (enumeration, configuration, evaluation) and target(collection).", "keywords": []}, {"id": 4315, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-profiler-definitions", "display_name": "CUPTI Profiler Definitions", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-profiler-definitions", "priority": -1, "content": "Definitions of glossary used in this section. Counter: The number of occurrences of a specific event on the device . Configuration Image: A Blob to configure the session for counters to be collected. CounterData Image: A Blob which contains the values of collected counters CounterData Prefix: A metadata header for CounterData Image Device: A physical NVIDIA GPU. Event: An event is a countable activity, action, or occurrence on device . Metric: A high-level value derived from counter values. Pass: A repeatable set of operations, with consistently labeled ranges . Range: A labeled region of execution Replay: Performing the repeatable set of operation. Session: A profiling session where GPU resources needed for profiling are allocated. The profiler is in armed state at session boundaries, and power management may be disabled at session boundaries. Outside of a session, the GPU will return to its normal operating state.", "keywords": []}, {"id": 4316, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-profiling-api", "display_name": "CUPTI Profiling API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-profiling-api", "priority": -1, "content": "Starting with CUDA 10.0, a new set of metric APIs are added for devices with compute capability 7.0 and higher. These APIs provide low and deterministic profiling overhead on the target system. These are supported on all CUDA supported platforms except Android, and are not supported under MPS (Multi-Process Service), Confidential Compute, or SLI configured systems. In order to determine whether a device is compatible with this API, a new function cuptiProfilerDeviceSupported is introduced in CUDA 11.5 which exposes overall Profiling API support and specific requirements for a given device. Profiling API must be initialized by calling cuptiProfilerInitialize before testing device support. This section covers performance profiling Host and Target APIs for CUDA. Broadly profiling APIs are divided into following four sections: Enumeration (Host) Configuration (Host) Collection (Target) Evaluation (Host) Host APIs provide a metric interface for enumeration, configuration and evaluation that doesn\u2019t require a compute(GPU) device, and can also run in an offline mode. In the samples section under extensions , profiler host utility covers the usage of host APIs. Target APIs are used for data collection of the metrics and requires a compute (GPU) device. Refer to samples auto_rangeProfiling and userrange_profiling for usage of profiling APIs. The list of metrics has been overhauled from earlier generation metrics and event APIs, to support a standard naming convention based upon unit__(subunit?)_(pipestage?)_quantity_qualifiers", "keywords": []}, {"id": 4317, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#cupti-sass-metric-api", "display_name": "CUPTI SASS Metric API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "cupti-sass-metric-api", "priority": -1, "content": "The SASS metric APIs support collecting metric data at SASS assembly instruction level. These support a larger set of SASS instruction level metrics compared to the CUPTI Activity APIs. The set of sass metrics supported for each GPU architecture can be queried. These APIs are supported on Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher. These APIs support SASS instruction to CUDA C source line correlation in offline mode. Hence the runtime overhead during data collection is lower.", "keywords": []}, {"id": 4318, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#data-flushing", "display_name": "Data flushing", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "data-flushing", "priority": -1, "content": "CUPTI clients can periodically flush GPU PC sampling data using the API cuptiPCSamplingGetData() . Besides periodic flushing of GPU PC sampling data, CUPTI clients need to also flush the GPU PC sampling data at the following points to maintain the uniqueness of PCs: For continuous collection mode CUPTI_PC_SAMPLING_COLLECTION_MODE_CONTINUOUS - after each module load-unload-load sequence. For serialized collection mode CUPTI_PC_SAMPLING_COLLECTION_MODE_KERNEL_SERIALIZED - after completion of each kernel. For range profiling using the configuration option CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_ENABLE_START_STOP_CONTROL - at the end of the range i.e. after cuptiPCSamplingStop() API. If application is profiled in the continuous collection mode with range profiling disabled, and there is no module unload, CUPTI clients can collect data in two ways: By using cuptiPCSamplingGetData() API periodically. By using cuptiPCSamplingDisable() on application exit and reading GPU PC sampling data from sampling data buffer passed during configuration. In case, cuptiPCSamplingGetData() API is not called periodically, the sampling data buffer passed during configuration should be big enough to hold the data for all the PCs. Field remainingNumPcs of the struct CUpti_PCSamplingData helps in identifying the number of PC records available with CUPTI. User can adjust the periodic flush interval based on it. Further user need to ensure that all remaining records can be accommodated in the sampling data buffer passed during configuration before disabling the PC sampling.", "keywords": []}, {"id": 4319, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#data-structure-mapping-table", "display_name": "Data Structure Mapping Table", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "data-structure-mapping-table", "priority": -1, "content": "The table below lists the data structure mapping from PC Sampling Activity APIs to PC Sampling APIs. PC Sampling Activity API structures PC Sampling API structures CUpti_ActivityPCSamplingConfig CUpti_PCSamplingConfigurationInfo CUpti_ActivityPCSamplingStallReason CUpti_PCSamplingStallReason Refer Stall Reasons Mapping Table CUpti_ActivityPCSampling3 CUpti_PCSamplingPCData CUpti_ActivityPCSamplingRecordInfo CUpti_PCSamplingData", "keywords": []}, {"id": 4320, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#derived-metrics", "display_name": "Derived metrics", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "derived-metrics", "priority": -1, "content": "Metrics Overview The PerfWorks API comes with an advanced metrics calculation system, designed to help you determine what happened (counters and metrics), and how close the program reached to peak GPU performance (throughputs as a percentage). Every counter has associated peak rates in the database, to allow computing its throughput as a percentage. Throughput metrics return the maximum percentage value of their constituent counters. Constituents can be programmatically queried via NVPW_MetricsEvaluator_GetMetricNames with NVPW_METRIC_TYPE_THROUGHPUT as metric types. These constituents have been carefully selected to represent the sections of the GPU pipeline that govern peak performance. While all counters can be converted to a %-of-peak, not all counters are suitable for peak-performance analysis; examples of unsuitable counters include qualified subsets of activity, and workload residency counters. Using throughput metrics ensures meaningful and actionable analysis. Two types of peak rates are available for every counter: burst and sustained. Burst rate is the maximum rate reportable in a single clock cycle. Sustained rate is the maximum rate achievable over an infinitely long measurement period, for \u201ctypical\u201d operations. For many counters, burst == sustained. Since the burst rate cannot be exceeded, percentages of burst rate will always be less than 100%. Percentages of sustained rate can occasionally exceed 100% in edge cases. Burst metrics are only supported with MetricsContext APIs and these will be deprecated in a future CUDA release. These metrics are not supported with NVPW_MetricsEvaluator APIs. Metrics Entities The Metrics layer has 3 major types of entities: Metrics : these are calculated quantities, with the following static properties: Description string. Dimensional Units : a list of (\u2018name\u2019, exponent) in the style of dimensional analysis . Example string representation: pixels / gpc_clk . Raw Metric dependencies : the list of raw metrics that must be collected, in order to evaluate the metric. Every metric has the following sub-metrics built in. .peak_sustained the peak sustained rate .peak_sustained_active the peak sustained rate during unit active cycles .peak_sustained_active.per_second the peak sustained rate during unit active cycles, per second * .peak_sustained_elapsed the peak sustained rate during unit elapsed cycles .peak_sustained_elapsed.per_second the peak sustained rate during unit elapsed cycles, per second * .peak_sustained_region the peak sustained rate over a user-specified \u201crange\u201d .peak_sustained_region.per_second the peak sustained rate over a user-specified \u201crange\u201d, per second * .peak_sustained_frame the peak sustained rate over a user-specified \u201cframe\u201d .peak_sustained_frame.per_second the peak sustained rate over a user-specified \u201cframe\u201d, per second * .per_cycle_active the number of operations per unit active cycle .per_cycle_elapsed the number of operations per unit elapsed cycle .per_cycle_in_region the number of operations per user-specified \u201crange\u201d cycle .per_cycle_in_frame the number of operations per user-specified \u201cframe\u201d cycle .per_second the number of operations per second .pct_of_peak_sustained_active % of peak sustained rate achieved during unit active cycles .pct_of_peak_sustained_elapsed % of peak sustained rate achieved during unit elapsed cycles .pct_of_peak_sustained_region % of peak sustained rate achieved over a user-specified \u201crange\u201d time .pct_of_peak_sustained_frame % of peak sustained rate achieved over a user-specified \u201cframe\u201d time * sub-metrics added in CUPTI 11.3. Counters may be either a raw counter from the GPU, or a calculated counter value. Every counter has four sub-metrics under it, which are also called roll-ups : .sum The sum of counter values across all unit instances. .avg The average counter value across all unit instances. .min The minimum counter value across all unit instances. .max The maximum counter value across all unit instances. Ratios have three sub-metrics under it: .pct The value expressed as a percentage. .ratio The value expressed as a ratio. .max_rate The ratio\u2019s maximum value. Throughputs indicate how close a portion of the GPU reached to peak rate. Every throughput has the following sub-metrics: .pct_of_peak_sustained_active % of peak sustained rate achieved during unit active cycles .pct_of_peak_sustained_elapsed % of peak sustained rate achieved during unit elapsed cycles .pct_of_peak_sustained_region % of peak sustained rate achieved over a user-specified \u201crange\u201d time .pct_of_peak_sustained_frame % of peak sustained rate achieved over a user-specified \u201cframe\u201d time At the configuration step, you must specify metric names. Counters, ratios, and throughputs are not directly schedulable. Note: Burst metrics are only supported with MetricsContext APIs. From CUPTI 11.3 onwards, due to not being useful for performance optimization following counter sub-metrics are not present in MetricEvaluator APIs and are only supported with MetricsContext APIs: .peak_burst the peak burst rate .pct_of_peak_burst_active % of peak burst rate achieved during unit active cycles .pct_of_peak_burst_elapsed % of peak burst rate achieved during unit elapsed cycles .pct_of_peak_burst_region % of peak burst rate achieved over a user-specified \u201crange\u201d .pct_of_peak_burst_frame % of peak burst rate achieved over a user-specified \u201cframe\u201d From CUPTI 11.3 onwards, due to not being useful for performance optimization following throughput sub-metrics are not present in MetricEvaluator APIs and are only supported with MetricsContext APIs: .pct_of_peak_burst_active % of peak burst rate achieved during unit active cycles .pct_of_peak_burst_elapsed % of peak burst rate achieved during unit elapsed cycles .pct_of_peak_burst_region % of peak burst rate achieved over a user-specified \u201crange\u201d time .pct_of_peak_burst_frame % of peak burst rate achieved over a user-specified \u201cframe\u201d time Metrics Examples ## non-metric names -- *not* directly evaluable sm__inst_executed # counter smsp__average_warp_latency # ratio sm__throughput # throughput ## a counter&#x27;s four roll-ups as sub-metrics -- all evaluable sm__inst_executed.sum # metric sm__inst_executed.avg # metric sm__inst_executed.min # metric sm__inst_executed.max # metric ## all names below are metrics -- all evaluable l1tex__data_bank_conflicts_pipe_lsu.sum l1tex__data_bank_conflicts_pipe_lsu.sum.peak_burst l1tex__data_bank_conflicts_pipe_lsu.sum.peak_sustained l1tex__data_bank_conflicts_pipe_lsu.sum.per_cycle_active l1tex__data_bank_conflicts_pipe_lsu.sum.per_cycle_elapsed l1tex__data_bank_conflicts_pipe_lsu.sum.per_cycle_in_region l1tex__data_bank_conflicts_pipe_lsu.sum.per_cycle_in_frame l1tex__data_bank_conflicts_pipe_lsu.sum.per_second l1tex__data_bank_conflicts_pipe_lsu.sum.pct_of_peak_sustained_active l1tex__data_bank_conflicts_pipe_lsu.sum.pct_of_peak_sustained_elapsed l1tex__data_bank_conflicts_pipe_lsu.sum.pct_of_peak_sustained_region l1tex__data_bank_conflicts_pipe_lsu.sum.pct_of_peak_sustained_frame Metrics Naming Conventions Counters and metrics _generally_ obey the naming scheme: Unit-Level Counter : unit__(subunit?)_(pipestage?)_quantity_(qualifiers?) Interface Counter : unit__(subunit?)_(pipestage?)_(interface)_quantity_(qualifiers?) Unit Metric : (counter_name).(rollup_metric) Sub-Metric : (counter_name).(rollup_metric).(submetric) where unit: A logical of physical unit of the GPU subunit: The subunit within the unit where the counter was measured. Sometimes this is a pipeline mode instead. pipestage: The pipeline stage within the subunit where the counter was measured. quantity: What is being measured. Generally matches the \u201cdimensional units\u201d. qualifiers: Any additional predicates or filters applied to the counter. Often, an unqualified counter can be broken down into several qualified sub-components. interface: Of the form sender2receiver , where sender is the source-unit and receiver is the destination-unit. rollup_metric: One of sum,avg,min,max. submetric: refer to section Metric Entities Components are not always present. Most top-level counters have no qualifiers. Subunit and pipestage may be absent where irrelevant, or there may be many subunit specifiers for detailed counters. Cycle Metrics Counters using the term cycles in the name report the number of cycles in the unit\u2019s clock domain. Unit-level cycle metrics include: unit__cycles_elapsed : The number of cycles within a range. The cycles\u2019 DimUnits are specific to the unit\u2019s clock domain. unit__cycles_active : The number of cycles where the unit was processing data. unit__cycles_stalled : The number of cycles where the unit was unable to process new data because its output interface was blocked. unit__cycles_idle : The number of cycles where the unit was idle. Interface-level cycle counters are often (not always) available in the following variations: unit__(interface)_active : Cycles where data was transferred from source-unit to destination-unit. unit__(interface)_stalled : Cycles where the source-unit had data, but the destination-unit was unable to accept data.", "keywords": []}, {"id": 4321, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#device-memory-allocation-source-tracking", "display_name": "Device Memory Allocation Source Tracking", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "device-memory-allocation-source-tracking", "priority": -1, "content": "CUDA applications utilize various shared libraries such as cuBLAS, cuFFT, cuDNN etc, each serving distinct purposes. These libraries can be integrated either statically at compile time or loaded dynamically during runtime. In the case of dynamic loading, CUPTI enables precise attribution of memory allocations to their respective shared libraries. This can be achieved by calling the cuptiActivityEnableAllocationSource() API. The filepath of the responsible shared object is assigned in the source field in the activity record CUpti_ActivityMemory4 which is enabled using the activity kind CUPTI_ACTIVITY_KIND_MEMORY2 . This functionality is currently exclusive to Linux x86_64 platform. However, if the library is statically linked, the source is identified as the main application executable rather than the library.", "keywords": []}, {"id": 4322, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#differences-from-event-and-metric-apis", "display_name": "Differences from event and metric APIs", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "differences-from-event-and-metric-apis", "priority": -1, "content": "Here is the list of features which are supported by the event and metric APIs but these are not available with the Profiling API: Continuous mode or sampling of the metrics. Profiling API provides closest equivalent metrics for most of the events and metrics supported by the event and metric APIs. However, there are some events and metrics, for example NVLink performance metrics, for which there is no equivalent metrics in the Profiling API. Tables Metrics Mapping Table and Events Mapping Table can be referred to find the equivalent Perfworks metrics for compute capability 7.0. Per-instance metrics i.e. users can\u2019t collect metrics for each instance of the hardware units like SM, FB etc separately. However Profiling API provides sub-metrics which can be used to get the avg/sum/min/max across all instances of a hardware unit.", "keywords": []}, {"id": 4323, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#driver-and-runtime-api-callbacks", "display_name": "Driver and Runtime API Callbacks", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "driver-and-runtime-api-callbacks", "priority": -1, "content": "Using the callback API with the CUPTI_CB_DOMAIN_DRIVER_API or CUPTI_CB_DOMAIN_RUNTIME_API domains, you can associate a callback function with one or more CUDA API functions. When those CUDA functions are invoked in the application, your callback function is invoked as well. For these domains, the cbdata argument to your callback function will be of the type CUpti_CallbackData . It is legal to call cudaThreadSynchronize() , cudaDeviceSynchronize() , cudaStreamSynchronize() , cuCtxSynchronize() , and cuStreamSynchronize() from within a driver or runtime API callback function. The following code shows a typical sequence used to associate a callback function with one or more CUDA API functions. To simplify the presentation, error checking code has been removed. CUpti_SubscriberHandle subscriber; MyDataStruct *my_data = ...; ... cuptiSubscribe(&amp;subscriber, (CUpti_CallbackFunc)my_callback , my_data); cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_RUNTIME_API); First, cuptiSubscribe is used to initialize a subscriber with the my_callback callback function. Next, cuptiEnableDomain is used to associate that callback with all the CUDA runtime API functions. Using this code sequence will cause my_callback to be called twice each time any of the CUDA runtime API functions are invoked, once on entry to the CUDA function and once just before exit from the CUDA function. CUPTI callback API functions cuptiEnableCallback and cuptiEnableAllDomains can also be used to associate CUDA API functions with a callback (see reference below for more information). The following code shows a typical callback function. void CUPTIAPI my_callback(void *userdata, CUpti_CallbackDomain domain, CUpti_CallbackId cbid, const void *cbdata) { const CUpti_CallbackData *cbInfo = (CUpti_CallbackData *)cbdata; MyDataStruct *my_data = (MyDataStruct *)userdata; if ((domain == CUPTI_CB_DOMAIN_RUNTIME_API) &amp;&amp; (cbid == CUPTI_RUNTIME_TRACE_CBID_cudaMemcpy_v3020)) { if (cbInfo-&gt;callbackSite == CUPTI_API_ENTER) { cudaMemcpy_v3020_params *funcParams = (cudaMemcpy_v3020_params *)(cbInfo-&gt; functionParams); size_t count = funcParams-&gt;count; enum cudaMemcpyKind kind = funcParams-&gt;kind; ... } ... In your callback function, you use the CUpti_CallbackDomain and CUpti_CallbackID parameters to determine which CUDA API function invocation is causing this callback. In the example above, we are checking for the CUDA runtime cudaMemcpy function. The cbdata parameter holds a structure of useful information that can be used within the callback. In this case, we use the callbackSite member of the structure to detect that the callback is occurring on entry to cudaMemcpy , and we use the functionParams member to access the parameters that were passed to cudaMemcpy . To access the parameters, we first cast functionParams to a structure type corresponding to the cudaMemcpy function. These parameter structures are contained in generated_cuda_runtime_api_meta.h , generated_cuda_meta.h , and a number of other files. When possible, these files are included for you by cupti.h . The callback_event and callback_timestamp samples described on the samples page both show how to use the callback API for the driver and runtime API domains.", "keywords": []}, {"id": 4324, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#dynamic-attach-and-detach", "display_name": "Dynamic Attach and Detach", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "dynamic-attach-and-detach", "priority": -1, "content": "CUPTI provides mechanisms for attaching to or detaching from a running process to support on-demand profiling. CUPTI can be attached by calling any CUPTI API as CUPTI supports lazy initialization. To detach CUPTI, call the API cuptiFinalize() which destroys and cleans up all the resources associated with CUPTI in the current process. After CUPTI detaches from the process, the process will keep on running with no CUPTI attached to it. Any subsequent CUPTI API call will reinitialize the CUPTI. You can attach and detach CUPTI any number of times. For safe operation of the API, it is recommended that API cuptiFinalize() is invoked from the exit call site of any of the CUDA Driver or Runtime API. Otherwise, CUPTI client needs to make sure that CUDA synchronization and CUPTI activity buffer flush is done before calling the API cuptiFinalize() . To understand the need for calling the API cuptiFinalize() from specific point/s in the code flow, consider multiple application threads performing various CUDA activities. While one thread is in the middle of the cuptiFinalize() , it is quite possible that other threads continue to call into the CUPTI and try to access the state of various objects (device, context, thread state etc) maintained by CUPTI, which might be rendered invalid as part of the cuptiFinalize() , thus resulting in the crash. We have to block the other threads until CUPTI teardown is completed via cuptiFinalize() . API exit call site is one such location where we can ensure that the work submitted by all the threads has been completed and we can safely teardown CUPTI. cuptiFinalize() is a heavy operation as it does context synchronization for all active CUDA contexts and blocks all the application threads until CUPTI teardown is completed. Sample code showing the usage of the API cuptiFinalize() in the cupti callback handler code: void CUPTIAPI cuptiCallbackHandler(void *userdata, CUpti_CallbackDomain domain, CUpti_CallbackId cbid, void *cbdata) { const CUpti_CallbackData *cbInfo = (CUpti_CallbackData *)cbdata; // Take this code path when CUPTI detach is requested if (detachCupti) { switch(domain) { case CUPTI_CB_DOMAIN_RUNTIME_API: case CUPTI_CB_DOMAIN_DRIVER_API: if (cbInfo-&gt;callbackSite == CUPTI_API_EXIT) { // call the CUPTI detach API cuptiFinalize(); } break; default: break; } } } Full code can be found in the sample cupti_finalize .", "keywords": []}, {"id": 4325, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#events-mapping-table", "display_name": "Events Mapping Table", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "events-mapping-table", "priority": -1, "content": "The table below lists the CUPTI events for devices with compute capability 7.0. For each CUPTI event the closest equivalent Perfworks metric or formula is given. If no equivalent Perfworks metric is available the column is left blank. Note that there can be some difference in the values between the CUPTI event and the Perfworks metrics. CUPTI Event Perfworks Metric or Formula active_cycles sm__cycles_active.sum active_cycles_pm sm__cycles_active.sum active_cycles_sys sys__cycles_active.sum active_warps sm__warps_active.sum active_warps_pm sm__warps_active.sum atom_count smsp__inst_executed_op_generic_atom_dot_alu.sum elapsed_cycles_pm sm__cycles_elapsed.sum elapsed_cycles_sm sm__cycles_elapsed.sum elapsed_cycles_sys sys__cycles_elapsed.sum fb_subp0_read_sectors dram__sectors_read.sum fb_subp1_read_sectors dram__sectors_read.sum fb_subp0_write_sectors dram__sectors_write.sum fb_subp1_write_sectors dram__sectors_write.sum global_atom_cas smsp__inst_executed_op_generic_atom_dot_cas.sum gred_count smsp__inst_executed_op_global_red.sum inst_executed sm__inst_executed.sum inst_executed_fma_pipe_s0 smsp__inst_executed_pipe_fma.sum inst_executed_fma_pipe_s1 smsp__inst_executed_pipe_fma.sum inst_executed_fma_pipe_s2 smsp__inst_executed_pipe_fma.sum inst_executed_fma_pipe_s3 smsp__inst_executed_pipe_fma.sum inst_executed_fp16_pipe_s0 smsp__inst_executed_pipe_fp16.sum inst_executed_fp16_pipe_s1 smsp__inst_executed_pipe_fp16.sum inst_executed_fp16_pipe_s2 smsp__inst_executed_pipe_fp16.sum inst_executed_fp16_pipe_s3 smsp__inst_executed_pipe_fp16.sum inst_executed_fp64_pipe_s0 smsp__inst_executed_pipe_fp64.sum inst_executed_fp64_pipe_s1 smsp__inst_executed_pipe_fp64.sum inst_executed_fp64_pipe_s2 smsp__inst_executed_pipe_fp64.sum inst_executed_fp64_pipe_s3 smsp__inst_executed_pipe_fp64.sum inst_issued1 sm__inst_issued.sum l2_subp0_read_sector_misses lts__t_sectors_op_read_lookup_miss.sum l2_subp1_read_sector_misses lts__t_sectors_op_read_lookup_miss.sum l2_subp0_read_sysmem_sector_queries lts__t_sectors_aperture_sysmem_op_read.sum l2_subp1_read_sysmem_sector_queries lts__t_sectors_aperture_sysmem_op_read.sum l2_subp0_read_tex_hit_sectors lts__t_sectors_srcunit_tex_op_read_lookup_hit.sum l2_subp1_read_tex_hit_sectors lts__t_sectors_srcunit_tex_op_read_lookup_hit.sum l2_subp0_read_tex_sector_queries lts__t_sectors_srcunit_tex_op_read.sum l2_subp1_read_tex_sector_queries lts__t_sectors_srcunit_tex_op_read.sum l2_subp0_total_read_sector_queries lts__t_sectors_op_read.sum + lts__t_sectors_op_atom.sum + lts__t_sectors_op_red.sum l2_subp1_total_read_sector_queries lts__t_sectors_op_read.sum + lts__t_sectors_op_atom.sum + lts__t_sectors_op_red.sum l2_subp0_total_write_sector_queries lts__t_sectors_op_write.sum + lts__t_sectors_op_atom.sum + lts__t_sectors_op_red.sum l2_subp1_total_write_sector_queries lts__t_sectors_op_write.sum + lts__t_sectors_op_atom.sum + lts__t_sectors_op_red.sum l2_subp0_write_sector_misses lts__t_sectors_op_write_lookup_miss.sum l2_subp1_write_sector_misses lts__t_sectors_op_write_lookup_miss.sum l2_subp0_write_sysmem_sector_queries lts__t_sectors_aperture_sysmem_op_write.sum l2_subp1_write_sysmem_sector_queries lts__t_sectors_aperture_sysmem_op_write.sum l2_subp0_write_tex_hit_sectors lts__t_sectors_srcunit_tex_op_write_lookup_hit.sum l2_subp1_write_tex_hit_sectors lts__t_sectors_srcunit_tex_op_write_lookup_hit.sum l2_subp0_write_tex_sector_queries lts__t_sectors_srcunit_tex_op_write.sum l2_subp1_write_tex_sector_queries lts__t_sectors_srcunit_tex_op_write.sum not_predicated_off_thread_inst_executed smsp__thread_inst_executed_pred_on.sum pcie_rx_active_pulse pcie_tx_active_pulse prof_trigger_00 prof_trigger_01 prof_trigger_02 prof_trigger_03 prof_trigger_04 prof_trigger_05 prof_trigger_06 prof_trigger_07 inst_issued0 smsp__issue_inst0.sum sm_cta_launched sm__ctas_launched.sum shared_load smsp__inst_executed_op_shared_ld.sum shared_store smsp__inst_executed_op_shared_st.sum generic_load smsp__inst_executed_op_generic_ld.sum generic_store smsp__inst_executed_op_generic_st.sum global_load smsp__inst_executed_op_global_ld.sum global_store smsp__inst_executed_op_global_st.sum local_load smsp__inst_executed_op_local_ld.sum local_store smsp__inst_executed_op_local_st.sum shared_atom smsp__inst_executed_op_shared_atom.sum shared_atom_cas smsp__inst_executed_op_shared_atom_dot_cas.sum shared_ld_bank_conflict l1tex__data_bank_conflicts_pipe_lsu_mem_shared_op_ld.sum shared_st_bank_conflict l1tex__data_bank_conflicts_pipe_lsu_mem_shared_op_st.sum shared_ld_transactions l1tex__data_pipe_lsu_wavefronts_mem_shared_op_ld.sum shared_st_transactions l1tex__data_pipe_lsu_wavefronts_mem_shared_op_st.sum tensor_pipe_active_cycles_s0 smsp__pipe_tensor_cycles_active.sum tensor_pipe_active_cycles_s1 smsp__pipe_tensor_cycles_active.sum tensor_pipe_active_cycles_s2 smsp__pipe_tensor_cycles_active.sum tensor_pipe_active_cycles_s3 smsp__pipe_tensor_cycles_active.sum thread_inst_executed smsp__thread_inst_executed.sum warps_launched smsp__warps_launched.sum", "keywords": []}, {"id": 4326, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#examples", "display_name": "Examples", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "examples", "priority": -1, "content": "The Checkpoint API does not require any other CUPTI calls. A simple use case could be to compare the output of three different implementations of a kernel. Pseudocode for this could look like: CUpti_Checkpoint cp = { CUpti_Checkpoint_STRUCT_SIZE }; int kernel = 0; do { if (kernel == 0) cuptiCheckpointSave(&amp;cp); else cuptiCheckpointRestore(&amp;cp); if (kernel == 0) kernel_1&lt;&lt;&lt;&gt;&gt;&gt;(...); else if (kernel == 1) kernel_2&lt;&lt;&lt;&gt;&gt;&gt;(...); else if (kernel == 2) kernel_3&lt;&lt;&lt;&gt;&gt;&gt;(...); } while (kernel++ &lt; 3); cuptiCheckpointFree(&amp;cp); In this example, even if any of the kernels modify their own input data, the subsequent passes through the loop will still run correctly - the modified input data would be restored by each call to cuptiCheckpointRestore before the next kernel runs. This is particularly useful when a programmer does not know the exact state of the device prior to a kernel call - the Checkpoint API ensures that all needed data is saved and restored, which would not otherwise be practical or perhaps even possible in some complex cases. Another possible use case could be for fuzzing - randomly modifying input to a kernel, and ensuring it performs as expected. Instead of manually restoring device state to a known good point, the Checkpoint API and initialize a good state, and the fuzzer can modify only what is needed. CUpti_Checkpoint cp = { CUpti_Checkpoint_STRUCT_SIZE }; int i = 0; do { if (i == 0) cuptiCheckpointSave(&amp;cp); else cuptiCheckpointRestore(&amp;cp); setup_test&lt;&lt;&lt;&gt;&gt;&gt;(i, ...); kernel&lt;&lt;&lt;&gt;&gt;&gt;(...); validate_result&lt;&lt;&lt;&gt;&gt;&gt;(i, ...); } while (i++ &lt; num_tests); cuptiCheckpointFree(&amp;cp); Finally, the Checkpoint API is very useful for the User Replay mode of the CUPTI Profiling API. The User Replay mode can be very desireable as it allows kernels to run concurrently, which Kernel Replay mode does not, and only replays parts of the application which are within a performance region, unlike Applicatin Replay mode. However, in this mode, a kernel potentially needs to be launched multiple times in order to gather all requested metrics. This is complicated when the kernel may modify some of its own input data, and without the Checkpoint API, would require the tool developer to handle restoring any modified input data manually. It is difficult for a tool to automatically know whether any data needs to be restored before each iteration, or even what the existing state of the device is. Using the Checkpoint API, the tool can guarantee that input data will be restored each pass. CUpti_Checkpoint cp = { CUpti_Checkpoint_STRUCT_SIZE }; // Pseudocode - assume all Profiling API structures are already initialized correctly cuptiProfilerBeginSession(&amp;beginSessionParams); cuptiProfilerSetConfig(&amp;setConfigParams); int numPasses = 0; bool lastPass = false; do { if (numPasses == 0) cuptiCheckpointSave(&amp;cp); else cuptiCheckpointRestore(&amp;cp); cuptiProfilerBeginPass(&amp;beginPassParams); cuptiProfilerEnableProfiling(&amp;enableProfilingParams); cuptiProfilerPushRange(&amp;pushRangeParams); // Kernel launch on N separate streams - will be profiled while running concurrently kernel&lt;&lt;&lt;..., stream0&gt;&gt;&gt;(...); kernel&lt;&lt;&lt;..., stream1&gt;&gt;&gt;(...); ... kernel&lt;&lt;&lt;..., streamN&gt;&gt;&gt;(...); cudaStreamSynchronize(stream0); cudaStreamSynchronize(stream1); ... cudaStreamSynchronize(streamN); cuptiProfilerPopRange(&amp;popRangeParams); cuptiProfilerDisableProfiling(&amp;disableProfilingParams); lastPass = cuptiProfilerEndPass(&amp;endPassParams); } while (lastPass == false); cuptiProfilerFlushCounterData(&amp;flushCounterDataParams); cuptiProfilerUnsetConfig(&amp;unsetConfigParams); cuptiProfilerEndSession(&amp;endSessionParams); In this example, the Profiler range will span all concurrently running kernels, which may modify their own input data - each pass through the loop will restore the initial values.", "keywords": []}, {"id": 4327, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#execution-overhead", "display_name": "Execution overhead", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "execution-overhead", "priority": -1, "content": "Consider below points which can affect the execution overhead of the application: Enable only the activities and callbacks which are of interest. Return from the callbacks as early as possible. Callbacks are issued from the host, these can block the work submission on the GPU if not returned early since CUPTI and thus the CUDA driver can\u2019t make the forward progress on the host thread which issues the callback. APIs cuptiActivityEnableDriverApi and cuptiActivityEnableRuntimeApi can be used to limit the tracing of CUDA APIs that are of interest. For CUDA Graphs, if node level visibility is not desired, switching to the graph-level tracing from node-level tracing can help in reducing the collection overhead significantly. Use activity kind CUPTI_ACTIVITY_KIND_GRAPH_TRACE to enable graph-level tracing. For activity buffer requested callback, the client should return the buffer as quickly as possible as this callback is issued from the application thread. Client can pre-allocate a pool of activity buffers and return an empty buffer from the pool when requested by CUPTI. CUPTI initializes the new activity buffer with zero values using the memset call before using it. This operation can be skipped if user provides the zero value buffer and sets the attribute CUPTI_ACTIVITY_ATTR_ZEROED_OUT_ACTIVITY_BUFFER of the enum CUpti_ActivityAttribute . Client can request CUPTI to maintain the activity buffers at the thread level instead of global buffers. This can be achieved by setting the option CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER of the enum CUpti_ActivityAttribute . This can help in reducing the collection overhead for applications which launch CUDA activities from multiple host threads. Reduce the frequency of buffer flushing as it can be an expensive operation. This can be achieved by setting a high flush period using the API cuptiActivityFlushPeriod to avoid internal flushing done by CUPTI and by reducing the frequency of the API cuptiActivityFlushAll . This approach might result in increased memory footprint on host and device. For device buffers, CUPTI allocates a new buffer when it runs out of the buffers from the pool, and this happens in the main application thread, which might result in stalls in the critical path. This can be avoided by either pre-allocating more device buffers or increasing the size of the device buffer using the attributes CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_POOL_LIMIT and CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE respectively from the enum CUpti_ActivityAttribute . Serial kernel trace enabled using the activity kind CUPTI_ACTIVITY_KIND_KERNEL can significantly change the overall performance characteristics of the application because all kernel executions are serialized on the GPU. For applications which use only a single CUDA stream and therefore cannot have concurrent kernel execution, this mode can be useful as it usually (not always) incurs less profiling overhead compared to the concurrent kernel mode. Concurrent kernel trace enabled using the activity kind CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL doesn\u2019t affect the concurrency of the kernels in the application. In this mode, CUPTI instruments the kernel code to collect the timing information. A single instrumentation code is generated at the time of loading the CUDA module and applied to each kernel during the kernel execution. Instrumentation code generation overhead is attributed as CUPTI_ACTIVITY_OVERHEAD_CUPTI_INSTRUMENTATION in the activity record CUpti_ActivityOverhead2 . Due to the code instrumentation, concurrent kernel mode can add significant runtime overhead if used on kernels that execute a large number of blocks and that have short execution duration.", "keywords": []}, {"id": 4328, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#external-correlation", "display_name": "External Correlation", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "external-correlation", "priority": -1, "content": "CUPTI supports correlation of CUDA API activity records with external APIs. Such APIs include OpenACC, OpenMP, and MPI. This associates CUPTI correlation IDs with IDs provided by the external API. Both IDs are stored in a new activity record of type CUpti_ActivityExternalCorrelation . CUPTI maintains a stack of external correlation IDs per CPU thread and per CUpti_ExternalCorrelationKind . Clients must use cuptiActivityPushExternalCorrelationId to push an external ID of a specific kind to this stack and cuptiActivityPopExternalCorrelationId to remove the latest ID. If a CUDA API activity record is generated while any CUpti_ExternalCorrelationKind -stack on the same CPU thread is non-empty, one CUpti_ActivityExternalCorrelation record per CUpti_ExternalCorrelationKind -stack is inserted into the activity buffer before the respective CUDA API activity record. The CUPTI client is responsible for tracking passed external API correlation IDs, in order to eventually associate external API calls with CUDA API calls. Along with the activity kind CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION , it is necessary to enable the CUDA API activity kinds i.e. CUPTI_ACTIVITY_KIND_RUNTIME and CUPTI_ACTIVITY_KIND_DRIVER to generate external correlation activity records. If both CUPTI_ACTIVITY_KIND_EXTERNAL_CORRELATION and any of CUPTI_ACTIVITY_KIND_OPENACC_* activity kinds are enabled, CUPTI will generate external correlation activity records for OpenACC with externalKind  CUPTI_EXTERNAL_CORRELATION_KIND_OPENACC . The cupti_external_correlation sample shows how to use CUPTI APIs for external correlation.", "keywords": []}, {"id": 4329, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#fixed-clock-rate", "display_name": "Fixed Clock Rate", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "fixed-clock-rate", "priority": -1, "content": "Many metrics are directly affected by GPU SM and memory clock frequencies. By default, the GPU keeps clock rates low until work is launched, but clock rates do not boost to full speed immediately, so initial work launched after an idle period may run at low clock speed. Additionally, the target clock rates may vary based on power, thermal, and other factors. Complex interactions between different part of the system mean that these dynamic clock rates may not be reproducible between runs. To reduce the effect of dynamic clock rates, it is possible to set a fixed clock rate. The GPU will no longer opportunistically boost clock rates above this rate, but it will eliminate the variability after GPU idle and effects of power and thermal variation. Several different methods exist to fix the SM or memory clock rates. The simplest may be nvidia-smi, but see this NVIDIA blog entry for more suggestions.", "keywords": []}, {"id": 4330, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#id7", "display_name": "Usage", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "id7", "priority": -1, "content": "There is one header for the library, cupti_checkpoint.h , which needs to be included, and libcheckpoint needs to be linked in to the application or injection library. Though the checkpoint library doesn\u2019t depend on cupti, the error codes returned by the API are shared with cupti, so linking libcupti in is needed in order to translate the return codes to string representations. The Checkpoint API follows a similar design to other CUPTI APIs. API behavior is controlled through a structure, CUpti_Checkpoint , which is initialized by a tool or application, then passed to cuptiCheckpointSave . If the call is successful, the structure saves a handle to a checkpoint. At this point, the application may make a series of calls which modify device state (kernels which update memory, memcopies, etc), and when the device state should be restored, the tool can use the same structure in calls to cuptiCheckpointRestore , and finally a call to cuptiCheckpointFree to release the resources used by the checkpoint object. Multiple checkpoints may be saved at the same time. If multiple checkpoints exist, they operate entirely independently - each checkpoint consumes the full resources needed to restore the device state at the point it was saved. Order of operations between multiple checkpoints is not enforced by the API - while a common use for multiple checkpoints may be a nested pattern, it is also possible to interleave checkpoint operations. Between a cuptiCheckpointSave and cuptiCheckpointRestore , any number of standard kernel launches (or equivalent API calls such as cuLaunchKernel ) or memcpy calls may be made. Additionally, any host (cpu) side calls may be made that do not affect device state. It is possible that other CUDA or driver API calls may be made, but have not been validated with the 11.5 release. Several options exist in the CUpti_Checkpoint structure. They must be set prior to the initial cuptiCheckpointSave using that structure. Any further changes to the structure are ignored until after a call to cuptiCheckpointFree , at which point the structure can be re-configured and re-used. Important per-checkpoint options: structSize - must be set to the value of CUpti_Checkpoint_STRUCT_SIZE ctx - if NULL, the checkpoint will be of the default CUDA context, otherwise, specifies which context reserveDeviceMB - Restrict a checkpoint save from using at least this much device memory reserveHostMB - Restrict a checkpoint save from using at least this much host memory allowOverwrite - It is normally an error to call Save using an existing checkpoint handle (one which has not been Freed). When set, this option allows the Save operation to be called multiple times on a handle. Note that when using this option, the CUpti_Checkpoint options are not re-read on any subsequent Save. To read new options, the handle must be passed to cuptiCheckpointFree prior to the cuptiCheckpointSave call. optimizations - Bitmask of options for checkpoint behavior CUPTI_CHECKPOINT_OPT_TRANSFER - Normally when restoring a checkpoint, all existing device memory at the time of the save is restored. This optimization adds a test to see whether a block of memory has changed before restoring it and caches the results for subsequent calls to Restore. Use of this option requires that all Restore calls be done at the same point in an application for a given checkpoint. As the optimization may be computationally expensive, it is most useful when there is a significant amount of data that can be skipped and there will be several calls to Restore the checkpoint.", "keywords": []}, {"id": 4331, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#limitations", "display_name": "Limitations", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "limitations", "priority": -1, "content": "Known limitations and issues: PC Sampling APIs don\u2019t support simultaneous sampling of multiple CUDA contexts on a GPU. However, simultaneous sampling of single CUDA context per GPU is supported. Before enabling and configuring the PC sampling on a different CUDA context on the same GPU, PC sampling needs to be disabled on the other context.", "keywords": []}, {"id": 4332, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#memory-overhead", "display_name": "Memory overhead", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "memory-overhead", "priority": -1, "content": "CUPTI allocates device and pinned system memory for storing the tracing information: Static memory allocation: CUPTI allocates 3 buffers of 3 MB each in the pinned system memory for each CUDA context by default during the context creation phase. This is used for storing the concurrent kernel, serial kernel, memcopy and memset tracing information and these buffers are sufficient for storing information for about 300K such activities. The number of buffers is controlled using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE and the size of the buffer is determined by the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE . User can change the buffer size at any time during the profiling session, but this setting takes effect only for new buffer allocations. It is recommended to adjust the buffer size before the creation of any CUDA context to make sure that all the pre-allocated buffers are of the adjusted size. Dynamic memory allocation: Once profiling buffers to store the tracing information are exhausted, CUPTI allocates another buffer of the same size. Note that memory footprint will not always scale with the kernel, memcopy, memset count because CUPTI reuses the buffer after processing all the records in the buffer. For applications with a high density of these activities CUPTI may allocate more buffers. All of the CUPTI allocated memory associated with a context is freed when the context is destroyed. Memory allocation overhead is attributed as CUPTI_ACTIVITY_OVERHEAD_CUPTI_RESOURCE in the activity record CUpti_ActivityOverhead2 . If there are no CUDA contexts created then CUPTI will not allocate corresponding buffers. CUPTI allocates memory to store unique kernel names, NVTX ranges, CUDA module cubin: Kernel trace: For kernel tracing enabled using the activity kind CUPTI_ACTIVITY_KIND_KERNEL or CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL CUPTI allocates memory to store the kernel name in the records. It is recommended to not free the memory allocated for the kernel name in the kernel activity record as the kernel name memory space might be common across all kernel records having the same kernel name. NVTX ranges: For NVTX enabled using the activity kind CUPTI_ACTIVITY_KIND_MARKER CUPTI allocates memory to store the range name in the records. It is recommended to not free the memory allocated for the NVTX range name in the marker activity record as the NVTX range name memory space will be common across all NVTX range records having the same name. CUDA module cubin: CUPTI caches copies of cubin images at the time of loading CUDA modules. This is done only for the profiling features that need it are enabled. All of the CUPTI allocated memory associated with the cubin image of the module is freed when the module is unloaded.", "keywords": []}, {"id": 4333, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#metrics-for-capability-5-x", "display_name": "Metrics for Capability 5.x", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "metrics-for-capability-5-x", "priority": -1, "content": "Devices with compute capability 5.x implement the metrics shown in the following table. Note that for some metrics, the \u201cMulti-context\u201d scope is supported only for specific devices. Such metrics are marked with \u201cMulti-context * \u201d under the \u201cScope\u201d column. Refer to the note at the bottom of the table. Metric Name Description Scope achieved_occupancy Ratio of the average active warps per active cycle to the maximum number of warps supported on a multiprocessor Multi-context atomic_transactions Global memory atomic and reduction transactions Multi-context atomic_transactions_per_request Average number of global memory atomic and reduction transactions performed for each atomic and reduction instruction Multi-context branch_efficiency Ratio of non-divergent branches to total branches expressed as percentage Multi-context cf_executed Number of executed control-flow instructions Multi-context cf_fu_utilization The utilization level of the multiprocessor function units that execute control-flow instructions on a scale of 0 to 10 Multi-context cf_issued Number of issued control-flow instructions Multi-context double_precision_fu_utilization The utilization level of the multiprocessor function units that execute double-precision floating-point instructions on a scale of 0 to 10 Multi-context dram_read_bytes Total bytes read from DRAM to L2 cache. This is available for compute capability 5.0 and 5.2. Multi-context * dram_read_throughput Device memory read throughput. This is available for compute capability 5.0 and 5.2. Multi-context * dram_read_transactions Device memory read transactions. This is available for compute capability 5.0 and 5.2. Multi-context * dram_utilization The utilization level of the device memory relative to the peak utilization on a scale of 0 to 10 Multi-context * dram_write_bytes Total bytes written from L2 cache to DRAM. This is available for compute capability 5.0 and 5.2. Multi-context * dram_write_throughput Device memory write throughput. This is available for compute capability 5.0 and 5.2. Multi-context * dram_write_transactions Device memory write transactions. This is available for compute capability 5.0 and 5.2. Multi-context * ecc_throughput ECC throughput from L2 to DRAM. This is available for compute capability 5.0 and 5.2. Multi-context * ecc_transactions Number of ECC transactions between L2 and DRAM. This is available for compute capability 5.0 and 5.2. Multi-context * eligible_warps_per_cycle Average number of warps that are eligible to issue per active cycle Multi-context flop_count_dp Number of double-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. Multi-context flop_count_dp_add Number of double-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_dp_fma Number of double-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_dp_mul Number of double-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_hp Number of half-precision floating-point operations executed by non-predicated threads (add, multiply and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. This is available for compute capability 5.3. Multi-context * flop_count_hp_add Number of half-precision floating-point add operations executed by non-predicated threads. This is available for compute capability 5.3. Multi-context * flop_count_hp_fma Number of half-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. This is available for compute capability 5.3. Multi-context * flop_count_hp_mul Number of half-precision floating-point multiply operations executed by non-predicated threads. This is available for compute capability 5.3. Multi-context * flop_count_sp Number of single-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. The count does not include special operations. Multi-context flop_count_sp_add Number of single-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_sp_fma Number of single-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_sp_mul Number of single-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_sp_special Number of single-precision floating-point special operations executed by non-predicated threads. Multi-context flop_dp_efficiency Ratio of achieved to peak double-precision floating-point operations Multi-context flop_hp_efficiency Ratio of achieved to peak half-precision floating-point operations. This is available for compute capability 5.3. Multi-context * flop_sp_efficiency Ratio of achieved to peak single-precision floating-point operations Multi-context gld_efficiency Ratio of requested global memory load throughput to required global memory load throughput expressed as percentage. Multi-context * gld_requested_throughput Requested global memory load throughput Multi-context gld_throughput Global memory load throughput Multi-context * gld_transactions Number of global memory load transactions Multi-context * gld_transactions_per_request Average number of global memory load transactions performed for each global memory load. Multi-context * global_atomic_requests Total number of global atomic(Atom and Atom CAS) requests from Multiprocessor Multi-context global_hit_rate Hit rate for global loads in unified l1/tex cache. Metric value maybe wrong if malloc is used in kernel. Multi-context * global_load_requests Total number of global load requests from Multiprocessor Multi-context global_reduction_requests Total number of global reduction requests from Multiprocessor Multi-context global_store_requests Total number of global store requests from Multiprocessor. This does not include atomic requests. Multi-context gst_efficiency Ratio of requested global memory store throughput to required global memory store throughput expressed as percentage. Multi-context * gst_requested_throughput Requested global memory store throughput Multi-context gst_throughput Global memory store throughput Multi-context * gst_transactions Number of global memory store transactions Multi-context * gst_transactions_per_request Average number of global memory store transactions performed for each global memory store Multi-context * half_precision_fu_utilization The utilization level of the multiprocessor function units that execute 16 bit floating-point instructions and integer instructions on a scale of 0 to 10. This is available for compute capability 5.3. Multi-context * inst_bit_convert Number of bit-conversion instructions executed by non-predicated threads Multi-context inst_compute_ld_st Number of compute load/store instructions executed by non-predicated threads Multi-context inst_control Number of control-flow instructions executed by non-predicated threads (jump, branch, etc.) Multi-context inst_executed The number of instructions executed Multi-context inst_executed_global_atomics Warp level instructions for global atom and atom cas Multi-context inst_executed_global_loads Warp level instructions for global loads Multi-context inst_executed_global_reductions Warp level instructions for global reductions Multi-context inst_executed_global_stores Warp level instructions for global stores Multi-context inst_executed_local_loads Warp level instructions for local loads Multi-context inst_executed_local_stores Warp level instructions for local stores Multi-context inst_executed_shared_atomics Warp level shared instructions for atom and atom CAS Multi-context inst_executed_shared_loads Warp level instructions for shared loads Multi-context inst_executed_shared_stores Warp level instructions for shared stores Multi-context inst_executed_surface_atomics Warp level instructions for surface atom and atom cas Multi-context inst_executed_surface_loads Warp level instructions for surface loads Multi-context inst_executed_surface_reductions Warp level instructions for surface reductions Multi-context inst_executed_surface_stores Warp level instructions for surface stores Multi-context inst_executed_tex_ops Warp level instructions for texture Multi-context inst_fp_16 Number of half-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) This is available for compute capability 5.3. Multi-context * inst_fp_32 Number of single-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_fp_64 Number of double-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_integer Number of integer instructions executed by non-predicated threads Multi-context inst_inter_thread_communication Number of inter-thread communication instructions executed by non-predicated threads Multi-context inst_issued The number of instructions issued Multi-context inst_misc Number of miscellaneous instructions executed by non-predicated threads Multi-context inst_per_warp Average number of instructions executed by each warp Multi-context inst_replay_overhead Average number of replays for each instruction executed Multi-context ipc Instructions executed per cycle Multi-context issue_slot_utilization Percentage of issue slots that issued at least one instruction, averaged across all cycles Multi-context issue_slots The number of issue slots used Multi-context issued_ipc Instructions issued per cycle Multi-context l2_atomic_throughput Memory read throughput seen at L2 cache for atomic and reduction requests Multi-context l2_atomic_transactions Memory read transactions seen at L2 cache for atomic and reduction requests Multi-context * l2_global_atomic_store_bytes Bytes written to L2 from Unified cache for global atomics (ATOM and ATOM CAS) Multi-context * l2_global_load_bytes Bytes read from L2 for misses in Unified Cache for global loads Multi-context * l2_global_reduction_bytes Bytes written to L2 from Unified cache for global reductions Multi-context * l2_local_global_store_bytes Bytes written to L2 from Unified Cache for local and global stores. This does not include global atomics. Multi-context * l2_local_load_bytes Bytes read from L2 for misses in Unified Cache for local loads Multi-context * l2_read_throughput Memory read throughput seen at L2 cache for all read requests Multi-context * l2_read_transactions Memory read transactions seen at L2 cache for all read requests Multi-context * l2_surface_atomic_store_bytes Bytes transferred between Unified Cache and L2 for surface atomics (ATOM and ATOM CAS) Multi-context * l2_surface_load_bytes Bytes read from L2 for misses in Unified Cache for surface loads Multi-context * l2_surface_reduction_bytes Bytes written to L2 from Unified Cache for surface reductions Multi-context * l2_surface_store_bytes Bytes written to L2 from Unified Cache for surface stores. This does not include surface atomics. Multi-context * l2_tex_hit_rate Hit rate at L2 cache for all requests from texture cache Multi-context * l2_tex_read_hit_rate Hit rate at L2 cache for all read requests from texture cache. This is available for compute capability 5.0 and 5.2. Multi-context * l2_tex_read_throughput Memory read throughput seen at L2 cache for read requests from the texture cache Multi-context * l2_tex_read_transactions Memory read transactions seen at L2 cache for read requests from the texture cache Multi-context * l2_tex_write_hit_rate Hit Rate at L2 cache for all write requests from texture cache. This is available for compute capability 5.0 and 5.2. Multi-context * l2_tex_write_throughput Memory write throughput seen at L2 cache for write requests from the texture cache Multi-context * l2_tex_write_transactions Memory write transactions seen at L2 cache for write requests from the texture cache Multi-context * l2_utilization The utilization level of the L2 cache relative to the peak utilization on a scale of 0 to 10 Multi-context * l2_write_throughput Memory write throughput seen at L2 cache for all write requests Multi-context * l2_write_transactions Memory write transactions seen at L2 cache for all write requests Multi-context * ldst_executed Number of executed local, global, shared and texture memory load and store instructions Multi-context ldst_fu_utilization The utilization level of the multiprocessor function units that execute shared load, shared store and constant load instructions on a scale of 0 to 10 Multi-context ldst_issued Number of issued local, global, shared and texture memory load and store instructions Multi-context local_hit_rate Hit rate for local loads and stores Multi-context * local_load_requests Total number of local load requests from Multiprocessor Multi-context * local_load_throughput Local memory load throughput Multi-context * local_load_transactions Number of local memory load transactions Multi-context * local_load_transactions_per_request Average number of local memory load transactions performed for each local memory load Multi-context * local_memory_overhead Ratio of local memory traffic to total memory traffic between the L1 and L2 caches expressed as percentage Multi-context * local_store_requests Total number of local store requests from Multiprocessor Multi-context * local_store_throughput Local memory store throughput Multi-context * local_store_transactions Number of local memory store transactions Multi-context * local_store_transactions_per_request Average number of local memory store transactions performed for each local memory store Multi-context * pcie_total_data_received Total data bytes received through PCIe Device pcie_total_data_transmitted Total data bytes transmitted through PCIe Device shared_efficiency Ratio of requested shared memory throughput to required shared memory throughput expressed as percentage Multi-context * shared_load_throughput Shared memory load throughput Multi-context * shared_load_transactions Number of shared memory load transactions Multi-context * shared_load_transactions_per_request Average number of shared memory load transactions performed for each shared memory load Multi-context * shared_store_throughput Shared memory store throughput Multi-context * shared_store_transactions Number of shared memory store transactions Multi-context * shared_store_transactions_per_request Average number of shared memory store transactions performed for each shared memory store Multi-context * shared_utilization The utilization level of the shared memory relative to peak utilization on a scale of 0 to 10 Multi-context * single_precision_fu_utilization The utilization level of the multiprocessor function units that execute single-precision floating-point instructions and integer instructions on a scale of 0 to 10 Multi-context sm_efficiency The percentage of time at least one warp is active on a specific multiprocessor Multi-context * special_fu_utilization The utilization level of the multiprocessor function units that execute sin, cos, ex2, popc, flo, and similar instructions on a scale of 0 to 10 Multi-context stall_constant_memory_dependency Percentage of stalls occurring because of immediate constant cache miss Multi-context stall_exec_dependency Percentage of stalls occurring because an input required by the instruction is not yet available Multi-context stall_inst_fetch Percentage of stalls occurring because the next assembly instruction has not yet been fetched Multi-context stall_memory_dependency Percentage of stalls occurring because a memory operation cannot be performed due to the required resources not being available or fully utilized, or because too many requests of a given type are outstanding Multi-context stall_memory_throttle Percentage of stalls occurring because of memory throttle Multi-context stall_not_selected Percentage of stalls occurring because warp was not selected Multi-context stall_other Percentage of stalls occurring due to miscellaneous reasons Multi-context stall_pipe_busy Percentage of stalls occurring because a compute operation cannot be performed because the compute pipeline is busy Multi-context stall_sync Percentage of stalls occurring because the warp is blocked at a __syncthreads() call Multi-context stall_texture Percentage of stalls occurring because the texture sub-system is fully utilized or has too many outstanding requests Multi-context surface_atomic_requests Total number of surface atomic(Atom and Atom CAS) requests from Multiprocessor Multi-context surface_load_requests Total number of surface load requests from Multiprocessor Multi-context surface_reduction_requests Total number of surface reduction requests from Multiprocessor Multi-context surface_store_requests Total number of surface store requests from Multiprocessor Multi-context sysmem_read_bytes Number of bytes read from system memory Multi-context * sysmem_read_throughput System memory read throughput Multi-context * sysmem_read_transactions Number of system memory read transactions Multi-context * sysmem_read_utilization The read utilization level of the system memory relative to the peak utilization on a scale of 0 to 10. This is available for compute capability 5.0 and 5.2. Multi-context sysmem_utilization The utilization level of the system memory relative to the peak utilization on a scale of 0 to 10. This is available for compute capability 5.0 and 5.2. Multi-context * sysmem_write_bytes Number of bytes written to system memory Multi-context * sysmem_write_throughput System memory write throughput Multi-context * sysmem_write_transactions Number of system memory write transactions Multi-context * sysmem_write_utilization The write utilization level of the system memory relative to the peak utilization on a scale of 0 to 10. This is available for compute capability 5.0 and 5.2. Multi-context * tex_cache_hit_rate Unified cache hit rate Multi-context * tex_cache_throughput Unified cache throughput Multi-context * tex_cache_transactions Unified cache read transactions Multi-context * tex_fu_utilization The utilization level of the multiprocessor function units that execute global, local and texture memory instructions on a scale of 0 to 10 Multi-context tex_utilization The utilization level of the unified cache relative to the peak utilization on a scale of 0 to 10 Multi-context * texture_load_requests Total number of texture Load requests from Multiprocessor Multi-context warp_execution_efficiency Ratio of the average active threads per warp to the maximum number of threads per warp supported on a multiprocessor Multi-context warp_nonpred_execution_efficiency Ratio of the average active threads per warp executing non-predicated instructions to the maximum number of threads per warp supported on a multiprocessor Multi-context * The \u201cMulti-context\u201d scope for this metric is supported only for devices with compute capability 5.0 and 5.2.", "keywords": []}, {"id": 4334, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#metrics-for-capability-6-x", "display_name": "Metrics for Capability 6.x", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "metrics-for-capability-6-x", "priority": -1, "content": "Devices with compute capability 6.x implement the metrics shown in the following table. Metric Name Description Scope achieved_occupancy Ratio of the average active warps per active cycle to the maximum number of warps supported on a multiprocessor Multi-context atomic_transactions Global memory atomic and reduction transactions Multi-context atomic_transactions_per_request Average number of global memory atomic and reduction transactions performed for each atomic and reduction instruction Multi-context branch_efficiency Ratio of non-divergent branches to total branches expressed as percentage Multi-context cf_executed Number of executed control-flow instructions Multi-context cf_fu_utilization The utilization level of the multiprocessor function units that execute control-flow instructions on a scale of 0 to 10 Multi-context cf_issued Number of issued control-flow instructions Multi-context double_precision_fu_utilization The utilization level of the multiprocessor function units that execute double-precision floating-point instructions on a scale of 0 to 10 Multi-context dram_read_bytes Total bytes read from DRAM to L2 cache Multi-context dram_read_throughput Device memory read throughput. This is available for compute capability 6.0 and 6.1. Multi-context dram_read_transactions Device memory read transactions. This is available for compute capability 6.0 and 6.1. Multi-context dram_utilization The utilization level of the device memory relative to the peak utilization on a scale of 0 to 10 Multi-context dram_write_bytes Total bytes written from L2 cache to DRAM Multi-context dram_write_throughput Device memory write throughput. This is available for compute capability 6.0 and 6.1. Multi-context dram_write_transactions Device memory write transactions. This is available for compute capability 6.0 and 6.1. Multi-context ecc_throughput ECC throughput from L2 to DRAM. This is available for compute capability 6.1. Multi-context ecc_transactions Number of ECC transactions between L2 and DRAM. This is available for compute capability 6.1. Multi-context eligible_warps_per_cycle Average number of warps that are eligible to issue per active cycle Multi-context flop_count_dp Number of double-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. Multi-context flop_count_dp_add Number of double-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_dp_fma Number of double-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_dp_mul Number of double-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_hp Number of half-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. Multi-context flop_count_hp_add Number of half-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_hp_fma Number of half-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_hp_mul Number of half-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_sp Number of single-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. The count does not include special operations. Multi-context flop_count_sp_add Number of single-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_sp_fma Number of single-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_sp_mul Number of single-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_sp_special Number of single-precision floating-point special operations executed by non-predicated threads. Multi-context flop_dp_efficiency Ratio of achieved to peak double-precision floating-point operations Multi-context flop_hp_efficiency Ratio of achieved to peak half-precision floating-point operations Multi-context flop_sp_efficiency Ratio of achieved to peak single-precision floating-point operations Multi-context gld_efficiency Ratio of requested global memory load throughput to required global memory load throughput expressed as percentage. Multi-context gld_requested_throughput Requested global memory load throughput Multi-context gld_throughput Global memory load throughput Multi-context gld_transactions Number of global memory load transactions Multi-context gld_transactions_per_request Average number of global memory load transactions performed for each global memory load. Multi-context global_atomic_requests Total number of global atomic(Atom and Atom CAS) requests from Multiprocessor Multi-context global_hit_rate Hit rate for global loads in unified l1/tex cache. Metric value maybe wrong if malloc is used in kernel. Multi-context global_load_requests Total number of global load requests from Multiprocessor Multi-context global_reduction_requests Total number of global reduction requests from Multiprocessor Multi-context global_store_requests Total number of global store requests from Multiprocessor. This does not include atomic requests. Multi-context gst_efficiency Ratio of requested global memory store throughput to required global memory store throughput expressed as percentage. Multi-context gst_requested_throughput Requested global memory store throughput Multi-context gst_throughput Global memory store throughput Multi-context gst_transactions Number of global memory store transactions Multi-context gst_transactions_per_request Average number of global memory store transactions performed for each global memory store Multi-context half_precision_fu_utilization The utilization level of the multiprocessor function units that execute 16 bit floating-point instructions on a scale of 0 to 10 Multi-context inst_bit_convert Number of bit-conversion instructions executed by non-predicated threads Multi-context inst_compute_ld_st Number of compute load/store instructions executed by non-predicated threads Multi-context inst_control Number of control-flow instructions executed by non-predicated threads (jump, branch, etc.) Multi-context inst_executed The number of instructions executed Multi-context inst_executed_global_atomics Warp level instructions for global atom and atom cas Multi-context inst_executed_global_loads Warp level instructions for global loads Multi-context inst_executed_global_reductions Warp level instructions for global reductions Multi-context inst_executed_global_stores Warp level instructions for global stores Multi-context inst_executed_local_loads Warp level instructions for local loads Multi-context inst_executed_local_stores Warp level instructions for local stores Multi-context inst_executed_shared_atomics Warp level shared instructions for atom and atom CAS Multi-context inst_executed_shared_loads Warp level instructions for shared loads Multi-context inst_executed_shared_stores Warp level instructions for shared stores Multi-context inst_executed_surface_atomics Warp level instructions for surface atom and atom cas Multi-context inst_executed_surface_loads Warp level instructions for surface loads Multi-context inst_executed_surface_reductions Warp level instructions for surface reductions Multi-context inst_executed_surface_stores Warp level instructions for surface stores Multi-context inst_executed_tex_ops Warp level instructions for texture Multi-context inst_fp_16 Number of half-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_fp_32 Number of single-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_fp_64 Number of double-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_integer Number of integer instructions executed by non-predicated threads Multi-context inst_inter_thread_communication Number of inter-thread communication instructions executed by non-predicated threads Multi-context inst_issued The number of instructions issued Multi-context inst_misc Number of miscellaneous instructions executed by non-predicated threads Multi-context inst_per_warp Average number of instructions executed by each warp Multi-context inst_replay_overhead Average number of replays for each instruction executed Multi-context ipc Instructions executed per cycle Multi-context issue_slot_utilization Percentage of issue slots that issued at least one instruction, averaged across all cycles Multi-context issue_slots The number of issue slots used Multi-context issued_ipc Instructions issued per cycle Multi-context l2_atomic_throughput Memory read throughput seen at L2 cache for atomic and reduction requests Multi-context l2_atomic_transactions Memory read transactions seen at L2 cache for atomic and reduction requests Multi-context l2_global_atomic_store_bytes Bytes written to L2 from Unified cache for global atomics (ATOM and ATOM CAS) Multi-context l2_global_load_bytes Bytes read from L2 for misses in Unified Cache for global loads Multi-context l2_global_reduction_bytes Bytes written to L2 from Unified cache for global reductions Multi-context l2_local_global_store_bytes Bytes written to L2 from Unified Cache for local and global stores. This does not include global atomics. Multi-context l2_local_load_bytes Bytes read from L2 for misses in Unified Cache for local loads Multi-context l2_read_throughput Memory read throughput seen at L2 cache for all read requests Multi-context l2_read_transactions Memory read transactions seen at L2 cache for all read requests Multi-context l2_surface_atomic_store_bytes Bytes transferred between Unified Cache and L2 for surface atomics (ATOM and ATOM CAS) Multi-context l2_surface_load_bytes Bytes read from L2 for misses in Unified Cache for surface loads Multi-context l2_surface_reduction_bytes Bytes written to L2 from Unified Cache for surface reductions Multi-context l2_surface_store_bytes Bytes written to L2 from Unified Cache for surface stores. This does not include surface atomics. Multi-context l2_tex_hit_rate Hit rate at L2 cache for all requests from texture cache Multi-context l2_tex_read_hit_rate Hit rate at L2 cache for all read requests from texture cache. This is available for compute capability 6.0 and 6.1. Multi-context l2_tex_read_throughput Memory read throughput seen at L2 cache for read requests from the texture cache Multi-context l2_tex_read_transactions Memory read transactions seen at L2 cache for read requests from the texture cache Multi-context l2_tex_write_hit_rate Hit Rate at L2 cache for all write requests from texture cache. This is available for compute capability 6.0 and 6.1. Multi-context l2_tex_write_throughput Memory write throughput seen at L2 cache for write requests from the texture cache Multi-context l2_tex_write_transactions Memory write transactions seen at L2 cache for write requests from the texture cache Multi-context l2_utilization The utilization level of the L2 cache relative to the peak utilization on a scale of 0 to 10 Multi-context l2_write_throughput Memory write throughput seen at L2 cache for all write requests Multi-context l2_write_transactions Memory write transactions seen at L2 cache for all write requests Multi-context ldst_executed Number of executed local, global, shared and texture memory load and store instructions Multi-context ldst_fu_utilization The utilization level of the multiprocessor function units that execute shared load, shared store and constant load instructions on a scale of 0 to 10 Multi-context ldst_issued Number of issued local, global, shared and texture memory load and store instructions Multi-context local_hit_rate Hit rate for local loads and stores Multi-context local_load_requests Total number of local load requests from Multiprocessor Multi-context local_load_throughput Local memory load throughput Multi-context local_load_transactions Number of local memory load transactions Multi-context local_load_transactions_per_request Average number of local memory load transactions performed for each local memory load Multi-context local_memory_overhead Ratio of local memory traffic to total memory traffic between the L1 and L2 caches expressed as percentage Multi-context local_store_requests Total number of local store requests from Multiprocessor Multi-context local_store_throughput Local memory store throughput Multi-context local_store_transactions Number of local memory store transactions Multi-context local_store_transactions_per_request Average number of local memory store transactions performed for each local memory store Multi-context nvlink_overhead_data_received Ratio of overhead data to the total data, received through NVLink. This is available for compute capability 6.0. Device nvlink_overhead_data_transmitted Ratio of overhead data to the total data, transmitted through NVLink. This is available for compute capability 6.0. Device nvlink_receive_throughput Number of bytes received per second through NVLinks. This is available for compute capability 6.0. Device nvlink_total_data_received Total data bytes received through NVLinks including headers. This is available for compute capability 6.0. Device nvlink_total_data_transmitted Total data bytes transmitted through NVLinks including headers. This is available for compute capability 6.0. Device nvlink_total_nratom_data_transmitted Total non-reduction atomic data bytes transmitted through NVLinks. This is available for compute capability 6.0. Device nvlink_total_ratom_data_transmitted Total reduction atomic data bytes transmitted through NVLinks This is available for compute capability 6.0. Device nvlink_total_response_data_received Total response data bytes received through NVLink, response data includes data for read requests and result of non-reduction atomic requests. This is available for compute capability 6.0. Device nvlink_total_write_data_transmitted Total write data bytes transmitted through NVLinks. This is available for compute capability 6.0. Device nvlink_transmit_throughput Number of Bytes Transmitted per second through NVLinks. This is available for compute capability 6.0. Device nvlink_user_data_received User data bytes received through NVLinks, doesn\u2019t include headers. This is available for compute capability 6.0. Device nvlink_user_data_transmitted User data bytes transmitted through NVLinks, doesn\u2019t include headers. This is available for compute capability 6.0. Device nvlink_user_nratom_data_transmitted Total non-reduction atomic user data bytes transmitted through NVLinks. This is available for compute capability 6.0. Device nvlink_user_ratom_data_transmitted Total reduction atomic user data bytes transmitted through NVLinks. This is available for compute capability 6.0. Device nvlink_user_response_data_received Total user response data bytes received through NVLink, response data includes data for read requests and result of non-reduction atomic requests. This is available for compute capability 6.0. Device nvlink_user_write_data_transmitted User write data bytes transmitted through NVLinks. This is available for compute capability 6.0. Device pcie_total_data_received Total data bytes received through PCIe Device pcie_total_data_transmitted Total data bytes transmitted through PCIe Device shared_efficiency Ratio of requested shared memory throughput to required shared memory throughput expressed as percentage Multi-context shared_load_throughput Shared memory load throughput Multi-context shared_load_transactions Number of shared memory load transactions Multi-context shared_load_transactions_per_request Average number of shared memory load transactions performed for each shared memory load Multi-context shared_store_throughput Shared memory store throughput Multi-context shared_store_transactions Number of shared memory store transactions Multi-context shared_store_transactions_per_request Average number of shared memory store transactions performed for each shared memory store Multi-context shared_utilization The utilization level of the shared memory relative to peak utilization on a scale of 0 to 10 Multi-context single_precision_fu_utilization The utilization level of the multiprocessor function units that execute single-precision floating-point instructions and integer instructions on a scale of 0 to 10 Multi-context sm_efficiency The percentage of time at least one warp is active on a specific multiprocessor Multi-context special_fu_utilization The utilization level of the multiprocessor function units that execute sin, cos, ex2, popc, flo, and similar instructions on a scale of 0 to 10 Multi-context stall_constant_memory_dependency Percentage of stalls occurring because of immediate constant cache miss Multi-context stall_exec_dependency Percentage of stalls occurring because an input required by the instruction is not yet available Multi-context stall_inst_fetch Percentage of stalls occurring because the next assembly instruction has not yet been fetched Multi-context stall_memory_dependency Percentage of stalls occurring because a memory operation cannot be performed due to the required resources not being available or fully utilized, or because too many requests of a given type are outstanding Multi-context stall_memory_throttle Percentage of stalls occurring because of memory throttle Multi-context stall_not_selected Percentage of stalls occurring because warp was not selected Multi-context stall_other Percentage of stalls occurring due to miscellaneous reasons Multi-context stall_pipe_busy Percentage of stalls occurring because a compute operation cannot be performed because the compute pipeline is busy Multi-context stall_sync Percentage of stalls occurring because the warp is blocked at a __syncthreads() call Multi-context stall_texture Percentage of stalls occurring because the texture sub-system is fully utilized or has too many outstanding requests Multi-context surface_atomic_requests Total number of surface atomic(Atom and Atom CAS) requests from Multiprocessor Multi-context surface_load_requests Total number of surface load requests from Multiprocessor Multi-context surface_reduction_requests Total number of surface reduction requests from Multiprocessor Multi-context surface_store_requests Total number of surface store requests from Multiprocessor Multi-context sysmem_read_bytes Number of bytes read from system memory Multi-context sysmem_read_throughput System memory read throughput Multi-context sysmem_read_transactions Number of system memory read transactions Multi-context sysmem_read_utilization The read utilization level of the system memory relative to the peak utilization on a scale of 0 to 10. This is available for compute capability 6.0 and 6.1. Multi-context sysmem_utilization The utilization level of the system memory relative to the peak utilization on a scale of 0 to 10. This is available for compute capability 6.0 and 6.1. Multi-context sysmem_write_bytes Number of bytes written to system memory Multi-context sysmem_write_throughput System memory write throughput Multi-context sysmem_write_transactions Number of system memory write transactions Multi-context sysmem_write_utilization The write utilization level of the system memory relative to the peak utilization on a scale of 0 to 10. This is available for compute capability 6.0 and 6.1. Multi-context tex_cache_hit_rate Unified cache hit rate Multi-context tex_cache_throughput Unified cache throughput Multi-context tex_cache_transactions Unified cache read transactions Multi-context tex_fu_utilization The utilization level of the multiprocessor function units that execute global, local and texture memory instructions on a scale of 0 to 10 Multi-context tex_utilization The utilization level of the unified cache relative to the peak utilization on a scale of 0 to 10 Multi-context texture_load_requests Total number of texture Load requests from Multiprocessor Multi-context unique_warps_launched Number of warps launched. Value is unaffected by compute preemption. Multi-context warp_execution_efficiency Ratio of the average active threads per warp to the maximum number of threads per warp supported on a multiprocessor Multi-context warp_nonpred_execution_efficiency Ratio of the average active threads per warp executing non-predicated instructions to the maximum number of threads per warp supported on a multiprocessor Multi-context", "keywords": []}, {"id": 4335, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#metrics-for-capability-7-0", "display_name": "Metrics for Capability 7.0", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "metrics-for-capability-7-0", "priority": -1, "content": "Devices with compute capability 7.0 implement the metrics shown in the following table. Metric Name Description Scope achieved_occupancy Ratio of the average active warps per active cycle to the maximum number of warps supported on a multiprocessor Multi-context atomic_transactions Global memory atomic and reduction transactions Multi-context atomic_transactions_per_request Average number of global memory atomic and reduction transactions performed for each atomic and reduction instruction Multi-context branch_efficiency Ratio of branch instruction to sum of branch and divergent branch instruction Multi-context cf_executed Number of executed control-flow instructions Multi-context cf_fu_utilization The utilization level of the multiprocessor function units that execute control-flow instructions on a scale of 0 to 10 Multi-context cf_issued Number of issued control-flow instructions Multi-context double_precision_fu_utilization The utilization level of the multiprocessor function units that execute double-precision floating-point instructions on a scale of 0 to 10 Multi-context dram_read_bytes Total bytes read from DRAM to L2 cache Multi-context dram_read_throughput Device memory read throughput Multi-context dram_read_transactions Device memory read transactions Multi-context dram_utilization The utilization level of the device memory relative to the peak utilization on a scale of 0 to 10 Multi-context dram_write_bytes Total bytes written from L2 cache to DRAM Multi-context dram_write_throughput Device memory write throughput Multi-context dram_write_transactions Device memory write transactions Multi-context eligible_warps_per_cycle Average number of warps that are eligible to issue per active cycle Multi-context flop_count_dp Number of double-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. Multi-context flop_count_dp_add Number of double-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_dp_fma Number of double-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_dp_mul Number of double-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_hp Number of half-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate contributes 2 or 4 to the count based on the number of inputs. Multi-context flop_count_hp_add Number of half-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_hp_fma Number of half-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate contributes 2 or 4 to the count based on the number of inputs. Multi-context flop_count_hp_mul Number of half-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_sp Number of single-precision floating-point operations executed by non-predicated threads (add, multiply, and multiply-accumulate). Each multiply-accumulate operation contributes 2 to the count. The count does not include special operations. Multi-context flop_count_sp_add Number of single-precision floating-point add operations executed by non-predicated threads. Multi-context flop_count_sp_fma Number of single-precision floating-point multiply-accumulate operations executed by non-predicated threads. Each multiply-accumulate operation contributes 1 to the count. Multi-context flop_count_sp_mul Number of single-precision floating-point multiply operations executed by non-predicated threads. Multi-context flop_count_sp_special Number of single-precision floating-point special operations executed by non-predicated threads. Multi-context flop_dp_efficiency Ratio of achieved to peak double-precision floating-point operations Multi-context flop_hp_efficiency Ratio of achieved to peak half-precision floating-point operations Multi-context flop_sp_efficiency Ratio of achieved to peak single-precision floating-point operations Multi-context gld_efficiency Ratio of requested global memory load throughput to required global memory load throughput expressed as percentage. Multi-context gld_requested_throughput Requested global memory load throughput Multi-context gld_throughput Global memory load throughput Multi-context gld_transactions Number of global memory load transactions Multi-context gld_transactions_per_request Average number of global memory load transactions performed for each global memory load. Multi-context global_atomic_requests Total number of global atomic(Atom and Atom CAS) requests from Multiprocessor Multi-context global_hit_rate Hit rate for global load and store in unified l1/tex cache Multi-context global_load_requests Total number of global load requests from Multiprocessor Multi-context global_reduction_requests Total number of global reduction requests from Multiprocessor Multi-context global_store_requests Total number of global store requests from Multiprocessor. This does not include atomic requests. Multi-context gst_efficiency Ratio of requested global memory store throughput to required global memory store throughput expressed as percentage. Multi-context gst_requested_throughput Requested global memory store throughput Multi-context gst_throughput Global memory store throughput Multi-context gst_transactions Number of global memory store transactions Multi-context gst_transactions_per_request Average number of global memory store transactions performed for each global memory store Multi-context half_precision_fu_utilization The utilization level of the multiprocessor function units that execute 16 bit floating-point instructions on a scale of 0 to 10. Note that this doesn\u2019t specify the utilization level of tensor core unit Multi-context inst_bit_convert Number of bit-conversion instructions executed by non-predicated threads Multi-context inst_compute_ld_st Number of compute load/store instructions executed by non-predicated threads Multi-context inst_control Number of control-flow instructions executed by non-predicated threads (jump, branch, etc.) Multi-context inst_executed The number of instructions executed Multi-context inst_executed_global_atomics Warp level instructions for global atom and atom cas Multi-context inst_executed_global_loads Warp level instructions for global loads Multi-context inst_executed_global_reductions Warp level instructions for global reductions Multi-context inst_executed_global_stores Warp level instructions for global stores Multi-context inst_executed_local_loads Warp level instructions for local loads Multi-context inst_executed_local_stores Warp level instructions for local stores Multi-context inst_executed_shared_atomics Warp level shared instructions for atom and atom CAS Multi-context inst_executed_shared_loads Warp level instructions for shared loads Multi-context inst_executed_shared_stores Warp level instructions for shared stores Multi-context inst_executed_surface_atomics Warp level instructions for surface atom and atom cas Multi-context inst_executed_surface_loads Warp level instructions for surface loads Multi-context inst_executed_surface_reductions Warp level instructions for surface reductions Multi-context inst_executed_surface_stores Warp level instructions for surface stores Multi-context inst_executed_tex_ops Warp level instructions for texture Multi-context inst_fp_16 Number of half-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_fp_32 Number of single-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_fp_64 Number of double-precision floating-point instructions executed by non-predicated threads (arithmetic, compare, etc.) Multi-context inst_integer Number of integer instructions executed by non-predicated threads Multi-context inst_inter_thread_communication Number of inter-thread communication instructions executed by non-predicated threads Multi-context inst_issued The number of instructions issued Multi-context inst_misc Number of miscellaneous instructions executed by non-predicated threads Multi-context inst_per_warp Average number of instructions executed by each warp Multi-context inst_replay_overhead Average number of replays for each instruction executed Multi-context ipc Instructions executed per cycle Multi-context issue_slot_utilization Percentage of issue slots that issued at least one instruction, averaged across all cycles Multi-context issue_slots The number of issue slots used Multi-context issued_ipc Instructions issued per cycle Multi-context l2_atomic_throughput Memory read throughput seen at L2 cache for atomic and reduction requests Multi-context l2_atomic_transactions Memory read transactions seen at L2 cache for atomic and reduction requests Multi-context l2_global_atomic_store_bytes Bytes written to L2 from L1 for global atomics (ATOM and ATOM CAS) Multi-context l2_global_load_bytes Bytes read from L2 for misses in L1 for global loads Multi-context l2_local_global_store_bytes Bytes written to L2 from L1 for local and global stores. This does not include global atomics. Multi-context l2_local_load_bytes Bytes read from L2 for misses in L1 for local loads Multi-context l2_read_throughput Memory read throughput seen at L2 cache for all read requests Multi-context l2_read_transactions Memory read transactions seen at L2 cache for all read requests Multi-context l2_surface_load_bytes Bytes read from L2 for misses in L1 for surface loads Multi-context l2_surface_store_bytes Bytes read from L2 for misses in L1 for surface stores Multi-context l2_tex_hit_rate Hit rate at L2 cache for all requests from texture cache Multi-context l2_tex_read_hit_rate Hit rate at L2 cache for all read requests from texture cache Multi-context l2_tex_read_throughput Memory read throughput seen at L2 cache for read requests from the texture cache Multi-context l2_tex_read_transactions Memory read transactions seen at L2 cache for read requests from the texture cache Multi-context l2_tex_write_hit_rate Hit Rate at L2 cache for all write requests from texture cache Multi-context l2_tex_write_throughput Memory write throughput seen at L2 cache for write requests from the texture cache Multi-context l2_tex_write_transactions Memory write transactions seen at L2 cache for write requests from the texture cache Multi-context l2_utilization The utilization level of the L2 cache relative to the peak utilization on a scale of 0 to 10 Multi-context l2_write_throughput Memory write throughput seen at L2 cache for all write requests Multi-context l2_write_transactions Memory write transactions seen at L2 cache for all write requests Multi-context ldst_executed Number of executed local, global, shared and texture memory load and store instructions Multi-context ldst_fu_utilization The utilization level of the multiprocessor function units that execute shared load, shared store and constant load instructions on a scale of 0 to 10 Multi-context ldst_issued Number of issued local, global, shared and texture memory load and store instructions Multi-context local_hit_rate Hit rate for local loads and stores Multi-context local_load_requests Total number of local load requests from Multiprocessor Multi-context local_load_throughput Local memory load throughput Multi-context local_load_transactions Number of local memory load transactions Multi-context local_load_transactions_per_request Average number of local memory load transactions performed for each local memory load Multi-context local_memory_overhead Ratio of local memory traffic to total memory traffic between the L1 and L2 caches expressed as percentage Multi-context local_store_requests Total number of local store requests from Multiprocessor Multi-context local_store_throughput Local memory store throughput Multi-context local_store_transactions Number of local memory store transactions Multi-context local_store_transactions_per_request Average number of local memory store transactions performed for each local memory store Multi-context nvlink_overhead_data_received Ratio of overhead data to the total data, received through NVLink. Device nvlink_overhead_data_transmitted Ratio of overhead data to the total data, transmitted through NVLink. Device nvlink_receive_throughput Number of bytes received per second through NVLinks. Device nvlink_total_data_received Total data bytes received through NVLinks including headers. Device nvlink_total_data_transmitted Total data bytes transmitted through NVLinks including headers. Device nvlink_total_nratom_data_transmitted Total non-reduction atomic data bytes transmitted through NVLinks. Device nvlink_total_ratom_data_transmitted Total reduction atomic data bytes transmitted through NVLinks. Device nvlink_total_response_data_received Total response data bytes received through NVLink, response data includes data for read requests and result of non-reduction atomic requests. Device nvlink_total_write_data_transmitted Total write data bytes transmitted through NVLinks. Device nvlink_transmit_throughput Number of Bytes Transmitted per second through NVLinks. Device nvlink_user_data_received User data bytes received through NVLinks, doesn\u2019t include headers. Device nvlink_user_data_transmitted User data bytes transmitted through NVLinks, doesn\u2019t include headers. Device nvlink_user_nratom_data_transmitted Total non-reduction atomic user data bytes transmitted through NVLinks. Device nvlink_user_ratom_data_transmitted Total reduction atomic user data bytes transmitted through NVLinks. Device nvlink_user_response_data_received Total user response data bytes received through NVLink, response data includes data for read requests and result of non-reduction atomic requests. Device nvlink_user_write_data_transmitted User write data bytes transmitted through NVLinks. Device pcie_total_data_received Total data bytes received through PCIe Device pcie_total_data_transmitted Total data bytes transmitted through PCIe Device shared_efficiency Ratio of requested shared memory throughput to required shared memory throughput expressed as percentage Multi-context shared_load_throughput Shared memory load throughput Multi-context shared_load_transactions Number of shared memory load transactions Multi-context shared_load_transactions_per_request Average number of shared memory load transactions performed for each shared memory load Multi-context shared_store_throughput Shared memory store throughput Multi-context shared_store_transactions Number of shared memory store transactions Multi-context shared_store_transactions_per_request Average number of shared memory store transactions performed for each shared memory store Multi-context shared_utilization The utilization level of the shared memory relative to peak utilization on a scale of 0 to 10 Multi-context single_precision_fu_utilization The utilization level of the multiprocessor function units that execute single-precision floating-point instructions on a scale of 0 to 10 Multi-context sm_efficiency The percentage of time at least one warp is active on a specific multiprocessor Multi-context special_fu_utilization The utilization level of the multiprocessor function units that execute sin, cos, ex2, popc, flo, and similar instructions on a scale of 0 to 10 Multi-context stall_constant_memory_dependency Percentage of stalls occurring because of immediate constant cache miss Multi-context stall_exec_dependency Percentage of stalls occurring because an input required by the instruction is not yet available Multi-context stall_inst_fetch Percentage of stalls occurring because the next assembly instruction has not yet been fetched Multi-context stall_memory_dependency Percentage of stalls occurring because a memory operation cannot be performed due to the required resources not being available or fully utilized, or because too many requests of a given type are outstanding Multi-context stall_memory_throttle Percentage of stalls occurring because of memory throttle Multi-context stall_not_selected Percentage of stalls occurring because warp was not selected Multi-context stall_other Percentage of stalls occurring due to miscellaneous reasons Multi-context stall_pipe_busy Percentage of stalls occurring because a compute operation cannot be performed because the compute pipeline is busy Multi-context stall_sleeping Percentage of stalls occurring because warp was sleeping Multi-context stall_sync Percentage of stalls occurring because the warp is blocked at a __syncthreads() call Multi-context stall_texture Percentage of stalls occurring because the texture sub-system is fully utilized or has too many outstanding requests Multi-context surface_atomic_requests Total number of surface atomic(Atom and Atom CAS) requests from Multiprocessor Multi-context surface_load_requests Total number of surface load requests from Multiprocessor Multi-context surface_reduction_requests Total number of surface reduction requests from Multiprocessor Multi-context surface_store_requests Total number of surface store requests from Multiprocessor Multi-context sysmem_read_bytes Number of bytes read from system memory Multi-context sysmem_read_throughput System memory read throughput Multi-context sysmem_read_transactions Number of system memory read transactions Multi-context sysmem_read_utilization The read utilization level of the system memory relative to the peak utilization on a scale of 0 to 10 Multi-context sysmem_utilization The utilization level of the system memory relative to the peak utilization on a scale of 0 to 10 Multi-context sysmem_write_bytes Number of bytes written to system memory Multi-context sysmem_write_throughput System memory write throughput Multi-context sysmem_write_transactions Number of system memory write transactions Multi-context sysmem_write_utilization The write utilization level of the system memory relative to the peak utilization on a scale of 0 to 10 Multi-context tensor_precision_fu_utilization The utilization level of the multiprocessor function units that execute tensor core instructions on a scale of 0 to 10 Multi-context tensor_int_fu_utilization The utilization level of the multiprocessor function units that execute tensor core int8 instructions on a scale of 0 to 10. This metric is only available for device with compute capability 7.2. Multi-context tex_cache_hit_rate Unified cache hit rate Multi-context tex_cache_throughput Unified cache to Multiprocessor read throughput Multi-context tex_cache_transactions Unified cache to Multiprocessor read transactions Multi-context tex_fu_utilization The utilization level of the multiprocessor function units that execute global, local and texture memory instructions on a scale of 0 to 10 Multi-context tex_utilization The utilization level of the unified cache relative to the peak utilization on a scale of 0 to 10 Multi-context texture_load_requests Total number of texture Load requests from Multiprocessor Multi-context warp_execution_efficiency Ratio of the average active threads per warp to the maximum number of threads per warp supported on a multiprocessor Multi-context warp_nonpred_execution_efficiency Ratio of the average active threads per warp executing non-predicated instructions to the maximum number of threads per warp supported on a multiprocessor Multi-context", "keywords": []}, {"id": 4336, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#metrics-mapping-table", "display_name": "Metrics Mapping Table", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "metrics-mapping-table", "priority": -1, "content": "The table below lists the CUPTI metrics for devices with compute capability 7.0. For each CUPTI metric the closest equivalent Perfworks metric or formula is given. If no equivalent Perfworks metric is available the column is left blank. Note that there can be some difference in the metric values between the CUPTI metric and the Perfworks metrics. CUPTI Metric Perfworks Metric or Formula achieved_occupancy sm__warps_active.avg.pct_of_peak_sustained_active atomic_transactions l1tex__t_set_accesses_pipe_lsu_mem_global_op_atom.sum + l1tex__t_set_accesses_pipe_lsu_mem_global_op_red.sum atomic_transactions_per_request (l1tex__t_sectors_pipe_lsu_mem_global_op_atom.sum + l1tex__t_sectors_pipe_lsu_mem_global_op_red.sum) / (l1tex__t_requests_pipe_lsu_mem_global_op_atom.sum + l1tex__t_requests_pipe_lsu_mem_global_op_red.sum) branch_efficiency smsp__sass_average_branch_targets_threads_uniform.pct cf_executed smsp__inst_executed_pipe_cbu.sum + smsp__inst_executed_pipe_adu.sum cf_fu_utilization cf_issued double_precision_fu_utilization smsp__inst_executed_pipe_fp64.avg.pct_of_peak_sustained_active dram_read_bytes dram__bytes_read.sum dram_read_throughput dram__bytes_read.sum.per_second dram_read_transactions dram__sectors_read.sum dram_utilization dram__throughput.avg.pct_of_peak_sustained_elapsed dram_write_bytes dram__bytes_write.sum dram_write_throughput dram__bytes_write.sum.per_second dram_write_transactions dram__sectors_write.sum eligible_warps_per_cycle smsp__warps_eligible.sum.per_cycle_active flop_count_dp smsp__sass_thread_inst_executed_op_dadd_pred_on.sum + smsp__sass_thread_inst_executed_op_dmul_pred_on.sum + smsp__sass_thread_inst_executed_op_dfma_pred_on.sum * 2 flop_count_dp_add smsp__sass_thread_inst_executed_op_dadd_pred_on.sum flop_count_dp_fma smsp__sass_thread_inst_executed_op_dfma_pred_on.sum flop_count_dp_mul smsp__sass_thread_inst_executed_op_dmul_pred_on.sum flop_count_hp smsp__sass_thread_inst_executed_op_hadd_pred_on.sum + smsp__sass_thread_inst_executed_op_hmul_pred_on.sum + smsp__sass_thread_inst_executed_op_hfma_pred_on.sum * 2 flop_count_hp_add smsp__sass_thread_inst_executed_op_hadd_pred_on.sum flop_count_hp_fma smsp__sass_thread_inst_executed_op_hfma_pred_on.sum flop_count_hp_mul smsp__sass_thread_inst_executed_op_hmul_pred_on.sum flop_count_sp smsp__sass_thread_inst_executed_op_fadd_pred_on.sum + smsp__sass_thread_inst_executed_op_fmul_pred_on.sum + smsp__sass_thread_inst_executed_op_ffma_pred_on.sum * 2 flop_count_sp_add smsp__sass_thread_inst_executed_op_fadd_pred_on.sum flop_count_sp_fma smsp__sass_thread_inst_executed_op_ffma_pred_on.sum flop_count_sp_mul smsp__sass_thread_inst_executed_op_fmul_pred_on.sum flop_count_sp_special flop_dp_efficiency smsp__sass_thread_inst_executed_ops_dadd_dmul_dfma_pred_on.avg.pct_of_peak_sustained_elapsed flop_hp_efficiency smsp__sass_thread_inst_executed_ops_hadd_hmul_hfma_pred_on.avg.pct_of_peak_sustained_elapsed flop_sp_efficiency smsp__sass_thread_inst_executed_ops_fadd_fmul_ffma_pred_on.avg.pct_of_peak_sustained_elapsed gld_efficiency smsp__sass_average_data_bytes_per_sector_mem_global_op_ld.pct gld_requested_throughput gld_throughput l1tex__t_bytes_pipe_lsu_mem_global_op_ld.sum.per_second gld_transactions l1tex__t_sectors_pipe_lsu_mem_global_op_ld.sum gld_transactions_per_request l1tex__average_t_sectors_per_request_pipe_lsu_mem_global_op_ld.ratio global_atomic_requests l1tex__t_requests_pipe_lsu_mem_global_op_atom.sum global_hit_rate l1tex__t_sectors_pipe_lsu_mem_global_op_{op}_lookup_hit.sum / l1tex__t_sectors_pipe_lsu_mem_global_op_{op}.sum global_load_requests l1tex__t_requests_pipe_lsu_mem_global_op_ld.sum global_reduction_requests l1tex__t_requests_pipe_lsu_mem_global_op_red.sum global_store_requests l1tex__t_requests_pipe_lsu_mem_global_op_st.sum gst_efficiency smsp__sass_average_data_bytes_per_sector_mem_global_op_st.pct gst_requested_throughput gst_throughput l1tex__t_bytes_pipe_lsu_mem_global_op_st.sum.per_second gst_transactions l1tex__t_bytes_pipe_lsu_mem_global_op_st.sum gst_transactions_per_request l1tex__average_t_sectors_per_request_pipe_lsu_mem_global_op_st.ratio half_precision_fu_utilization smsp__inst_executed_pipe_fp16.avg.pct_of_peak_sustained_active inst_bit_convert smsp__sass_thread_inst_executed_op_conversion_pred_on.sum inst_compute_ld_st smsp__sass_thread_inst_executed_op_memory_pred_on.sum inst_control smsp__sass_thread_inst_executed_op_control_pred_on.sum inst_executed smsp__inst_executed.sum inst_executed_global_atomics smsp__sass_inst_executed_op_global_atom.sum inst_executed_global_loads smsp__inst_executed_op_global_ld.sum inst_executed_global_reductions smsp__inst_executed_op_global_red.sum inst_executed_global_stores smsp__inst_executed_op_global_st.sum inst_executed_local_loads smsp__inst_executed_op_local_ld.sum inst_executed_local_stores smsp__inst_executed_op_local_st.sum inst_executed_shared_atomics smsp__inst_executed_op_shared_atom.sum + smsp__inst_executed_op_shared_atom_dot_alu.sum + smsp__inst_executed_op_shared_atom_dot_cas.sum inst_executed_shared_loads smsp__inst_executed_op_shared_ld.sum inst_executed_shared_stores smsp__inst_executed_op_shared_st.sum inst_executed_surface_atomics smsp__inst_executed_op_surface_atom.sum inst_executed_surface_loads smsp__inst_executed_op_surface_ld.sum + smsp__inst_executed_op_shared_atom_dot_alu.sum + smsp__inst_executed_op_shared_atom_dot_cas.sum inst_executed_surface_reductions smsp__inst_executed_op_surface_red.sum inst_executed_surface_stores smsp__inst_executed_op_surface_st.sum inst_executed_tex_ops smsp__inst_executed_op_texture.sum inst_fp_16 smsp__sass_thread_inst_executed_op_fp16_pred_on.sum inst_fp_32 smsp__sass_thread_inst_executed_op_fp32_pred_on.sum inst_fp_64 smsp__sass_thread_inst_executed_op_fp64_pred_on.sum inst_integer smsp__sass_thread_inst_executed_op_integer_pred_on.sum inst_inter_thread_communication smsp__sass_thread_inst_executed_op_inter_thread_communication_pred_on.sum inst_issued smsp__inst_issued.sum inst_misc smsp__sass_thread_inst_executed_op_misc_pred_on.sum inst_per_warp smsp__average_inst_executed_per_warp.ratio inst_replay_overhead ipc smsp__inst_executed.avg.per_cycle_active issue_slot_utilization smsp__issue_active.avg.pct_of_peak_sustained_active issue_slots smsp__inst_issued.sum issued_ipc smsp__inst_issued.avg.per_cycle_active l2_atomic_throughput lts__t_sectors_srcunit_l1_op_atom.sum.per_second l2_atomic_transactions lts__t_sectors_srcunit_l1_op_atom.sum l2_global_atomic_store_bytes lts__t_bytes_equiv_l1sectormiss_pipe_lsu_mem_global_op_atom.sum l2_global_load_bytes lts__t_bytes_equiv_l1sectormiss_pipe_lsu_mem_global_op_ld.sum l2_local_global_store_bytes lts__t_bytes_equiv_l1sectormiss_pipe_lsu_mem_local_op_st.sum + lts__t_bytes_equiv_l1sectormiss_pipe_lsu_mem_global_op_st.sum l2_local_load_bytes lts__t_bytes_equiv_l1sectormiss_pipe_lsu_mem_local_op_ld.sum l2_read_throughput lts__t_sectors_op_read.sum.per_second l2_read_transactions lts__t_sectors_op_read.sum l2_surface_load_bytes lts__t_bytes_equiv_l1sectormiss_pipe_tex_mem_surface_op_ld.sum l2_surface_store_bytes lts__t_bytes_equiv_l1sectormiss_pipe_tex_mem_surface_op_st.sum l2_tex_hit_rate lts__t_sector_hit_rate.pct l2_tex_read_hit_rate lts__t_sector_op_read_hit_rate.pct l2_tex_read_throughput lts__t_sectors_srcunit_tex_op_read.sum.per_second l2_tex_read_transactions lts__t_sectors_srcunit_tex_op_read.sum l2_tex_write_hit_rate lts__t_sector_op_write_hit_rate.pct l2_tex_write_throughput lts__t_sectors_srcunit_tex_op_read.sum.per_second l2_tex_write_transactions lts__t_sectors_srcunit_tex_op_read.sum l2_utilization lts__t_sectors.avg.pct_of_peak_sustained_elapsed l2_write_throughput lts__t_sectors_op_write.sum.per_second l2_write_transactions lts__t_sectors_op_write.sum ldst_executed ldst_fu_utilization smsp__inst_executed_pipe_lsu.avg.pct_of_peak_sustained_active ldst_issued local_hit_rate local_load_requests l1tex__t_requests_pipe_lsu_mem_local_op_ld.sum local_load_throughput l1tex__t_bytes_pipe_lsu_mem_local_op_ld.sum.per_second local_load_transactions l1tex__t_sectors_pipe_lsu_mem_local_op_ld.sum local_load_transactions_per_request l1tex__average_t_sectors_per_request_pipe_lsu_mem_local_op_ld.ratio local_memory_overhead local_store_requests l1tex__t_requests_pipe_lsu_mem_local_op_st.sum local_store_throughput l1tex__t_sectors_pipe_lsu_mem_local_op_st.sum.per_second local_store_transactions l1tex__t_sectors_pipe_lsu_mem_local_op_st.sum local_store_transactions_per_request l1tex__average_t_sectors_per_request_pipe_lsu_mem_local_op_st.ratio nvlink_data_receive_efficiency nvlink_data_transmission_efficiency nvlink_overhead_data_received nvlink_overhead_data_transmitted nvlink_receive_throughput nvlink_total_data_received nvlink_total_data_transmitted nvlink_total_nratom_data_transmitted nvlink_total_ratom_data_transmitted nvlink_total_response_data_received nvlink_total_write_data_transmitted nvlink_transmit_throughput nvlink_user_data_received nvlink_user_data_transmitted nvlink_user_nratom_data_transmitted nvlink_user_ratom_data_transmitted nvlink_user_response_data_received nvlink_user_write_data_transmitted pcie_total_data_received pcie__read_bytes.sum pcie_total_data_transmitted pcie__write_bytes.sum shared_efficiency smsp__sass_average_data_bytes_per_wavefront_mem_shared.pct shared_load_throughput l1tex__data_pipe_lsu_wavefronts_mem_shared_op_ld.sum.per_second shared_load_transactions l1tex__data_pipe_lsu_wavefronts_mem_shared_op_ld.sum shared_load_transactions_per_request shared_store_throughput l1tex__data_pipe_lsu_wavefronts_mem_shared_op_st.sum.per_second shared_store_transactions l1tex__data_pipe_lsu_wavefronts_mem_shared_op_st.sum shared_store_transactions_per_request shared_utilization l1tex__data_pipe_lsu_wavefronts_mem_shared.avg.pct_of_peak_sustained_elapsed single_precision_fu_utilization smsp__pipe_fma_cycles_active.avg.pct_of_peak_sustained_active sm_efficiency smsp__cycles_active.avg.pct_of_peak_sustained_elapsed sm_tex_utilization l1tex__texin_sm2tex_req_cycles_active.avg.pct_of_peak_sustained_elapsed special_fu_utilization smsp__inst_executed_pipe_xu.avg.pct_of_peak_sustained_active stall_constant_memory_dependency smsp__warp_issue_stalled_imc_miss_per_warp_active.pct stall_exec_dependency smsp__warp_issue_stalled_short_scoreboard_per_warp_active.pct + smsp__warp_issue_stalled_wait_per_warp_active.pct stall_inst_fetch smsp__warp_issue_stalled_no_instruction_per_warp_active.pct stall_memory_dependency smsp__warp_issue_stalled_long_scoreboard_per_warp_active.pct stall_memory_throttle smsp__warp_issue_stalled_drain_per_warp_active.pct + smsp__warp_issue_stalled_lg_throttle_per_warp_active.pct stall_not_selected smsp__warp_issue_stalled_not_selected_per_warp_active.pct stall_other smsp__warp_issue_stalled_misc_per_warp_active.pct + smsp__warp_issue_stalled_dispatch_stall_per_warp_active.pct stall_pipe_busy smsp__warp_issue_stalled_mio_throttle_per_warp_active.pct + smsp__warp_issue_stalled_math_pipe_throttle_per_warp_active.pct stall_sleeping smsp__warp_issue_stalled_sleeping_per_warp_active.pct stall_sync smsp__warp_issue_stalled_membar_per_warp_active.pct + smsp__warp_issue_stalled_barrier_per_warp_active.pct stall_texture smsp__warp_issue_stalled_tex_throttle_per_warp_active.pct surface_atomic_requests l1tex__t_requests_pipe_tex_mem_surface_op_atom.sum surface_load_requests l1tex__t_requests_pipe_tex_mem_surface_op_ld.sum surface_reduction_requests l1tex__t_requests_pipe_tex_mem_surface_op_red.sum surface_store_requests l1tex__t_requests_pipe_tex_mem_surface_op_st.sum sysmem_read_bytes lts__t_sectors_aperture_sysmem_op_read* 32 sysmem_read_throughput lts__t_sectors_aperture_sysmem_op_read.sum.per_second sysmem_read_transactions lts__t_sectors_aperture_sysmem_op_read.sum sysmem_read_utilization sysmem_utilization sysmem_write_bytes lts__t_sectors_aperture_sysmem_op_write * 32 sysmem_write_throughput lts__t_sectors_aperture_sysmem_op_write.sum.per_second sysmem_write_transactions lts__t_sectors_aperture_sysmem_op_write.sum sysmem_write_utilization tensor_precision_fu_utilization sm__pipe_tensor_cycles_active.avg.pct_of_peak_sustained_active tex_cache_hit_rate l1tex__t_sector_hit_rate.pct tex_cache_throughput tex_cache_transactions l1tex__lsu_writeback_active.avg.pct_of_peak_sustained_active + l1tex__tex_writeback_active.avg.pct_of_peak_sustained_active tex_fu_utilization smsp__inst_executed_pipe_tex.avg.pct_of_peak_sustained_active tex_sm_tex_utilization l1tex__f_tex2sm_cycles_active.avg.pct_of_peak_sustained_elapsed tex_sm_utilization sm__mio2rf_writeback_active.avg.pct_of_peak_sustained_elapsed tex_utilization texture_load_requests l1tex__t_requests_pipe_tex_mem_texture.sum warp_execution_efficiency smsp__thread_inst_executed_per_inst_executed.ratio warp_nonpred_execution_efficiency smsp__thread_inst_executed_per_inst_executed.pct", "keywords": []}, {"id": 4337, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#metrics-reference", "display_name": "Metrics Reference", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "metrics-reference", "priority": -1, "content": "This section contains detailed descriptions of the metrics that can be collected by the CUPTI. A scope value of \u201cSingle-context\u201d indicates that the metric can only be accurately collected when a single context (CUDA or graphics) is executing on the GPU. A scope value of \u201cMulti-context\u201d indicates that the metric can be accurately collected when multiple contexts are executing on the GPU. A scope value of \u201cDevice\u201d indicates that the metric will be collected at device level, that is, it will include values for all the contexts executing on the GPU.", "keywords": []}, {"id": 4338, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#metrics-table", "display_name": "Metrics Table", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "metrics-table", "priority": -1, "content": "PM sampling supports the collection of a wide variety of metrics. The table below lists some useful metrics that provide insights into the utilization of different units in the GPU. Metric Name Metric details gpc__cycles_elapsed.avg.per_second GPC Clock Frequency: The average GPC clock frequency in hertz. sys__cycles_elapsed.avg.per_second SYS Clock Frequency: The average SYS clock frequency in hertz. The GPU front end (command processor), copy engines, and the performance monitor run at the SYS clock. On Turing and NVIDIA GA100 GPUs the sampling frequency is based upon a period of SYS clocks (not time) so samples per second will vary with SYS clock. On NVIDIA GA10x GPUs the sampling frequency is based upon a fixed frequency clock. The maximum frequency scales linearly with the SYS clock. gr__cycles_active.sum.pct_of_peak_sustained_elapsed GR Active: The percentage of cycles the compute engine is active. The compute engine is active if there is any work in the compute pipe. gr__dispatch_count.avg.pct_of_peak_sustained_elapsed Dispatch Started: The ratio of compute grid launches (dispatches) to the compute pipe to the maximum sustained rate of the compute pipe. tpc__warps_inactive_sm_active_realtime.avg.pct_of_peak_sustained_elapsed Active SM Unused Warp Slots: The ratio of inactive warp slots on the SMs to the maximum number of warps per SM as a percentage. This is an indication of how many more warps may fit on the SMs if occupancy is not limited by a resource such as max warps of a shader type, shared memory, registers per thread, or thread blocks per SM. tpc__warps_inactive_sm_idle_realtime.avg.pct_of_peak_sustained_elapsed Idle SM Unused Warp Slots: The ratio of inactive warps slots due to idle SMs to the the maximum number of warps per SM as a percentage. This is an indicator that the current workload on the SM is not sufficient to put work on all SMs. This can be due to either CPU starving the GPU, current work is too small to saturate the GPU or current work is trailing off but blocking next work. sm__cycles_active.avg.pct_of_peak_sustained_elapsed SMs Active: The ratio of cycles SMs had at least 1 warp in flight (allocated on SM) to the number of cycles as a percentage. A value of 0 indicates all SMs were idle (no warps in flight). A value of 50% can indicate some gradient between all SMs active 50% of the sample period or 50% of SMs active 100% of the sample period. sm__inst_executed_realtime.avg.pct_of_peak_sustained_elapsed SM Issue: The ratio of cycles that SM sub-partitions (warp schedulers) issued an instruction to the number of cycles in the sample period as a percentage. sm__pipe_tensor_cycles_active_realtime.avg.pct_of_peak_sustained_elapsed Tensor Active: The ratio of cycles the SM tensor pipes were active issuing tensor instructions to the number of cycles in the sample period as a percentage. This metric is not available on Turing GPUs for periodic sampling. sm__pipe_shared_cycles_active_realtime.avg.pct_of_peak_sustained_elapsed Tensor Active / FP16 Active: The ratio of cycles the SM tensor pipes or FP16x2 pipes were active issuing tensor instructions to the number of cycles in the sample period as a percentage. This metric is only available for Turing GPUs for periodic sampling. dramc__read_throughput.avg.pct_of_peak_sustained_elapsed DRAM Read Bandwidth: The ratio of cycles the DRAM interface was active reading data to the elapsed cycles in the same period as a percentage. dramc__write_throughput.avg.pct_of_peak_sustained_elapsed DRAM Write Bandwidth: The ratio of cycles the DRAM interface was active writing data to the elapsed cycles in the same period as a percentage. pcie__read_bytes.avg.pct_of_peak_sustained_elapsed PCIe Read Throughput: The ratio of bytes received on the PCIe interface to the maximum number of bytes receivable in the sample period as a percentage. The theoretical value is calculated based upon the PCIe generation and number of lanes. pcie__write_bytes.avg.pct_of_peak_sustained_elapsed PCIe Write Throughput: The ratio of bytes transmitted on the PCIe interface to the maximum number of bytes receivable in the sample period as a percentage. The theoretical value is calculated based upon the PCIe generation and number of lanes. nvlrx__bytes.avg.pct_of_peak_sustained_elapsed NVLink bytes received: The ratio of bytes received on the NVLink interface to the maximum number of bytes receivable in the sample period as a percentage. nvltx__bytes.avg.pct_of_peak_sustained_elapsed NVLink bytes transmitted: The ratio of bytes transmitted on the NVLink interface to the maximum number of bytes transmittable in the sample period as a percentage. pcie__rx_requests_aperture_bar1_op_read.sum pcie__rx_requests_aperture_bar1_op_write.sum PCIe Read/Write Requests to BAR1: BAR1 is a PCI Express (PCIe) interface used to allow the CPU or other devices to directly access GPU memory. The GPU normally transfers memory with its copy engines, which would not show up as BAR1 activity. The GPU drivers on the CPU do a small amount of BAR1 accesses, but heavier traffic is typically coming from other technologies.", "keywords": []}, {"id": 4339, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#migration-to-the-profiling-api", "display_name": "Migration to the Profiling API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "migration-to-the-profiling-api", "priority": -1, "content": "The CUPTI event APIs from the header cupti_events.h and metric APIs from the header cupti_metrics.h will be deprecated in a future CUDA release. The NVIDIA Volta platform is the last architecture on which these APIs are supported. These are being replaced by the Profiling API in the header cupti_profiler_target.h and Perfworks Metric API in the headers nvperf_host.h and nvperf_target.h . These provide low and deterministic profiling overhead on the target system. These APIs also have other significant enhancements such as: Range Profiling Improved metrics Lower overhead for PC Sampling GPU architectures supported by different CUPTI APIs are listed at the table . Both the event and metric APIs and the profiling APIs are supported for Volta. This is to enable transition of code to the profiling APIs. But one cannot mix the usage of the event and metric APIs and the profiling APIs. The Profiling APIs are supported on all CUDA supported platforms except Android. It is important to note that for support of future GPU architectures and feature improvements (such as performance overhead reduction and additional performance metrics), users should use the Profiling APIs. There are few features which are not supported by Profiling APIs, refer to the section for differences from event and metric APIs . However note that there are no changes to the CUPTI Activity and Callback APIs and these will continue to be supported for the current and future GPU architectures.", "keywords": []}, {"id": 4340, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#multi-pass-collection", "display_name": "Multi Pass Collection", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "multi-pass-collection", "priority": -1, "content": "NVIDIA GPU hardware has a limited number of counter registers and cannot collect all possible counters concurrently. There are also limitations on which counters can be collected together in a single pass . This is resolved by replaying the exact same set of GPU workloads multiple times, where each replay is termed a pass . On each pass, a different subset of requested counters are collected. Once all passes are collected, the data is available for evaluation. Certain metrics have many counters as inputs; adding a single metric may require many passes to collect. CUPTI APIs support multi pass collection through different collection attributes. Sample cupti_metric_properties shows how to query number of passes required to collect a set of counters.", "keywords": []}, {"id": 4341, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#nvidia-tools-extension-callbacks", "display_name": "NVIDIA Tools Extension Callbacks", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "nvidia-tools-extension-callbacks", "priority": -1, "content": "Using the callback API with the CUPTI_CB_DOMAIN_NVTX domain, you can associate a callback function with NVIDIA Tools Extension (NVTX) API functions. When an NVTX function is invoked in the application, your callback function is invoked as well. For these domains, the cbdata argument to your callback function will be of the type CUpti_NvtxData . The NVTX library has its own convention for discovering the profiling library that will provide the implementation of the NVTX callbacks. To receive callbacks, you must set the NVTX environment variables appropriately so that when the application calls an NVTX function, your profiling library receives the callbacks. The following code sequence shows a typical initialization sequence to enable NVTX callbacks and activity records. /* Set env so CUPTI-based profiling library loads on first nvtx call. */ char *inj32_path = &quot;/path/to/32-bit/version/of/cupti/based/profiling/library&quot;; char *inj64_path = &quot;/path/to/64-bit/version/of/cupti/based/profiling/library&quot;; setenv(&quot;NVTX_INJECTION32_PATH&quot;, inj32_path, 1); setenv(&quot;NVTX_INJECTION64_PATH&quot;, inj64_path, 1); The following code shows a typical sequence used to associate a callback function with one or more NVTX functions. To simplify the presentation, error checking code has been removed. CUpti_SubscriberHandle subscriber; MyDataStruct *my_data = ...; ... cuptiSubscribe(&amp;subscriber, (CUpti_CallbackFunc)my_callback , my_data); cuptiEnableDomain(1, subscriber, CUPTI_CB_DOMAIN_NVTX); First, cuptiSubscribe is used to initialize a subscriber with the my_callback callback function. Next, cuptiEnableDomain is used to associate that callback with all the NVTX functions. Using this code sequence will cause my_callback to be called once each time any of the NVTX functions are invoked. CUPTI callback API functions cuptiEnableCallback and cuptiEnableAllDomains can also be used to associate NVTX API functions with a callback (see reference below for more information). The following code shows a typical callback function. void CUPTIAPI my_callback(void *userdata, CUpti_CallbackDomain domain, CUpti_CallbackId cbid, const void *cbdata) { const CUpti_NvtxData *nvtxInfo = (CUpti_NvtxData *)cbdata; MyDataStruct *my_data = (MyDataStruct *)userdata; if ((domain == CUPTI_CB_DOMAIN_NVTX) &amp;&amp; (cbid == CUPTI_CBID_NVTX_nvtxRangeStartEx)) { nvtxRangeStartEx_params *params = (nvtxRangeStartEx_params *)nvtxInfo-&gt; functionParams; nvtxRangeId_t *id = (nvtxRangeId_t *)nvtxInfo-&gt;functionReturnValue; ... } ... In your callback function, you use the CUpti_CallbackDomain and CUpti_CallbackID parameters to determine which NVTX API function invocation is causing this callback. In the example above, we are checking for the nvtxRangeStartEx function. The cbdata parameter holds a structure of useful information that can be used within the callback. In this case, we use the functionParams member to access the parameters that were passed to nvtxRangeStartEx . To access the parameters, we first cast functionParams to a structure type corresponding to the nvtxRangeStartEx function. These parameter structures are contained in generated_nvtx_meta.h . We also use functionReturnValue member to access the value returned by nvtxRangeStartEx . To access the return value, we first cast functionReturnValue to the return type corresponding to the nvtxRangeStartEx function. If there is no return value for the NVTX function, functionReturnValue is NULL. The sample cupti_nvtx shows the initialization sequence to enable NVTX callbacks and activity records. If your CUPTI-based profiling library links static CUPTI library, you can define and export your own NvtxInitializeInjection and NvtxInitializeInjection2 functions, which would be called by setting the NVTX environment variables. If you want CUPTI to handle NVTX calls, these functions should call CUPTI\u2019s corresponding initialization functions, as shown in the example below so that when the application calls a NVTX function, your profiling library receives the callbacks. The following code sequence shows how this can be done to receive callbacks and activity records when linking static CUPTI library. /* Set env so CUPTI-based profiling library loads on first nvtx call. */ char *inj32_path = &quot;/path/to/32-bit/version/of/cupti/based/profiling/library&quot;; char *inj64_path = &quot;/path/to/64-bit/version/of/cupti/based/profiling/library&quot;; setenv(&quot;NVTX_INJECTION32_PATH&quot;, inj32_path, 1); setenv(&quot;NVTX_INJECTION64_PATH&quot;, inj64_path, 1); /* Extern the CUPTI NVTX initialization APIs. The APIs are thread-safe */ extern &quot;C&quot; CUptiResult CUPTIAPI cuptiNvtxInitialize(void* pfnGetExportTable); extern &quot;C&quot; CUptiResult CUPTIAPI cuptiNvtxInitialize2(void* pfnGetExportTable); extern &quot;C&quot; int InitializeInjectionNvtx(void* p) { CUptiResult res = cuptiNvtxInitialize(p); return (res == CUPTI_SUCCESS) ? 1 : 0; } extern &quot;C&quot; int InitializeInjectionNvtx2(void* p) { CUptiResult res = cuptiNvtxInitialize2(p); return (res == CUPTI_SUCCESS) ? 1 : 0; } Alternatively, if you want to handle NVTX calls directly in your profiling library, you can attach your own callbacks to the NVTX client in these functions. NVTX v1 and v2 both have the initialization code in a single injection library shared by all users of NVTX in the whole process, so the initialization will happen only once per process. NVTX v3 embeds the initialization code into your own binaries, so if NVTX v3 is in multiple dynamic libraries, each one of those sites will initialize the first time a NVTX call is made from that dynamic library. These first calls could be on different threads. So if you are wiring up your own NVTX handlers, you should ensure that code is thread-safe when called from multiple threads at once.", "keywords": []}, {"id": 4342, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#nvlink", "display_name": "NVLink", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "nvlink", "priority": -1, "content": "NVIDIA NVLink is a high-bandwidth, energy-efficient interconnect that enables fast communication between the CPU and GPU, and between GPUs. CUPTI provides NVLink topology information and NVLink transmit/receive throughput metrics. The activity record CUpti_ActivityNVLink4 , enabled using activity kind CUPTI_ACTIVITY_KIND_NVLink , outputs NVLink topology information in terms of logical NVLinks. A logical NVLink is connected between 2 devices, the device can be of type NPU (NVLink Processing Unit), which can be CPU or GPU. Each device can support up to 18 NVLinks, hence one logical link can comprise of 1 to 18 physical NVLinks. The field physicalNvLinkCount gives the number of physical links in this logical link. The fields portDev0 and portDev1 give information about the slot in which physical NVLinks are connected for a logical link. This port is the same as the instance of NVLink metrics profiled from a device. Therefore, port and instance information should be used to correlate the per-instance metric values with the physical NVLinks, and in turn to the topology. The field flag gives the properties of a logical link, whether the link has access to system memory or peer device memory, and has capabilities to do system memory or peer memory atomics. The field bandwidth gives the bandwidth of the logical link in kilobytes/sec. CUPTI provides some metrics for each physical link. Metrics are provided for data transmitted/received, transmit/receive throughput, and header versus user data overhead for each physical NVLink. These metrics are also provided per packet type (read/write/ atomics/response) to get more detailed insight in the NVLink traffic. This feature is available on devices with compute capability 6.0 and 7.0. For devices with compute capability 8.0, the NVLink topology information is available but NVLink performance metrics ( nvlrx__* and nvltx__* ) are not supported due to a potential application hang during data collection. The nvlink_bandwidth sample shows how to use these APIs to collect NVLink metrics and topology, as well as how to correlate metrics with the topology.", "keywords": []}, {"id": 4343, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#openacc", "display_name": "OpenACC", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "openacc", "priority": -1, "content": "CUPTI supports collecting information for OpenACC applications using the OpenACC tools interface implementation of the PGI runtime. OpenACC profiling is available only on Linux x86_64, IBM POWER and Arm server platform (arm64 SBSA) platforms. This feature also requires PGI runtime version 19.1 or higher. The activity records CUpti_ActivityOpenAccData , CUpti_ActivityOpenAccLaunch , and CUpti_ActivityOpenAccOther are created, representing the three groups of callback events specified in the OpenACC tools interface. CUPTI_ACTIVITY_KIND_OPENACC_DATA , CUPTI_ACTIVITY_KIND_OPENACC_LAUNCH , and CUPTI_ACTIVITY_KIND_OPENACC_OTHER can be enabled to collect the respective activity records. Due to the restrictions of the OpenACC tools interface, CUPTI cannot record OpenACC records from within the client application. Instead, a shared library that exports the acc_register_library function defined in the OpenACC tools interface specification must be implemented. Parameters passed into this function from the OpenACC runtime can be used to initialize the CUPTI OpenACC measurement using cuptiOpenACCInitialize . Before starting the client application, the environment variable ACC_PROFLIB must be set to point to this shared library. cuptiOpenACCInitialize is defined in cupti_openacc.h , which is included by cupti_activity.h . Since the CUPTI OpenACC header is only available on supported platforms, CUPTI clients must define CUPTI_OPENACC_SUPPORT when compiling. The openacc_trace sample shows how to use CUPTI APIs for OpenACC data collection.", "keywords": []}, {"id": 4344, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#other-issues", "display_name": "Other Issues", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "other-issues", "priority": -1, "content": "Beyond variable clock rates and concurrent kernel execution, several other factors can affect application and kernel performance. The driver normally does not stay loaded when not in use. It takes some time to load and initialize the driver, which may affect performance in noticeable and somewhat irreproducible ways. It is possible to keep the driver persistently loaded which will eliminate this initialization overhead. nvidia-persistenced is one tool to configure this; it can also be configured through nvidia-smi .", "keywords": []}, {"id": 4345, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#pc-sampling-api-source-correlation", "display_name": "SASS Source Correlation", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "pc-sampling-api-source-correlation", "priority": -1, "content": "Building SASS source correlation for a PC can be split into two parts: Correlation of a PC to a SASS instruction - PC to SASS correlation is done during PC sampling at run time and the SASS data is available in the PC record. Fields cubinCrc , pcOffset and functionName in the PC record help in correlation of a PC with a SASS instruction. You can extract cubins from the application executable or library using the cuobjdump utility by executing the command cuobjdump -xelf all exe/lib . The cuobjump utility version should match with the CUDA Toolkit version used to build the CUDA application executable or library files. You can find the cubinCrc for extracted cubins using the cuptiGetCubinCrc() API. With the help of cubinCrc you can find out the cubin to which a PC belongs. The cubin can be disassembled using the nvdisasm utility that comes with the CUDA toolkit. Correlation of a SASS instruction to a CUDA source line - Correlation of GPU PC samples to CUDA C source lines can be done offline as well as at runtime with the help of the cuptiGetSassToSourceCorrelation() API. JIT compiled cubins - In case of JIT compiled cubins, it is not possible to extract the cubin from the executable or library. For this case one can subscribe to one of the CUPTI_CBID_RESOURCE_MODULE_LOADED or CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING or CUPTI_CBID_RESOURCE_MODULE_PROFILED callbacks. It returns a CUpti_ModuleResourceData structure having the CUDA binary. This binary can be stored in a file and can be used for offline CUDA C source correlation.", "keywords": []}, {"id": 4346, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#perfworks-metric-api", "display_name": "Perfworks Metric API", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "perfworks-metric-api", "priority": -1, "content": "Introduction: The Perfworks Metric API supports the enumeration, configuration and evaluation of metrics. The binary outputs of the configuration phase are inputs to the CUPTI Range Profiling API . The output of Range Profiling is the CounterData , which is passed to the Derived Metrics Evaluation APIs. GPU Metrics are generally presented as counts, ratios and percentages. The underlying values collected from hardware are raw counters (analogous to CUPTI events), but those details are hidden behind derived metric formulas. The Metric APIs are split into two layers: Derived Metrics and Raw Metrics. Derived Metrics contains the list of named metrics and performs evaluation to numeric results, serving a similar purpose as the previous CUPTI Metric API . Most user interaction will be with derived metrics. Raw Metrics contains the list of raw counters and generates configuration file images analogous to the previous CUPTI Event API . Metric Enumeration Metric Enumeration is the process of listing available counters and metrics. Refer to file List.cpp used by the cupti_metric_properties sample. Metrics are grouped into three types i.e. counters, ratios and throughput. Except ratios metric type each metrics have four type of sub-metrics also known as rollup metrics i.e. sum, avg, min, max. For enumerating supported metrics for a chip, we need to calculate the scratch buffer needed for host operation and to initialize the Metric Evaluator. Call NVPW_CUDA_MetricsEvaluator_CalculateScratchBufferSize for calculating scratch buffer size required for allocating memory for host operations. Call NVPW_CUDA_MetricsEvaluator_Initialize for initializing the Metrics Evaluator which creates a NVPW_MetricsEvaluator object. The outline for enumerating supported counter metrics for a chip: Call NVPW_MetricsEvaluator_GetMetricNames for NVPW_METRIC_TYPE_COUNTER metric type for listing all the counter metrics supported. Call NVPW_MetricsEvaluator_GetSupportedSubmetrics to list all the sub-metric supported for NVPW_METRIC_TYPE_COUNTER metric type. Call NVPW_MetricsEvaluator_GetCounterProperties to give description of the counter and the collection hardware unit. Similarly, for enumerating ratio and throughput metrics we need to pass NVPW_METRIC_TYPE_RATIO and NVPW_METRIC_TYPE_THROUGHPUT as metric types to NVPW_MetricsEvaluator_GetMetricNames and NVPW_MetricsEvaluator_GetSupportedSubmetrics . For more details about the metric properties call NVPW_MetricsEvaluator_GetRatioMetricProperties and NVPW_MetricsEvaluator_GetThroughputMetricProperties respectively. Configuration Workflow Configuration is the process of specifying the metrics that will be collected and how those metrics should be collected. The inputs for this phase are the metric names and metric collection properties. The output for this phase is a ConfigImage and a CounterDataPrefix Image. Refer to file Metric.cpp used by the userrange_profiling sample . The outline for configuring metrics: As input, take a list of metric names. Before creating ConfigImage or CounterDataPrefixImage, we need a list of NVPA_RawMetricRequest for the metrics listed for collection. We need to calculate the scratch buffer size required for the host operation and to initialize the Metric Evaluator like in the Enumeration phase. For each metric, Call NVPW_MetricsEvaluator_ConvertMetricNameToMetricEvalRequest for creating a NVPW_MetricEvalRequest . Call NVPW_MetricsEvaluator_GetMetricRawDependencies which takes the NVPW_MetricsEvaluator and NVPW_MetricEvalRequest as input, for getting raw dependencies for given metrics. Create an NVPA_RawMetricRequest with keepInstances=true and isolated=true Pass the NVPA_RawMetricRequest to NVPW_RawMetricsConfig_AddMetrics for the ConfigImage . Pass the NVPA_RawMetricRequest to NVPW_CounterDataBuilder_AddMetrics for the CounterDataPrefix . Generate binary configuration \u201cimages\u201d (file format in memory): ConfigImage from NVPW_RawMetricsConfig_GetConfigImage CounterDataPrefix from NVPW_CounterDataBuilder_GetCounterDataPrefix Metric Evaluation Metric Evaluation is the process of forming metrics from the counters stored in the CounterData image. Refer to file Eval.cpp used by the userrange_profiling sample . The outline for configuring metrics: As input, take the same list of metric names as used during configuration. As input, take a CounterDataImage collected on a target device. We need to calculate the scratch buffer size required for the host operation and to initialize the Metric Evaluator like in the Enumeration phase. Query the number of ranges collected via NVPW_CounterData_GetNumRanges . For each metric: Call NVPW_MetricsEvaluator_ConvertMetricNameToMetricEvalRequest for creating NVPW_MetricEvalRequest For each range: Call NVPW_Profiler_CounterData_GetRangeDescriptions to retrieve the range\u2019s description, originally set by cuptiProfilerPushRange . Call NVPW_MetricsEvaluator_SetDeviceAttributes to set the current range for evaluation on the NVPW_MetricEvalRequest . Call NVPW_MetricsEvaluator_EvaluateToGpuValues to query an array of numeric values corresponding to each input metric.", "keywords": []}, {"id": 4347, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#pm-sampling-samples", "display_name": "Sample code", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "pm-sampling-samples", "priority": -1, "content": "CUPTI sample pm_sampling has two core functions \u2013 function PmSamplingQueryMetrics() shows how to enumerate all metrics supported by the chip and function PmSamplingCollection() show how to collect PM sampling data for a list of metrics while launching CUDA workloads. Code snippet for enumerating supported PM sampling metrics (refer the PmSamplingQueryMetrics() function in the CUPTI pm_sampling sample): CUpti_Device_GetChipName_Params getChipParams{ CUpti_Device_GetChipName_Params_STRUCT_SIZE }; cuptiDeviceGetChipName(&amp;getChipParams); CUpti_Profiler_Host_Initialize_Params hostInitializeParams = {CUpti_Profiler_Host_Initialize_Params_STRUCT_SIZE}; hostInitializeParams.profilerType = CUPTI_PROFILER_TYPE_PM_SAMPLING; hostInitializeParams.pChipName = m_chipName.c_str(); hostInitializeParams.pCounterAvailabilityImage = counterAvailibilityImage.data(); cuptiProfilerHostInitialize(&amp;hostInitializeParams); m_pHostObject = hostInitializeParams.pHostObject; for (size_t metricTypeIndex = 0; metricTypeIndex &lt; CUPTI_METRIC_TYPE__COUNT; ++metricTypeIndex) { CUpti_Profiler_Host_GetBaseMetrics_Params getBaseMetricsParams {CUpti_Profiler_Host_GetBaseMetrics_Params_STRUCT_SIZE}; getBaseMetricsParams.pHostObject = m_pHostObject; getBaseMetricsParams.metricType = (CUpti_MetricType)metricTypeIndex; cuptiProfilerHostGetBaseMetrics(&amp;getBaseMetricsParams); for (size_t metricIndex = 0; metricIndex &lt; getBaseMetricsParams.numMetrics; ++metricIndex) { metricsList.push_back(getBaseMetricsParams.ppMetricNames[metricIndex]); } } CUpti_Profiler_Host_Deinitialize_Params deinitializeParams = {CUpti_Profiler_Host_Deinitialize_Params_STRUCT_SIZE}; deinitializeParams.pHostObject = m_pHostObject; cuptiProfilerHostDeinitialize(&amp;deinitializeParams); Code snippet for collecting PM sampling data (refer the PmSamplingCollection() function in the CUPTI pm_sampling sample): void PmSamplingCollection() { // 1. Create config image std::vector&lt;uint8_t&gt; configImage; CreateConfigImage(configImage, metrics); // 2. Enable PM sampling and set config for the PM sampling data collection. EnablePmSampling(deviceIndex); SetConfig(configImage, hardwareBufferSize, samplingInterval); // 3. Create counter data image std::vector&lt;uint8_t&gt; counterDataImage; CreateCounterDataImage(maxSamples, metrics, counterDataImage); VectorLaunchWorkLoad vectorWorkLoad; vectorWorkLoad.SetUp(); // 4. Start the PM sampling and launch the CUDA workload StartPmSampling(); // 5. Launch the kernel NUM_OF_ITERATIONS times const size_t NUM_OF_ITERATIONS = 100000; for (size_t ii = 0; ii &lt; NUM_OF_ITERATIONS; ++ii) { vectorWorkLoad.LaunchKernel(); } cudaDeviceSynchronize(); // 6. Stop the PM sampling and join the decode thread StopPmSampling(); // 7. Decode PM Sampling Data DecodeCounterData(counterDataImage); // 8. Print the sample ranges for the collected metrics PrintSampleRanges(counterDataImage); // 9. Disable PM Sampling DisablePmSampling(); } // PrintSampleRanges function void PrintSampleRanges(std::vector&lt;uint8_t&gt; counterDataImage) { CUpti_PmSampling_GetCounterDataInfo_Params counterDataInfo {CUpti_PmSampling_GetCounterDataInfo_Params_STRUCT_SIZE}; counterDataInfo.pCounterDataImage = counterDataImage.data(); counterDataInfo.counterDataImageSize = counterDataImage.size(); cuptiPmSamplingGetCounterDataInfo(&amp;counterDataInfo); for (size_t sampleIndex = 0; sampleIndex &lt; counterDataInfo.numCompletedSamples; ++sampleIndex) { pmSamplingHost.EvaluateCounterData(sampleIndex, metricsList, counterDataImage); } // For reusing the counter data image, reset the counter data image ResetCounterDataImage(counterDataImage); }", "keywords": []}, {"id": 4348, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#pm-sampling-usage", "display_name": "API usage", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "pm-sampling-usage", "priority": -1, "content": "Enumerate metrics (enumeration): CUPTI released a new set of host APIs with cuptiProfilerHost prefix, where users need to create a profiler host object for all the host operations. For PM sampling specific host operation, users need to set the profilerType to CUPTI_PROFILER_TYPE_PM_SAMPLING in the CUpti_Profiler_Host_Initialize_Params object. CUPTI has following host APIs for enumerating metrics and it properties: cuptiProfilerHostGetBaseMetrics() for listing base metrics for a metric type (counter, throughput and ratio). cuptiProfilerHostGetSubMetrics() for listing the submetric for a metric. cuptiProfilerHostGetMetricProperties() for querying the details about a metric like associated hardware unit, metric type and a short description about the metric. CUPTI lists some of the useful metrics in the PM Sampling Metric Table which can be used for initial metric selection which list out various GPU and its component attributes like SM active cycles, GPC and SYS clock frequency and many more. Create config image (configuration): Similar to range profiler, for collecting PM sampling data users need to create a config image blob which will have scheduling information for metrics which were selected for collection. As configuration is a host operation similar to enumeration, users need to initialize the profiler host object before calling any of the configuration APIs. For creating a config image, CUPTI exposes new profiler host APIs like cuptiProfilerHostConfigAddMetrics() API where users will pass the list of metrics as input and then call cuptiProfilerHostGetConfigImageSize() API for getting the size of config image which user need to allocate and finally call the cuptiProfilerHostGetConfigImage() API where users can pass the allocated buffer for storing the scheduling information in the config image. CUPTI also adds another optional API i.e. cuptiProfilerHostGetNumOfPasses() for checking the number of passes required for collecting the sampling data for a given config image. Config images which need more than one pass for collecting sampling data are not supported. Collecting Sampling Data (collection): This operation instructs CUPTI to begin collecting sampling data on a CUDA device at specific intervals or cycles, determined by the trigger type specified in the cuptiPmSamplingSetConfig() API. Collection phase can be divided into 6 subparts: Enable PM Sampling: This is the entry point of the PM sampling process where the user passes the device index on which sampling data will be collected. Use the cuptiPmSamplingEnable() API to create a CUpti_PmSampling_Object object. This stores all the intermediate data and act as an identifier for other target APIs. Set configuration: CUPTI has cuptiPmSamplingSetConfig() API for customizing configuration to the PM sampling process like hardware buffer size where the raw sampling data will be stored, sampling interval specifies the frequency at which sampling triggers will collect the sampling data. This will vary depending on the trigger mode set in the config API. Along with these parameters users need to pass the config image which has the scheduling information, which has been created earlier in the configuration phase. The maximum sampling frequency without buffer overflow events depends on GPU (SM count), GPU load intensity, and overall system load. The bigger the chip and the higher the load, the lower the maximum frequency. If you need higher frequency, you can increase it until you get the overflow event which can be queried while decoding the pm sampling data using cuptiPmSamplingDecodeData() API. CUPTI supports two trigger modes, GPU_SYSCLK_INTERVAL which is based on sys clock frequency and the sample intervals are in terms of clock cycles. And the 2nd one is GPU_TIME_INTERVAL which has fixed frequency and the intervals are in terms of nanoseconds. The GPU_TIME_INTERVAL trigger is not supported in Turing and GA100 chips. Start PM Sampling: After enabling and setting up the configuration for the PM sampling, users need to call the cuptiPmSamplingStart() API which signals CUPTI to start the collection, the raw sampling data will be stored in the hardware buffer. Stop PM Sampling: Users need to call the cuptiPmSamplingStop() API for stopping the collection of sampling data. Decode PM Sampling data: While collection phase all the raw sampling data will be stored in the hardware buffer. CUPTI exposes cuptiPmSamplingDecodeData() API which decodes the raw data and stores it in a counter data image which users need to pass into the API as input. For creating the counter data image refer to this. It is users responsibility to call this decode API for freeing up the hardware buffer for allowing new raw data to get stored in the hardware buffer. This API also outputs some attributes like hardware buffer overflow status, decode stop reasons like end of all the raw data or if the counter data image passed is full. So for long running workload users can call this decode API between the Start and Stop API. The ideal way would be calling it in a separate thread. Refer pm_sampling public sample which shows the decode operation running in parallel with the collection. Disable PM Sampling: For destroying all the resources allocated for PM sampling and ending the PM sampling users can call the cuptiPmSamplingDisable() API. Create Counter data image: For storing the decoded data and using it in the evaluation phase users need to allocate a buffer which CUPTI refer as counter data image. Creating a counter data image is a target operation and should be done after enabling the PM sampling and before calling the decode API call. For creating the counter buffer image, first users need to call cuptiPmSamplingGetCounterDataSize() API for getting the size of buffer needed for allocation. Once users allocate the buffer the buffer needs to be in counter data format where the samples will be stored so to initialize the buffer users have to call cuptiPmSamplingCounterDataImageInitialize() API. This same API can also be used to reset the counter buffer image. Evaluating Counter Data (evaluation): Once the raw data is decoded to counter buffer image, users need to use profiler host APIs for evaluating the counter data for getting sample data in readable format. Users can query the number of completed samples in the counter data using the cuptiPmSamplingGetCounterDataInfo() API. For PM sampling each sample is defined by its start and end time stamps. For getting sample info like start and end timestamps CUPTI has cuptiPmSamplingCounterDataGetSampleInfo() API. The timestamps reported are CPU based time stamps. Then to get the collected metrics values for the sample, cuptiProfilerHostEvaluateToGpuValues() API is used.", "keywords": []}, {"id": 4349, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#profiling-overhead", "display_name": "Profiling Overhead", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "profiling-overhead", "priority": -1, "content": "Events and metrics collection using CUPTI incurs runtime overhead. This overhead depends on the number and type of events and metrics selected. Since each metric is computed from one or more events, metric overhead depends on the number and type of underlying events. The overhead includes time spent in configuration of hardware events and reading of hardware event values. Factors affecting the execution overhead under profiling are: Overhead is less for hardware provided events and metrics. For event and metric APIs, events which are collected using the collection method CUPTI_EVENT_COLLECTION_METHOD_PM or CUPTI_EVENT_COLLECTION_METHOD_SM fall in this category. For Profiling APIs, metrics which don\u2019t have string \u201csass\u201d in the name fall in this category. Software instrumented events and metrics are expensive as CUPTI needs to instrument the kernel to collect these. Further these events and metrics cannot be combined with any other event or metric in the same pass as otherwise instrumented code will also contribute to the event value. For event and metric APIs, the collection method CUPTI_EVENT_COLLECTION_METHOD_INSTRUMENTED fall in this category. For Profiling APIs, metrics which have string \u201csass\u201d in the name fall in this category. In the serial mode, profiling may significantly change the overall performance characteristics of the application because all kernel executions are serialized on the GPU. This is done to enable tight event or metric collection around each kernel. For event and metric APIs, the collection mode CUPTI_EVENT_COLLECTION_MODE_KERNEL , serializes all kernel executions on the GPU that occur between the APIs cuptiEventGroupEnable and cuptiEventGroupDisable . On the other hand, kernel concurrency can be maintained by using the collection mode CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS and restricting profiling to events and metrics that can be collected in a single pass. For Profiling APIs, auto range mode serializes all kernel executions on the GPU. On the other hand, kernel concurrency can be maintained by using the user range mode. When all the requested events or metrics cannot be collected in the single pass due to hardware or software limitations, one needs to replay the exact same set of GPU workloads multiple times. This can be achieved at the kernel granularity by replaying kernel multiple times or by launching the entire application multiple times. CUPTI provides support for kernel replay only. Application replay can be done by the CUPTI client. When kernel replay is used the overhead to save and restore kernel state for each replay pass depends on the amount of device memory used by the kernel. Application replay is expected to perform better than kernel replay for the case when the size of device memory used by the kernel is high.", "keywords": []}, {"id": 4350, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#range-profiling", "display_name": "Range Profiling", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "range-profiling", "priority": -1, "content": "Each profiling session runs a series of replay passes, where each pass contains a sequence of ranges. Every metric enabled in the session\u2019s configuration is collected separately per unique range-stack in the pass. CUPTI supports auto and user defined ranges.", "keywords": []}, {"id": 4351, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#raw-metrics", "display_name": "Raw Metrics", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "raw-metrics", "priority": -1, "content": "The raw metrics layer contains a list of low-level GPU counters, and the \u201cscheduling\u201d logic needed to program the hardware. The binary output files ( ConfigImage and CounterDataPrefix ) can be generated offline, stored on disk, and used on any compatible GPU. They do not need to be generated on a machine where a GPU is available. Refer to Metrics Configuration to see where Raw Metrics fit into the overall data flow of the profiler.", "keywords": []}, {"id": 4352, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#reproducibility", "display_name": "Reproducibility", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "reproducibility", "priority": -1, "content": "Some CUPTI APIs are not guaranteed to return perfectly reproducible results between runs. Numerous factors introduce measurable run-to-run variation in software and hardware performance. There are several suggestions for users who want more reproducible results.", "keywords": []}, {"id": 4353, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#resource-callbacks", "display_name": "Resource Callbacks", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "resource-callbacks", "priority": -1, "content": "Using the callback API with the CUPTI_CB_DOMAIN_RESOURCE domain, you can associate a callback function with some CUDA resource creation and destruction events. For example, when a CUDA context is created, your callback function will be invoked with a callback ID equal to CUPTI_CBID_RESOURCE_CONTEXT_CREATED . For this domain, the cbdata argument to your callback function will be of the type CUpti_ResourceData . Note that APIs cuptiActivityFlush and cuptiActivityFlushAll will result in deadlock when called from stream destroy starting callback identified using callback ID CUPTI_CBID_RESOURCE_STREAM_DESTROY_STARTING .", "keywords": []}, {"id": 4354, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#restrictions", "display_name": "Restrictions", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "restrictions", "priority": -1, "content": "Checkpoints API calls may not be made during a stream capture. They also may not be inserted into a graph. Beyond kernel launches (cuLaunchKernel, standard kernel&lt;&lt;&lt;&gt;&gt;&gt; launches, etc) and memcpy calls, the remaining CUDA and driver API calls have not been validated within a Checkpoint Save and Restore region. Any other CUDA or driver API calls (example - device malloc or free) may work, or may cause undetermined behavior. Additional APIs will be validated to work with the Checkpoint API in future releases. The Checkpoint API does not have visibility into which API calls have been made between cuptiCheckpointSave and cuptiCheckpointRestore calls, and may not be able to correctly detect error cases if unsupported calls have been made. In this case it is possible that device state may only be partially restored by cuptiCheckpointRestore , which may cause functionally incorrect behavior in subsequent device calls. The Checkpoint API only restores functionally visible device state, not performance critical state. Some performance characteristics, such as state of the caches, will not be saved by a checkpoint, and saving or restoring a checkpoint may change the occupancy and alter performance for subsequent device calls. The Checkpoint API makes no attempt to restore host (non-device) state, beyond freeing the resources it internally uses during a call to cuptiCheckpointFree . The Checkpoint API by default uses device memory, host memory, and finally the filesystem to back up the device state. It is possible that addition of a cuptiCheckpointSave causes a later device allocation to fail due to the increased device memory usage. (Similarly, host memory is also used, and may be affected by a checkpoint). To allow the user to guarantee a certain amount of device or host memory remains available for later use, reserveDeviceMB and reserveHostMB fields in the CUpti_Checkpoint struct may be set. Use of these fields will guarantee that the device or host memory will leave that much memory free during a cuptiCheckpointSave call, but may cause the Checkpoint API call performance to degrade due to increased use of slower storage spaces.", "keywords": []}, {"id": 4355, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#sample-code", "display_name": "Sample code", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "sample-code", "priority": -1, "content": "CUPTI sample sass_metric has two core functions \u2013 function ListSupportedMetrics() shows how to enumerate all metrics supported by the chip and function CollectSassMetrics() show how to collect SASS metrics. Code snippet for enumerating SASS metrics (refer the ListSupportedMetrics() function in the CUPTI sass_metric sample): CUpti_Device_GetChipName_Params getChipParams{ CUpti_Device_GetChipName_Params_STRUCT_SIZE }; cuptiDeviceGetChipName(&amp;getChipParams); CUpti_SassMetrics_GetNumOfMetrics_Params getNumOfMetricParams; getNumOfMetricParams.pChipName = getChipParams.pChipName; cuptiSassMetricsGetNumOfMetrics(&amp;getNumOfMetricParams); std::vector&lt;CUpti_SassMetrics_MetricDetails&gt; supportedMetrics(getNumOfMetricParams.numOfMetrics); CUpti_SassMetrics_GetMetrics_Params getMetricsParams {CUpti_SassMetrics_GetMetrics_Params_STRUCT_SIZE}; getMetricsParams.pChipName = getChipParams.pChipName; getMetricsParams.pMetricsList = supportedMetrics.data(); getMetricsParams.numOfMetrics = supportedMetrics.size(); cuptiSassMetricsGetMetrics(&amp;getMetricsParams); for (size_t i = 0; i &lt; supportedMetrics.size(); ++i) { std::cout &lt;&lt; &quot;Metric Name: &quot; &lt;&lt; supportedMetrics[i].pMetricName &lt;&lt; &quot;, MetricID: &quot; &lt;&lt; supportedMetrics[i].metricId &lt;&lt; &quot;, Metric Description: &quot; &lt;&lt; supportedMetrics[i].pMetricDescription &lt;&lt; &quot;\\n&quot;; } Code snippet for collecting SASS metrics (refer the CollectSassMetrics() function in the CUPTI sass_metric sample): cuptiSassMetricsSetConfig(); // Enable SASS Patching sassMetricsEnableParams.enableLazyPatching = 1; cuptiSassMetricsEnable(); // As lazy patching has been enabled, VectorAdd will be patched here at the first launch instance VectorAdd&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(); cuptiSassMetricsGetDataProperties(); if (getDataPropParams.numOfInstances != 0 &amp;&amp; getDataPropParams.numOfPatchedInstructionRecords != 0) { // allocate memory for getting patched data. flushDataParams.numOfInstances = getDataPropParams.numOfInstances; flushDataParams.numOfPatchedInstructionRecords = getDataPropParams.numOfPatchedInstructionRecords; flushDataParams.pMetricsData = (CUpti_SassMetrics_Data*)malloc(getDataPropParams.numOfPatchedInstructionRecords * sizeof(CUpti_SassMetrics_Data)); for (size_t recordIndex = 0; recordIndex &lt; getDataPropParams.numOfPatchedInstructionRecords; ++recordIndex) { flushDataParams.pMetricsData[recordIndex].pInstanceValues = (CUpti_SassMetrics_InstanceValue*) malloc(getDataPropParams.numOfInstances * sizeof(CUpti_SassMetrics_InstanceValue)); } cuptiSassMetricsFlushData(); // Store the data for post-processing the data (e.g. SASS to source correlation) // Cleanup memory } // As this is the first VectorSub launch, the patching will be done here. VectorSub&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(); // As cuptiSassMetricsFlushData() API is not called, VectorSub SASS metric data will be discarded. // All the kernels which were patched earlier will be reset to its original state. cuptiSassMetricsDisable(); // VectorMultiply function will not get patched as it is called outside the enable/disable range. VectorMultiply&lt;&lt;&lt;gridSize, blockSize&gt;&gt;&gt;(); cuptiSassMetricsUnsetConfig();", "keywords": []}, {"id": 4356, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#samples", "display_name": "Samples", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "samples", "priority": -1, "content": "The CUPTI installation includes several samples that demonstrate the use of the CUPTI APIs. These samples can be referred to for the usage of different APIs supported by CUPTI. A sample might not be supported on all GPU architectures, please refer to the section GPU Support for the GPU architectures supported by different CUPTI APIs used in the sample. The samples are: Activity API activity_trace_async This sample shows how to collect a trace of CPU and GPU activity using the new asynchronous activity buffer APIs. callback_timestamp This sample shows how to use the callback API to record a trace of API start and stop times. cuda_graphs_trace This sample shows how to collect the trace of CUDA graphs and correlate the graph node launch to the node creation API using CUPTI callbacks. cuda_memory_trace This sample shows how to collect the trace of CUDA memory operations. The sample also traces CUDA memory operations done via default memory pool. cupti_correlation This sample shows how to do the correlation between CUDA APIs and corresponding GPU activities. cupti_external_correlation This sample shows how to do the correlation of CUDA API activity records with external APIs. cupti_finalize This sample shows how to use API cuptiFinalize() to dynamically detach and attach CUPTI. cupti_nvtx This sample shows how to receive NVTX callbacks and collect NVTX records in CUPTI. cupti_trace_injection This sample shows how to build an injection library using the CUPTI activity and callback APIs. It can be used to trace CUDA APIs and GPU activities for any CUDA application. It does not require the CUDA application to be modified. nvlink_bandwidth This sample shows how to collect NVLink topology and NVLink throughput metrics in continuous mode. openacc_trace This sample shows how to use CUPTI APIs for OpenACC data collection. pc_sampling This sample shows how to collect PC Sampling profiling information for a kernel using the PC Sampling Activity APIs. sass_source_map This sample shows how to generate CUpti_ActivityInstructionExecution records and how to map SASS assembly instructions to CUDA C source. unified_memory This sample shows how to collect information about page transfers for unified memory. Event and Metric APIs callback_event This sample shows how to use both the callback and event APIs to record the events that occur during the execution of a simple kernel. The sample shows the required ordering for synchronization, and for event group enabling, disabling, and reading. callback_metric This sample shows how to use both the callback and metric APIs to record the metric\u2019s events during the execution of a simple kernel, and then use those events to calculate the metric value. cupti_query This sample shows how to query CUDA-enabled devices for their event domains, events, and metrics. event_multi_gpu This sample shows how to use the CUPTI event and CUDA APIs to sample events on a setup with multiple GPUs. The sample shows the required ordering for synchronization, and for event group enabling, disabling, and reading. event_sampling This sample shows how to use the event APIs to sample events using a separate host thread. Profiling API extensions This includes utilities used in some of the samples. autorange_profiling This sample shows how to use profiling APIs to collect metrics in autorange mode. callback_profiling This sample shows how to use callback and profiling APIs to collect the metrics during the execution of a kernel. It shows how to use different phases of profiling i.e. enumeration, configuration, collection and evaluation in the appropriate callbacks. concurrent_profiling This sample shows how to use the profiling API to record metrics from concurrent kernels launched in two different ways - using multiple streams on a single device, and using multiple threads with multiple devices. cupti_metric_properties This sample shows how to query various properties of metrics using the Profiling APIs. The sample shows collection method (hardware or software) and number of passes required to collect a list of metrics. nested_range_profiling This sample shows how to profile nested ranges using the Profiling APIs. profiling_injection This sample for Linux systems shows how to build an injection library which can automatically enable CUPTI\u2019s Profiling API using Auto Ranges with Kernel Replay mode. It can attach to an application which was not instrumented using CUPTI and profile any kernel launches. userrange_profiling This sample shows how to use profiling APIs to collect metrics in user specified range mode. PC Sampling API pc_sampling_continuous This injection sample shows how to collect PC Sampling profiling information using the PC Sampling APIs. A perl script libpc_sampling_continuous.pl is provided to run the CUDA application with different PC sampling options. Use the command ./libpc_sampling_continuous.pl \u2013help to list all the options. The CUDA application code does not need to be modified. Refer the README.txt file shipped with the sample for instructions to build and use the injection library. pc_sampling_start_stop This sample shows how to collect PC Sampling profiling information for kernels within a range using the PC Sampling start/stop APIs. pc_sampling_utility This utility takes the pc sampling data file generated by the pc_sampling_continuous injection library as input. It prints the stall reason counter values at the GPU assembly instruction level. It also does GPU assembly to CUDA-C source correlation and shows the CUDA-C source file name and line number. Refer the README.txt file shipped with the sample for instructions to build and run the utility. PM Sampling API pm_sampling This sample shows the usage of the PM sampling APIs for collecting sampling data for a list of metrics for kernels launched within a range using the PM sampling start/stop APIs. SASS Metric API sass_metric This sample shows how to use the SASS metric API to enumerate metrics supported by a device and how to collect metrics at the source level using SASS patching. Checkpoint API checkpoint_kernels This sample shows how to use the Checkpoint API to restore device memory, allowing a kernel to be replayed, even if it modifies its input data.", "keywords": []}, {"id": 4357, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#sampling-events", "display_name": "Sampling Events", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "sampling-events", "priority": -1, "content": "The event API can also be used to sample event values while a kernel or kernels are executing (as demonstrated by the event_sampling sample). The sample shows one possible way to perform the sampling. The event collection mode is set to CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS so that the event counters run continuously. Two threads are used in event_sampling : one thread schedules the kernels and memcpys that perform the computation, while another thread wakes up periodically to sample an event counter. In this sample, there is no correlation of the event samples with what is happening on the GPU.", "keywords": []}, {"id": 4358, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#sass-metrics-usage", "display_name": "API usage", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "sass-metrics-usage", "priority": -1, "content": "Enumerate metrics: Use the API cuptiSassMetricsGetNumOfMetrics() for the number of metrics supported by the chip. Then allocate the buffer of type CUpti_SassMetrics_MetricDetails and pass it to the API cuptiSassMetricsGetMetrics() where CUPTI will list out all the SASS metrics and put it in the user-allocated buffer. Create config image: For all the selected SASS metrics, create a list of CUpti_SassMetrics_Config structures. For creating the config buffer for a metric we need the metric id and the output granularity for the metric. The metric id can be queried by using the API cuptiSassMetricsGetProperties() . The output granularity tells at what level data will be collected. CUPTI supports collection at three levels - CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_GPU (at GPU level), CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SM (at Streaming Multiprocessor level, the metric instance count will be the number of SMs present in the chip), CUPTI_SASS_METRICS_OUTPUT_GRANULARITY_SMSP (SM sub-partition level, the number of instances will be the sum of all the SMSP present in the chip i.e num of SMs * num of sub-partitions in each SM) Set config for the CUDA device: API cuptiSassMetricsSetConfig() should be used for setting the config on the device for SASS metrics collection. This API takes the device index and list of CUpti_SassMetrics_Config structs as input parameters. Then set the config for the device on which the kernel is running else CUPTI will report a CUPTI_ERROR_INVALID_OPERATION error. Enable SASS metric profiling: After setting the config for the CUDA device one needs to enable SASS patching for the context on which the kernel will be launched using the API cuptSassMetricsEnable() . CUPTI provides control over when the kernel will be patched. For Lazy patching mode, CUPTI will only patch the kernel at the first launch instance and then unpatch the kernel when the API cuptiSassMetricsDisable is called. Otherwise, CUPTI will patch all the kernels in the module for the context, regardless of whether kernels would be launched in the enable/disable range. Set the enableLazyPatching flag to enable the lazy patching mode for profiling. Lazy patching is suitable for applications that have a large number of kernels in the module and a small set of kernels are launched. Flush SASS metric profiling data: Once kernel execution is completed, metric data is stored in an internal format. One needs to query the size of the buffer to store the metrics data. API cuptiSassMetricsGetDataProperties() can be used to query the number of patched instructions and the number of hardware instances. Then allocate the buffer based on retrieved data, where CUPTI will flush the profiled metric data. For flushing the data, call the API cuptiSassMetricsFlushData() . Disable SASS metric profiling: Once the profiling of the kernel is done, call the API cuptiSassMetricsDisable() for resetting the patched kernel and remove all the profiled metric data which has been collected for the kernels. One thing to note is that CUPTI will remove all the metric data which has been collected for kernels launched since the API cuptiSassMetricsFlushData() call. So it is the user\u2019s responsibility to call flush data API for retrieving all the metric data. Calling API cuptiSassMetricsFlushData() after cuptiSassMetricsDisable() will report the error CUPTI_ERROR_INVALID_OPERATION . Unset configuration for the CUDA device: CUPTI maintains internal state for each CUDA device for which SASS metric collection is enabled. API cuptiSassMetricsUnsetConfig() should be called to clean-up the state. This API should be called for each device for which SASS metric collection has been configured.", "keywords": []}, {"id": 4359, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#sass-source-correlation", "display_name": "SASS Source Correlation", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "sass-source-correlation", "priority": -1, "content": "While high-level languages for GPU programming like CUDA C offer a useful level of abstraction, convenience, and maintainability, they inherently hide some of the details of the execution on the hardware. It is sometimes helpful to analyze performance problems for a kernel at the assembly instruction level. Reading assembly language is tedious and challenging; CUPTI can help you to build the correlation between lines in your high-level source code and the executed assembly instructions. Building SASS source correlation for a PC can be split into two parts: Correlation of the PC to SASS instruction - subscribe to any one of the CUPTI_CBID_RESOURCE_MODULE_LOADED , CUPTI_CBID_RESOURCE_MODULE_UNLOAD_STARTING , or CUPTI_CBID_RESOURCE_MODULE_PROFILED callbacks. This returns a CUpti_ModuleResourceData structure having the CUDA binary. The binary can be disassembled using the nvdisasm utility that comes with the CUDA toolkit. An application can have multiple functions and modules, to uniquely identify there is a functionId field in all source level activity records. This uniquely corresponds to a CUPTI_ACTIVITY_KIND_FUNCTION , which has the unique module ID and function ID in the module. Correlation of the SASS instruction to CUDA source line - every source level activity has a sourceLocatorId field which uniquely maps to a record of kind CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR , containing the line and file name information. Please note that multiple PCs can correspond to a single source line. When any source level activity (global access, branch, PC Sampling, etc.) is enabled, a source locator record is generated for the PCs that have the source level results. The record CUpti_ActivityInstructionCorrelation can be used, along with source level activities, to generate SASS assembly instructions to CUDA C source code mapping for all the PCs of the function, and not just the PCs that have the source level results. This can be enabled using the activity kind CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION . The sass_source_map sample shows how to map SASS assembly instructions to CUDA C source.", "keywords": []}, {"id": 4360, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#serialization", "display_name": "Serialization", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "serialization", "priority": -1, "content": "Work may be submitted to the GPU which can run asynchronously and concurrently. This improves performance by using more of the GPU resources at once, but complicates profiling in two ways - first, kernels running concurrently can impact each other through contention for shared resources. Measurements of these shared resources will include the impact of any concurrently kernels, and it may not be possible to determine the particular impact of any given kernel. Second, by contending for resources with other kernels that are running without precisely guaranteed timing, the timing for a given kernel may be impacted in irreproducible ways. When CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL is used to measure kernel timing, kernels are allowed to run concurrently on device. CUPTI_ACTIVITY_KIND_KERNEL may be used instead to measure serialized kernel timing. This will eliminate GPU concurrency within this process, and should provide better run-to-run reproducibility, but the timing may not be as realistic in this mode - kernels will not have to contend for shared resources, which can impact their performance.", "keywords": []}, {"id": 4361, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#stall-reasons-mapping-table", "display_name": "Stall Reasons Mapping Table", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "stall-reasons-mapping-table", "priority": -1, "content": "The table below lists the stall reasons mapping from PC Sampling Activity APIs to PC Sampling APIs. Note: Stall reasons with suffix _not_issued represents latency samples. These samples indicate that no instruction was issued in that cycle from the warp scheduler from where the warp was sampled. PC Sampling Activity API Stall Reasons (common prefix: CUPTI_ACTIVITY_PC_SAMPLING_STALL_) PC Sampling API Stall Reasons (common prefix: smsp__pcsamp_warps_issue_stalled_) NONE selected selected_not_issued INST_FETCH branch_resolving branch_resolving_not_issued no_instructions no_instructions_not_issued EXEC_DEPENDENCY short_scoreboard short_scoreboard_not_issued wait wait_not_issued MEMORY_DEPENDENCY long_scoreboard long_scoreboard_not_issued TEXTURE tex_throttle tex_throttle_not_issued SYNC barrier barrier_not_issued membar membar_not_issued CONSTANT_MEMORY_DEPENDENCY imc_miss imc_miss_not_issued PIPE_BUSY mio_throttle mio_throttle_not_issued math_pipe_throttle math_pipe_throttle_not_issued MEMORY_THROTTLE drain drain_not_issued lg_throttle lg_throttle_not_issued NOT_SELECTED not_selected not_selected_not_issued OTHER misc misc_not_issued dispatch_stall dispatch_stall_not_issued SLEEPING sleeping sleeping_not_issued For PC Sampling APIs, total (smsp__pcsamp_sample_count) and dropped (smsp__pcsamp_samples_data_dropped) sample counts are collected by default.", "keywords": []}, {"id": 4362, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#state-callbacks", "display_name": "State Callbacks", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "state-callbacks", "priority": -1, "content": "Any fatal error encountered by an explicit CUPTI API call is returned by the API itself, whereas errors encountered by CUPTI in the background is returned to the user only during the next explicit CUPTI API call. Using the callback API with the CUPTI_CB_DOMAIN_STATE domain, you can associate a callback function with errors in CUPTI, and receive the reported error instantaneously. For example, when a CUPTI runs into a fatal error, your callback function will be invoked with a callback ID equal to CUPTI_CBID_STATE_FATAL_ERROR . For this domain, the cbdata argument to your callback function will be of the type CUpti_StateData . As part of CUpti_StateData, you can receive the error code of the failure, along with an appropriate error message with possible causes or appropriate links to documentation. The example usage of these callbacks can be found in the CUPTI trace samples.", "keywords": []}, {"id": 4363, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#synchronization-callbacks", "display_name": "Synchronization Callbacks", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "synchronization-callbacks", "priority": -1, "content": "Using the callback API with the CUPTI_CB_DOMAIN_SYNCHRONIZE domain, you can associate a callback function with CUDA context and stream synchronizations. For example, when a CUDA context is synchronized, your callback function will be invoked with a callback ID equal to CUPTI_CBID_SYNCHRONIZE_CONTEXT_SYNCHRONIZED . For this domain, the cbdata argument to your callback function will be of the type CUpti_SynchronizeData .", "keywords": []}, {"id": 4364, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#tracing-overhead", "display_name": "Tracing Overhead", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "tracing-overhead", "priority": -1, "content": "One of the goal of the tracing APIs is to provide a non-invasive collection of the timing information of the CUDA activities. Tracing is a low-overhead mechanism for collecting fine-grained runtime information.", "keywords": []}, {"id": 4365, "doc_id": 4366, "filename": "main/main.html", "domain_name": "page", "name": "main/main#user-range", "display_name": "User Range", "type": "section", "display_type": "Page section", "docname": "main/main", "anchor": "user-range", "priority": -1, "content": "In a session with user range mode, ranges are defined by you, cuptiProfilerPushRange and cuptiProfilerPopRange . Kernel launches are concurrent within a range. This mode is useful for metric data collection around a specific section of code, instead of per-kernel metric collection. Kernel replay is not supported in user range mode. You own the responsibility of replay using cuptiProfilerBeginPass and cuptiProfilerEndPass . User Replay The replay (multiple passes, if needed) is done by the user using the replay API\u2019s cuptiProfilerBeginPass and cuptiProfilerEndPass . It is your responsibility to flush the counter data using cuptiProfilerFlushCounterData before ending the session. Counter collection can be enabled/disabled with cuptiProfilerEnableProfiling and cuptiProfilerDisableProfiling . Refer to the sample userrange_profiling /* Assume Inputs(counterDataImagePrefix and configImage) from configuration phase at host */ void Collection(std::vector&lt;uint8_t&gt;&amp; counterDataImagePrefix, std::vector&lt;uint8_t&gt;&amp; configImage) { CUpti_Profiler_Initialize_Params profilerInitializeParams = {CUpti_Profiler_Initialize_Params_STRUCT_SIZE}; cuptiProfilerInitialize(&amp;profilerInitializeParams); std::vector&lt;uint8_t&gt; counterDataImages; std::vector&lt;uint8_t&gt; counterDataScratchBuffer; CreateCounterDataImage(counterDataImages, counterDataScratchBuffer, counterDataImagePrefix); CUpti_Profiler_BeginSession_Params beginSessionParams = {CUpti_Profiler_BeginSession_Params_STRUCT_SIZE}; CUpti_ProfilerRange profilerRange = CUPTI_UserRange; CUpti_ProfilerReplayMode profilerReplayMode = CUPTI_UserReplay; beginSessionParams.ctx = NULL; beginSessionParams.counterDataImageSize = counterDataImage.size(); beginSessionParams.pCounterDataImage = &amp;counterDataImage[0]; beginSessionParams.counterDataScratchBufferSize = counterDataScratchBuffer.size(); beginSessionParams.pCounterDataScratchBuffer = &amp;counterDataScratchBuffer[0]; beginSessionParams.range = profilerRange; beginSessionParams.replayMode = profilerReplayMode; beginSessionParams.maxRangesPerPass = num_ranges; beginSessionParams.maxLaunchesPerPass = num_ranges; cuptiProfilerBeginSession(&amp;beginSessionParams)); CUpti_Profiler_SetConfig_Params setConfigParams = {CUpti_Profiler_SetConfig_Params_STRUCT_SIZE}; setConfigParams.pConfig = &amp;configImage[0]; setConfigParams.configSize = configImage.size(); cuptiProfilerSetConfig(&amp;setConfigParams)); CUpti_Profiler_FlushCounterData_Params cuptiFlushCounterDataParams = {CUpti_Profiler_FlushCounterData_Params_STRUCT_SIZE}; kernelA&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelA neither profiled, nor replayed CUpti_Profiler_BeginPass_Params beginPassParams = {CUpti_Profiler_BeginPass_Params_STRUCT_SIZE}; CUpti_Profiler_EndPass_Params endPassParams = {CUpti_Profiler_EndPass_Params_STRUCT_SIZE}; cuptiProfilerBeginPass(&amp;beginPassParams); { kernelB&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelB replayed but not profiled CUpti_Profiler_PushRange_Params enableProfilingParams = {CUpti_Profiler_PushRange_Params_STRUCT_SIZE}; pushRangeParams.pRangeName = &quot;RangeA&quot;; cuptiProfilerPushRange(&amp;pushRangeParams); kernelC&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); kernelD&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); cuptiProfilerPopRange(&amp;popRangeParams); // Kernel C and Kernel D are captured in rangeA without any serialization introduced by profiler } cuptiProfilerEndPass(&amp;endPassParams); cuptiProfilerFlushCounterData(&amp;cuptiFlushCounterDataParams); kernelE&lt;&lt;&lt;grid, tids&gt;&gt;&gt;(...); // KernelE not Profiled CUpti_Profiler_UnsetConfig_Params unsetConfigParams = {CUpti_Profiler_UnsetConfig_Params_STRUCT_SIZE}; cuptiProfilerUnsetConfig(&amp;unsetConfigParams); CUpti_Profiler_EndSession_Params endSessionParams = {CUpti_Profiler_EndSession_Params_STRUCT_SIZE}; cuptiProfilerEndSession(&amp;endSessionParams); } Application Replay This replay mode is same as user replay, instead of in process replay, you can replay the whole process again. You will need to update the pass index while setting the config using the cuptiProfilerSetConfig API, and reload the intermediate counterDataImage on each pass.", "keywords": []}, {"id": 4366, "doc_id": 4366, "filename": "main/main.html", "domain_name": "std", "name": "main/main", "display_name": "Usage", "type": "doc", "display_type": "Page", "docname": "main/main", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4367, "doc_id": 4369, "filename": "notices-header/notices-header.html", "domain_name": "page", "name": "notices-header/notices-header#notice", "display_name": "Notice", "type": "section", "display_type": "Page section", "docname": "notices-header/notices-header", "anchor": "notice", "priority": -1, "content": "ALL NVIDIA DESIGN SPECIFICATIONS, REFERENCE BOARDS, FILES, DRAWINGS, DIAGNOSTICS, LISTS, AND OTHER DOCUMENTS (TOGETHER AND SEPARATELY, \u201cMATERIALS\u201d) ARE BEING PROVIDED \u201cAS IS.\u201d NVIDIA MAKES NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE. Information furnished is believed to be accurate and reliable. However, NVIDIA Corporation assumes no responsibility for the consequences of use of such information or for any infringement of patents or other rights of third parties that may result from its use. No license is granted by implication of otherwise under any patent rights of NVIDIA Corporation. Specifications mentioned in this publication are subject to change without notice. This publication supersedes and replaces all other information previously supplied. NVIDIA Corporation products are not authorized as critical components in life support devices or systems without express written approval of NVIDIA Corporation. Trademarks", "keywords": []}, {"id": 4368, "doc_id": 4369, "filename": "notices-header/notices-header.html", "domain_name": "page", "name": "notices-header/notices-header#trademarks", "display_name": "Trademarks", "type": "section", "display_type": "Page section", "docname": "notices-header/notices-header", "anchor": "trademarks", "priority": -1, "content": "NVIDIA and the NVIDIA logo are trademarks or registered trademarks of NVIDIA Corporation in the U.S. and other countries. Other company and product names may be trademarks of the respective companies with which they are associated.", "keywords": []}, {"id": 4369, "doc_id": 4369, "filename": "notices-header/notices-header.html", "domain_name": "std", "name": "notices-header/notices-header", "display_name": "Notices", "type": "doc", "display_type": "Page", "docname": "notices-header/notices-header", "anchor": "", "priority": -1, "content": "", "keywords": []}, {"id": 4370, "doc_id": 4370, "filename": "overview/overview.html", "domain_name": "std", "name": "overview/overview", "display_name": "Overview", "type": "doc", "display_type": "Page", "docname": "overview/overview", "anchor": "", "priority": -1, "content": "The CUDA Profiling Tools Interface (CUPTI) enables the creation of profiling and tracing tools that target CUDA applications. CUPTI provides the following APIs: the Activity API , the Callback API , the Event API , the Metric API , the Profiling API , the Host Profiling API , the Range Profiling API , the PC Sampling API , the PM Sampling API , the SASS Metric API and the Checkpoint API . Using these APIs, you can develop profiling tools that give insight into the CPU and GPU behavior of CUDA applications. CUPTI is delivered as a dynamic library on all platforms supported by CUDA. In this CUPTI document, Tracing refers to the collection of timestamps and additional information for CUDA activities such as CUDA APIs, kernel launches and memory copies during the execution of a CUDA application. Tracing helps in identifying performance issues for the CUDA code by telling you which parts of a program require the most time. Tracing information can be collected using the Activity and Callback APIs. In this CUPTI document, Profiling refers to the collection of GPU performance metrics for a single kernel or a set of kernels in isolation. Profiling might involve multiple replays of the kernel/s or the entire application to collect GPU performance metrics. For Volta and earlier GPU architectures, these metrics can be collected using CUPTI Event and Metric APIs. For Volta and later GPU architectures, the low overhead CUPTI Profiling and Perfworks Metric APIs replace this functionality, and a new CUPTI PC Sampling API is supported. CUPTI API Feature Description Activity Asynchronously record CUDA activities, e.g. CUDA API, Kernel, memory copy Callback CUDA event callback mechanism to notify subscriber that a specific CUDA event executed e.g. \u201cEntering CUDA runtime memory copy\u201d Event Collect kernel performance counters for a kernel execution Metric Collect kernel performance metrics for a kernel execution Profiling Collect performance metrics for a range of execution Host Profiling Host APIs for for enumeration, configuration and evaluation of performance merics Range Profiling Target APIs for collection of performance metrics for a range of execution PC Sampling Collect continuous mode PC Sampling data without serializing kernel execution PM Sampling Collect hardware metrics by sampling the GPU performance monitors (PM) periodically at fixed intervals SASS Metrics Collect kernel performance metrics at the source level using SASS patching Checkpoint Provides support for automatically saving and restoring the functional state of the CUDA device CUPTI Profiling API vs. NVIDIA Nsight Perf SDK CUPTI Profiling API supports profiling of CUDA kernels and it allows collection of GPU performance metrics for a particular kernel or range of kernels at the CUDA context level. NVIDIA Nsight Perf SDK supports graphics APIs (i.e. DirectX, Vulkan, OpenGL) allowing collection of GPU performance metrics at graphics device, context and queue levels. Both NVIDIA Nsight PerfSDK and CUPTI Profiling API share the host APIs (i.e. metrics enumeration, configuration and evaluation) but differ in which GPU APIs they target on the device.", "keywords": []}, {"id": 4371, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#event-and-metric-api", "display_name": "Event and Metric API", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "event-and-metric-api", "priority": -1, "content": "The following are known issues related to Event and Metric API: The CUPTI event APIs from the header cupti_events.h and metric APIs from the header cupti_metrics.h are not supported for the devices with compute capability 7.5 and higher. These are replaced by Profiling API and Perfworks metric API . Refer to the section Migration to the Profiling API . While collecting events in continuous mode, event reporting may be delayed i.e. event values may be returned by a later call to readEvent(s) API and the event values for the last readEvent(s) API may get lost. When profiling events, it is possible that the domain instance that gets profiled gives event value 0 due to absence of workload on the domain instance since CUPTI profiles one instance of the domain by default. To profile all instances of the domain, user can set event group attribute CUPTI_EVENT_GROUP_ATTR_PROFILE_ALL_DOMAIN_INSTANCES through API cuptiEventGroupSetAttribute() . Profiling results might be incorrect for CUDA applications compiled with nvcc version older than 9.0 for devices with compute capability 6.0 and 6.1. Profiling session will continue and CUPTI will notify it using error code CUPTI_ERROR_CUDA_COMPILER_NOT_COMPATIBLE . It is advised to recompile the application code with nvcc version 9.0 or later. Ignore this warning if code is already compiled with the recommended nvcc version. For some metrics, the required events can only be collected for a single CUDA context. For an application that uses multiple CUDA contexts, these metrics will only be collected for one of the contexts. The metrics that can be collected only for a single CUDA context are indicated in the metric reference tables . Some metric values are calculated assuming a kernel is large enough to occupy all device multiprocessors with approximately the same amount of work. If a kernel launch does not have this characteristic, then those metric values may not be accurate. Some events and metrics are not available on all devices. For list of metrics, you can refer to the metric reference tables . CUPTI can give out of memory error for event and metrics profiling, it could be due to large number of instructions in the kernel. Profiling is not supported for CUDA kernel nodes launched by a CUDA Graph. These APIs are not supported on below system configurations: 64-bit ARM Server CPU architecture (arm64 SBSA). Virtual GPUs (vGPU). Windows Subsystem for Linux (WSL).", "keywords": []}, {"id": 4372, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#gpu-support", "display_name": "GPU Support", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "gpu-support", "priority": -1, "content": "CUPTI API Supported GPU architectures Notes Activity Maxwell and later GPU architectures, i.e. devices with compute capability 5.0 and higher Callback Maxwell and later GPU architectures, i.e. devices with compute capability 5.0 and higher Event Maxwell, Pascal and Volta Not supported on Turing and later GPU architectures, i.e. devices with compute capability 7.5 and higher Metric Maxwell, Pascal and Volta Not supported on Turing and later GPU architectures, i.e. devices with compute capability 7.5 and higher Profiling Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher Not supported on Maxwell and Pascal GPUs Host Profiling Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher Not supported on Maxwell and Pascal GPUs Range Profiling Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher Not supported on Maxwell and Pascal GPUs PC Sampling Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher Not supported on Maxwell and Pascal GPUs PM Sampling Turing and later GPU architectures, i.e. devices with compute capability 7.5 and higher Not supported on Maxwell, Pascal and Volta GPUs SASS Metric Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher Not supported on Maxwell and Pascal GPUs Checkpoint Volta and later GPU architectures, i.e. devices with compute capability 7.0 and higher Not supported on Maxwell and Pascal GPUs", "keywords": []}, {"id": 4373, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#known-issues", "display_name": "Known Issues", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "known-issues", "priority": -1, "content": "The following are known issues with the current release. A security vulnerability issue required profiling tools to disable features using GPU performance counters for non-root or non-admin users when using a Windows 419.17 or Linux 418.43 or later driver. By default, NVIDIA drivers require elevated permissions to access GPU performance counters. On Tegra platforms, profile as root or using sudo. On other platforms, you can either start profiling as root or using sudo, or by enabling non-admin profiling. More details about the issue and the solutions can be found on the ERR_NVGPUCTRPERM web page . CUPTI allows tracing features for non-root and non-admin users on desktop platforms only, Tegra platforms require root or sudo access. Profiling results might be inconsistent when auto boost is enabled. Profiler tries to disable auto boost by default. But it might fail to do so in some conditions and profiling will continue and results will be inconsistent. API cuptiGetAutoBoostState() can be used to query the auto boost state of the device. This API returns error CUPTI_ERROR_NOT_SUPPORTED on devices that don\u2019t support auto boost. Note that auto boost is supported only on certain Tesla devices with compute capability 3.0 and higher. CUPTI doesn\u2019t populate the activity structures which are deprecated, instead the newer version of the activity structure is filled with the information. Because of the low resolution of the timer on Windows, the start and end timestamps can be same for activities having short execution duration on Windows. The application which calls CUPTI APIs cannot be used with Nvidia tools like nvprof , Nvidia Visual Profiler , Nsight Compute , Nsight Systems , Nvidia Nsight Visual Studio Edition , cuda-gdb and cuda-memcheck . PCIe and NVLink records, when enabled using the API cuptiActivityEnable , are not captured when CUPTI is initialized lazily after the CUDA initialization. API cuptiActivityEnableAndDump can be used to dump the records for these activities at any point during the profiling session. CUPTI fails to profile the OpenACC application when the OpenACC library linked with the application has missing definition of the OpenACC API routine/s. This is indicated by the error code CUPTI_ERROR_OPENACC_UNDEFINED_ROUTINE . OpenACC profiling might fail when OpenACC library is linked statically in the user application. This happens due to the missing definition of the OpenACC API routines needed for the OpenACC profiling, as compiler might ignore definitions for the functions not used in the application. This issue can be mitigated by linking the OpenACC library dynamically. Unified memory profiling is not supported on the ARM architecture. Profiling a C++ application which overloads the new operator at the global scope and uses any CUDA APIs like cudaMalloc() or cudaMallocManaged() inside the overloaded new operator will result in a hang. Devices with compute capability 6.0 and higher introduce a new feature, compute preemption, to give fair chance for all compute contexts while running long tasks. With compute preemption feature- If multiple contexts are running in parallel it is possible that long kernels will get preempted. Some kernels may get preempted occasionally due to timeslice expiry for the context. If kernel has been preempted, the time the kernel spends preempted is still counted towards kernel duration. Compute preemption can affect events and metrics collection. The following are known issues with the current release: Events and metrics collection for a MPS client can result in higher counts than expected on devices with compute capability 7.0 and higher, since MPS client may get preempted due to termination of another MPS client. Events warps_launched and sm_cta_launched and metric inst_per_warp might provide higher counts than expected on devices with compute capability 6.0 and higher. Metric unique_warps_launched can be used in place of warps_launched to get correct count of actual warps launched as it is not affected by compute preemption. To avoid compute preemption affecting profiler results try to isolate the context being profiled: Run the application on secondary GPU where display is not connected. On Linux if the application is running on the primary GPU where the display driver is connected then unload the display driver. Run only one process that uses GPU at one time. Devices with compute capability 6.0 and higher support demand paging. When the kernel is scheduled for the first time, all the pages allocated using cudaMallocManaged and that are required for execution of the kernel are fetched in the global memory when GPU faults are generated. Profiler requires multiple passes to collect all the metrics required for kernel analysis. The kernel state needs to be saved and restored for each kernel replay pass. For devices with compute capability 6.0 and higher and platforms supporting Unified memory, in the first kernel iteration the GPU faults will be generated and all pages will be fetched in the global memory. Second iteration onwards GPU page faults will not occur. This will significantly affect the memory related events and timing. The time taken from trace will include the time required to fetch the pages but most of the metrics profiled in multiple iterations will not include time/cycles required to fetch the pages. This causes inconsistency in the profiler results. When profiling an application that uses CUDA Dynamic Parallelism (CDP) there are several limitations to the profiling tools. CUDA 12.0 adds support for revamped CUDA Dynamic Parallelism APIs (referred to as CDP2), offering substantial performance improvements vs. the legacy CUDA Dynamic Parallelism APIs (referred to as CDP1). For Legacy CUDA Dynamic Parallelism (CDP1), CUPTI supports tracing of all host and device kernels for devices with compute capability 5.x and 6.x. For devices with compute capability 7.0 and higher, CUPTI traces all the host launched kernels until it encounters a host launched kernel which launches child kernels; subsequent kernels are not traced. For CUDA Dynamic Parallelism (CDP2), CUPTI supports tracing of host launched kernels only, it can\u2019t trace device launched kernels. CUPTI doesn\u2019t report CUDA API calls for device launched kernels. CUPTI doesn\u2019t support profiling of device launched kernels i.e. it doesn\u2019t report detailed event, metric, and source-level results for device launched kernels. Event, metric, and source-level results collected for CPU-launched kernels will include event, metric, and source-level results for the entire call-tree of kernels launched from within that kernel. When profiling an application that uses CUDA Device Graphs, there are some limitations to the profiling tools. CUPTI traces the device graph when it is launched from the host. When the graph is launched from the device, graph level tracing is supported, but node level tracing is not. Compilation of samples autorange_profiling and userrange_profiling requires a host compiler which supports C++11 features. For some g++ compilers, it is required to use the flag -std=c++11 to turn on C++11 features. PC Sampling Activity API is not supported on Tegra platforms, while PC Sampling API is supported on Tegra platforms. As of CUDA 11.4 and R470 TRD1 driver release, CUPTI is supported in a vGPU environment which requires a vGPU license. If the license is not obtained after 20 minutes, the reported performance data including metrics from the GPU will be inaccurate. This is because of a feature in vGPU environment which reduces performance but retains functionality as specified here . CUPTI is not supported on NVIDIA Crypto Mining Processors (CMP). This is reported using the error code CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED . For more information, please visit the web page . CUPTI versions shipped in the CUDA Toolkit 11.7 and CUDA Toolkit 11.8 don\u2019t support Kepler (sm_35 and sm_37) devices. Refer to the webpages CUPTI 11.7 and CUPTI 11.8 for location of the CUPTI packages having the support for these Kepler devices. Support for the GA103 GPU was added in the CUDA 11.6 release but it was broken for releases from CUDA 11.8 to CUDA 12.2 Update 1. Unified memory profiling is broken for Maxwell devices on Windows platform. For confidential computing devices, allocation of pinned (page-locked) host memory for profiling buffer for concurrent kernel tracing is not supported. Setting attribute CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED of the activity attribute enum CUpti_ActivityAttribute will return the error code CUPTI_ERROR_NOT_SUPPORTED . There is no tracing and profiling support for chip-to-chip (C2C) interconnect. With the new PC Sampling APIs CUPTI doesn\u2019t report any pc sampling data for cuda graph launches in serialized mode. There can be a long delay in attaching CUPTI to a running process. It is possible that the thread might starve if it is unable to access the resources it needs to perform the attach operation, as other threads have higher priority or hold locks on these resources. Concurrent kernel tracing is not supported for cooperative kernel launches under MPS, and it can cause hang.", "keywords": []}, {"id": 4374, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#platform-support", "display_name": "Platform Support", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "platform-support", "priority": -1, "content": "Platform Support Windows Yes Windows Subsystem for Linux version 2 (WSL 2) Yes* Linux (x86_64) Yes Linux (aarch64 sbsa) Yes* Linux (x86_64) (Drive SDK) Yes* Linux (aarch64) Yes* Linux (ppc64le) No QNX Yes* Mac OSX No Android No Tracing and profiling of 32-bit processes is not supported. Event and Metric APIs are not supported on Linux (aarch64 sbsa) and WSL 2 platforms.", "keywords": []}, {"id": 4375, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#profiling", "display_name": "Profiling", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "profiling", "priority": -1, "content": "The following are common known issues for both the event and metric APIs and the profiling APIs: Profiling may significantly change the overall performance characteristics of the application. Refer to the section CUPTI Overhead for more details. Profiling a kernel while other contexts are active on the same device (e.g. X server, or secondary CUDA or graphics application) can result in varying metric values for L2/FB (Device Memory) related metrics. Specifically, L2/FB traffic from non-profiled contexts cannot be excluded from the metric results. To completely avoid this issue, profile the application on a GPU without secondary contexts accessing the same device (e.g. no X server on Linux). Profiling is not supported for multidevice cooperative kernels, that is, kernels launched by using the API functions cudaLaunchCooperativeKernelMultiDevice or cuLaunchCooperativeKernelMultiDevice . Enabling certain events can cause GPU kernels to run longer than the driver\u2019s watchdog time-out limit. In these cases the driver will terminate the GPU kernel resulting in an application error and profiling data will not be available. Please disable the driver watchdog time out before profiling such long running CUDA kernels On Linux, setting the X Config option Interactive to false is recommended. For Windows, detailed information about TDR (Timeout Detection and Recovery) and how to disable it is available at https://docs.microsoft.com/en-us/windows-hardware/drivers/display/timeout-detection-and-recovery The values of operations/second calculated from this NVIDIA developer tools site and generated by using the data center monitoring tools are not calculated in the same way as the operations/second used for export control purposes and should not be relied upon to assess performance against the export control limits.", "keywords": []}, {"id": 4376, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#profiling-and-perfworks-metric-api", "display_name": "Profiling and Perfworks Metric API", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "profiling-and-perfworks-metric-api", "priority": -1, "content": "The following are known issues related to the Profiling and Perfworks Metric API: Profiling a kernel while any other GPU work is executing on the same MIG compute instance can result in varying metric values for all units. Care should be taken to serialize, or otherwise prevent concurrent CUDA launches within the target application to ensure those kernels do not influence each other. Be aware that GPU work issued through other APIs in the target process or workloads created by non-target processes running simultaneously in the same MIG compute instance will influence the collected metrics. Note that it is acceptable to run CUDA processes in other MIG compute instances as they will not influence the profiled MIG compute instance. For devices with compute capability 8.0, the NVLink topology information is available but NVLink performance metrics ( nvlrx__* and nvltx__* ) are not supported due to a potential application hang during data collection. Profiling is not supported under MPS (Multi-Process Service). For profiling the CUDA kernel nodes launched by a CUDA Graph, not all combinations of range profiling and replay modes are supported. Here are some limitations: User replay and application replay modes with auto range are not supported. In the user range mode, entire graph is profiled as one workload i.e. all the kernel nodes launched by the CUDA Graph will be profiled and single result will be provided, user can\u2019t do the profiling for a range of kernels. For Device Graph profiling in the auto range and kernel replay mode, each kernel node will be profiled except for the nodes which launch device graphs. Profiling kernels executed on a device that is part of an SLI group is not supported. Refer to the section for differences from event and metric APIs . Profiling on Windows Subsystem for Linux (WSL) is only supported with WSL version 2, NVIDIA display driver version 525 or higher and Windows 11. Profiling is not supported for applications using Green Contexts. Profiling is not supported for device graphs which have been updated after instantiation.", "keywords": []}, {"id": 4377, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#support", "display_name": "Support", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "support", "priority": -1, "content": "Information on supported platforms and GPUs.", "keywords": []}, {"id": 4378, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-10-0", "display_name": "Updates in CUDA 10.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-10-0", "priority": -1, "content": "New Features Added tracing support for devices with compute capability 7.5. A new set of metric APIs are added for devices with compute capability 7.0 and higher. These provide low and deterministic profiling overhead on the target system. These APIs are currently supported only on Linux x86 64-bit and Windows 64-bit platforms. Refer to the CUPTI web page for documentation and details to download the package with support for these new APIs. Note that both the old and new metric APIs are supported for compute capability 7.0. This is to enable transition of code to the new metric APIs. But one cannot mix the usage of the old and new metric APIs. CUPTI supports profiling of OpenMP applications. OpenMP profiling information is provided in the form of new activity records CUpti_ActivityOpenMp . New API cuptiOpenMpInitialize is used to initialize profiling for supported OpenMP runtimes. Activity record for kernel CUpti_ActivityKernel4 provides shared memory size set by the CUDA driver. Tracing support for CUDA kernels, memcpy and memset nodes launched by a CUDA Graph. Added support for resource callbacks for resources associated with the CUDA Graph. Refer enum CUpti_CallbackIdResource for new callback IDs.", "keywords": []}, {"id": 4379, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-10-1", "display_name": "Updates in CUDA 10.1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-10-1", "priority": -1, "content": "New Features This release is focused on bug fixes and performance improvements. The new set of profiling APIs and Perfworks metric APIs which were introduced in the CUDA Toolkit 10.0 are now integrated into the CUPTI library distributed in the CUDA Toolkit. Refer to the sections CUPTI Profiling API and Perfworks Metric APIs for documentation of the new APIs. Event collection mode CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS is now supported on all device classes including Geforce and Quadro. Support for the NVTX string registration API nvtxDomainRegisterStringA(). Added enum CUpti_PcieGen to list PCIe generations.", "keywords": []}, {"id": 4380, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-10-1-update-1", "display_name": "Updates in CUDA 10.1 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-10-1-update-1", "priority": -1, "content": "New Features Support for the IBM POWER platform is added for the Profiling APIs in the header cupti_profiler_target.h Perfworks metric APIs in the headers nvperf_host.h and nvperf_target.h", "keywords": []}, {"id": 4381, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-10-1-update-2", "display_name": "Updates in CUDA 10.1 Update 2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-10-1-update-2", "priority": -1, "content": "New Features This release is focused on bug fixes and stability of the CUPTI. A security vulnerability issue required profiling tools to disable all the features for non-root or non-admin users. As a result, CUPTI cannot profile the application when using a Windows 419.17 or Linux 418.43 or later driver. More details about the issue and the solutions can be found on this web page .", "keywords": []}, {"id": 4382, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-10-2", "display_name": "Updates in CUDA 10.2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-10-2", "priority": -1, "content": "New Features CUPTI allows tracing features for non-root and non-admin users on desktop platforms. Note that events and metrics profiling is still restricted for non-root and non-admin users. More details about the issue and the solutions can be found on this web page . CUPTI no longer turns off the performance characteristics of CUDA Graph when tracing the application. CUPTI now shows memset nodes in the CUDA graph. Fixed the incorrect timing issue for the asynchronous cuMemset/cudaMemset activity. Several performance improvements are done in the tracing path.", "keywords": []}, {"id": 4383, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-0", "display_name": "Updates in CUDA 11.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-0", "priority": -1, "content": "New Features CUPTI adds tracing and profiling support for devices with compute capability 8.0 i.e. NVIDIA A100 GPUs and systems that are based on A100. Enhancements for CUDA Graph: Support to correlate the CUDA Graph node with the GPU activities: kernel, memcpy, memset. Added a new field graphNodeId for Node Id in the activity records for kernel, memcpy, memset and P2P transfers. Activity records CUpti_ActivityKernel4 , CUpti_ActivityMemcpy2 , CUpti_ActivityMemset and CUpti_ActivityMemcpyPtoP are deprecated and replaced by new activity records CUpti_ActivityKernel5 , CUpti_ActivityMemcpy3 , CUpti_ActivityMemset2 and CUpti_ActivityMemcpyPtoP2 . graphNodeId is the unique ID for the graph node. graphNodeId can be queried using the new CUPTI API cuptiGetGraphNodeId() . Callback CUPTI_CBID_RESOURCE_GRAPHNODE_CREATED is issued between a pair of the API enter and exit callbacks. Introduced new callback CUPTI_CBID_RESOURCE_GRAPHNODE_CLONED to indicate the cloning of the CUDA Graph node. Retain CUDA driver performance optimization in case memset node is sandwiched between kernel nodes. CUPTI no longer disables the conversion of memset nodes into kernel nodes for CUDA graphs. Added support for cooperative kernels in CUDA graphs. Added support to trace Optix applications. Refer the Optix Profiling section. CUPTI overhead is associated with the thread rather than process. Object kind of the overhead record CUpti_ActivityOverhead is switched to CUPTI_ACTIVITY_OBJECT_THREAD . Added error code CUPTI_ERROR_MULTIPLE_SUBSCRIBERS_NOT_SUPPORTED to indicate the presence of another CUPTI subscriber. API cuptiSubscribe() returns the new error code than CUPTI_ERROR_MAX_LIMIT_REACHED . Added a new enum CUpti_FuncShmemLimitConfig to indicate whether user has opted in for maximum dynamic shared memory size on devices with compute capability 7.x by using function attributes CU_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES or cudaFuncAttributeMaxDynamicSharedMemorySize with CUDA driver and runtime respectively. Field shmemLimitConfig in the kernel activity record CUpti_ActivityKernel5 shows the user choice. This helps in correct occupancy calculation. Value FUNC_SHMEM_LIMIT_OPTIN in the enum cudaOccFuncShmemConfig is the corresponding option in the CUDA occupancy calculator. Resolved Issues Resolved an issue that causes incorrect or stale timing for memcopy and serial kernel activities. Overhead for PC Sampling Activity APIs is reduced by avoiding the reconfiguration of the GPU when PC sampling period doesn\u2019t change between successive kernels. This is applicable for devices with compute capability 7.0 and higher. Fixed issues in the API cuptiFinalize() including the issue which may cause the application to crash. This API provides ability for safe and full detach of CUPTI during the execution of the application. More details in the section Dynamic Detach .", "keywords": []}, {"id": 4384, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-1", "display_name": "Updates in CUDA 11.1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-1", "priority": -1, "content": "New Features CUPTI adds tracing and profiling support for the NVIDIA Ampere GPUs with compute capability 8.6. Added a new field graphId in the activity records for kernel, memcpy, peer-to-peer memcpy and memset to output the unique ID of the CUDA graph that launches the activity through CUDA graph APIs. To accommodate this change, activity records CUpti_ActivityMemcpy3 , CUpti_ActivityMemcpyPtoP2 and CUpti_ActivityMemset2 are deprecated and replaced by new activity records CUpti_ActivityMemcpy4 , CUpti_ActivityMemcpyPtoP3 and CUpti_ActivityMemset3 . And kernel activity record CUpti_ActivityKernel5 replaces the padding field with graphId . Added a new API cuptiGetGraphId to query the unique ID of the CUDA graph. Added a new API cuptiActivityFlushPeriod to set the flush period for the worker thread. Added support for profiling cooperative kernels using Profiling APIs. Added NVLink performance metrics (nvlrx__* and nvltx__*) using the Profiling APIs. These metrics are available on devices with compute capability 7.0, 7.5 and 8.0, and these can be collected at the context level. Refer to the table Metrics Mapping Table for mapping between earlier CUPTI metrics and the Perfworks NVLink metrics for devices with compute capability 7.0. Resolved Issues Resolved an issue that causes CUPTI to not return full and completed activity buffers for a long time, CUPTI now attempts to return buffers early. To reduce the runtime overhead, CUPTI wakes up the worker thread based on certain heuristics instead of waking it up at a regular interval. New API cuptiActivityFlushPeriod can be used to control the flush period of the worker thread. This setting overrides the CUPTI heurtistics.", "keywords": []}, {"id": 4385, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-2", "display_name": "Updates in CUDA 11.2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-2", "priority": -1, "content": "New Features A new activity kind CUPTI_ACTIVITY_KIND_MEMORY_POOL and activity record CUpti_ActivityMemoryPool are introduced to represent the creation, destruction and trimming of a memory pool. Enum CUpti_ActivityMemoryPoolType lists types of memory pool. A new activity kind CUPTI_ACTIVITY_KIND_MEMORY2 and activity record CUpti_ActivityMemory2 are introduced to provide separate records for memory allocation and release operations. This helps in correlation of records of these operations to the corresponding CUDA APIs, which otherwise is not possible using the existing activity record CUpti_ActivityMemory which provides a single record for both the memory operations. Added a new pointer field of type CUaccessPolicyWindow in the kernel activity record to provide the access policy window which specifies a contiguous region of global memory and a persistence property in the L2 cache for accesses within that region. To accommodate this change, activity record CUpti_ActivityKernel5 is deprecated and replaced by a new activity record CUpti_ActivityKernel6 . This attribute is not collected by default. To control the collection of launch attributes, a new API cuptiActivityEnableLaunchAttributes is introdcued. New attributes CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_PRE_ALLOCATE_VALUE and CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE are added in the activity attribute enum CUpti_ActivityAttribute to set and get the number of device buffers and profiling semaphore pools which are preallocated for the context. CUPTI now allocates profiling buffer for concurrent kernel tracing in the pinned host memory in place of device memory. This might help in improving the performance of the tracing run. Memory location can be controlled using the attribute CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED of the activity attribute enum CUpti_ActivityAttribute . The compiler generated line information for inlined functions is improved due to which CUPTI can associate inlined functions with the line information of the function call site that has been inlined. Removed support for NVLink performance metrics ( nvlrx__* and nvltx__* ) from the Profiling API due to a potential application hang during data collection. The metrics will be added back in a future CUDA release. Resolved Issues Execution overheads introduced by CUPTI in the tracing path is reduced. For the concurrent kernel activity kind CUPTI_ACTIVITY_KIND_CONCURRENT_KERNEL , CUPTI instruments the kernel code to collect the timing information. Previously, every kernel in the CUDA module was instrumented, thus the overhead is proportional to the number of different kernels in the module. This is a static overhead which happens at the time of loading the CUDA module. To reduce this overhead, kernels are not instrumented at the module load time, instead a single instrumentation code is generated at the time of loading the CUDA module and it is applied to each kernel during the kernel execution, thus avoiding most of the static overhead at the CUDA module load time.", "keywords": []}, {"id": 4386, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-3", "display_name": "Updates in CUDA 11.3", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-3", "priority": -1, "content": "New Features A new set of CUPTI APIs for PC sampling data collection are provided in the header file cupti_pcsampling.h which support continuous mode data collection without serializing kernel execution and have a lower runtime overhead. Along with these a utility library is provided in the header file cupti_pcsampling_util.h which has APIs for GPU assembly to CUDA-C source correlation and for reading and writing the PC sampling data from/to files. Refer to the section CUPTI PC Sampling API for more details. Enum CUpti_PcieGen is extended to include PCIe Gen 5. The following functions are deprecated and will be removed in a future release: Struct NVPA_MetricsContext and related APIs NVPW_MetricsContext_* from the header nvperf_host.h . It is recommended to use the struct NVPW_MetricsEvaluator and related APIs NVPW_MetricsEvaluator_* instead. Profiling API samples have been updated to show how to use these APIs. cuptiDeviceGetTimestamp from the header cupti_events.h . Resolved Issues Overhead reduction for tracing of CUDA memcopies. To provide normalized timestamps for all activities, CUPTI uses linear interpolation for conversion from GPU timestamps to CPU timestamps. This method can cause spurious gaps or overlap on the timeline. CUPTI improves the conversion function to provide more precise timestamps. Generate overhead activity record for semaphore pool allocation.", "keywords": []}, {"id": 4387, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-4", "display_name": "Updates in CUDA 11.4", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-4", "priority": -1, "content": "New Features Profiling APIs support profiling of the CUDA kernel nodes launched by a CUDA Graph. Auto range profiling with kernel replay mode and user range profiling with user replay and application replay modes are supported. Other combinations of range profiling and replay modes are not supported. Added support for tracing and profiling on NVIDIA virtual GPUs (vGPUs) on an upcoming GRID/vGPU release. Added sample profiling_injection to show how to build injection library using the Profiling API. Added sample concurrent_profiling to show how to retain the kernel concurrency across streams and devices using the Profiling API. Resolved Issues Resolved the issue of not tracing the device to device memcopy nodes in a CUDA Graph. Fixed the issue of reporting zero size for local memory pool for mempool creation record. Resolved the issue of non-collection of samples for the default CUDA context for PC Sampling API. Enabled tracking of all domains and registered strings in NVTX irrespective of whether the NVTX activity kind or callbacks are enabled. This state tracking is needed for proper working of the tool which creates these NVTX objects before enabling the NVTX activity kind or callback.", "keywords": []}, {"id": 4388, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-4-update-1", "display_name": "Updates in CUDA 11.4 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-4-update-1", "priority": -1, "content": "Resolved Issues Resolved serialization of CUDA Graph launches for applications which use multiple threads to launch work. Previously, for applications that use CUDA Dynamic Parallelism (CDP), CUPTI detects the presence of the CDP kernels in the CUDA module. Even if CDP kernels are not called, it fails to trace the application. There is a change in the behavior, CUPTI now traces all the host launched kernels until it encounters a host launched kernel which launches child kernels. Subsequent kernels are not traced.", "keywords": []}, {"id": 4389, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-5", "display_name": "Updates in CUDA 11.5", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-5", "priority": -1, "content": "New Features A new API cuptiProfilerDeviceSupported is introduced to expose overall Profiling API support and specific requirements for a given device. Profiling API must be initialized by calling cuptiProfilerInitialize before testing device support. PC Sampling struct CUpti_PCSamplingData introduces a new field nonUsrKernelsTotalSamples to provide information about the number of samples collected for all non-user kernels. Activity record CUpti_ActivityDevice2 for device information has been deprecated and replaced by a new activity record CUpti_ActivityDevice3 . New record adds a flag isCudaVisible to indicate whether device is visible to CUDA. Activity record CUpti_ActivityNvLink3 for NVLink information has been deprecated and replaced by a new activity record CUpti_ActivityNvLink4 . New record can accommodate NVLink port information up to a maximum of 32 ports. A new CUPTI Checkpoint API is introduced, enabling automatic saving and restoring of device state, and facilitating development of kernel replay tools. This is helpful for User Replay mode of the CUPTI Profiling API, but is not limited to use with CUPTI. Tracing is supported on the Windows Subsystem for Linux version 2 (WSL 2). CUPTI is not supported on NVIDIA Crypto Mining Processors (CMP). A new error code CUPTI_ERROR_CMP_DEVICE_NOT_SUPPORTED is introduced to indicate it. Resolved Issues Resolved an issue that causes crash for tracing of device to device memcopy operations. Resolved an issue that causes crash for OpenACC activity when it is enabled before other activities.", "keywords": []}, {"id": 4390, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-5-update-1", "display_name": "Updates in CUDA 11.5 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-5-update-1", "priority": -1, "content": "Resolved Issues Resolved an issue that causes incorrect range name for NVTX event attributes. The issue was introduced in CUDA 11.4. Made NVTX initialization APIs InitializeInjectionNvtx and InitializeInjectionNvtx2 thread-safe.", "keywords": []}, {"id": 4391, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-6", "display_name": "Updates in CUDA 11.6", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-6", "priority": -1, "content": "New Features Two new fields channelID and channelType are added in the activity records for kernel, memcpy, peer-to-peer memcpy and memset to output the ID and type of the hardware channel on which these activities happen. Activity records CUpti_ActivityKernel6 , CUpti_ActivityMemcpy4 , CUpti_ActivityMemcpyPtoP3 and CUpti_ActivityMemset3 are deprecated and replaced by new activity records CUpti_ActivityKernel7 , CUpti_ActivityMemcpy5 , CUpti_ActivityMemcpyPtoP4 and CUpti_ActivityMemset4 . New fields isMigEnabled , gpuInstanceId , computeInstanceId and migUuid are added in the device activity record to provide MIG information for the MIG enabled GPU. Activity record CUpti_ActivityDevice3 is deprecated and replaced by a new activity record CUpti_ActivityDevice4 . A new field utilizedSize is added in the memory pool and memory activity record to provide the utilized size of the memory pool. Activity record CUpti_ActivityMemoryPool and CUpti_ActivityMemory2 are deprecated and replaced by a new activity record CUpti_ActivityMemoryPool2 and CUpti_ActivityMemory3 respectively. API cuptiActivityRegisterTimestampCallback and callback function CUpti_TimestampCallbackFunc are added to register a callback function to obtain timestamp of user\u2019s choice instead of using CUPTI provided timestamp in activity records. Profiling API supports profiling OptiX application. Resolved Issues Fixed multi-pass metric collection using the Profiling API in the auto range and kernel replay mode for Cuda Graph. Fixed the performance issue for the PC sampling API cuptiPCSamplingStop . Fixed corruption in variable names for OpenACC activity records. Fixed corruption in the fields of the struct memoryPoolConfig in the activity record CUpti_ActivityMemory3 . Filled the fields of the struct memoryPoolConfig in the activity record CUpti_ActivityMemory3 when a memory pointer allocated via memory pool is released using cudaFree CUDA API.", "keywords": []}, {"id": 4392, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-6-update-1", "display_name": "Updates in CUDA 11.6 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-6-update-1", "priority": -1, "content": "Resolved Issues Fixed hang for the PC Sampling API cuptiPCSamplingStop . This issue is seen for the PC sampling start and stop resulting in generation of large number of sampling records. Fixed timing issue for specific device to device memcpy operations.", "keywords": []}, {"id": 4393, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-7", "display_name": "Updates in CUDA 11.7", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-7", "priority": -1, "content": "New Features A new activity kind CUPTI_ACTIVITY_KIND_GRAPH_TRACE and activity record CUpti_ActivityGraphTrace are introduced to represent the execution for a graph without giving visibility about the execution of its nodes. This is intended to reduce overheads involved in tracing each node separately. This activity can only be enabled for drivers of version 515 and above. A new API cuptiActivityEnableAndDump is added to provide snapshot of certain activities like device, context, stream, NVLink and PCIe at any point during the profiling session. Added sample cupti_correlation to show correlation between CUDA APIs and corresponding GPU activities. Added sample cupti_trace_injection to show how to build an injection library using the activity and callback APIs which can be used to trace any CUDA application. Resolved Issues Fixed corruption in the function name for PC Sampling API records. Fixed incorrect timestamps for GPU activities when user calls the API cuptiActivityRegisterTimestampCallback in the late CUPTI attach scenario. Fixed incomplete records for device to device memcopies in the late CUPTI attach scenario. This issue manifests mainly when application has a mix of CUDA graph and normal kernel launches.", "keywords": []}, {"id": 4394, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-7-update-1", "display_name": "Updates in CUDA 11.7 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-7-update-1", "priority": -1, "content": "Resolved Issues Resolved an issue for PC Sampling API cuptiPCSamplingGetData which might not always return all the samples when called after the PC sampling range defined by using the APIs cuptiPCSamplingStart and cuptiPCSamplingStop . Remaining samples were delivered in the successive call of the API cuptiPCSamplingGetData after the next range. Disabled tracing of nodes in the CUDA Graph when user enables tracing at the Graph level using the activity kind CUPTI_ACTIVITY_KIND_GRAPH_TRACE . Fixed missing channelID and channelType information for kernel records. Earlier these fields were populated for CUDA Graph launches only.", "keywords": []}, {"id": 4395, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-11-8", "display_name": "Updates in CUDA 11.8", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-11-8", "priority": -1, "content": "New Features CUPTI adds tracing and profiling support for Hopper and Ada Lovelace GPU families. Added new fields clusterX , clusterY , clusterZ and clusterSchedulingPolicy to output the Thread Block Cluster dimensions and scheduling policy. These fields are valid for devices with compute capability 9.0 and higher. To accommodate this change, activity record CUpti_ActivityKernel7 is deprecated and replaced by a new activity record CUpti_ActivityKernel8 . A new activity kind CUPTI_ACTIVITY_KIND_JIT and corresponding activity record CUpti_ActivityJit are introduced to capture the overhead involved in the JIT (just-in-time) compilation and caching of the PTX or NVVM IR code to the binary code. New record also provides the information about the size and path of the compute cache where the binary code is stored. PC Sampling API is supported on Tegra platforms - QNX, Linux (aarch64) and Linux (x86_64) (Drive SDK). Resolved Issues Resolved an issue that might cause crash when the size of the device buffer is changed, using the attribute CUPTI_ACTIVITY_ATTR_DEVICE_BUFFER_SIZE , after creation of the CUDA context.", "keywords": []}, {"id": 4396, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-0", "display_name": "Updates in CUDA 12.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-0", "priority": -1, "content": "New Features Added new fields maxPotentialClusterSize and maxActiveClusters to help in calculating the cluster occupancy correctly. These fields are valid for devices with compute capability 9.0 and higher. To accommodate this change, activity record CUpti_ActivityKernel8 is deprecated and replaced by a new activity record CUpti_ActivityKernel9 . Enhancements for PC Sampling APIs: CUPTI creates few worker threads to offload certain operations like decoding of the hardware data to the CUPTI PC sampling data and correlation of the PC data to the SASS instructions. CUPTI wakes up these threads periodically. To control the sleep time of the worker threads, a new attribute CUPTI_PC_SAMPLING_CONFIGURATION_ATTR_TYPE_WORKER_THREAD_PERIODIC_SLEEP_SPAN is added in the enum CUpti_PCSamplingConfigurationAttributeType . Improved error reporting for hardware buffer overflow. When hardware buffer overflows, CUPTI returns the out of memory error code. And a new field hardwareBufferFull added in the struct CUpti_PCSamplingData is set to differentiate it from other out of memory cases. User can either increase the hardware buffer size or flush the hardware buffer at a higher frequency to avoid overflow. Profiling APIs are supported on Windows Subsystem for Linux (WSL) with WSL version 2, NVIDIA display driver version 525 or higher and Windows 11. CUPTI support for Kepler GPUs is dropped in CUDA Toolkit 12.0. Resolved Issues Removed minor CUDA version from the SONAME of the CUPTI shared library for compatibility reasons. For example, SONAME of CUPTI library is libcupti.so.12 instead of libcupti.so.12.0 in CUDA 12.0 release. Activity kinds CUPTI_ACTIVITY_KIND_MARKER and CUPTI_ACTIVITY_KIND_MARKER_DATA can be enabled together.", "keywords": []}, {"id": 4397, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-0-update-1", "display_name": "Updates in CUDA 12.0 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-0-update-1", "priority": -1, "content": "Resolved Issues Reduced the host memory overhead by avoiding caching copies of cubin images at the time of loading CUDA modules. Copies of cubin images are now created only when profiling features that need it are enabled. By default CUPTI switches back to the device memory, instead of the pinned host memory, for allocation of the profiling buffer for concurrent kernel tracing. This might help in improving the performance of the tracing run. Memory location can be controlled using the attribute CUPTI_ACTIVITY_ATTR_MEM_ALLOCATION_TYPE_HOST_PINNED of the activity attribute enum CUpti_ActivityAttribute . CUPTI now captures the cudaGraphLaunch API and its kernels when CUPTI is attached after the graph is instantiated using the API cudaGraphInstantiate but it is attached before the graph is launched using the API cudaGraphLaunch . Some data in the kernel record would be missing i.e. cacheConfig , sharedMemoryExecuted , partitionedGlobalCacheRequested , partitionedGlobalCacheExecuted , sharedMemoryCarveoutRequested etc. This fix requires the matching CUDA driver which ships with the CUDA 12.0 Update 1 release.", "keywords": []}, {"id": 4398, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-1", "display_name": "Updates in CUDA 12.1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-1", "priority": -1, "content": "New Features Field wsl is added in the struct CUpti_Profiler_DeviceSupported_Params to indicate whether Profiling API is supported on Windows Subsystem for Linux (WSL) system or not.", "keywords": []}, {"id": 4399, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-1-update-1", "display_name": "Updates in CUDA 12.1 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-1-update-1", "priority": -1, "content": "Resolved Issues Fixed CUPTI tracing failure when just-in-time compilation of embedded PTX code is disabled using the environment variable CUDA_DISABLE_PTX_JIT . Fixed a crash in the API cuptiFinalize .", "keywords": []}, {"id": 4400, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-2", "display_name": "Updates in CUDA 12.2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-2", "priority": -1, "content": "New Features A new set of CUPTI APIs for collection of SASS metric data at the source level are provided in the header file cupti_sass_metrics.h . These support a larger set of metrics compared to the CUPTI Activity APIs for source-level analysis. SASS to source correlation can be done in the offline mode, similar to the PC sampling APIs. Hence the runtime overhead during data collection is lower. Refer to the section CUPTI SASS Metrics API for more details. Please note that this is a Beta feature, interface and functionality are subject to change in a future release. CUPTI now reports fatal errors, non-fatal errors and warnings instantaneously through callbacks. A new callback domain CUPTI_CB_DOMAIN_STATE is added for subscribing to the instantaneous error reporting. Corresponding callback ids are provided in the struct CUpti_CallbackIdState . Added support for profiling of device graphs and host graphs that launch device graphs. There are some known limitations, please refer to the Known Issues section for details. Change in the stream attribute value is communicated by issuing the resource callback. Refer to the struct CUpti_StreamAttrData and callback id CUPTI_CBID_RESOURCE_STREAM_ATTRIBUTE_CHANGED added in the enum CUpti_CallbackIdResource . New API cuptiGetErrorMessage provides descriptive message for CUPTI error codes. Removed the deprecated API cuptiDeviceGetTimestamp from the header cupti_events.h . Added metrics for Tensor core operations to count different types of tensor instructions. These metrics are named as sm[sp]__ops_path_tensor_src_{src}[_dst_{dst}[_sparsity_{on,off}]]. These are available for devices with compute capability 7.0 and higher, except for Turing TU11x GPUs. Resolved Issues Fixed crash for the graph-level trace for device graphs which are launched from the host.", "keywords": []}, {"id": 4401, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-2-update-1", "display_name": "Updates in CUDA 12.2 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-2-update-1", "priority": -1, "content": "Support for Confidential Computing CUPTI supports some APIs while running in CC-devtools mode: Callback API Activity API The profiling APIs are not supported in CC-devtools mode with this release. Using these APIs should return an error indicating the configuration is not supported: Profiling API PC Sampling API Checkpoint API SASS Metrics API Additionally, CUPTI is not supported at all in full CC mode. CC-devtools mode must be used for tools support. Some CUDA APIs are not supported or behave differently when running in CC or CC-devtools mode; notably, host pinned memory requests will be traced as managed memory requests, and any CUDA memcopies on these converted pointers are traced as Device to Device copies irrespective of the locality of the source or destination pointers. For details on how to configure CC or CC-devtools mode, system and software requirements, as well as documentation on CUDA API changes, please see the confidential compute release documentation at https://docs.nvidia.com/confidential-computing/ . Resolved Issues Fixed timestamps for graph-level tracing for CUDA graphs running across multiple GPUs. Fixed a potential hang when CUPTI is unable to fetch attributes for an activity.", "keywords": []}, {"id": 4402, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-2-update-2", "display_name": "Updates in CUDA 12.2 Update 2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-2-update-2", "priority": -1, "content": "New Features SASS Metric APIs introduced in the CUDA 12.2 GA release are transitioning from the beta to the production release. Added support for collecting SASS metrics for CUDA Graphs which are launched from host. Added a new field numOfDroppedRecords in the struct CUpti_SassMetricsDisable_Params to indicate the number of dropped records when SASS data is flushed prior to calling the disable API. Added a new field api in the struct CUpti_Profiler_DeviceSupported_Params which can be used to check the configuration support level for profiler APIs like Profiling, PC Sampling and SASS Metric APIs. Resolved Issues Fixed the tracing and profiling support for the GA103 GPU. Fixed a hang which can occur when activity buffer gets full while collecting the sampling data using the PC Sampling Activity API. Fixed the issue of incorrect timestamps for graph level trace when a graph node is disabled using the APIs cuGraphNodeSetEnabled or cudaGraphNodeSetEnabled .", "keywords": []}, {"id": 4403, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-3", "display_name": "Updates in CUDA 12.3", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-3", "priority": -1, "content": "New Features New attributes CUPTI_ACTIVITY_OVERHEAD_RUNTIME_TRIGGERED_MODULE_LOADING and CUPTI_ACTIVITY_OVERHEAD_LAZY_FUNCTION_LOADING are added in the activity overhead enum CUpti_ActivityOverheadKind to provide the overhead information for CUDA runtime triggered module loading and lazy function loading respectively. New API cuptiGetGraphExecId provides the unique ID of the executable graph. Added support for collecting graph level trace for device launched graphs. A new API cuptiActivityEnableDeviceGraph is added to enable the collection of records for device launched graphs. CUDA Graphs can be executed on multiple devices i.e. the root node could be launched on one device and the leaf node could be launched on the another device. New fields endDeviceId and endContextId are added to identify the ids of device and context respectively which are used to execute the last node of the graph. To accommodate this change, activity record CUpti_ActivityGraphTrace is deprecated and it is replaced by a new activity record CUpti_ActivityGraphTrace2 . Added WSL profiling support on Windows 10 WSL with OS build version 19044 and greater. WSL profiling is not supported on Windows 10 WSL for systems that exceed 1 TB of system memory. Several performance improvements are done in the tracing path. One of the key improvements is to allow clients to request CUPTI to maintain the activity buffers at the thread level instead of global buffers. This can be achieved by setting the option CUPTI_ACTIVITY_ATTR_PER_THREAD_ACTIVITY_BUFFER of the enum CUpti_ActivityAttribute . This can help in reducing the collection overhead for applications which launch CUDA activities from multiple host threads. Frame pointers are enabled for Linux x86_64 libraries. The deprecated Activity APIs and structures have been moved to a new header cupti_activity_deprecated.h, which is included in the header cupti_activity.h. Header cupti_activity.h contains only the latest version of APIs and structures. CUPTI no longer uses profiling semaphore pool to store the profiling data. Corresponding attributes CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE , CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT and CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_PRE_ALLOCATE_VALUE have been deprecated. Resolved Issues Fixed SASS metric profiling for cuda graph. Fixed race condition in the API cuptiSetThreadIdType for late subscription.", "keywords": []}, {"id": 4404, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-3-update-1", "display_name": "Updates in CUDA 12.3 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-3-update-1", "priority": -1, "content": "Resolved Issues To provide normalized timestamps for all activities, CUPTI uses linear interpolation for conversion from GPU timestamps to CPU timestamps. This was broken with CUDA 12.3 causing spurious gaps or overlap on Tegra platforms. Fixed the issue.", "keywords": []}, {"id": 4405, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-4", "display_name": "Updates in CUDA 12.4", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-4", "priority": -1, "content": "New Features Added tracing support for applications using Green contexts. Added two new fields isGreenContext and parentContextId in the context activity record. The activity record CUpti_ActivityContext is deprecated and it is replaced by a new activity record CUpti_ActivityContext2 . CUDA API calls are completed asynchronously from the perspective of the host CPU. This is accomplished by queuing the work slated for the GPU into a structure known as a command buffer. If there is insufficient space available in the command buffer when attempting to call a CUDA API, the host call will block until space becomes available. The user should be able to identify when this situation occurs. This is indicated using the new attribute CUPTI_ACTIVITY_OVERHEAD_COMMAND_BUFFER_FULL added in the activity overhead enum CUpti_ActivityOverheadKind . To provide additional details about the overhead, a new field overheadData is added in the overhead activity record. Activity record CUpti_ActivityOverhead2 is deprecated and it is replaced by the new activity record CUpti_ActivityOverhead3 . Added process ID and thread ID in the JIT activity record. To accommodate this change, activity record CUpti_ActivityJit is deprecated and it is replaced by a new activity record CUpti_ActivityJit2 . To correlate the sampling data for a kernel with the launch API in the serial mode of the PC Sampling APIs, a new field correlationId is added in the struct CUpti_PCSamplingPCData . For PC Sampling APIs, total (smsp__pcsamp_sample_count) and dropped (smsp__pcsamp_samples_data_dropped) sample counts are collected by default. Resolved Issues Fixed the issue for overhead records showing the default thread ID than the one requested using the API cuptiSetThreadIdType() . Fixed instruction level SASS metrics profiling for CUDA Graph applications. When a device graph is first launched from the device and it is not launched from the host earlier, end timestamp could be 0 for graph-level tracing on Ampere and later GPU architectures. This issue is fixed.", "keywords": []}, {"id": 4406, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-4-update-1", "display_name": "Updates in CUDA 12.4 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-4-update-1", "priority": -1, "content": "Resolved Issues Fixed a crash when API cuptiFinalize is used for applications using CUDA Graph. Fixed a crash which can occur while tracing memcpy and memset nodes in a graph when using graph level tracing. Skip delivering worker thread buffers on internal flush if the worker thread buffer is not full.", "keywords": []}, {"id": 4407, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-5", "display_name": "Updates in CUDA 12.5", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-5", "priority": -1, "content": "New Features Added APIs cuptiActivityEnableDriverApi and cuptiActivityEnableRuntimeApi to limit the tracing of CUDA APIs that are of interest. This can help in reducing the CUDA API tracing overhead. Added new field cigMode to communicate the CUDA in Graphics (CIG) mode associated with the CUDA context. The activity record CUpti_ActivityContext2 is deprecated and it is replaced by a new activity record CUpti_ActivityContext3. Enum CUpti_ContextCigMode describes the supported CIG modes. Added new field numMultiprocessors in the context activity record to communicate the number of multiprocessors assigned to the green context. Tracing is supported for MPS (Multi-Process Service) on Tegra platforms. Obfuscated symbols are provided for Linux x86_64 platform, it helps us in speeding up the debug process for issues like crash, hang etc. See https://developer.nvidia.com/blog/cuda-toolkit-symbol-server/ for information on how to use obfuscated symbols. Symbol server address is: https://cudatoolkit-symbols.nvidia.com/ . Deprecated and dropped features PC Sampling Activity API from the header cupti_activity.h is deprecated for Volta and later GPU architectures and this will be removed in a future release. It is recommended to move to the PC Sampling API from the header cupti_pcsampling.h which is supported on Volta and later GPU architectures. Removed support for the PowerPC (ppc64le) architecture. Resolved Issues Fixed Unified memory profiling on Heterogeneous Memory Management (HMM) and Address Translation Service (ATS) systems.", "keywords": []}, {"id": 4408, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-5-update-1", "display_name": "Updates in CUDA 12.5 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-5-update-1", "priority": -1, "content": "Resolved Issues Fixed a crash for the graph level tracing for CUDA graphs. Fixed an issue due to which resource callback CUPTI_CBID_RESOURCE_MODULE_PROFILED might not be issued when no other activity is enabled. This issue was introduced in the CUDA 12.4 Update 1 release.", "keywords": []}, {"id": 4409, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-6", "display_name": "Updates in CUDA 12.6", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-6", "priority": -1, "content": "New Features CUPTI introduces PM Sampling APIs for collecting many hardware metrics by sampling the GPU\u2019s performance monitors (PM) periodically at fixed intervals for a CUDA workload. These APIs are provided in the header file cupti_pmsampling.h . These are supported on Turing and later GPU architectures, i.e. devices with compute capability 7.5 and higher. Refer to the section PM Sampling API for more details. The Profiling is split into four main phases - Enumeration, Configuration, Collection and Evaluation. APIs for three phases enumeration, configuration and evaluation are provided directly by the low level Perfworks APIs. CUPTI is adding a new set of APIs around these Perfworks host APIs to simplify usage, shield users from low-level concepts, and ease adaptation to changes in Perfworks APIs. These APIs promote consistency, reduce confusion, and enhance integration with CUPTI APIs. New host APIs are provided in the header cupti_profiler_host.h . Additionally, new target APIs will be introduced in a future release to simplify profiling for new users and align the call structure with other profiling APIs for faster learning and better adaptability. Added support for identifying the source of the memory allocation. This is useful when memory allocation request is made from a library or shared object which is called from the application. A new field source is added in the memory activity record. The activity record CUpti_ActivityMemory3 is deprecated and it is replaced by a new activity record CUpti_ActivityMemory4 . Refer to the section Device Memory Allocation Source Tracking for more details. Added a new overhead kind CUPTI_ACTIVITY_OVERHEAD_ACTIVITY_BUFFER_REQUEST to report the overhead incurred while requesting activity buffers from the CUPTI client. Added static library libcupti_static.a for ARM Server (arm64 SBSA). Deprecated and dropped features Source/SASS level metrics from the header cupti_activity.h are deprecated on Volta and later GPU architectures and these will be removed in a future release. It includes metrics CUPTI_ACTIVITY_KIND_GLOBAL_ACCESS , CUPTI_ACTIVITY_KIND_SHARED_ACCESS , CUPTI_ACTIVITY_KIND_BRANCH and CUPTI_ACTIVITY_KIND_INSTRUCTION_EXECUTION and related correlation kinds CUPTI_ACTIVITY_KIND_SOURCE_LOCATOR and CUPTI_ACTIVITY_KIND_INSTRUCTION_CORRELATION . It is recommended to move to the SASS Metric API from the header cupti_sass_metrics.h which is supported on Volta and later GPU architectures. Resolved Issues Exported the profiling API cuptiProfilerIsPassCollected . Reduced the collection overhead for memcpy tracing. For some activities, duration for the activity buffer request was getting included in the activity duration. This issue is resolved.", "keywords": []}, {"id": 4410, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-6-update-1", "display_name": "Updates in CUDA 12.6 Update 1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-6-update-1", "priority": -1, "content": "Resolved Issues Disabling all callbacks in a domain using the cuptiEnableDomain API could unintentionally disable other activities and callbacks. This issue has been addressed and resolved. Fixed issues with Enhanced compatibility (aka minor version compatibility) of a few CUPTI activities with the driver versions shipped with the CUDA 12.2 or prior releases.", "keywords": []}, {"id": 4411, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-12-6-update-2", "display_name": "Updates in CUDA 12.6 Update 2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-12-6-update-2", "priority": -1, "content": "New Features In CUDA 12.6 GA release, CUPTI added a new set of APIs around Perfworks host APIs to simplify usage, shield users from low-level concepts, and ease adaptation to changes in Perfworks APIs. These host APIs were provided in the header cupti_profiler_host.h . Complementing these, a new set of target APIs are added in CUDA 12.6 Update 2 to simplify profiling for new users and align the call structure with other profiling APIs for faster learning and better adaptability. These target APIs are provided in the header cupti_range_profiler.h , and will be referred to as Range Profiling APIs. For range profiling, it is strongly recommended that users, especially those new to the field, utilize the new host and target APIs introduced in CUDA 12.6. It is important to note that existing Profiling API may be deprecated and potentially removed in future releases, so transitioning to these new APIs will ensure continued support and compatibility. Resolved Issues Improved the conversion accuracy of timestamps which are captured on the GPU and converted to CPU timestamps. Timestamps reported in the activity records were not always correct for Windows Subsystem for Linux (WSL) systems. This issue has been fixed. Fixed an issue that resulted in failure to capture the tracing information for kernels inside the body of the conditional node of CUDA Graph. PM Sampling trigger mode CUPTI_PM_SAMPLING_TRIGGER_MODE_GPU_TIME_INTERVAL is supported for all GA10x (GA102+) chips. Fixed issues with Enhanced compatibility (aka minor version compatibility) of a few CUPTI activities with the driver versions shipped with the CUDA 12.2 or prior releases. Made flushing of activity buffers thread-safe for per-thread activity buffer feature.", "keywords": []}, {"id": 4412, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-5-5", "display_name": "Updates in CUDA 5.5", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-5-5", "priority": -1, "content": "New Features Applications that use CUDA Dynamic Parallelism can be profiled using CUPTI. Device-side kernel launches are reported using a new activity kind. Device attributes such as power usage, clocks, thermals, etc. are reported via a new activity kind. A new activity buffer API uses callbacks to request and return buffers of activity records. The existing cuptiActivityEnqueueBuffer and cuptiActivityDequeueBuffer functions are still supported but are deprecated and will be removed in a future release. The Event API supports kernel replay so that any number of events can be collected during a single run of the application. A new metric API cuptiMetricGetValue2 allows metric values to be calculated for any device, even if that device is not available on the system. CUDA peer-to-peer memory copies are reported explicitly via the activity API. In previous releases these memory copies were only partially reported.", "keywords": []}, {"id": 4413, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-6-0", "display_name": "Updates in CUDA 6.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-6-0", "priority": -1, "content": "New Features Two new CUPTI activity kinds have been introduced to enable two new types of source-correlated data collection. The Instruction Execution kind collects SASS-level instruction execution counts, divergence data, and predication data. The Shared Access kind collects source correlated data indication inefficient shared memory accesses. CUPTI provides support for CUDA applications using Unified Memory. A new activity record reports Unified Memory activity such as transfers to and from a GPU and the number of Unified Memory related page faults. CUPTI recognized and reports the special MPS context that is used by CUDA applications running on a system with MPS enabled. The CUpti_ActivityContext activity record CUpti_ActivityContext has been updated to introduce a new field into the structure in a backwards compatible manner. The 32-bit computeApiKind field was replaced with two 16 bit fields, computeApiKind and defaultStreamId . Because all valid computeApiKind values fit within 16 bits, and because all supported CUDA platforms are little-endian, persisted context record data read with the new structure will have the correct value for computeApiKind and have a value of zero for defaultStreamId . The CUPTI client is responsible for versioning the persisted context data to recognize when the defaultStreamId field is valid. To ensure that metric values are calculated as accurately as possible, a new metric API is introduced. Function cuptiMetricGetRequiredEventGroupSets can be used to get the groups of events that should be collected at the same time. Execution overheads introduced by CUPTI have been dramatically decreased. The new activity buffer API introduced in CUDA Toolkit 5.5 is required. The legacy cuptiActivityEnqueueBuffer and cuptiActivityDequeueBuffer functions have been removed.", "keywords": []}, {"id": 4414, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-6-5", "display_name": "Updates in CUDA 6.5", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-6-5", "priority": -1, "content": "New Features Instruction classification is done for source-correlated Instruction Execution activity CUpti_ActivityInstructionExecution . See CUpti_ActivityInstructionClass for instruction classes. Two new device attributes are added to the activity CUpti_DeviceAttribute : CUPTI_DEVICE_ATTR_FLOP_SP_PER_CYCLE gives peak single precision flop per cycle for the GPU. CUPTI_DEVICE_ATTR_FLOP_DP_PER_CYCLE gives peak double precision flop per cycle for the GPU. Two new metric properties are added: CUPTI_METRIC_PROPERTY_FLOP_SP_PER_CYCLE gives peak single precision flop per cycle for the GPU. CUPTI_METRIC_PROPERTY_FLOP_DP_PER_CYCLE gives peak double precision flop per cycle for the GPU. Activity record CUpti_ActivityGlobalAccess for source level global access information has been deprecated and replaced by new activity record CUpti_ActivityGlobalAccess2 . New record additionally gives information needed to map SASS assembly instructions to CUDA C source code. And it also provides ideal L2 transactions count based on the access pattern. Activity record CUpti_ActivityBranch for source level branch information has been deprecated and replaced by new activity record CUpti_ActivityBranch2 . New record additionally gives information needed to map SASS assembly instructions to CUDA C source code. Sample sass_source_map is added to demonstrate the mapping of SASS assembly instructions to CUDA C source code. Default event collection mode is changed to Kernel ( CUPTI_EVENT_COLLECTION_MODE_KERNEL ) from Continuous ( CUPTI_EVENT_COLLECTION_MODE_CONTINUOUS ). Also Continuous mode is supported only on Tesla devices. Profiling results might be inconsistent when auto boost is enabled. Profiler tries to disable auto boost by default, it might fail to do so in some conditions, but profiling will continue. A new API cuptiGetAutoBoostState is added to query the auto boost state of the device. This API returns error CUPTI_ERROR_NOT_SUPPORTED on devices that don\u2019t support auto boost. Note that auto boost is supported only on certain Tesla devices from the Kepler+ family. Activity record CUpti_ActivityKernel2 for kernel execution has been deprecated and replaced by new activity record CUpti_ActivityKernel3 . New record additionally gives information about Global Partitioned Cache Configuration requested and executed. The new fields apply for devices with 5.2 Compute Capability.", "keywords": []}, {"id": 4415, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-7-0", "display_name": "Updates in CUDA 7.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-7-0", "priority": -1, "content": "New Features CUPTI supports device-wide sampling of the program counter (PC). Program counters along with the stall reasons from all active warps are sampled at a fixed frequency in the round robin order. Activity record CUpti_ActivityPCSampling enabled using activity kind CUPTI_ACTIVITY_KIND_PC_SAMPLING outputs stall reason along with PC and other related information. Enum CUpti_ActivityPCSamplingStallReason lists all the stall reasons. Sampling period is configurable and can be tuned using API cuptiActivityConfigurePCSampling . This feature is available on devices with compute capability 5.2. Added new activity record CUpti_ActivityInstructionCorrelation which can be used to dump source locator records for all the PCs of the function. All events and metrics for devices with compute capability 3.x and 5.0 can be collected accurately in presence of multiple contexts on the GPU. In previous releases only some events and metrics could be collected accurately when multiple contexts were executing on the GPU. Unified memory profiling is enhanced by providing fine grain data transfers to and from the GPU, coupled with more accurate timestamps with each transfer. This information is provided through new activity record CUpti_ActivityUnifiedMemoryCounter2 , deprecating old record CUpti_ActivityUnifiedMemoryCounter . MPS tracing and profiling support is extended on multi-gpu setups. Activity record CUpti_ActivityDevice for device information has been deprecated and replaced by new activity record CUpti_ActivityDevice2 . New record adds device UUID which can be used to uniquely identify the device across profiler runs. Activity record CUpti_ActivityKernel2 for kernel execution has been deprecated and replaced by new activity record CUpti_ActivityKernel3 . New record gives information about Global Partitioned Cache Configuration requested and executed. Partitioned global caching has an impact on occupancy calculation. If it is ON, then a CTA can only use a half SM, and thus a half of the registers available per SM. The new fields apply for devices with compute capability 5.2 and higher. Note that this change was done in CUDA 6.5 release with support for compute capability 5.2.", "keywords": []}, {"id": 4416, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-7-5", "display_name": "Updates in CUDA 7.5", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-7-5", "priority": -1, "content": "New Features Device-wide sampling of the program counter (PC) is enabled by default. This was a preview feature in the CUDA Toolkit 7.0 release and it was not enabled by default. Ability to collect all events and metrics accurately in presence of multiple contexts on the GPU is extended for devices with compute capability 5.x. API cuptiGetLastError is introduced to return the last error that has been produced by any of the CUPTI API calls or the callbacks in the same host thread. Unified memory profiling is supported with MPS (Multi-Process Service) Callback is provided to collect replay information after every kernel run during kernel replay. See API cuptiKernelReplaySubscribeUpdate and callback type CUpti_KernelReplayUpdateFunc . Added new attributes in enum CUpti_DeviceAttribute to query maximum shared memory size for different cache preferences for a device function.", "keywords": []}, {"id": 4417, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-8-0", "display_name": "Updates in CUDA 8.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-8-0", "priority": -1, "content": "New Features Sampling of the program counter (PC) is enhanced to point out the true latency issues, it indicates if the stall reasons for warps are actually causing stalls in the issue pipeline. Field latencySamples of new activity record CUpti_ActivityPCSampling2 provides true latency samples. This field is valid for devices with compute capability 6.0 and higher. See section PC Sampling for more details. Support for NVLink topology information such as the pair of devices connected via NVLink, peak bandwidth, memory access permissions etc is provided through new activity record CUpti_ActivityNvLink . NVLink performance metrics for data transmitted/received, transmit/receive throughput and respective header overhead for each physical link. See section NVLink for more details. CUPTI supports profiling of OpenACC applications. OpenACC profiling information is provided in the form of new activity records CUpti_ActivityOpenAccData , CUpti_ActivityOpenAccLaunch and CUpti_ActivityOpenAccOther . This aids in correlating OpenACC constructs on the CPU with the corresponding activity taking place on the GPU, and mapping it back to the source code. New API cuptiOpenACCInitialize is used to initialize profiling for supported OpenACC runtimes. See section OpenACC for more details. Unified memory profiling provides GPU page fault events on devices with compute capability 6.0 and 64 bit Linux platforms. Enum CUpti_ActivityUnifiedMemoryAccessType lists memory access types for GPU page fault events and enum CUpti_ActivityUnifiedMemoryMigrationCause lists migration causes for data transfer events. Unified Memory profiling support is extended to Mac platform. Support for 16-bit floating point (FP16) data format profiling. New metrics inst_fp_16, flop_count_hp_add, flop_count_hp_mul, flop_count_hp_fma, flop_count_hp, flop_hp_efficiency, half_precision_fu_utilization are supported. Peak FP16 flops per cycle for device can be queried using the enum CUPTI_DEVICE_ATTR_FLOP_HP_PER_CYCLE added to CUpti_DeviceAttribute . Added new activity kinds CUPTI_ACTIVITY_KIND_SYNCHRONIZATION , CUPTI_ACTIVITY_KIND_STREAM and CUPTI_ACTIVITY_KIND_CUDA_EVENT , to support the tracing of CUDA synchronization constructs such as context, stream and CUDA event synchronization. Synchronization details are provided in the form of new activity record CUpti_ActivitySynchronization . Enum CUpti_ActivitySynchronizationType lists different types of CUDA synchronization constructs. APIs cuptiSetThreadIdType() / cuptiGetThreadIdType() to set/get the mechanism used to fetch the thread-id used in CUPTI records. Enum CUpti_ActivityThreadIdType lists all supported mechanisms. Added API cuptiComputeCapabilitySupported() to check the support for a specific compute capability by the CUPTI. Added support to establish correlation between an external API (such as OpenACC, OpenMP) and CUPTI API activity records. APIs cuptiActivityPushExternalCorrelationId() and cuptiActivityPopExternalCorrelationId() should be used to push and pop external correlation ids for the calling thread. Generated records of type CUpti_ActivityExternalCorrelation contain both external and CUPTI assigned correlation ids. Added containers to store the information of events and metrics in the form of activity records CUpti_ActivityInstantaneousEvent , CUpti_ActivityInstantaneousEventInstance , CUpti_ActivityInstantaneousMetric and CUpti_ActivityInstantaneousMetricInstance . These activity records are not produced by the CUPTI, these are included for completeness and ease-of-use. Profilers built on top of CUPTI that sample events may choose to use these records to store the collected event data. Support for domains and annotation of synchronization objects added in NVTX v2. New activity record CUpti_ActivityMarker2 and enums to indicate various stages of synchronization object i.e. CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE , CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_SUCCESS , CUPTI_ACTIVITY_FLAG_MARKER_SYNC_ACQUIRE_FAILED and CUPTI_ACTIVITY_FLAG_MARKER_SYNC_RELEASE are added. Unused field runtimeCorrelationId of the activity record CUpti_ActivityMemset is broken into two fields flags and memoryKind to indicate the asynchronous behavior and the kind of the memory used for the memset operation. It is supported by the new flag CUPTI_ACTIVITY_FLAG_MEMSET_ASYNC added in the enum CUpti_ActivityFlag . Added flag CUPTI_ACTIVITY_MEMORY_KIND_MANAGED in the enum CUpti_ActivityMemoryKind to indicate managed memory. API cuptiGetStreamId has been deprecated. A new API cuptiGetStreamIdEx is introduced to provide the stream id based on the legacy or per-thread default stream flag.", "keywords": []}, {"id": 4418, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-9-0", "display_name": "Updates in CUDA 9.0", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-9-0", "priority": -1, "content": "New Features CUPTI extends tracing and profiling support for devices with compute capability 7.0. Usage of compute device memory can be tracked through CUPTI. A new activity record CUpti_ActivityMemory and activity kind CUPTI_ACTIVITY_KIND_MEMORY are added to track the allocation and freeing of memory. This activity record includes fields like virtual base address, size, PC (program counter), timestamps for memory allocation and free calls. Unified memory profiling adds new events for thrashing, throttling, remote map and device-to-device migration on 64 bit Linux platforms. New events are added under enum CUpti_ActivityUnifiedMemoryCounterKind . Enum CUpti_ActivityUnifiedMemoryRemoteMapCause lists possible causes for remote map events. PC sampling supports wide range of sampling periods ranging from 2^5 cycles to 2^31 cycles per sample. This can be controlled through new field samplingPeriod2 in the PC sampling configuration struct CUpti_ActivityPCSamplingConfig . Added API cuptiDeviceSupported() to check support for a compute device. Activity record CUpti_ActivityKernel3 for kernel execution has been deprecated and replaced by new activity record CUpti_ActivityKernel4 . New record gives information about queued and submit timestamps which can help to determine software and hardware latencies associated with the kernel launch. These timestamps are not collected by default. Use API cuptiActivityEnableLatencyTimestamps() to enable collection. New field launchType of type CUpti_ActivityLaunchType can be used to determine if it is a cooperative CUDA kernel launch. Activity record CUpti_ActivityPCSampling2 for PC sampling has been deprecated and replaced by new activity record CUpti_ActivityPCSampling3 . New record accommodates 64-bit PC Offset supported on devices of compute capability 7.0 and higher. Activity record CUpti_ActivityNvLink for NVLink attributes has been deprecated and replaced by new activity record CUpti_ActivityNvLink2 . New record accommodates increased port numbers between two compute devices. Activity record CUpti_ActivityGlobalAccess2 for source level global accesses has been deprecated and replaced by new activity record CUpti_ActivityGlobalAccess3 . New record accommodates 64-bit PC Offset supported on devices of compute capability 7.0 and higher. New attributes CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_SIZE and CUPTI_ACTIVITY_ATTR_PROFILING_SEMAPHORE_POOL_LIMIT are added in the activity attribute enum CUpti_ActivityAttribute to set and get the profiling semaphore pool size and the pool limit.", "keywords": []}, {"id": 4419, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-9-1", "display_name": "Updates in CUDA 9.1", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-9-1", "priority": -1, "content": "New Features Added a field for correlation ID in the activity record CUpti_ActivityStream .", "keywords": []}, {"id": 4420, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "page", "name": "release-notes/release-notes#updates-in-cuda-9-2", "display_name": "Updates in CUDA 9.2", "type": "section", "display_type": "Page section", "docname": "release-notes/release-notes", "anchor": "updates-in-cuda-9-2", "priority": -1, "content": "New Features Added support to query PCI devices information which can be used to construct the PCIe topology. See activity kind CUPTI_ACTIVITY_KIND_PCIE and related activity record CUpti_ActivityPcie . To view and analyze bandwidth of memory transfers over PCIe topologies, new set of metrics to collect total data bytes transmitted and received through PCIe are added. Those give accumulated count for all devices in the system. These metrics are collected at the device level for the entire application. And those are made available for devices with compute capability 5.2 and higher. CUPTI added support for new metrics: Instruction executed for different types of load and store Total number of cached global/local load requests from SM to texture cache Global atomic/non-atomic/reduction bytes written to L2 cache from texture cache Surface atomic/non-atomic/reduction bytes written to L2 cache from texture cache Hit rate at L2 cache for all requests from texture cache Device memory (DRAM) read and write bytes The utilization level of the multiprocessor function units that execute tensor core instructions for devices with compute capability 7.0 A new attribute CUPTI_EVENT_ATTR_PROFILING_SCOPE is added under enum CUpti_EventAttribute to query the profiling scope of a event. Profiling scope indicates if the event can be collected at the context level or device level or both. See Enum CUpti_EventProfilingScope for available profiling scopes. A new error code CUPTI_ERROR_VIRTUALIZED_DEVICE_NOT_SUPPORTED is added to indicate that tracing and profiling on virtualized GPU is not supported.", "keywords": []}, {"id": 4421, "doc_id": 4421, "filename": "release-notes/release-notes.html", "domain_name": "std", "name": "release-notes/release-notes", "display_name": "Release Notes", "type": "doc", "display_type": "Page", "docname": "release-notes/release-notes", "anchor": "", "priority": -1, "content": "CUPTI Release Notes. Release notes, including new features and important bug fixes. Supported platforms and GPUs.", "keywords": []}, {"id": 4422, "doc_id": 4425, "filename": "special-configurations/special-configurations.html", "domain_name": "page", "name": "special-configurations/special-configurations#multi-instance-gpu-mig", "display_name": "Multi-Instance GPU (MIG)", "type": "section", "display_type": "Page section", "docname": "special-configurations/special-configurations", "anchor": "multi-instance-gpu-mig", "priority": -1, "content": "Multi-Instance GPU (MIG) is a feature that allows a GPU to be partitioned into multiple CUDA devices. The partitioning is carried out on two levels: First, a GPU can be split into one or multiple GPU Instances. Each GPU Instance claims ownership of one or more streaming multiprocessors (SM), a subset of the overall GPU memory, and possibly other GPU resources, such as the video encoders/decoders. Second, each GPU Instance can be further partitioned into one or more Compute Instances. Each Compute Instance has exclusive ownership of its assigned SMs of the GPU Instance. However, all Compute Instances within a GPU Instance share the GPU Instance\u2019s memory and memory bandwidth. Every Compute Instance acts and operates as a CUDA device with a unique device ID. See the driver release notes as well as the documentation for the nvidia-smi CLI tool for more information on how to configure MIG instances. From the profiling perspective, a Compute Instance can be of one of two types: isolated or shared . An isolated Compute Instance owns all of it\u2019s assigned resources and does not share any GPU unit with another Compute Instance. In other words, the Compute Instance is of the same size as its parent GPU Instance and consequently does not have any other sibling Compute Instances. Tracing and Profiling works for isolated Compute Instances. A shared Compute Instance uses GPU resources that can potentially also be accessed by other Compute Instances in the same GPU Instance. Due to this resource sharing, collecting profiling data from shared units is not permitted. Attempts to collect metrics from a shared unit will result in NaN values. Better error reporting will be done in a future release. Collecting metrics from GPU units that are exclusively owned by a shared Compute Instance is still possible. Tracing works for shared Compute Instances. To allow users to determine which metrics are available on a target device, new APIs have been added which can be used to query counter availability before starting the profiling session. See APIs NVPW_RawMetricsConfig_SetCounterAvailability and cuptiProfilerGetCounterAvailability . All Compute Instances on a GPU share the same clock frequencies. To get consistent metric values with multi-pass collection, it is recommended to lock the GPU clocks during the profiling session. CLI tool nvidia-smi can be used to configure a fixed frequency for the whole GPU by calling nvidia-smi --lock-gpu-clocks=tdp,tdp . This sets the GPU clocks to the base TDP frequency until you reset the clocks by calling nvidia-smi --reset-gpu-clocks .", "keywords": []}, {"id": 4423, "doc_id": 4425, "filename": "special-configurations/special-configurations.html", "domain_name": "page", "name": "special-configurations/special-configurations#nvidia-virtual-gpu-vgpu", "display_name": "NVIDIA Virtual GPU (vGPU)", "type": "section", "display_type": "Page section", "docname": "special-configurations/special-configurations", "anchor": "nvidia-virtual-gpu-vgpu", "priority": -1, "content": "CUPTI supports tracing and profiling features on NVIDIA virtual GPUs (vGPUs). Activity, Callback and Profiling APIs are supported but Event and Metric APIs are not supported on NVIDIA vGPUs. If you want to use profiling features that NVIDIA vGPU supports, you must enable them for each vGPU VM that requires them. These can be enabled by setting a vGPU plugin parameter enable_profiling . How to set the parameter for a vGPU VM depends on the hypervisor that you are using. Tracing is enabled by default, it doesn\u2019t require any specific setting. However tracing results might not be accurate after virtual machine (VM) migration. Therefore it is recommended to set the vGPU plugin parameter enable_profiling for accurate results. Refer to the NVIDIA Virtual GPU Software documentation for the list of supported GPUs , how to enable profiling features using the vGPU plugin parameter and for limitations on use of CUPTI with NVIDIA vGPU.", "keywords": []}, {"id": 4424, "doc_id": 4425, "filename": "special-configurations/special-configurations.html", "domain_name": "page", "name": "special-configurations/special-configurations#windows-subsystem-for-linux-wsl", "display_name": "Windows Subsystem for Linux (WSL)", "type": "section", "display_type": "Page section", "docname": "special-configurations/special-configurations", "anchor": "windows-subsystem-for-linux-wsl", "priority": -1, "content": "WSL or Windows Subsystem for Linux is a Windows feature that enables users to run native Linux applications, containers and command-line tools directly on Windows 10 and later OS builds. CUPTI supports tracing APIs Activity and Callback on the second generation of WSL (WSL 2) on Volta and later GPU architectures. Profiler APIs Event and Metric are not supported on WSL while Profiling and PC Sampling APIs are only supported on WSL 2 and Windows 11 systems.", "keywords": []}, {"id": 4425, "doc_id": 4425, "filename": "special-configurations/special-configurations.html", "domain_name": "std", "name": "special-configurations/special-configurations", "display_name": "Special Configurations", "type": "doc", "display_type": "Page", "docname": "special-configurations/special-configurations", "anchor": "", "priority": -1, "content": "", "keywords": []}]};